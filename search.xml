<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Understand Python GIL]]></title>
    <url>%2F2020%2F01%2F19%2FUnderstand-Python-GIL%2F</url>
    <content type="text"><![CDATA[python 标准库 threading每日一词: US[‘weðər] UK[‘weðə(r)] n.天气；气象；气象预报 v.变形；经受住 网络气候；天气预报；风化 给大家推荐一部电影: 气象先生 This shit life,we must chuck some things 源代码源代码: Lib/threading.py 核心函数 threading.active_count() 返回当前存活的线程类 Thread 对象。返回的计数等于 enumerate() 返回的列表长度。 threading.current_thread() 返回当前对应调用者的控制线程的 Thread 对象。如果调用者的控制线程不是利用 threading 创建，会返回一个功能受限的虚拟线程对象。 threading.excepthook(args, /) 参数可以是下面任意一种类型 exc_type: 异常类型 exc_value: 异常值，可以是 None. exc_traceback: 异常回溯，可以是 None. thread: 线程跑出的异常 可以是None. threading.get_ident() 返回当前线程的 “线程标识符”。它是一个非零的整数。它的值没有直接含义，主要是用作 magic cookie，比如作为含有线程相关数据的字典的索引。线程标识符可能会在线程退出，新线程创建时被复用。3.3 新版功能. threading.get_native_id() 返回内核分配给当前线程的原生集成线程 ID。 这是一个非负整数。 它的值可被用来在整个系统中唯一地标识这个特定线程（直到线程终结，在那之后该值可能会被 OS 回收再利用）。可用性: Windows, FreeBSD, Linux, macOS, OpenBSD, NetBSD, AIX。3.8 新版功能. threading.enumerate() 以列表形式返回当前所有存活的 Thread 对象。 该列表包含守护线程，current_thread() 创建的虚拟线程对象和主线程。它不包含已终结的线程和尚未开始的线程。 threading.main_thread() 返回主 Thread 对象。一般情况下，主线程是Python解释器开始时创建的线程。3.4 新版功能. threading.settrace(func) 为所有 threading 模块开始的线程设置追踪函数。在每个线程的 run() 方法被调用前，func 会被传递给 sys.settrace() 。 threading.setprofile(func) 为所有 threading 模块开始的线程设置性能测试函数。在每个线程的 run() 方法被调用前，func 会被传递给 sys.setprofile() 。 threading.stack_size([size]) 返回创建线程时用的堆栈大小。可选参数 size 指定之后新建的线程的堆栈大小，而且一定要是0（根据平台或者默认配置）或者最小是32,768(32KiB)的一个正整数。如果 size 没有指定，默认是0。如果不支持改变线程堆栈大小，会抛出 RuntimeError 错误。如果指定的堆栈大小不合法，会抛出 ValueError 错误并且不会修改堆栈大小。32KiB是当前最小的能保证解释器有足够堆栈空间的堆栈大小。需要注意的是部分平台对于堆栈大小会有特定的限制，例如要求大于32KiB的堆栈大小或者需要根据系统内存页面的整数倍进行分配 - 应当查阅平台文档有关详细信息（4KiB页面比较普遍，在没有更具体信息的情况下，建议的方法是使用4096的倍数作为堆栈大小）。适用于: Windows，具有 POSIX 线程的系统。 常量threading.TIMEOUT_MAX¶ 阻塞函数（ Lock.acquire(), RLock.acquire(), Condition.wait(), …）中形参 timeout 允许的最大值。传入超过这个值的 timeout 会抛出 OverflowError 异常。 常用函数线程本地数据线程本地数据是特定线程的数据。管理线程本地数据，只需要创建一个 local （或者一个子类型）的实例并在实例中储存属性： 12mydata = threading.local()mydata.x = 1 在不同的线程中，实例的值会不同。 class threading.local 一个代表线程本地数据的类。更多相关细节和大量示例，参见 _threading_local 模块的文档。 线程对象当线程对象一但被创建，其活动一定会因调用线程的 start() 方法开始。这会在独立的控制线程调用 run() 方法。 一旦线程活动开始，该线程会被认为是 ‘存活的’ 。当它的 run() 方法终结了（不管是正常的还是抛出未被处理的异常），就不是’存活的’。 is_alive() 方法用于检查线程是否存活。 其他线程可以调用一个线程的 join() 方法。这会阻塞调用该方法的线程，直到被调用 join() 方法的线程终结。 线程有名字。名字可以传递给构造函数，也可以通过 name 属性读取或者修改。 如果运行线程中的 run()抛出了异常, threading.excepthook()` 方法就会被调用,默认情况下,忽略 SystemExit. 一个线程可以被标记成一个“守护线程”。 这个标志的意义是，当剩下的线程都是守护线程时，整个 Python 程序将会退出。 初始值继承于创建线程。 这个标志可以通过 daemon 特征属性或者 daemon 构造器参数来设置。 守护线程在程序关闭时会突然关闭。他们的资源（例如已经打开的文档，数据库事务等等）可能没有被正确释放。如果你想你的线程正常停止，设置他们成为非守护模式并且使用合适的信号机制，例如： Event。 有个 “主线程” 对象；这对应Python程序里面初始的控制线程。它不是一个守护线程。 “虚拟线程对象” 是可以被创建的。这些是对应于“外部线程”的线程对象，它们是在线程模块外部启动的控制线程，例如直接来自C代码。虚拟线程对象功能受限；他们总是被认为是存活的和守护模式，不能被 join() 。因为无法检测外来线程的终结，它们永远不会被删除。 class threading.Thread(group=None, target=None, name=None, args=(), kwargs={}, **, daemon=None*) 调用这个构造函数时，必需带有关键字参数。参数如下： group 应该为 None；为了日后扩展 ThreadGroup 类实现而保留。 target 是用于 run() 方法调用的可调用对象。默认是 None，表示不需要调用任何方法。 name 是线程名称。默认情况下，由 “Thread-N“ 格式构成一个唯一的名称，其中 N 是小的十进制数。 args 是用于调用目标函数的参数元组。默认是 ()。 kwargs 是用于调用目标函数的关键字参数字典。默认是 {}。 start() 开始线程活动。它在一个线程里最多只能被调用一次。它安排对象的 run() 方法在一个独立的控制进程中调用。如果同一个线程对象中调用这个方法的次数大于一次，会抛出 RuntimeError 。 run() 代表线程活动的方法。你可以在子类型里重载这个方法。 标准的 run() 方法会对作为 target 参数传递给该对象构造器的可调用对象（如果存在）发起调用，并附带从 args 和 kwargs 参数分别获取的位置和关键字参数。 join(timeout=None) 等待，直到线程终结。这会阻塞调用这个方法的线程，直到被调用 join() 的线程终结 – 不管是正常终结还是抛出未处理异常 – 或者直到发生超时，超时选项是可选的。当 timeout 参数存在而且不是 None 时，它应该是一个用于指定操作超时的以秒为单位的浮点数（或者分数）。因为 join() 总是返回 None ，所以你一定要在 join() 后调用 is_alive() 才能判断是否发生超时 – 如果线程仍然存货，则 join() 超时。当 timeout 参数不存在或者是 None ，这个操作会阻塞直到线程终结。一个线程可以被 join() 很多次。如果尝试加入当前线程会导致死锁， join() 会引起 RuntimeError 异常。如果尝试 join() 一个尚未开始的线程，也会抛出相同的异常。 name 只用于识别的字符串。它没有语义。多个线程可以赋予相同的名称。 初始名称由构造函数设置。 getName() setName() 旧的 name 取值/设值 API；直接当做特征属性使用它。 ident 这个线程的 ‘线程标识符’，如果线程尚未开始则为 None 。这是个非零整数。参见 get_ident() 函数。当一个线程退出而另外一个线程被创建，线程标识符会被复用。即使线程退出后，仍可得到标识符。 native_id 内部生成的线程id,一个非负的整数,如果为None意味着线程还没有启动。 is_alive() 返回线程是否存活。当 run() 方法刚开始直到 run() 方法刚结束，这个方法返回 True 。模块函数 enumerate() 返回包含所有存活线程的列表。 daemon 一个表示这个线程是（True）否（False）守护线程的布尔值。一定要在调用 start() 前设置好，不然会抛出 RuntimeError 。初始值继承于创建线程；主线程不是守护线程，因此主线程创建的所有线程默认都是 daemon = False。当没有存活的非守护线程时，整个Python程序才会退出。 isDaemon() setDaemon() 旧的 name 取值/设值 API；建议直接当做特征属性使用它。 CPython implementation detail: CPython下，因为 Global Interpreter Lock，一个时刻只有一个线程可以执行Python代码（尽管如此，某些性能导向的库可能会克服这个限制）。如果你想让你的应用更好的利用多核计算机的计算性能，推荐你使用 multiprocessing 或者 concurrent.futures.ProcessPoolExecutor 。但是如果你想同时运行多个I/O绑定任务，线程仍然是一个合适的模型。 锁对象原始锁是一个在锁定时不属于特定线程的同步基元组件。在Python中，它是能用的最低级的同步基元组件，由 _thread 扩展模块直接实现。 原始锁处于 “锁定” 或者 “非锁定” 两种状态之一。它被创建时为非锁定状态。它有两个基本方法， acquire() 和 release() 。当状态为非锁定时， acquire() 将状态改为 锁定 并立即返回。当状态是锁定时， acquire() 将阻塞至其他线程调用 release() 将其改为非锁定状态，然后 acquire() 调用重置其为锁定状态并返回。 release() 只在锁定状态下调用； 它将状态改为非锁定并立即返回。如果尝试释放一个非锁定的锁，则会引发 RuntimeError 异常。 锁同样支持 上下文管理协议。 当多个线程在 acquire() 等待状态转变为未锁定被阻塞，然后 release() 重置状态为未锁定时，只有一个线程能继续执行；至于哪个等待线程继续执行没有定义，并且会根据实现而不同。 所有方法的执行都是原子性的。 class threading.Lock 实现原始锁对象的类。一旦一个线程获得一个锁，会阻塞随后尝试获得锁的线程，直到它被释放；任何线程都可以释放它。 需要注意的是 Lock 其实是一个工厂函数，返回平台支持的具体锁类中最有效的版本的实例。 acquire(blocking=True, timeout=-1) 可以阻塞或非阻塞地获得锁。当调用时参数 blocking 设置为 True （缺省值），阻塞直到锁被释放，然后将锁锁定并返回 True 。在参数 blocking 被设置为 False 的情况下调用，将不会发生阻塞。如果调用时 blocking 设为 True 会阻塞，并立即返回 False ；否则，将锁锁定并返回 True。当浮点型 timeout 参数被设置为正值调用时，只要无法获得锁，将最多阻塞 timeout 设定的秒数。timeout 参数被设置为 -1 时将无限等待。当 blocking 为 false 时，timeout 指定的值将被忽略。如果成功获得锁，则返回 True，否则返回 False (例如发生 超时 的时候)。在 3.2 版更改: 新的 timeout 形参。在 3.2 版更改: 现在如果底层线程实现支持，则可以通过POSIX上的信号中断锁的获取。 release() 释放一个锁。这个方法可以在任何线程中调用，不单指获得锁的线程。当锁被锁定，将它重置为未锁定，并返回。如果其他线程正在等待这个锁解锁而被阻塞，只允许其中一个允许。在未锁定的锁调用时，会引发 RuntimeError 异常。没有返回值。 locked() Return true if the lock is acquired. 递归锁重入锁是一个可以被同一个线程多次获取的同步基元组件。在内部，它在基元锁的锁定/非锁定状态上附加了 “所属线程” 和 “递归等级” 的概念。在锁定状态下，某些线程拥有锁 ； 在非锁定状态下， 没有线程拥有它。 若要锁定锁，线程调用其 acquire() 方法；一旦线程拥有了锁，方法将返回。若要解锁，线程调用 release() 方法。 acquire()/release() 对可以嵌套；只有最终 release() (最外面一对的 release() ) 将锁解开，才能让其他线程继续处理 acquire() 阻塞。 递归锁也支持 上下文管理协议。 class threading.RLock 此类实现了重入锁对象。重入锁必须由获取它的线程释放。一旦线程获得了重入锁，同一个线程再次获取它将不阻塞；线程必须在每次获取它时释放一次。需要注意的是 RLock 其实是一个工厂函数，返回平台支持的具体递归锁类中最有效的版本的实例。 acquire(blocking=True, timeout=-1) 可以阻塞或非阻塞地获得锁。 当无参数调用时： 如果这个线程已经拥有锁，递归级别增加一，并立即返回。否则，如果其他线程拥有该锁，则阻塞至该锁解锁。一旦锁被解锁(不属于任何线程)，则抢夺所有权，设置递归等级为一，并返回。如果多个线程被阻塞，等待锁被解锁，一次只有一个线程能抢到锁的所有权。在这种情况下，没有返回值。 当发起调用时将 blocking 参数设为真值，则执行与无参数调用时一样的操作，然后返回 True。 当发起调用时将 blocking 参数设为假值，则不进行阻塞。 如果一个无参数调用将要阻塞，则立即返回 False；在其他情况下，执行与无参数调用时一样的操作，然后返回 True。 当发起调用时将浮点数的 timeout 参数设为正值时，只要无法获得锁，将最多阻塞 timeout 所指定的秒数。 如果已经获得锁则返回 True，如果超时则返回假值。 release() 释放锁，自减递归等级。如果减到零，则将锁重置为非锁定状态(不被任何线程拥有)，并且，如果其他线程正被阻塞着等待锁被解锁，则仅允许其中一个线程继续。如果自减后，递归等级仍然不是零，则锁保持锁定，仍由调用线程拥有。 只有当前线程拥有锁才能调用这个方法。如果锁被释放后调用这个方法，会引起 RuntimeError 异常。 没有返回值。 条件对象条件变量总是与某种类型的锁对象相关联，锁对象可以通过传入获得，或者在缺省的情况下自动创建。当多个条件变量需要共享同一个锁时，传入一个锁很有用。锁是条件对象的一部分，你不必单独地跟踪它。 条件变量服从 上下文管理协议：使用 with 语句会在它包围的代码块内获取关联的锁。 acquire() 和 release() 方法也能调用关联锁的相关方法。 其它方法必须在持有关联的锁的情况下调用。 wait() 方法释放锁，然后阻塞直到其它线程调用 notify() 方法或 notify_all() 方法唤醒它。一旦被唤醒， wait() 方法重新获取锁并返回。它也可以指定超时时间。 The notify() method wakes up one of the threads waiting for the condition variable, if any are waiting. The notify_all() method wakes up all threads waiting for the condition variable. 注意： notify() 方法和 notify_all() 方法并不会释放锁，这意味着被唤醒的线程不会立即从它们的 wait() 方法调用中返回，而是会在调用了 notify() 方法或 notify_all() 方法的线程最终放弃了锁的所有权后返回。 使用条件变量的典型编程风格是将锁用于同步某些共享状态的权限，那些对状态的某些特定改变感兴趣的线程，它们重复调用 wait() 方法，直到看到所期望的改变发生；而对于修改状态的线程，它们将当前状态改变为可能是等待者所期待的新状态后，调用 notify() 方法或者 notify_all() 方法。例如，下面的代码是一个通用的无限缓冲区容量的生产者-消费者情形： 12345678910# Consume one itemwith cv: while not an_item_is_available(): cv.wait() get_an_available_item()# Produce one itemwith cv: make_an_item_available() cv.notify() 使用 while 循环检查所要求的条件成立与否是有必要的，因为 wait() 方法可能要经过不确定长度的时间后才会返回，而此时导致 notify() 方法调用的那个条件可能已经不再成立。这是多线程编程所固有的问题。 wait_for() 方法可自动化条件检查，并简化超时计算。 1234# Consume an itemwith cv: cv.wait_for(an_item_is_available) get_an_available_item() 选择 notify() 还是 notify_all() ，取决于一次状态改变是只能被一个还是能被多个等待线程所用。例如在一个典型的生产者-消费者情形中，添加一个项目到缓冲区只需唤醒一个消费者线程。 class threading.Condition(lock=None) 实现条件变量对象的类。一个条件变量对象允许一个或多个线程在被其它线程所通知之前进行等待。 如果给出了非 None 的 lock 参数，则它必须为 Lock 或者 RLock 对象，并且它将被用作底层锁。否则，将会创建新的 RLock 对象，并将其用作底层锁。 在 3.3 版更改: 从工厂函数变为类。 acquire(*args) 请求底层锁。此方法调用底层锁的相应方法，返回值是底层锁相应方法的返回值。 release() 释放底层锁。此方法调用底层锁的相应方法。没有返回值。 wait(timeout=None) 等待直到被通知或发生超时。如果线程在调用此方法时没有获得锁，将会引发 RuntimeError 异常。这个方法释放底层锁，然后阻塞，直到在另外一个线程中调用同一个条件变量的 notify() 或 notify_all() 唤醒它，或者直到可选的超时发生。一旦被唤醒或者超时，它重新获得锁并返回。当提供了 timeout 参数且不是 None 时，它应该是一个浮点数，代表操作的超时时间，以秒为单位（可以为小数）。当底层锁是个 RLock ，不会使用它的 release() 方法释放锁，因为当它被递归多次获取时，实际上可能无法解锁。相反，使用了 RLock 类的内部接口，即使多次递归获取它也能解锁它。 然后，在重新获取锁时，使用另一个内部接口来恢复递归级别。返回 True ，除非提供的 timeout 过期，这种情况下返回 False。在 3.2 版更改: 很明显，方法总是返回 None。 wait_for(predicate, timeout=None) 等待，直到条件计算为真。 predicate 应该是一个可调用对象而且它的返回值可被解释为一个布尔值。可以提供 timeout 参数给出最大等待时间。这个实用方法会重复地调用 wait() 直到满足判断式或者发生超时。返回值是判断式最后一个返回值，而且如果方法发生超时会返回 False 。忽略超时功能，调用此方法大致相当于编写:while not predicate(): cv.wait()因此，规则同样适用于 wait() ：锁必须在被调用时保持获取，并在返回时重新获取。 随着锁定执行判断式。3.2 新版功能. notify(n=1) 默认唤醒一个等待这个条件的线程。如果调用线程在没有获得锁的情况下调用这个方法，会引发 RuntimeError 异常。这个方法唤醒最多 n 个正在等待这个条件变量的线程；如果没有线程在等待，这是一个空操作。当前实现中，如果至少有 n 个线程正在等待，准确唤醒 n 个线程。但是依赖这个行为并不安全。未来，优化的实现有时会唤醒超过 n 个线程。注意：被唤醒的线程实际上不会返回它调用的 wait() ，直到它可以重新获得锁。因为 notify() 不会释放锁，只有它的调用者应该这样做。 notify_all() 唤醒所有正在等待这个条件的线程。这个方法行为与 notify() 相似，但并不只唤醒单一线程，而是唤醒所有等待线程。如果调用线程在调用这个方法时没有获得锁，会引发 RuntimeError 异常。 信号量对象这是计算机科学史上最古老的同步原语之一，早期的荷兰科学家 Edsger W. Dijkstra 发明了它。（他使用名称 P() 和 V() 而不是 acquire() 和 release() ）。 一个信号量管理一个内部计数器，该计数器因 acquire() 方法的调用而递减，因 release() 方法的调用而递增。 计数器的值永远不会小于零；当 acquire() 方法发现计数器为零时，将会阻塞，直到其它线程调用 release() 方法。 信号量对象也支持 上下文管理协议 。 class threading.Semaphore(value=1) 该类实现信号量对象。信号量对象管理一个原子性的计数器，代表 release() 方法的调用次数减去 acquire() 的调用次数再加上一个初始值。如果需要， acquire() 方法将会阻塞直到可以返回而不会使得计数器变成负数。在没有显式给出 value 的值时，默认为1。 可选参数 value 赋予内部计数器初始值，默认值为 1 。如果 value 被赋予小于0的值，将会引发 ValueError 异常。 acquire(blocking=True, timeout=None) 获取一个信号量。在不带参数的情况下调用时：如果在进入时内部计数器的值大于零，则将其减一并立即返回 True.如果在进入时内部计数器的值为零，则将会阻塞直到被对 release() 的调用唤醒。 一旦被唤醒（并且计数器的值大于 0），则将计数器减 1 并返回 True。 每次对 release() 的调用将只唤醒一个线程。 线程被唤醒的次序是不可确定的。当发起调用时将 blocking 设为假值，则不进行阻塞。 如果一个无参数调用将要阻塞，则立即返回 False；在其他情况下，执行与无参数调用时一样的操作，然后返回 True。当发起调用时如果 timeout 不为 None，则它将阻塞最多 timeout 秒。 请求在此时段时未能成功完成获取则将返回 False。 在其他情况下返回 True。在 3.2 版更改: 新的 timeout 形参。 release() 释放一个信号量，将内部计数器的值增加1。当计数器原先的值为0且有其它线程正在等待它再次大于0时，唤醒正在等待的线程。 class threading.BoundedSemaphore(value=1) 该类实现有界信号量。有界信号量通过检查以确保它当前的值不会超过初始值。如果超过了初始值，将会引发 ValueError 异常。在大多情况下，信号量用于保护数量有限的资源。如果信号量被释放的次数过多，则表明出现了错误。没有指定时， value 的值默认为1。在 3.3 版更改: 从工厂函数变为类。 Semaphore例子信号量通常用于保护数量有限的资源，例如数据库服务器。在资源数量固定的任何情况下，都应该使用有界信号量。在生成任何工作线程前，应该在主线程中初始化信号量。 123maxconnections = 5# ...pool_sema = BoundedSemaphore(value=maxconnections) 工作线程生成后，当需要连接服务器时，这些线程将调用信号量的 acquire 和 release 方法： 12345conn = connectdb()try: # ... use connection ...finally: conn.close() 使用有界信号量能减少这种编程错误：信号量的释放次数多于其请求次数。 事件对象这是线程之间通信的最简单机制之一：一个线程发出事件信号，而其他线程等待该信号。 一个事件对象管理一个内部标志，调用 set() 方法可将其设置为true，调用 clear() 方法可将其设置为false，调用 wait() 方法将进入阻塞直到标志为true。 class threading.Event 实现事件对象的类。事件对象管理一个内部标志，调用 set() 方法可将其设置为true。调用 clear() 方法可将其设置为false。调用 wait() 方法将进入阻塞直到标志为true。这个标志初始时为false。在 3.3 版更改: 从工厂函数变为类。is_set()当且仅当内部旗标为时返回 True。set()将内部标志设置为true。所有正在等待这个事件的线程将被唤醒。当标志为true时，调用 wait() 方法的线程不会被被阻塞。clear()将内部标志设置为false。之后调用 wait() 方法的线程将会被阻塞，直到调用 set() 方法将内部标志再次设置为true。wait(timeout=None)阻塞线程直到内部变量为true。如果调用时内部标志为true，将立即返回。否则将阻塞线程，直到调用 set() 方法将标志设置为true或者发生可选的超时。当提供了timeout参数且不是 None 时，它应该是一个浮点数，代表操作的超时时间，以秒为单位（可以为小数）。当且仅当内部旗标在等待调用之前或者等待开始之后被设为真值时此方法将返回 True，也就是说，它将总是返回 True 除非设定了超时且操作发生了超时。 定时器对象此类表示一个操作应该在等待一定的时间之后运行 — 相当于一个定时器。 Timer 类是 Thread 类的子类，因此可以像一个自定义线程一样工作。 与线程一样，通过调用 start() 方法启动定时器。而 cancel() 方法可以停止计时器（在计时结束前）， 定时器在执行其操作之前等待的时间间隔可能与用户指定的时间间隔不完全相同。 例如: 12345def hello(): print("hello, world")t = Timer(30.0, hello)t.start() # after 30 seconds, "hello, world" will be printed class threading.Timer(interval, function, args=None, kwargs=None) 创建一个定时器，在经过 interval 秒的间隔事件后，将会用参数 args 和关键字参数 kwargs 调用 function。如果 args 为 None （默认值），则会使用一个空列表。如果 kwargs 为 None （默认值），则会使用一个空字典。 cancel()¶ 停止定时器并取消执行计时器将要执行的操作。仅当计时器仍处于等待状态时有效。 栅栏对象栅栏类提供一个简单的同步原语，用于应对固定数量的线程需要彼此相互等待的情况。线程调用 wait() 方法后将阻塞，直到所有线程都调用了 wait() 方法。此时所有线程将被同时释放。 栅栏对象可以被多次使用，但进程的数量不能改变。 这是一个使用简便的方法实现客户端进程与服务端进程同步的例子： 1234567891011121314b = Barrier(2, timeout=5)def server(): start_server() b.wait() while True: connection = accept_connection() process_server_connection(connection)def client(): b.wait() while True: connection = make_connection() process_client_connection(connection) class threading.Barrier(parties, action=None, timeout=None) 创建一个需要 parties 个线程的栅栏对象。如果提供了可调用的 action 参数，它会在所有线程被释放时在其中一个线程中自动调用。 timeout 是默认的超时时间，如果没有在 wait() 方法中指定超时时间的话。 wait(timeout=None) 冲出栅栏。当栅栏中所有线程都已经调用了这个函数，它们将同时被释放。如果提供了 timeout 参数，这里的 timeout 参数优先于创建栅栏对象时提供的 timeout 参数。函数返回值是一个整数，取值范围在0到 parties – 1，在每个线程中的返回值不相同。可用于从所有线程中选择唯一的一个线程执行一些特别的工作。例如： 1234i = barrier.wait()if i == 0: # Only one thread needs to print this print("passed the barrier") 如果创建栅栏对象时在构造函数中提供了 action 参数，它将在其中一个线程释放前被调用。如果此调用引发了异常，栅栏对象将进入损坏态。 如果发生了超时，栅栏对象将进入破损态。 如果栅栏对象进入破损态，或重置栅栏时仍有线程等待释放，将会引发 BrokenBarrierError 异常。 reset() 重置栅栏为默认的初始态。如果栅栏中仍有线程等待释放，这些线程将会收到 BrokenBarrierError 异常。 abort() Put the barrier into a broken state. This causes any active or future calls to wait() to fail with the BrokenBarrierError. Use this for example if one of the threads needs to abort, to avoid deadlocking the application.更好的方式是：创建栅栏时提供一个合理的超时时间，来自动避免某个线程出错。 parties 冲出栅栏所需要的线程数量。 n_waiting 当前时刻正在栅栏中阻塞的线程数量。 broken 一个布尔值，值为 True 表明栅栏为破损态。 exception threading.BrokenBarrierError 异常类，是 RuntimeError 异常的子类，在 Barrier 对象重置时仍有线程阻塞时和对象进入破损态时被引发。 在 with 语句中使用锁、条件和信号量这个模块提供的带有 acquire() 和 release() 方法的对象，可以被用作 with 语句的上下文管理器。当进入语句块时 acquire() 方法会被调用，退出语句块时 release() 会被调用。因此，以下片段: 12with some_lock: # do something... 相当于: 12345some_lock.acquire()try: # do something...finally: some_lock.release() 小结GIL 原理参考 stackoverflow上 大神的解释 Python’s GIL is intended to serialize access to interpreter internals from different threads. On multi-core systems, it means that multiple threads can’t effectively make use of multiple cores. (If the GIL didn’t lead to this problem, most people wouldn’t care about the GIL - it’s only being raised as an issue because of the increasing prevalence of multi-core systems.) If you want to understand it in detail, you can view this video or look at this set of slides. It might be too much information, but then you did ask for details :-) Note that Python’s GIL is only really an issue for CPython, the reference implementation. Jython and IronPython don’t have a GIL. As a Python developer, you don’t generally come across the GIL unless you’re writing a C extension. C extension writers need to release the GIL when their extensions do blocking I/O, so that other threads in the Python process get a chance to run. 简单说 所谓的全局线程锁,就是同步线程间信号的一种处理方式。 在多线程系统中,并不能充分利用多线程,来提高整体的性能。所以才有了 GIL。 根据我的理解,GIL的一个应用场景是在同一时刻只能跑一个线程，这样在跑多线程的情况下，只有当线程获取到全局解释器锁后才能运行，而全局解释器锁只有一个，因此即使在多核的情况下也只能发挥出单核的功能。 如下图所示: GIL仅仅对cpython实现和扩展的模块起作用,jpython或者ironpython没有GIL的概念。 到底是并行还是多线程,在很多场景中都有争论。 GIL 对线程执行的影响：首先理解什么是interval时间,和操作系统绑定: 1234&gt;&gt;&gt; import sys&gt;&gt;&gt; # The interval is set to 100 instructions:&gt;&gt;&gt; sys.getcheckinterval()100 多线程环境中，python虚拟机按照以下方式执行： 设置GIL 切换到一个线程去执行 运行代码，这里有两种机制： 指定数量的字节码指令（100个） 固定时间15ms线程主动让出控制 把线程设置为睡眠状态 解锁GIL 再次重复以上步骤 一个栗子Code 1: CPU bound program that perform simple countdown 123456789101112131415import time from threading import Thread COUNT = 50000000 def countdown(n): while n&gt;0: n -= 1 start = time.time() countdown(COUNT) end = time.time() print('Time taken in seconds -', end - start) &gt;&gt;&gt; Time taken in seconds - 2.5236213207244873 Code 2: Two threads running parallel 123456789101112131415161718192021import time from threading import Thread COUNT = 50000000 def countdown(n): while n&gt;0: n -= 1 t1 = Thread(target = countdown, args =(COUNT//2, )) t2 = Thread(target = countdown, args =(COUNT//2, )) start = time.time() t1.start() t2.start() t1.join() t2.join() end = time.time() print('Time taken in seconds -', end - start) &gt;&gt;&gt; Time taken in seconds - 2.183610439300537 python的解决方案 123456789101112131415161718192021222324252627import multiprocessing import time COUNT = 50000000 def countdown(n): while n&gt;0: n -= 1 if __name__ == "__main__": # creating processes start = time.time() p1 = multiprocessing.Process(target = countdown, args =(COUNT//2, )) p2 = multiprocessing.Process(target = countdown, args =(COUNT//2, )) # starting process 1 p1.start() # starting process 2 p2.start() # wait until process 1 is finished p1.join() # wait until process 2 is finished p2.join() end = time.time() print('Time taken in seconds -', end - start) &gt;&gt;&gt; Time taken in seconds - 2.5148496627807617 参考文档UnderstandingGIL understanding-python-gil what is the python interpreter lock gil]]></content>
      <categories>
        <category>python</category>
        <category>standard_library</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>standard_library</tag>
        <tag>thread</tag>
        <tag>GIL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python standard library numbers]]></title>
    <url>%2F2020%2F01%2F18%2Fpython-standard-library-numbers%2F</url>
    <content type="text"><![CDATA[python 标准库数字的抽象基类 numbers昨天深夜 红薯 一篇博文 悼 @宏哥 ,让我久久不能平静。 时间定格在了2020年1月16号。 还依稀记得几年前和宏哥聊天,听说他去创业了。 还记得那时意气风发,舌战群儒,没想到如今阴阳两隔。 创业这条路,真的不好走。 愿天堂没有代码。 大家都好好活着吧。 源代码源代码： Lib/numbers.py numbers 模块 (PEP 3141) 定义了数字 抽象基类 的层次结构，其中逐级定义了更多操作。 此模块中所定义的类型都不可被实例化。 核心类class numbers.Number 数字的层次结构的基础。如果你只想确认参数 x 是不是数字而不关心其类型，则使用isinstance(x, Number)。 数字的层次 class numbers.Complex 内置在类型 complex 里的子类描述了复数和它的运算操作。这些操作有：转化至 complex 和 bool， real、 imag、+、-、*、/、 abs()、 conjugate()、 == 和 !=。 所有的异常，- 和 != ，都是抽象的。real抽象的。得到该数字的实数部分。imag抽象的。得到该数字的虚数部分。abstractmethod conjugate()抽象的。返回共轭复数。例如 (1+3j).conjugate() == (1-3j)。 class numbers.Real 相对于 Complex，Real 加入了只有实数才能进行的操作。简单的说，它们是：转化至 float，math.trunc()、 round()、 math.floor()、 math.ceil()、 divmod()、 //、 %、 &lt;、 &lt;=、 &gt;、 和 &gt;=。实数同样默认支持 complex()、 real、 imag 和 conjugate()。 class numbers.Rational 子类型 Real 并加入 numerator 和 denominator 两种属性，这两种属性应该属于最低的级别。加入后，这默认支持 float()。numerator摘要。denominator摘要。 class numbers.Integral 子类型 Rational 加上转化至 int。 默认支持 float()、 numerator 和 denominator。 在 ** 中加入抽象方法和比特字符串的操作： &lt;&lt;、 &gt;&gt;、 &amp;、 ^、 |、 ~。 类型接口注解实现者需要注意使相等的数字相等并拥有同样的值。当这两个数使用不同的扩展模块时，这其中的差异是很微妙的。例如，用 fractions.Fraction 实现 hash() 如下: 1234567891011def __hash__(self): if self.denominator == 1: # Get integers right. return hash(self.numerator) # Expensive check, but definitely correct. if self == float(self): return hash(float(self)) else: # Use tuple's hash to avoid a high collision rate on # simple fractions. return hash((self.numerator, self.denominator)) 添加更多数字的ABC(创造自定义的数字子类)当然，这里有更多支持数字的ABC，如果不加入这些，就将缺少层次感。你可以用如下方法在 Complex 和 Real 中加入MyFoo： 123class MyFoo(Complex): passMyFoo.register(Real) 实现算数运算我们希望实现计算，因此，混合模式操作要么调用一个作者知道参数类型的实现，要么转变成为最接近的内置类型并对这个执行操作。对于子类 Integral，这意味着 __add__() 和 __radd__() 必须用如下方式定义： 1234567891011121314151617181920212223class MyIntegral(Integral): def __add__(self, other): if isinstance(other, MyIntegral): return do_my_adding_stuff(self, other) elif isinstance(other, OtherTypeIKnowAbout): return do_my_other_adding_stuff(self, other) else: return NotImplemented def __radd__(self, other): if isinstance(other, MyIntegral): return do_my_adding_stuff(other, self) elif isinstance(other, OtherTypeIKnowAbout): return do_my_other_adding_stuff(other, self) elif isinstance(other, Integral): return int(other) + int(self) elif isinstance(other, Real): return float(other) + float(self) elif isinstance(other, Complex): return complex(other) + complex(self) else: return NotImplemented 复数的子类上的混合操作有五种情况。前述的代码中除去MyIntegral和OtherTypeIKnow的文本将作为下面描述的样板。a是A的实例，并且使复数的子类（a：A&lt;：Complex），b是B的实例，也是复数的子类。我们以a+b做如下讨论： 如果 A 被定义成一个承认b 的 __add__()，一切都没有问题。 如果 A 转回成“模板”失败，它将返回一个属于 __add__() 的值，我们需要避免 B 定义了一个更加智能的 __radd__()，因此模板需要返回一个属于 __add__() 的 NotImplemented 。（或者 A 可能完全不实现 __add__() 。） 接着看 B 的 __radd__() 。如果它接受a ，一切都将完美。 如果没有成功回退到模板，就没有更多的方法可以去尝试，因此这里将使用默认的实现。 如果 B &lt;: A ， Python 在 A.__add__ 之前尝试 B.__radd__ 。 这是可行的，是通过对 A 的认识实现的，因此这可以在交给 Complex 处理之前处理这些实例。 如果 A &lt;: Complex 和 B &lt;: Real 没有共享任何资源，那么适当的共享操作涉及内置的 complex ，并且分别获得 __radd__() ，因此 a+b == b+a。 由于对任何一直类型的大部分操作是十分相似的，可以定义一个帮助函数，即一个生成后续或相反的实例的生成器。例如，使用 fractions.Fraction 如下： 12345678910111213141516171819202122232425262728293031323334353637def _operator_fallbacks(monomorphic_operator, fallback_operator): def forward(a, b): if isinstance(b, (int, Fraction)): return monomorphic_operator(a, b) elif isinstance(b, float): return fallback_operator(float(a), b) elif isinstance(b, complex): return fallback_operator(complex(a), b) else: return NotImplemented forward.__name__ = '__' + fallback_operator.__name__ + '__' forward.__doc__ = monomorphic_operator.__doc__ def reverse(b, a): if isinstance(a, Rational): # Includes ints. return monomorphic_operator(a, b) elif isinstance(a, numbers.Real): return fallback_operator(float(a), float(b)) elif isinstance(a, numbers.Complex): return fallback_operator(complex(a), complex(b)) else: return NotImplemented reverse.__name__ = '__r' + fallback_operator.__name__ + '__' reverse.__doc__ = monomorphic_operator.__doc__ return forward, reversedef _add(a, b): """a + b""" return Fraction(a.numerator * b.denominator + b.numerator * a.denominator, a.denominator * b.denominator)__add__, __radd__ = _operator_fallbacks(_add, operator.add)# ...]]></content>
      <categories>
        <category>python</category>
        <category>standard_library</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>standard_library</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python standard libary heapq]]></title>
    <url>%2F2020%2F01%2F17%2Fpython-standard-library-heapq%2F</url>
    <content type="text"><![CDATA[python 标准库 堆队列算法 heapq每日一词: Pollen n 花粉 例句: Good news for all you hay fever and asthma sufferers对于花粉症和哮喘病患者是个好消息 今天是小年,祝大家心想事成 源码源码：Lib/heapq.py 主要模块和方法： 12__all__ = ['heappush', 'heappop', 'heapify', 'heapreplace', 'merge', 'nlargest', 'nsmallest', 'heappushpop'] 这个模块提供了堆队列算法的实现，也称为优先队列算法。 堆是一个二叉树，它的每个父节点的值都只会小于或大于所有孩子节点（的值）。它使用了数组来实现：从零开始计数，对于所有的 k ，都有 heap[k] &lt;= heap[2*k+1] 和 heap[k] &lt;= heap[2*k+2]。 为了便于比较，不存在的元素被认为是无限大。 堆最有趣的特性在于最小的元素总是在根结点：heap[0]。 这个API与教材的堆算法实现有所不同，具体区别有两方面：（a）我们使用了从零开始的索引。这使得节点和其孩子节点索引之间的关系不太直观但更加适合，因为 Python 使用从零开始的索引。 （b）我们的 pop 方法返回最小的项而不是最大的项（这在教材中称为“最小堆”；而“最大堆”在教材中更为常见，因为它更适用于原地排序）。 基于这两方面，把堆看作原生的Python list也没什么奇怪的： heap[0] 表示最小的元素，同时 heap.sort() 维护了堆的不变性！ 要创建一个堆，可以使用list来初始化为 [] ，或者你可以通过一个函数 heapify() ，来把一个list转换成堆。 定义了以下函数： heapq.heappush(heap, item) 将 item 的值加入 heap 中，保持堆的不变性。 heapq.heappop(heap) 弹出并返回 heap 的最小的元素，保持堆的不变性。如果堆为空，抛出 IndexError 。使用 heap[0] ，可以只访问最小的元素而不弹出它。 heapq.heappushpop(heap, item) 将 item 放入堆中，然后弹出并返回 heap 的最小元素。该组合操作比先调用 heappush() 再调用 heappop() 运行起来更有效率。 heapq.heapify(x) 将list x 转换成堆，原地，线性时间内。 heapq.heapreplace(heap, item) 弹出并返回 heap 中最小的一项，同时推入新的 item。 堆的大小不变。 如果堆为空则引发 IndexError。这个单步骤操作比 heappop() 加 heappush() 更高效，并且在使用固定大小的堆时更为适宜。 pop/push 组合总是会从堆中返回一个元素并将其替换为 item。返回的值可能会比添加的 item 更大。 如果不希望如此，可考虑改用 heappushpop()。 它的 push/pop 组合会返回两个值中较小的一个，将较大的值留在堆中。 该模块还提供了三个基于堆的通用功能函数。 heapq.merge(*iterables, key=None, reverse=False) 将多个已排序的输入合并为一个已排序的输出（例如，合并来自多个日志文件的带时间戳的条目）。 返回已排序值的 iterator。类似于 sorted(itertools.chain(*iterables)) 但返回一个可迭代对象，不会一次性地将数据全部放入内存，并假定每个输入流都是已排序的（从小到大）。具有两个可选参数，它们都必须指定为关键字参数。key 指定带有单个参数的 key function，用于从每个输入元素中提取比较键。 默认值为 None (直接比较元素)。reverse 为一个布尔值。 如果设为 True，则输入元素将按比较结果逆序进行合并。 要达成与 sorted(itertools.chain(*iterables), reverse=True) 类似的行为，所有可迭代对象必须是已从大到小排序的。在 3.5 版更改: 添加了可选的 key 和 reverse 形参。 heapq.nlargest(n, iterable, key=None) 从 iterable 所定义的数据集中返回前 n 个最大元素组成的列表。 如果提供了 key 则其应指定一个单参数的函数，用于从 iterable 的每个元素中提取比较键 (例如 key=str.lower)。 等价于: sorted(iterable, key=key, reverse=True)[:n]。 heapq.nsmallest(n, iterable, key=None) 从 iterable 所定义的数据集中返回前 n 个最小元素组成的列表。 如果提供了 key 则其应指定一个单参数的函数，用于从 iterable 的每个元素中提取比较键 (例如 key=str.lower)。 等价于: sorted(iterable, key=key)[:n]。 后两个函数在 n 值较小时性能最好。 对于更大的值，使用 sorted() 函数会更有效率。 此外，当 n==1 时，使用内置的 min() 和 max() 函数会更有效率。 如果需要重复使用这些函数，请考虑将可迭代对象转为真正的堆。 基本实例堆排序 可以通过将所有值推入堆中然后每次弹出一个最小值项来实现。 12345678&gt;&gt;&gt; def heapsort(iterable):... h = []... for value in iterable:... heappush(h, value)... return [heappop(h) for i in range(len(h))]...&gt;&gt;&gt; heapsort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 这类似于 sorted(iterable)，但与 sorted() 不同的是这个实现是不稳定的。 堆元素可以为元组。 这适用于将比较值（例如任务优先级）与跟踪的主记录进行赋值的场合: 1234567&gt;&gt;&gt; h = []&gt;&gt;&gt; heappush(h, (5, 'write code'))&gt;&gt;&gt; heappush(h, (7, 'release product'))&gt;&gt;&gt; heappush(h, (1, 'write spec'))&gt;&gt;&gt; heappush(h, (3, 'create tests'))&gt;&gt;&gt; heappop(h)(1, 'write spec') 优先队列实现说明优先队列 是堆的常用场合，并且它的实现包含了多个挑战： 排序稳定性：你该如何令相同优先级的两个任务按它们最初被加入时的顺序返回？ 如果优先级相同且任务没有默认比较顺序，则 (priority, task) 对的元组比较将会中断。 如果任务优先级发生改变，你该如何将其移至堆中的新位置？ 或者如果一个挂起的任务需要被删除，你该如何找到它并将其移出队列？ 针对前两项挑战的一种解决方案是将条目保存为包含优先级、条目计数和任务对象 3 个元素的列表。 条目计数可用来打破平局，这样具有相同优先级的任务将按它们的添加顺序返回。 并且由于没有哪两个条目计数是相同的，元组比较将永远不会直接比较两个任务。 不可比较任务问题的另一种解决方案是创建一个忽略任务条目并且只比较优先级字段的包装器类: 1234567from dataclasses import dataclass, fieldfrom typing import Any@dataclass(order=True)class PrioritizedItem: priority: int item: Any=field(compare=False) 其余的挑战主要包括找到挂起的任务并修改其优先级或将其完全移除。 找到一个任务可使用一个指向队列中条目的字典来实现。 移除条目或改变其优先级的操作实现起来更为困难，因为它会破坏堆结构不变量。 因此，一种可能的解决方案是将条目标记为已移除，再添加一个改变了优先级的新条目: 123456789101112131415161718192021222324252627pq = [] # list of entries arranged in a heapentry_finder = &#123;&#125; # mapping of tasks to entriesREMOVED = '&lt;removed-task&gt;' # placeholder for a removed taskcounter = itertools.count() # unique sequence countdef add_task(task, priority=0): 'Add a new task or update the priority of an existing task' if task in entry_finder: remove_task(task) count = next(counter) entry = [priority, count, task] entry_finder[task] = entry heappush(pq, entry)def remove_task(task): 'Mark an existing task as REMOVED. Raise KeyError if not found.' entry = entry_finder.pop(task) entry[-1] = REMOVEDdef pop_task(): 'Remove and return the lowest priority task. Raise KeyError if empty.' while pq: priority, count, task = heappop(pq) if task is not REMOVED: del entry_finder[task] return task raise KeyError('pop from an empty priority queue') 理论堆是通过数组来实现的，其中的元素从 0 开始计数，对于所有的 k 都有 a[k] &lt;= a[2*k+1] 且 a[k] &lt;= a[2*k+2]。 为了便于比较，不存在的元素被视为无穷大。 堆最有趣的特性在于 a[0] 总是其中最小的元素。 上面的特殊不变量是用来作为一场锦标赛的高效内存表示。 下面的数字是 k 而不是 a[k]: 123456789 0 1 2 3 4 5 6 7 8 9 10 11 12 13 1415 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 在上面的树中，每个 k 单元都位于 2*k+1 和 2*k+2 之上。 体育运动中我们经常见到二元锦标赛模式，每个胜者单元都位于另两个单元之上，并且我们可以沿着树形图向下追溯胜者所遇到的所有对手。 但是，在许多采用这种锦标赛模式的计算机应用程序中，我们并不需要追溯胜者的历史。 为了获得更高的内存利用效率，当一个胜者晋级时，我们会用较低层级的另一条目来替代它，因此规则变为一个单元和它之下的两个单元包含三个不同条目，上方单元“胜过”了两个下方单元。 如果此堆的不变量始终受到保护，则序号 0 显然是最后的赢家。 删除它并找出“下一个”赢家的最简单算法方式是家某个输家（让我们假定是上图中的 30 号单元）移至 0 号位置，然后将这个新的 0 号沿树下行，不断进行值的交换，直到不变量重新建立。 这显然会是树中条目总数的对数。 通过迭代所有条目，你将得到一个 O(n log n) 复杂度的排序。 此排序有一个很好的特性就是你可以在排序进行期间高效地插入新条目，前提是插入的条目不比你最近取出的 0 号元素“更好”。 这在模拟上下文时特别有用，在这种情况下树保存的是所有传入事件，“胜出”条件是最小调度时间。 当一个事件将其他事件排入执行计划时，它们的调试时间向未来方向延长，这样它们可方便地入堆。 因此，堆结构很适宜用来实现调度器，我的 MIDI 音序器就是用的这个 :-)。 用于实现调度器的各种结构都得到了充分的研究，堆是非常适宜的一种，因为它们的速度相当快，并且几乎是恒定的，最坏的情况与平均情况没有太大差别。 虽然还存在其他总体而言更高效的实现方式，但其最坏的情况却可能非常糟糕。 堆在大磁盘排序中也非常有用。 你应该已经了解大规模排序会有多个“运行轮次”（即预排序的序列，其大小通常与 CPU 内存容量相关），随后这些轮次会进入合并通道，轮次合并的组织往往非常巧妙 1。 非常重要的一点是初始排序应产生尽可能长的运行轮次。 锦标赛模式是达成此目标的好办法。 如果你使用全部有用内存来进行锦标赛，替换和安排恰好适合当前运行轮次的条目，你将可以对于随机输入生成两倍于内存大小的运行轮次，对于模糊排序的输入还会有更好的效果。 另外，如果你输出磁盘上的第 0 个条目并获得一个可能不适合当前锦标赛的输入（因为其值要“胜过”上一个输出值），它无法被放入堆中，因此堆的尺寸将缩小。 被释放的内存可以被巧妙地立即重用以逐步构建第二个堆，其增长速度与第一个堆的缩减速度正好相同。 当第一个堆完全消失时，你可以切换新堆并启动新的运行轮次。 这样做既聪明又高效！ 总之，堆是值得了解的有用内存结构。 我在一些应用中用到了它们，并且认为保留一个 ‘heap’ 模块是很有意义的。 :-) 堆排序图例]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>standard_library</tag>
        <tag>heapq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python standard library calendar]]></title>
    <url>%2F2020%2F01%2F16%2Fpython-standard-library-calendar%2F</url>
    <content type="text"><![CDATA[python 标准库 calendar每日一词: calendar 英 [ˈkælɪndə(r)] 美 [ˈkælɪndər] n. 日历；[天] 历法；日程表 vt. 将…列入表中；将…排入日程表 短语 chinese calendar 中国传统历法 ; 阴历 ; 中国农历 lunar calendar 阴历 ; 夏历 ; 来自日月星辰的力量 ; 太阴历 solar calendar 太阳历 ; 公历 ; 阳历与阴历 还有几天就过年了,2020年充满了期待,你呢？ 今天我们学习python 标准库 calendar 。 输出像 Unix cal 那样的日历，它还提供了其它与日历相关的实用函数。 默认情况下，这些日历把星期一当作一周的第一天，星期天为一周的最后一天（按照欧洲惯例）。 可以使用 setfirstweekday() 方法设置一周的第一天为星期天 (6) 或者其它任意一天。 使用整数作为指定日期的参数。 更多相关的函数，参见 datetime 和 time 模块。 在这个模块中定义的函数和类都基于一个理想化的日历，现行公历向过去和未来两个方向无限扩展。这与 Dershowitz 和 Reingold 的书 “历法计算” 中所有计算的基本日历 – “proleptic Gregorian” 日历的定义相符合。 ISO 8601标准还规定了 0 和 负数年份。0年指公元前1年， -1年指公元前2年，依此类推 . 源代码 源代码： Lib/calendar.py 主要类和方法,节选自源码 123456__all__ = ["IllegalMonthError", "IllegalWeekdayError", "setfirstweekday", "firstweekday", "isleap", "leapdays", "weekday", "monthrange", "monthcalendar", "prmonth", "month", "prcal", "calendar", "timegm", "month_name", "month_abbr", "day_name", "day_abbr", "Calendar", "TextCalendar", "HTMLCalendar", "LocaleTextCalendar", "LocaleHTMLCalendar", "weekheader"] 类class calendar.Calendar(firstweekday=0)¶创建一个 Calendar 对象。 firstweekday 是一个整数，用于指定一周的第一天。 0 是星期一（默认值），6 是星期天。 Calendar 对象提供了一些可被用于准备日历数据格式化的方法。 这个类本身不执行任何格式化操作。 这部分任务应由子类来完成。 Calendar 类的实例有下列方法： iterweekdays() 返回一个迭代器，迭代器的内容为一星期的数字。迭代器的第一个值与 firstweekday 属性的值一至。 itermonthdates(year, month) 返回一个迭代器，迭代器的内容为 year 年 month 月(1-12)的日期。这个迭代器返回当月的所有日期 ( datetime.date 对象)，日期包含了本月头尾用于组成完整一周的日期。 itermonthdays(year, month) 返回一个迭代器，迭代器的内容与 itermonthdates() 类似，为 year 年 month 月的日期，但不受 datetime.date 范围限制。返回的日期为当月每一天的日期对应的天数。对于不在当月的日期，显示为 0。 itermonthdays2(year, month) 返回一个迭代器，迭代器的内容与 itermonthdates() 类似为 year 年 month 月的日期，但不受 datetime.date 范围的限制。迭代器中的元素为一个由日期和代表星期几的数字组成的的元组。 itermonthdays3(year, month) 返回一个迭代器，迭代器的内容与 itermonthdates() 类似为 year 年 month 月的日期，但不受 datetime.date 范围的限制。迭代器的元素为一个由年，月，日组成的元组。3.7 新版功能. itermonthdays4(year, month) 返回一个迭代器，迭代器的内容与 itermonthdates() 类似为 year 年 month 月的日期，但不受 datetime.date 范围的限制。迭代器的元素为一个由年，月，日和代表星期几的数字组成的元组。3.7 新版功能. monthdatescalendar(year, month) 返回一个表示指定年月的周列表。周列表由七个 datetime.date 对象组成。 monthdays2calendar(year, month) 返回一个表示指定年月的周列表。周列表由七个代表日期的数字和代表周几的数字组成的二元元组。 monthdayscalendar(year, month) 返回一个表示指定年月的周列表。周列表由七个代表日期的数字组成。 yeardatescalendar(year, width=3) 返回可以用来格式化的指定年月的数据。返回的值是一个列表，列表是月份组成的行。每一行包含了最多 width 个月(默认为3)。每个月包含了4到6周，每周包含1–7天。每一天使用 datetime.date 对象。 yeardays2calendar(year, width=3) 返回可以用来模式化的指定年月的数据(与 yeardatescalendar() 类似)。周列表的元素是由表示日期的数字和表示星期几的数字组成的元组。不在这个月的日子为0。 yeardayscalendar(year, width=3) 返回可以用来模式化的指定年月的数据(与 yeardatescalendar() 类似)。周列表的元素是表示日期的数字。不在这个月的日子为0。 class calendar.TextCalendar(firstweekday=0)可以使用这个类生成纯文本日历。 TextCalendar 实例有以下方法： formatmonth(theyear, themonth, w=0, l=0) 返回一个多行字符串来表示指定年月的日历。w 为日期的宽度，但始终保持日期居中。l 指定了每星期占用的行数。以上这些还依赖于构造器或者 setfirstweekday() 方法指定的周的第一天是哪一天。 prmonth(theyear, themonth, w=0, l=0) 与 formatmonth() 方法一样，返回一个月的日历。 formatyear(theyear, w=2, l=1, c=6, m=3) 返回一个多行字符串，这个字符串为一个 m 列日历。可选参数 w, l, 和 c 分别表示日期列数， 周的行数， 和月之间的间隔。同样，以上这些还依赖于构造器或者 setfirstweekday() 指定哪一天为一周的第一天。日历的第一年由平台依赖于使用的平台。 pryear(theyear, w=2, l=1, c=6, m=3) 与 formatyear() 方法一样，返回一整年的日历。 class calendar.HTMLCalendar(firstweekday=0)可以使用这个类生成 HTML 日历。HTMLCalendar 实例有以下方法：formatmonth(theyear, themonth, withyear=True)返回一个 HTML 表格作为指定年月的日历。 withyear 为真，则年份将会包含在表头，否则只显示月份。formatyear(theyear, width=3)返回一个 HTML 表格作为指定年份的日历。 width (默认为3) 用于规定每一行显示月份的数量。formatyearpage(theyear, width=3, css=’calendar.css’, encoding=None)返回一个完整的 HTML 页面作为指定年份的日历。 width\(默认为3) 用于规定每一行显示的月份数量。 *css 为层叠样式表的名字。如果不使用任何层叠样式表，可以使用 None 。 encoding* 为输出页面的编码 (默认为系统的默认编码)。HTMLCalendar 有以下属性，你可以重载它们来自定义应用日历的样式。 cssclasses一个对应星期一到星期天的 CSS class 列表。默认列表为 1cssclasses = ["mon", "tue", "wed", "thu", "fri", "sat", "sun"] 可以向每天加入其它样式 1cssclasses = ["mon text-bold", "tue", "wed", "thu", "fri", "sat", "sun red"] 需要注意的是，列表的长度必须为7。 cssclass_noday 工作日的 CSS 类在上个月或下个月发生。 cssclasses_weekday_head 用于标题行中的工作日名称的 CSS 类 列表。默认值与 cssclasses 相同。3.7 新版功能. cssclass_month_head 月份的头 CSS 类（由 formatmonthname() 使用）。默认值为 &quot;month&quot; 。3.7 新版功能. cssclass_month 某个月的月历的 CSS 类（由 formatmonth() 使用）。默认值为 &quot;month&quot; 。3.7 新版功能. cssclass_year 某年的年历的 CSS 类（由 formatyear() 使用）。默认值为 &quot;year&quot; 。3.7 新版功能. cssclass_year_head 年历的·表头 CSS 类（由 formatyear() 使用）。默认值为 &quot;year&quot; 。3.7 新版功能. 需要注意的是，尽管上面命名的样式类都是单独出现的(如： cssclass_month cssclass_noday), 但我们可以使用空格将样式类列表中的多个元素分隔开，例如： 1"text-bold text-red" 下面是一个如何自定义 HTMLCalendar 的示例 123456class CustomHTMLCal(calendar.HTMLCalendar): cssclasses = [style + " text-nowrap" for style in calendar.HTMLCalendar.cssclasses] cssclass_month_head = "text-center month-head" cssclass_month = "text-center month" cssclass_year = "text-italic lead" class calendar.LocaleTextCalendar(firstweekday=0, locale=None)这个子类 TextCalendar 可以在构造函数中传递一个语言环境名称，并且返回月份和星期几的名称在特定语言环境中。如果此语言环境包含编码，则包含月份和工作日名称的所有字符串将作为 unicode 返回。 class calendar.LocaleHTMLCalendar(firstweekday=0, locale=None) calendar.setfirstweekday(weekday) 设置每一周的开始(0 表示星期一，6 表示星期天)。calendar还提供了 MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY 和 SUNDAY 几个常量方便使用。例如，设置每周的第一天为星期天 12import calendarcalendar.setfirstweekday(calendar.SUNDAY) calendar.firstweekday() 返回当前设置的每星期的第一天的数值。 calendar.isleap(year) 如果 year 是闰年则返回 True ,否则返回 False。 calendar.leapdays(y1, y2) 返回在范围 y1 至 y2 （包含 y1 和 y2 ）之间的闰年的年数，其中 y1 和 y2 是年份。此函数适用于跨越一个世纪变化的范围。 calendar.weekday(year, month, day) 返回某年（ 1970 – …），某月（ 1 – 12 ），某日（ 1 – 31 ）是星期几（ 0 是星期一）。 calendar.weekheader(n) 返回一个包含星期几的缩写名的头。 n 指定星期几缩写的字符宽度。 calendar.monthrange(year, month) 返回指定 年份 的指定 月份 的第一天是星期几和这个月的天数。 calendar.monthcalendar(year, month) 返回表示一个月的日历的矩阵。每一行代表一周；此月份外的日子由零表示。除非由 setfirstweekday() 设置，否则每周以周一为始。 calendar.prmonth(theyear, themonth, w=0, l=0) 打印由 month() 返回的一个月的日历。 calendar.month(theyear, themonth, w=0, l=0) 使用 TextCalendar 类的 formatmonth() 以多行字符串形式返回月份日历。 calendar.prcal(year, w=0, l=0, c=6, m=3) 打印由 calendar() 返回的整年的日历。 calendar.calendar(year, w=2, l=1, c=6, m=3) 使用 TextCalendar 类的 formatyear() 返回整年的3列的日历以多行字符串的形式。 calendar.timegm(tuple) 一个不相关但很好用的函数，它接受一个时间元组例如 time 模块中的 gmtime() 函数的返回并返回相应的 Unix 时间戳值，假定 1970 年开始计数， POSIX 编码。实际上， time.gmtime() 和 timegm() 是彼此相反的。 属性 calendar.day_name 在当前语言环境下表示星期几的数组。 calendar.day_abbr 在当前语言环境下表示星期几缩写的数组。 calendar.month_name 在当前语言环境下表示一年中月份的数组。这遵循一月的月号为 1 的通常惯例，所以它的长度为 13 且 month_name[0] 是空字符串。 calendar.month_abbr 在当前语言环境下表示月份简写的数组。这遵循一月的月号为 1 的通常惯例，所以它的长度为 13 且 month_abbr[0] 是空字符串。 例子 小结 默认情况下，这些日历将星期一作为一周的第一天，将星期日作为一周的最后一天(欧洲惯例)。不过，我们可以使用setfirstweekday()方法来设置一周的第一天为星期日或h者其他工作日，指定的日期以整数形式给出。]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>standard_library</tag>
        <tag>calendar</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python standard library iterator and generator]]></title>
    <url>%2F2020%2F01%2F15%2Fpython-standard-library-iterator-and-generator%2F</url>
    <content type="text"><![CDATA[python 标准库 类型： 迭代器 和 生成器每日英语: miracle n [英] [ˈmɪrəkl] [美] [ ˈmɪrəkəl ] 奇迹，圣迹，神迹； 令人惊奇的人（或事） 推荐一个老电影： 每个人终将都会踏上自己的绿色旅程,善恶就在一念之间。愿世界美好,温情以待。 先看一张图: 1，迭代器协议：对象需要提供next()方法，它要么返回迭代中的下一项，要么就引起一个StopIteration异常，以终止迭代。 2，可迭代对象：实现了迭代器协议对象。list、tuple、dict都是Iterable（可迭代对象），但不是Iterator（迭代器对象）。但可以使用内建函数iter()，把这些都变成Iterable（可迭代器对象）。 3，for item in Iterable 循环的本质就是先通过iter()函数获取可迭代对象Iterable的迭代器，然后对获取到的迭代器不断调用next()方法来获取下一个值并将其赋值给item，当遇到StopIteration的异常后循环结束 迭代器类型Python 支持在容器中进行迭代的概念。 这是通过使用两个单独方法来实现的；它们被用于允许用户自定义类对迭代的支持。 将在下文中详细描述的序列总是支持迭代方法。 容器对象要提供迭代支持，必须定义一个方法: container.__iter__() 返回一个迭代器对象。 该对象需要支持下文所述的迭代器协议。 如果容器支持不同的迭代类型，则可以提供额外的方法来专门地请求不同迭代类型的迭代器。 （支持多种迭代形式的对象的例子有同时支持广度优先和深度优先遍历的树结构。） 此方法对应于 Python/C API 中 Python 对象类型结构体的 tp_iter 槽位。 迭代器对象自身需要支持以下两个方法，它们共同组成了 迭代器协议: iterator.__iter__() 返回迭代器对象本身。 这是同时允许容器和迭代器配合 for 和 in 语句使用所必须的。 此方法对应于 Python/C API 中 Python 对象类型结构体的 tp_iter 槽位。 iterator.__next__() 从容器中返回下一项。 如果已经没有项可返回，则会引发 StopIteration 异常。 此方法对应于 Python/C API 中 Python 对象类型结构体的 tp_iternext 槽位。 Python 定义了几种迭代器对象以支持对一般和特定序列类型、字典和其他更特别的形式进行迭代。 除了迭代器协议的实现，特定类型的其他性质对迭代操作来说都不重要。 一旦迭代器的 __next__() 方法引发了 StopIteration，它必须一直对后续调用引发同样的异常。 不遵循此行为特性的实现将无法正常使用。 迭代器使用实例 123456789101112131415161718# 随便定义一个listlistArray=[1,2,3]# 使用iter()函数iterName=iter(listArray)print(iterName)# 结果如下：是一个列表list的迭代器# &lt;list_iterator object at 0x0000017B0D984278&gt;print(next(iterName))print(next(iterName))print(next(iterName))print(next(iterName))#没有迭代到下一个元素，直接抛出异常# 1# 2# 3# Traceback (most recent call last):# File "python_iterator.py", line 32, in &lt;module&gt;# StopIteration 自定义迭代器实例 123456789101112131415161718192021222324252627class Fib(object): def __init__(self, max): super(Fib, self).__init__() self.max = max def __iter__(self): self.a = 0 self.b = 1 return self def __next__(self): fib = self.a if fib &gt; self.max: raise StopIteration self.a, self.b = self.b, self.a + self.b return fib# 定义一个main函数，循环遍历每一个菲波那切数def main(): # 20以内的数 fib = Fib(20) for i in fib: print(i)# 测试if __name__ == '__main__': main() 生成器类型Python 的 generator 提供了一种实现迭代器协议的便捷方式。 如果容器对象 __iter__() 方法被实现为一个生成器，它将自动返回一个迭代器对象（从技术上说是一个生成器对象），该对象提供 __iter__() 和 __next__() 方法。 有关生成器的更多信息可以参阅 yield 表达式的文档。 生成器函数123456789101112131415161718# 菲波那切数列def Fib(max): n, a, b = 0, 0, 1 while n &lt; max: yield b a, b = b, a + b n = n + 1 return '亲！没有数据了...'# 调用方法，生成出10个数来f=Fib(10)# 使用一个循环捕获最后return 返回的值，保存在异常StopIteration的value中while True: try: x=next(f) print("f:",x) except StopIteration as e: print("生成器最后的返回值是：",e.value) break 生成器表达式1234567891011121314151617181920212223242526272829# 一个列表xiaoke=[2,3,4,5]# 生成器generator，类似于list，但是是把[]改为()gen=(a for a in xiaoke)for i in gen: print(i)#结果是：2345# 为什么要使用生成器？因为效率。# 使用生成器表达式取代列表推导式可以同时节省 cpu 和 内存(RAM)。# 如果你构造一个列表(list)的目的仅仅是传递给别的函数,# 比如 传递给tuple()或者set(), 那就用生成器表达式替代吧!# 本案例是直接把列表转化为元组kk=tuple(a for a in xiaoke)print(kk)#结果是：(2, 3, 4, 5)# python内置的一些函数，可以识别这是生成器表达式，外面有一对小括号，就是生成器result1=sum(a for a in range(3))print(result1)# 列表推导式result2=sum([a for a in range(3)])print(result2) yield关键字使用yield关键字实现生成器函数 12345def fib(max): a, b = 1, 1 while a &lt; max: yield a #这时a,b值分别为1,1，当然，程序也在执行到这时，返回 a, b = b, a+b 使用yield关键字实现自定义生成器 123456789101112131415161718class Fib: def __init__(self, max): self.max = max def __iter__(self): self.a = 0 self.b = 1 return self def next(self): fib = self.a if fib &gt; self.max: raise StopIteration self.a, self.b = self.b, self.a + self.b return fib if __name__ == '__main__': for f in Fib(6): print f]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>standard_library</tag>
        <tag>iterator</tag>
        <tag>generator</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python standard library pickle]]></title>
    <url>%2F2020%2F01%2F14%2Fpython-standard-library-pickle%2F</url>
    <content type="text"><![CDATA[python 标准库 pickle快过年了,准备了一些过节用的英语 传统中国节日：traditional Chinese festival 农历：lunar calendar 腊八节：Laba Festival 小年：Little New Year 除夕：Lunar New Year’s Eve 春节：the Spring Festival 正月初一：the lunar New Year’s Day 元宵节：the Lantern Festival 正月：the first month of the lunar year 二月二：Dragon Heads-raising Day 时间过得好快,又是一年过去了。 python 标准库学习之 pickle常用的文本处理 除了文件,数据库,json,xml 以外,python还提供了一种存储方案,这就是pickle。 模块 pickle 实现了对一个 Python 对象结构的二进制序列化和反序列化。“pickling” 是将 Python 对象及其所拥有的层次结构转化为一个字节流的过程，而 “unpickling” 是相反的操作，会将（来自一个 binary file 或者 bytes-like object 的）字节流转化回一个对象层次结构。 pickling（和 unpickling）也被称为“序列化”, “编组” 或者 “平面化”。而为了避免混乱，此处采用术语 “封存 (pickling)” 和 “解封 (unpickling)”。 警告 : pickle 模块并不安全。你只应该对你信任的数据进行unpickle操作。构建恶意的 pickle 数据来在解封时执行任意代码是可能的。绝对不要对不信任来源的数据和可能被篡改过的数据进行解封。请考虑使用 hmac 来对数据进行签名，确保数据没有被篡改。在你处理不信任数据时，更安全的序列化格式如 json 可能更为适合。参见 与 json 模块的比较 源代码： Lib/pickle.py本节内容比较多,先看下类层次结构,有一个大体的概念(节选自源码)： 123456789101112131415Classes: Pickler UnpicklerFunctions: dump(object, file) dumps(object) -&gt; string load(file) -&gt; object loads(string) -&gt; objectMisc variables: __version__ format_version compatible_formats __all__ = ["PickleError", "PicklingError", "UnpicklingError", "Pickler", "Unpickler", "dump", "dumps", "load", "loads"] 数据流格式pickletools 模块包含了相应的工具用于分析 pickle 生成的数据流。pickletools 源码中包含了对 pickle 协议使用的操作码的大量注释。 当前共有 6 种不同的协议可用于封存操作。 使用的协议版本越高，读取所生成 pickle 对象所需的 Python 版本就要越新。 v0 版协议是原始的“人类可读”协议，并且向后兼容早期版本的 Python。 v1 版协议是较早的二进制格式，它也与早期版本的 Python 兼容。 v2 版协议是在 Python 2.3 中引入的。它为存储 new-style class 提供了更高效的机制。欲了解有关第 2 版协议带来的改进，请参阅 PEP 307。 v3 版协议是在 Python 3.0 中引入的。 它显式地支持 bytes 字节对象，不能使用 Python 2.x 解封。这是 Python 3.0-3.7 的默认协议。 v4 版协议添加于 Python 3.4。它支持存储非常大的对象，能存储更多种类的对象，还包括一些针对数据格式的优化。它是Python 3.8使用的默认协议。有关第 4 版协议带来改进的信息，请参阅 PEP 3154。 第 5 版协议是在 Python 3.8 中加入的。 它增加了对带外数据的支持，并可加速带内数据处理。 请参阅 PEP 574 了解第 5 版协议所带来的改进的详情。 模块接口要序列化某个包含层次结构的对象，只需调用 dumps() 函数即可。同样，要反序列化数据流，可以调用 loads() 函数。但是，如果要对序列化和反序列化加以更多的控制，可以分别创建 Pickler 或 Unpickler 对象。 pickle 模块包含了以下常量： pickle.HIGHEST_PROTOCOL 整数，可用的最高 协议版本。此值可以作为 协议 值传递给 dump() 和 dumps() 函数，以及 Pickler 的构造函数。 pickle.DEFAULT_PROTOCOL 整数，用于 pickle 数据的默认 协议版本。它可能小于 HIGHEST_PROTOCOL。当前默认协议是 v4，它在 Python 3.4 中首次引入，与之前的版本不兼容。在 3.8 版更改: 默认协议版本还是 4。 模块方法 pickle.dump(obj, file, protocol=None, **, fix_imports=True, buffer_callback=None*) 将对象 obj 封存以后的对象写入已打开的 file object file。它等同于 Pickler(file, protocol).dump(obj)。参数 file、protocol、fix_imports 和 buffer_callback 的含义与它们在 Pickler 的构造函数中的含义相同。在 3.8 版更改: 加入了 buffer_callback 参数。 pickle.dumps(obj, protocol=None, **, fix_imports=True, buffer_callback=None*) 将 obj 封存以后的对象作为 bytes 类型直接返回，而不是将其写入到文件。参数 protocol、fix_imports 和 buffer_callback 的含义与它们在 Pickler 的构造函数中的含义相同。在 3.8 版更改: 加入了 buffer_callback 参数。 pickle.load(file, **, fix_imports=True, encoding=”ASCII”, errors=”strict”, buffers=None*) 从已打开的 file object 文件 中读取封存后的对象，重建其中特定对象的层次结构并返回。它相当于 Unpickler(file).load()。Pickle 协议版本是自动检测出来的，所以不需要参数来指定协议。封存对象以外的其他字节将被忽略。参数 file、fix_imports、encoding、errors、strict 和 buffers 的含义与它们在 Unpickler 的构造函数中的含义相同。在 3.8 版更改: 加入了 buffers 参数。 pickle.loads(bytes_object, **, fix_imports=True, encoding=”ASCII”, errors=”strict”, buffers=None*) 对于封存生成的对象 bytes_object，还原出原对象的结构并返回。Pickle 协议版本是自动检测出来的，所以不需要参数来指定协议。封存对象以外的其他字节将被忽略。参数 file、fix_imports、encoding、errors、strict 和 buffers 的含义与它们在 Unpickler 的构造函数中的含义相同。 异常处理pickle 模块定义了以下 3 个异常： exception pickle.PickleError 其他 pickle 异常的基类。它是 Exception 的一个子类。 exception pickle.PicklingError 当 Pickler 遇到无法解封的对象时抛出此错误。它是 PickleError 的子类。参考 可以被封存/解封的对象 来了解哪些对象可以被封存。 exception pickle.UnpicklingError 当解封出错时抛出此异常，例如数据损坏或对象不安全。它是 PickleError 的子类。注意，解封时可能还会抛出其他异常，包括（但不限于） AttributeError、EOFError、ImportError 和 IndexError。 模块中的类pickle 模块包含了 3 个类，Pickler、Unpickler 和 PickleBuffer： Picklerclass pickle.Pickler(file, protocol=None, **, fix_imports=True, buffer_callback=None*) 它接受一个二进制文件用于写入 pickle 数据流。 可选参数 protocol 是一个整数，告知 pickler 使用指定的协议，可选择的协议范围从 0 到 HIGHEST_PROTOCOL。如果没有指定，这一参数默认值为 DEFAULT_PROTOCOL。指定一个负数就相当于指定 HIGHEST_PROTOCOL。 参数 file 必须有一个 write() 方法，该 write() 方法要能接收字节作为其唯一参数。因此，它可以是一个打开的磁盘文件（用于写入二进制内容），也可以是一个 io.BytesIO 实例，也可以是满足这一接口的其他任何自定义对象。 如果 fix_imports 为 True 且 protocol 小于 3，pickle 将尝试将 Python 3 中的新名称映射到 Python 2 中的旧模块名称，因此 Python 2 也可以读取封存的数据流。 如果 buffer_callback 为 None（默认情况），缓冲区视图（buffer view）将会作为 pickle 流的一部分被序列化到 file 中。 如果 buffer_callback 不为 None，那它可以用缓冲区视图调用任意次。如果某次调用返回了 False 值（例如 None），则给定的缓冲区是 带外的，否则缓冲区是带内的（例如保存在了 pickle 流里面）。 如果 buffer_callback 不是 None 且 protocol 是 None 或小于 5，就会出错。 在 3.8 版更改: 加入了 buffer_callback 参数。 dump(obj) 将 obj 封存后的内容写入已打开的文件对象，该文件对象已经在构造函数中指定。 persistent_id(obj) 默认无动作，子类继承重载时使用。如果 persistent_id() 返回 None，obj 会被照常 pickle。如果返回其他值，Pickler 会将这个函数的返回值作为 obj 的持久化 ID（Pickler 本应得到序列化数据流并将其写入文件，若此函数有返回值，则得到此函数的返回值并写入文件）。这个持久化 ID 的解释应当定义在 Unpickler.persistent_load() 中（该方法定义还原对象的过程，并返回得到的对象）。注意，persistent_id() 的返回值本身不能拥有持久化 ID。参阅 持久化外部对象 获取详情和使用示例。 dispatch_table Pickler 对象的 dispatch 表是 copyreg.pickle() 中用到的 reduction 函数 的注册。dispatch 表本身是一个 class 到其 reduction 函数的映射键值对。一个 reduction 函数只接受一个参数，就是其关联的 class，函数行为应当遵守 __reduce__() 接口规范。Pickler 对象默认并没有 dispatch_table 属性，该对象默认使用 copyreg 模块中定义的全局 dispatch 表。如果要为特定 Pickler 对象自定义序列化过程，可以将 dispatch_table 属性设置为类字典对象（dict-like object）。另外，如果 Pickler 的子类设置了 dispatch_table 属性，则该子类的实例会使用这个表作为默认的 dispatch 表。参阅 Dispatch 表 获取使用示例。3.3 新版功能. reducer_override(self, obj) 可以在 Pickler 的子类中定义的特殊 reducer。此方法的优先级高于 dispatch_table 中的任何 reducer。它应该与 __reduce__() 方法遵循相同的接口，它也可以返回 NotImplemented，这将使用 dispatch_table 里注册的 reducer 来封存 obj。 Unpicklerclass pickle.Unpickler(file, **, fix_imports=True, encoding=”ASCII”, errors=”strict”, buffers=None*) 它接受一个二进制文件用于读取 pickle 数据流。 Pickle 协议版本是自动检测出来的，所以不需要参数来指定协议。 参数 file 必须有三个方法，read() 方法接受一个整数参数，readinto() 方法接受一个缓冲区作为参数，readline() 方法不需要参数，这与 io.BufferedIOBase 里定义的接口是相同的。因此 file 可以是一个磁盘上用于二进制读取的文件，也可以是一个 io.BytesIO 实例，也可以是满足这一接口的其他任何自定义对象。 可选的参数是 fix_imports, encoding 和 errors，用于控制由Python 2 生成的 pickle 流的兼容性。如果 fix_imports 为 True，则 pickle 将尝试将旧的 Python 2 名称映射到 Python 3 中对应的新名称。encoding 和 errors 参数告诉 pickle 如何解码 Python 2 存储的 8 位字符串实例；这两个参数默认分别为 ‘ASCII’ 和 ‘strict’。encoding 参数可置为 ‘bytes’ 来将这些 8 位字符串实例读取为字节对象。读取 NumPy array 和 Python 2 存储的 datetime、date 和 time 实例时，请使用 encoding=&#39;latin1&#39;。 如果 buffers 为 None（默认值），则反序列化所需的所有数据都必须包含在 pickle 流中。这意味着在实例化 Pickler 时（或调用 dump() 或 dumps() 时），参数 buffer_callback 为 None。 如果 buffers 不为 None，则每次 pickle 流引用 带外 缓冲区视图时，消耗的对象都应该是可迭代的启用缓冲区的对象。这样的缓冲区应该按顺序地提供给 Pickler 对象的 buffer_callback 方法。 在 3.8 版更改: 加入了 buffers 参数。 load() 从构造函数中指定的文件对象里读取封存好的对象，重建其中特定对象的层次结构并返回。封存对象以外的其他字节将被忽略。 persistent_load(pid) 默认抛出 UnpicklingError 异常。如果定义了此方法，persistent_load() 应当返回持久化 ID pid 所指定的对象。 如果遇到无效的持久化 ID，则应当引发 UnpicklingError。参阅 持久化外部对象 获取详情和使用示例。 find_class(module, name) 如有必要，导入 module 模块并返回其中名叫 name 的对象，其中 module 和 name 参数都是 str 对象。注意，不要被这个函数的名字迷惑， find_class() 同样可以用来导入函数。子类可以重载此方法，来控制加载对象的类型和加载对象的方式，从而尽可能降低安全风险。参阅 限制全局变量 获取更详细的信息。引发一个 审核事件 pickle.find_class 附带参数 module、name。 PickleBufferclass pickle.PickleBuffer(buffer) 缓冲区的包装器 (wrapper)，缓冲区中包含着可封存的数据。buffer 必须是一个 buffer-providing 对象，比如 bytes-like object 或多维数组。 PickleBuffer 本身就可以生成缓冲区对象，因此可以将其传递给需要缓冲区生成器的其他 API，比如 memoryview。 PickleBuffer 对象只能用 pickle 版本 5 及以上协议进行序列化。它们符合 带外序列化 的条件。 3.8 新版功能. raw() 返回该缓冲区底层内存区域的 memoryview。 返回的对象是一维的、C 连续布局的 memoryview，格式为 B (无符号字节)。 如果缓冲区既不是 C 连续布局也不是 Fortran 连续布局的，则抛出 BufferError 异常。 release() 释放由 PickleBuffer 占用的底层缓冲区。 可以被封存/解封的对象下列类型可以被封存： None、True 和 False 整数、浮点数、复数 str、byte、bytearray 只包含可封存对象的集合，包括 tuple、list、set 和 dict 定义在模块最外层的函数（使用 def 定义，lambda 函数则不可以） 定义在模块最外层的内置函数 定义在模块最外层的类 某些类实例，这些类的 __dict__ 属性值或 __getstate__() 函数的返回值可以被封存（详情参阅 封存类实例 这一段）。 尝试封存不能被封存的对象会抛出 PicklingError 异常，异常发生时，可能有部分字节已经被写入指定文件中。尝试封存递归层级很深的对象时，可能会超出最大递归层级限制，此时会抛出 RecursionError 异常，可以通过 sys.setrecursionlimit() 调整递归层级，不过请谨慎使用这个函数，因为可能会导致解释器崩溃。 注意 函数封存 函数（内置函数或用户自定义函数）在被封存时，引用的是函数全名。2 这意味着只有函数所在的模块名，与函数名会被封存，函数体及其属性不会被封存。因此，在解封的环境中，函数所属的模块必须是可以被导入的，而且模块必须包含这个函数被封存时的名称，否则会抛出异常。 类封存 类也只封存名称，所以在解封环境中也有和函数相同的限制。注意，类体及其数据不会被封存，所以在下面的例子中类属性 attr 不会存在于解封后的环境中： 1234class Foo: attr = 'A class attribute'picklestring = pickle.dumps(Foo) 类的实例封存 在封存类的实例时，其类体和类数据不会跟着实例一起被封存，只有实例数据会被封存。这样设计是有目的的，在将来修复类中的错误、给类增加方法之后，仍然可以载入原来版本类实例的封存数据来还原该实例。如果你准备长期使用一个对象，可能会同时存在较多版本的类体，可以为对象添加版本号，这样就可以通过类的 __setstate__() 方法将老版本转换成新版本 封存类实例 通常，使一个实例可被封存不需要附加任何代码。Pickle 默认会通过 Python 的内省机制获得实例的类及属性。而当实例解封时，它的 __init__() 方法通常 不会 被调用。其默认动作是：先创建一个未初始化的实例，然后还原其属性，下面的代码展示了这种行为的实现机制： 1234567def save(obj): return (obj.__class__, obj.__dict__)def load(cls, attributes): obj = cls.__new__(cls) obj.__dict__.update(attributes) return obj 类可以改变默认行为，只需定义以下一种或几种特殊方法： object.__getnewargs_ex__() 对于使用第 2 版或更高版协议的 pickle，实现了 __getnewargs_ex__() 方法的类可以控制在解封时传给 __new__() 方法的参数。本方法必须返回一对 (args, kwargs) 用于构建对象，其中 args 是表示位置参数的 tuple，而 kwargs 是表示命名参数的 dict。它们会在解封时传递给 __new__() 方法。如果类的 __new__() 方法只接受关键字参数，则应当实现这个方法。否则，为了兼容性，更推荐实现 __getnewargs__() 方法。在 3.6 版更改: __getnewargs_ex__() 现在可用于第 2 和第 3 版协议。 object.__getnewargs__() 这个方法与上一个 __getnewargs_ex__() 方法类似，但仅支持位置参数。它要求返回一个 tuple 类型的 args，用于解封时传递给 __new__() 方法。如果定义了 __getnewargs_ex__()，那么 __getnewargs__() 就不会被调用。在 3.6 版更改: 在 Python 3.6 前，第 2、3 版协议会调用 __getnewargs__()，更高版本协议会调用 __getnewargs_ex__()。 object.__getstate__() 类还可以进一步控制其实例的封存过程。如果类定义了 __getstate__()，它就会被调用，其返回的对象是被当做实例内容来封存的，否则封存的是实例的 dict。如果 __getstate__() 未定义，实例的 __dict__ 会被照常封存。 object.__setstate__(state) 当解封时，如果类定义了 __setstate__()，就会在已解封状态下调用它。此时不要求实例的 state 对象必须是 dict。没有定义此方法的话，先前封存的 state 对象必须是 dict，且该 dict 内容会在解封时赋给新实例的 dict。 ==备注==： 如果 __getstate__() 返回 False，那么在解封时就不会调用 __setstate__() 方法。 object.__reduce__() 该接口当前定义如下。__reduce__() 方法不带任何参数，并且应返回字符串或最好返回一个元组（返回的对象通常称为“reduce 值”）。如果返回字符串，该字符串会被当做一个全局变量的名称。它应该是对象相对于其模块的本地名称，pickle 模块会搜索模块命名空间来确定对象所属的模块。这种行为常在单例模式使用。如果返回的是元组，则应当包含 2 到 6 个元素，可选元素可以省略或设置为 None。每个元素代表的意义如下：一个可调用对象，该对象会在创建对象的最初版本时调用。可调用对象的参数，是一个元组。如果可调用对象不接受参数，必须提供一个空元组。可选元素，用于表示对象的状态，将被传给前述的 __setstate__() 方法。 如果对象没有此方法，则这个元素必须是字典类型，并会被添加至 __dict__ 属性中。可选元素，一个返回连续项的迭代器（而不是序列）。这些项会被 obj.append(item) 逐个加入对象，或被 obj.extend(list_of_items) 批量加入对象。这个元素主要用于 list 的子类，也可以用于那些正确实现了 append() 和 extend() 方法的类。（具体是使用 append() 还是 extend() 取决于 pickle 协议版本以及待插入元素的项数，所以这两个方法必须同时被类支持。）可选元素，一个返回连续键值对的迭代器（而不是序列）。这些键值对将会以 obj[key] = value 的方式存储于对象中。该元素主要用于 dict 子类，也可以用于那些实现了 __setitem__() 的类。可选元素，一个带有 (obj, state) 签名的可调用对象。该可调用对象允许用户以编程方式控制特定对象的状态更新行为，而不是使用 obj 的静态 __setstate__() 方法。如果此处不是 None，则此可调用对象的优先级高于 obj 的 __setstate__()。3.8 新版功能: 新增了元组的第 6 项，可选元素 (obj, state)。 object.__reduce_ex__(protocol) 作为替代选项，也可以实现 __reduce_ex__() 方法。 此方法的唯一不同之处在于它应接受一个整型参数用于指定协议版本。 如果定义了这个函数，则会覆盖 __reduce__() 的行为。 此外，__reduce__() 方法会自动成为扩展版方法的同义词。 这个函数主要用于为以前的 Python 版本提供向后兼容的 reduce 值。 持久化外部对象为了获取对象持久化的利益， pickle 模块支持引用已封存数据流之外的对象。 这样的对象是通过一个持久化 ID 来引用的，它应当是一个由字母数字类字符组成的字符串 (对于第 0 版协议) 5 或是一个任意对象 (用于任意新版协议)。 pickle 模块不提供对持久化 ID 的解析工作，它将解析工作分配给用户定义的方法，分别是 pickler 中的 persistent_id() 方法和 unpickler 中的 persistent_load() 方法。 要通过持久化 ID 将外部对象封存，必须在 pickler 中实现 persistent_id() 方法，该方法接受需要被封存的对象作为参数，返回一个 None 或返回该对象的持久化 ID。如果返回 None，该对象会被按照默认方式封存为数据流。如果返回字符串形式的持久化 ID，则会封存这个字符串并加上一个标记，这样 unpickler 才能将其识别为持久化 ID。 要解封外部对象，Unpickler 必须实现 persistent_load() 方法，接受一个持久化 ID 对象作为参数并返回一个引用的对象。 下面是一个全面的例子，展示了如何使用持久化 ID 来封存外部对象。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687# Simple example presenting how persistent ID can be used to pickle# external objects by reference.import pickleimport sqlite3from collections import namedtuple# Simple class representing a record in our database.MemoRecord = namedtuple("MemoRecord", "key, task")class DBPickler(pickle.Pickler): def persistent_id(self, obj): # Instead of pickling MemoRecord as a regular class instance, we emit a # persistent ID. if isinstance(obj, MemoRecord): # Here, our persistent ID is simply a tuple, containing a tag and a # key, which refers to a specific record in the database. return ("MemoRecord", obj.key) else: # If obj does not have a persistent ID, return None. This means obj # needs to be pickled as usual. return Noneclass DBUnpickler(pickle.Unpickler): def __init__(self, file, connection): super().__init__(file) self.connection = connection def persistent_load(self, pid): # This method is invoked whenever a persistent ID is encountered. # Here, pid is the tuple returned by DBPickler. cursor = self.connection.cursor() type_tag, key_id = pid if type_tag == "MemoRecord": # Fetch the referenced record from the database and return it. cursor.execute("SELECT * FROM memos WHERE key=?", (str(key_id),)) key, task = cursor.fetchone() return MemoRecord(key, task) else: # Always raises an error if you cannot return the correct object. # Otherwise, the unpickler will think None is the object referenced # by the persistent ID. raise pickle.UnpicklingError("unsupported persistent object")def main(): import io import pprint # Initialize and populate our database. conn = sqlite3.connect(":memory:") cursor = conn.cursor() cursor.execute("CREATE TABLE memos(key INTEGER PRIMARY KEY, task TEXT)") tasks = ( 'give food to fish', 'prepare group meeting', 'fight with a zebra', ) for task in tasks: cursor.execute("INSERT INTO memos VALUES(NULL, ?)", (task,)) # Fetch the records to be pickled. cursor.execute("SELECT * FROM memos") memos = [MemoRecord(key, task) for key, task in cursor] # Save the records using our custom DBPickler. file = io.BytesIO() DBPickler(file).dump(memos) print("Pickled records:") pprint.pprint(memos) # Update a record, just for good measure. cursor.execute("UPDATE memos SET task='learn italian' WHERE key=1") # Load the records from the pickle data stream. file.seek(0) memos = DBUnpickler(file, conn).load() print("Unpickled records:") pprint.pprint(memos)if __name__ == '__main__': main() 自定义封存 Dispatch 表如果想对某些类进行自定义封存，而又不想在类中增加用于封存的代码，就可以创建带有特殊 dispatch 表的 pickler。 在 copyreg 模块的 copyreg.dispatch_table 中定义了全局 dispatch 表。因此，可以使用 copyreg.dispatch_table 修改后的副本作为自有 dispatch 表。 例如 1234f = io.BytesIO()p = pickle.Pickler(f)p.dispatch_table = copyreg.dispatch_table.copy()p.dispatch_table[SomeClass] = reduce_SomeClass 创建了一个带有自有 dispatch 表的 pickle.Pickler 实例，它可以对 SomeClass 类进行特殊处理。另外，下列代码 12345class MyPickler(pickle.Pickler): dispatch_table = copyreg.dispatch_table.copy() dispatch_table[SomeClass] = reduce_SomeClassf = io.BytesIO()p = MyPickler(f) 完成了相同的操作，但所有 MyPickler 的实例都会共用同一份 dispatch 表。使用 copyreg 模块实现的等效代码是 123copyreg.pickle(SomeClass, reduce_SomeClass)f = io.BytesIO()p = pickle.Pickler(f) 处理有状态的对象 下面的示例展示了如何修改类在封存时的行为。其中 TextReader 类打开了一个文本文件，每次调用其 readline() 方法则返回行号和该行的字符。 在封存这个 TextReader 的实例时，除了 文件对象，其他属性都会被保存。 当解封实例时，需要重新打开文件，然后从上次的位置开始继续读取。实现这些功能需要实现 __setstate__() 和 __getstate__() 方法。 123456789101112131415161718192021222324252627282930313233343536class TextReader: """Print and number lines in a text file.""" def __init__(self, filename): self.filename = filename self.file = open(filename) self.lineno = 0 def readline(self): self.lineno += 1 line = self.file.readline() if not line: return None if line.endswith('\n'): line = line[:-1] return "%i: %s" % (self.lineno, line) def __getstate__(self): # Copy the object's state from self.__dict__ which contains # all our instance attributes. Always use the dict.copy() # method to avoid modifying the original state. state = self.__dict__.copy() # Remove the unpicklable entries. del state['file'] return state def __setstate__(self, state): # Restore instance attributes (i.e., filename and lineno). self.__dict__.update(state) # Restore the previously opened file's state. To do so, we need to # reopen it and read from it until the line count is restored. file = open(self.filename) for _ in range(self.lineno): file.readline() # Finally, save the file. self.file = file 使用方法如下所示： 12345678&gt;&gt;&gt; reader = TextReader("hello.txt")&gt;&gt;&gt; reader.readline()'1: Hello world!'&gt;&gt;&gt; reader.readline()'2: I am line number two.'&gt;&gt;&gt; new_reader = pickle.loads(pickle.dumps(reader))&gt;&gt;&gt; new_reader.readline()'3: Goodbye!' 除了Dispatcher,类型和函数及其他对象自定义规约 有时，dispatch_table 可能不够灵活。 特别是当我们想要基于对象类型以外的其他规则来对封存进行定制，或是当我们想要对函数和类的封存进行定制的时候。 对于那些情况，可能要基于 Pickler 类进行子类化并实现 reducer_override() 方法。 此方法可返回任意的归约元组 (参见 __reduce__())。 它也可以选择返回 NotImplemented 来回退到传统行为。 如果同时定义了 dispatch_table 和 reducer_override()，则 reducer_override() 方法具有优先权。 注解：出于性能理由，可能不会为以下对象调用 reducer_override(): None, True, False, 以及 int, float, bytes, str, dict, set, frozenset, list 和 tuple 的具体实例。 以下是一个简单的例子，其中我们允许封存并重新构建一个给定的类: 123456789101112131415161718192021222324252627import ioimport pickleclass MyClass: my_attribute = 1class MyPickler(pickle.Pickler): def reducer_override(self, obj): """Custom reducer for MyClass.""" if getattr(obj, "__name__", None) == "MyClass": return type, (obj.__name__, obj.__bases__, &#123;'my_attribute': obj.my_attribute&#125;) else: # For any other object, fallback to usual reduction return NotImplementedf = io.BytesIO()p = MyPickler(f)p.dump(MyClass)del MyClassunpickled_class = pickle.loads(f.getvalue())assert isinstance(unpickled_class, type)assert unpickled_class.__name__ == "MyClass"assert unpickled_class.my_attribute == 1 外部缓冲区在某些场景中，pickle 模块会被用来传输海量的数据。 因此，最小化内存复制次数以保证性能和节省资源是很重要的。 但是 pickle 模块的正常运作会将图类对象结构转换为字节序列流，因此在本质上就要从封存流中来回复制数据。 如果 provider (待传输对象类型的实现) 和 consumer (通信系统的实现) 都支持 pickle 第 5 版或更高版本所提供的外部传输功能，则此约束可以被撤销。 提供方API大的待封存数据对象必须实现协议 5 及以上版本专属的 __reduce_ex__() 方法，该方法将为任意大的数据返回一个 PickleBuffer 实例（而不是 bytes 对象等）。 PickleBuffer 对象会 表明 底层缓冲区可被用于外部数据传输。 那些对象仍将保持与 pickle 模块的正常用法兼容。 但是，使用方也可以选择告知 pickle 它们将自行处理那些缓冲区。 使用方API当序列化一个对象图时，通信系统可以启用对所生成 PickleBuffer 对象的定制处理。 发送端需要传递 buffer_callback 参数到 Pickler (或是到 dump() 或 dumps() 函数)，该回调函数将在封存对象图时附带每个所生成的 PickleBuffer 被调用。 由 buffer_callback 所累积的缓冲区的数据将不会被拷贝到 pickle 流，而是仅插入一个简单的标记。 接收端需要传递 buffers 参数到 Unpickler (或是到 load() 或 loads() 函数)，其值是一个由缓冲区组成的可迭代对象，它会被传递给 buffer_callback。 该可迭代对象应当按其被传递给 buffer_callback 时的顺序产生缓冲区。 这些缓冲区将提供对象重构造器所期望的数据，对这些数据的封存产生了原本的 PickleBuffer 对象。 在发送端和接受端之间，通信系统可以自由地实现它自己用于外部缓冲区的传输机制。 潜在的优化包括使用共享内存或基于特定数据类型的压缩等。 实例:下面是一个小例子，在其中我们实现了一个 bytearray 的子类，能够用于外部缓冲区封存: 1234567891011121314151617181920class ZeroCopyByteArray(bytearray): def __reduce_ex__(self, protocol): if protocol &gt;= 5: return type(self)._reconstruct, (PickleBuffer(self),), None else: # PickleBuffer is forbidden with pickle protocols &lt;= 4. return type(self)._reconstruct, (bytearray(self),) @classmethod def _reconstruct(cls, obj): with memoryview(obj) as m: # Get a handle over the original buffer object obj = m.obj if type(obj) is cls: # Original buffer object is a ZeroCopyByteArray, return it # as-is. return obj else: return cls(obj) 重构造器 (_reconstruct 类方法) 会在缓冲区的提供对象具有正确类型时返回该对象。 在此小示例中这是模拟零拷贝行为的便捷方式。 在使用方，我们可以按通常方式封存那些对象，它们在反序列化时将提供原始对象的一个副本: 12345b = ZeroCopyByteArray(b"abc")data = pickle.dumps(b, protocol=5)new_b = pickle.loads(data)print(b == new_b) # Trueprint(b is new_b) # False: a copy was made 但是如果我们传入 buffer_callback 然后在反序列化时给回累积的缓冲区，我们就能够取回原始对象: 123456b = ZeroCopyByteArray(b"abc")buffers = []data = pickle.dumps(b, protocol=5, buffer_callback=buffers.append)new_b = pickle.loads(data, buffers=buffers)print(b == new_b) # Trueprint(b is new_b) # True: no copy was made 这个例子受限于 bytearray 会自行分配内存这一事实：你无法基于另一个对象的内存创建 bytearray 的实例。 但是，第三方数据类型例如 NumPy 数组则没有这种限制，允许在单独进程或系统间传输时使用零拷贝的封存（或是尽可能少地拷贝） 。 参见：PEP 574 – 带有外部数据缓冲区的 pickle 协议 5 限制全局变量默认情况下，解封将会导入在 pickle 数据中找到的任何类或函数。 对于许多应用来说，此行为是不可接受的，因为它会允许解封器导入并发起调用任意代码。 只须考虑当这个手工构建的 pickle 数据流被加载时会做什么: 1234&gt;&gt;&gt; import pickle&gt;&gt;&gt; pickle.loads(b"cos\nsystem\n(S'echo hello world'\ntR.")hello world0 在这个例子里，解封器导入 os.system() 函数然后应用字符串参数 “echo hello world”。 虽然这个例子不具攻击性，但是不难想象别人能够通过此方式对你的系统造成损害。 出于这样的理由，你可能会希望通过定制 Unpickler.find_class() 来控制要解封的对象。 与其名称所提示的不同，Unpickler.find_class() 会在执行对任何全局对象（例如一个类或一个函数）的请求时被调用。 因此可以完全禁止全局对象或是将它们限制在一个安全的子集中。 下面的例子是一个解封器，它只允许某一些安全的来自 builtins 模块的类被加载: 12345678910111213141516171819202122232425import builtinsimport ioimport picklesafe_builtins = &#123; 'range', 'complex', 'set', 'frozenset', 'slice',&#125;class RestrictedUnpickler(pickle.Unpickler): def find_class(self, module, name): # Only allow safe classes from builtins. if module == "builtins" and name in safe_builtins: return getattr(builtins, name) # Forbid everything else. raise pickle.UnpicklingError("global '%s.%s' is forbidden" % (module, name))def restricted_loads(s): """Helper function analogous to pickle.loads().""" return RestrictedUnpickler(io.BytesIO(s)).load() 我们这个解封器的一个示例用法所达成的目标: 123456789101112&gt;&gt;&gt; restricted_loads(pickle.dumps([1, 2, range(15)]))[1, 2, range(0, 15)]&gt;&gt;&gt; restricted_loads(b"cos\nsystem\n(S'echo hello world'\ntR.")Traceback (most recent call last): ...pickle.UnpicklingError: global 'os.system' is forbidden&gt;&gt;&gt; restricted_loads(b'cbuiltins\neval\n'... b'(S\'getattr(__import__("os"), "system")'... b'("echo hello world")\'\ntR.')Traceback (most recent call last): ...pickle.UnpicklingError: global 'builtins.eval' is forbidden 正如我们这个例子所显示的，对于允许解封的对象你必须要保持谨慎。 因此如果要保证安全，你可以考虑其他选择例如 xmlrpc.client 中的编组 API 或是第三方解决方案。 性能较新版本的 pickle 协议（第 2 版或更高）具有针对某些常见特性和内置类型的高效二进制编码格式。 此外，pickle 模块还拥有一个以 C 编写的透明优化器。 实例 对于最简单的代码，请使用 dump() 和 load() 函数。 123456789101112import pickle# An arbitrary collection of objects supported by pickle.data = &#123; 'a': [1, 2.0, 3, 4+6j], 'b': ("character string", b"byte string"), 'c': &#123;None, True, False&#125;&#125;with open('data.pickle', 'wb') as f: # Pickle the 'data' dictionary using the highest protocol available. pickle.dump(data, f, pickle.HIGHEST_PROTOCOL) 以下示例读取之前封存的数据。 123456import picklewith open('data.pickle', 'rb') as f: # The protocol version used is detected automatically, so we do not # have to specify it. data = pickle.load(f)]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>standard_library</tag>
        <tag>pickle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python standard library array type]]></title>
    <url>%2F2020%2F01%2F13%2Fpython-standard-library-array-type%2F</url>
    <content type="text"><![CDATA[每日一词: underdog 英 [ˈʌndədɒg] 美 [ˈʌndərdɔg] n.失败者； 退居下风的人； 受压迫者； 打败了的选手 复数： underdogs 这个词来自1887年出现，原指在斗狗比赛中战败的狗。后来词义引申至人，指的是各类竞赛和对碰中不被看好的一方，或是指处在逆境中的人和团体。 被看好的一方，即Topdog，从来不缺喝彩和支持。而Underdog的路则注定孤独许多。不被人看好，较少人支持。 所幸的是，正如倪匡先生感言：太多的时候，孤独最好。 若能与孤独为师,又何须担心underdog呢？ python 标准库学习 array此模块定义了一种对象类型，可以紧凑地表示基本类型值的数组：字符、整数、浮点数等。 数组属于序列类型，其行为与列表非常相似，不同之处在于其中存储的对象类型是受限的。 类型在对象创建时使用单个字符的 类型码 来指定。 已定义的类型码如下： 类型码 C 类型 Python 类型 以字节表示的最小尺寸 注释 &#39;b&#39; signed char int 1 &#39;B&#39; unsigned char int 1 &#39;u&#39; Py_UNICODE Unicode 字符 2 (1) &#39;h&#39; signed short int 2 &#39;H&#39; unsigned short int 2 &#39;i&#39; signed int int 2 &#39;I&#39; 无符号整型 int 2 &#39;l&#39; signed long int 4 &#39;L&#39; 无符号长整型 int 4 &#39;q&#39; signed long long int 8 &#39;Q&#39; 无符号 long long int 8 &#39;f&#39; float float 4 &#39;d&#39; double float 8 ==注释== ‘u’类型码在python3已经被废除,默认python的字符串就是unicode字符 类 class array.array(typecode[, initializer]) 一个包含由 typecode 限制类型的条目的新数组，并由可选的 initializer 值进行初始化，该值必须为一个列表、bytes-like object 或包含正确类型元素的可迭代对象。如果给定一个列表或字符串，该 initializer 会被传给新数组的 fromlist(), frombytes() 或 fromunicode() 方法（见下文）以将初始条目添加到数组中。 否则会将可迭代对象作为 initializer 传给 extend() 方法。引发一个 审核事件 array.__new__ 附带参数 typecode, initializer。 属性 array.typecodes 包含所有可用类型码的字符串。 123&gt;&gt;&gt; import array&gt;&gt;&gt; array.typecodes&apos;bBuhHiIlLqQfd&apos; 数组对象支持普通的序列操作如索引、切片、拼接和重复等。 当使用切片赋值时，所赋的值必须为具有相同类型码的数组对象；所有其他情况都将引发 TypeError。 数组对象也实现了缓冲区接口，可以用于所有支持 字节类对象 的场合。 函数以下数据项和方法也受到支持： array.typecode 用于创建数组的类型码字符。 array.itemsize 在内部表示中一个数组项的字节长度。 array.append(x) 添加一个值为 x 的新项到数组末尾。 array.buffer_info() 返回一个元组 (address, length) 以给出用于存放数组内容的缓冲区元素的当前内存地址和长度。 以字节表示的内存缓冲区大小可通过 array.buffer_info()[1] * array.itemsize 来计算。 这在使用需要内存地址的低层级（因此不够安全） I/O 接口时会很有用，例如某些 ioctl() 操作。 只要数组存在并且没有应用改变长度的操作，返回数值就是有效的。注解 当在 C 或 C++ 编写的代码中使用数组对象时（这是有效使用此类信息的唯一方式），使用数组对象所支持的缓冲区接口更为适宜。 此方法仅保留用作向下兼容，应避免在新代码中使用。 缓冲区接口的文档参见 缓冲协议。 array.byteswap() “字节对调”所有数组项。 此方法只支持大小为 1, 2, 4 或 8 字节的值；对于其他值类型将引发 RuntimeError。 它适用于从不同字节序机器所生成的文件中读取数据的情况。 array.count(x) 返回 x 在数组中的出现次数。 array.extend(iterable) 将来自 iterable 的项添加到数组末尾。 如果 iterable 是另一个数组，它必须具有 完全 相同的类型码；否则将引发 TypeError。 如果 iterable 不是一个数组，则它必须为可迭代对象并且其元素必须为可添加到数组的适当类型。 array.frombytes(s) 添加来自字符串的项，将字符串解读为机器值的数组（相当于使用 fromfile() 方法从文件中读取数据）。3.2 新版功能: fromstring() 重命名为 frombytes() 以使其含义更清晰。 array.fromfile(f, n) 从 file object f 中读取 n 项（解读为机器值）并将它们添加到数组末尾。 如果可读取数据少于 n 项则将引发 EOFError，但有效的项仍然会被插入数组。 f 必须为一个真实的内置文件对象；不支持带有 read() 方法的其它对象。 array.fromlist(list) 添加来自 list 的项。 这等价于 for x in list: a.append(x)，区别在于如果发生类型错误，数组将不会被改变。 array.fromstring() frombytes() 的已弃用别名。Deprecated since version 3.2, will be removed in version 3.9. array.fromunicode(s) 使用来自给定 Unicode 字符串的数组扩展数组。 数组必须是类型为 &#39;u&#39; 的数组；否则将引发 ValueError。 请使用 array.frombytes(unicodestring.encode(enc)) 来将 Unicode 数据添加到其他类型的数组。 array.index(x) 返回最小的 i 使得 i 为 x 在数组中首次出现的序号。 array.insert(i, x) 将值 x 作为新项插入数组的 i 位置之前。 负值将被视为相对于数组末尾的位置。 array.pop([i]) 从数组中移除序号为 i 的项并将其返回。 可选参数值默认为 -1，因此默认将移除并返回末尾项。 array.remove(x) 从数组中移除首次出现的 x。 array.reverse() 反转数组中各项的顺序。 array.tobytes() 将数组转换为一个机器值数组并返回其字节表示（即相当与通过 tofile() 方法写入到文件的字节序列。）3.2 新版功能: tostring() 被重命名为 tobytes() 以使其含义更清晰。 array.tofile(f) 将所有项（作为机器值）写入到 file object f。 array.tolist() 将数组转换为包含相同项的普通列表。 array.tostring() tobytes() 的已弃用别名。Deprecated since version 3.2, will be removed in version 3.9. array.tounicode() 将数组转换为一个 Unicode 字符串。 数组必须是类型为 &#39;u&#39; 的数组；否则将引发 ValueError。 请使用 array.tobytes().decode(enc) 来从其他类型的数组生成 Unicode 字符串。 当一个数组对象被打印或转换为字符串时，它会表示为 array(typecode, initializer)。 如果数组为空则 initializer 会被省略，否则如果 typecode 为 &#39;u&#39; 则它是一个字符串，否则它是一个数字列表。 使用 eval() 保证能将字符串转换回具有相同类型和值的数组，只要 array 类已通过 from array import array 被引入。 例如: 12345from array import arrayarray('l')array('u', 'hello \u2641')array('l', [1, 2, 3, 4, 5])array('d', [1.0, 2.0, 3.14]) 更高效数组处理的可以详见 numpy 库 总结原来python标准库里就有专门操作array对象的方法,这里我理解array和list的区别在于,list里包含的元素可以是任意数据类型,处理数据的时候不是很方便,而array里的数据类型是一致的,这样处理数据效率更高。]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>standard_library</tag>
        <tag>array</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python standard library collections.abc]]></title>
    <url>%2F2020%2F01%2F12%2Fpython-standard-library-collections-abc%2F</url>
    <content type="text"><![CDATA[python 标准库 之 collections.abc每日一词: wrong adj. 不道德的, 不正当的, 不义的 不确实的, 不正确的, 错误的 不合要求的, 不适合的, 并非合意的 有故障, 有毛病 adv. 方式或方向错误地; 错误地; 结果错误地 n. 罪过, 过失, 罪恶 不义的行为, 不公正的事 时 态: wronged, wronging, wrongs名 词: wronger副 词: wrongly名 词: wrongness 词语： confound right and wrong 混淆是非，黑白不分 get one wrong 误会某人；误会 right or wrongadv. 不管如何 something wrong with …出了毛病；…有问题；…不对头 python 标准库学习之 抽象基类 collection.abc众所周知,python3中所有类默认继承自object类,意味着父类中所有的方法,子类都继承了。 我个人理解,抽象基类是无法被实例化的,只能子类实现 参考文档 源代码： Lib/_collections_abc.py 该模块定义了一些 抽象基类，它们可用于判断一个具体类是否具有某一特定的接口；例如，这个类是否可哈希，或其是否为映射类。 模块里方法一览,摘自源码 12345678910__all__ = ["Awaitable", "Coroutine", "AsyncIterable", "AsyncIterator", "AsyncGenerator", "Hashable", "Iterable", "Iterator", "Generator", "Reversible", "Sized", "Container", "Callable", "Collection", "Set", "MutableSet", "Mapping", "MutableMapping", "MappingView", "KeysView", "ItemsView", "ValuesView", "Sequence", "MutableSequence", "ByteString", ] 容器抽象基类 这个容器模块提供了以下 ABCs: 抽象基类 继承自 抽象方法 Mixin 方法 Container __contains__ Hashable __hash__ Iterable __iter__ Iterator Iterable __next__ __iter__ Reversible Iterable __reversed__ Generator Iterator send, throw close, __iter__, __next__ Sized __len__ Callable __call__ Collection Sized, Iterable, Container __contains__, __iter__, __len__ Sequence Reversible, Collection __getitem__, __len__ __contains__, __iter__, __reversed__, index, and count MutableSequence Sequence __getitem__, __setitem__, __delitem__, __len__, insert 继承自 Sequence 的方法，以及 append, reverse, extend, pop, remove，和 __iadd__ ByteString Sequence __getitem__, __len__ 继承自 Sequence 的方法 Set Collection __contains__, __iter__, __len__ __le__, __lt__, __eq__, __ne__, __gt__, __ge__, __and__, __or__, __sub__, __xor__, and isdisjoint MutableSet Set __contains__, __iter__, __len__, add, discard 继承自 Set 的方法以及 clear, pop, remove, __ior__, __iand__, __ixor__，和 __isub__ Mapping Collection __getitem__, __iter__, __len__ __contains__, keys, items, values, get, __eq__, and __ne__ MutableMapping Mapping __getitem__, __setitem__, __delitem__, __iter__, __len__ 继承自 Mapping 的方法以及 pop, popitem, clear, update，和 setdefault MappingView Sized __len__ ItemsView MappingView, Set __contains__, __iter__ KeysView MappingView, Set __contains__, __iter__ ValuesView MappingView, Collection __contains__, __iter__ Awaitable __await__ Coroutine Awaitable send, throw close AsyncIterable __aiter__ AsyncIterator AsyncIterable __anext__ __aiter__ AsyncGenerator AsyncIterator asend, athrow aclose, __aiter__, __anext__ 类 class collections.abc.Container class collections.abc.Hashable class collections.abc.Sized class collections.abc.Callable 分别提供了 __contains__(), __hash__(), __len__() 和 __call__() 方法的抽象基类。 class collections.abc.Iterable 提供了 __iter__() 方法的抽象基类。使用 isinstance(obj, Iterable) 可以检测一个类是否已经注册到了 Iterable 或者实现了 __iter__() 函数，但是无法检测这个类是否能够使用 __getitem__() 方法进行迭代。检测一个对象是否是 iterable 的唯一可信赖的方法是调用 iter(obj)。 class collections.abc.Collection 集合了 Sized 和 Iterable 类的抽象基类。 class collections.abc.Iterator 提供了 __iter__() 和 __next__() 方法的抽象基类。参见 iterator 的定义。 class collections.abc.Reversible 为可迭代类提供了 __reversed__() 方法的抽象基类。3.6 新版功能. class collections.abc.Generator 生成器类，实现了 PEP 342 中定义的协议，继承并扩展了迭代器，提供了 send(), throw() 和 close() 方法。参见 generator 的定义。3.5 新版功能. class collections.abc.Sequence class collections.abc.MutableSequence class collections.abc.ByteString 只读且可变的序列 sequences 的抽象基类。实现笔记：一些混入（Maxin）方法比如 __iter__(), __reversed__() 和 index() 会重复调用底层的 __getitem__() 方法。因此，如果实现的 __getitem__() 是常数级访问速度，那么相应的混入方法会有一个线性的表现；然而，如果底层方法是线性实现（例如链表），那么混入方法将会是平方级的表现，这也许就需要被重构了。在 3.5 版更改: index() 方法支持 stop 和 start 参数。 class collections.abc.Set class collections.abc.MutableSet 只读且可变的集合的抽象基类。 class collections.abc.Mapping class collections.abc.MutableMapping 只读且可变的映射 mappings 的抽象基类。 class collections.abc.MappingView class collections.abc.ItemsView class collections.abc.KeysView class collections.abc.ValuesView 映射及其键和值的视图 views 的抽象基类。 class collections.abc.Awaitable 为可等待对象 awaitable 提供的类，可以被用于 await 表达式中。习惯上必须实现 __await__() 方法。协程对象 Coroutine 和 Coroutine 抽象基类的实例都是这个抽象基类的实例。 class collections.abc.Coroutine 用于协程兼容类的抽象基类。实现了如下定义在 协程对象: 里的方法： send()，throw() 和 close()。通常的实现里还需要实现 __await__() 方法。所有的 Coroutine 实例都必须是 Awaitable 实例。参见 coroutine 的定义。注解 在 CPython 里，基于生成器的协程（使用 types.coroutine() 或 asyncio.coroutine() 包装的生成器）都是 可等待对象，即使他们不含有 __await__() 方法。使用 isinstance(gencoro, Coroutine) 来检测他们会返回 False。要使用 inspect.isawaitable() 来检测他们。 class collections.abc.AsyncIterable 提供了 __aiter__ 方法的抽象基类。参见 asynchronous iterable 的定义。3.5 新版功能. class collections.abc.AsyncIterator 提供了 __aiter__ 和 __anext__ 方法的抽象基类。参见 asynchronous iterator 的定义。3.5 新版功能. class collections.abc.AsyncGenerator 为异步生成器类提供的抽象基类，这些类实现了定义在 PEP 525 和 PEP 492 里的协议。 这些抽象基类让我们可以确定类和示例拥有某些特定的函数，例如： 123size = Noneif isinstance(myvar, collections.abc.Sized): size = len(myvar) 有些抽象基类也可以用作混入类（mixin），这可以更容易地开发支持容器 API 的类。例如，要写一个支持完整 Set API 的类，只需要提供下面这三个方法： __contains__(), __iter__() 和 __len__()。抽象基类会补充上其余的方法，比如 __and__() 和 isdisjoint(): 123456789101112131415161718192021class ListBasedSet(collections.abc.Set): ''' Alternate set implementation favoring space over speed and not requiring the set elements to be hashable. ''' def __init__(self, iterable): self.elements = lst = [] for value in iterable: if value not in lst: lst.append(value) def __iter__(self): return iter(self.elements) def __contains__(self, value): return value in self.elements def __len__(self): return len(self.elements)s1 = ListBasedSet('abcdef')s2 = ListBasedSet('defghi')overlap = s1 &amp; s2 # The __and__() method is supported automatically 当把 Set 和 MutableSet 用作混入类时需注意： 由于某些集合操作会创建新集合，默认的混入方法需要一种从可迭代对象里创建新实例的方法。假如其类构造函数签名形如 ClassName(iterable) ，则其会调用一个内部的类方法 _from_iterable()，其中调用了 cls(iterable) 来生成一个新集合。如果这个 Set 混入类在类中被使用，但其构造函数的签名却是不同的形式，那么你就需要重载 _from_iterable() 方法，将其编写成一个类方法，并且它能够从可迭代对象参数中构造一个新实例。 重载比较符时时（想必是为了速度，因为其语义都是固定的），只需要重定义 __le__() 和 __ge__() 函数，然后其他的操作会自动跟进。 混入集合类 Set 提供了一个 _hash() 方法为集合计算哈希值，然而， __hash__() 函数却没有被定义，因为并不是所有集合都是可哈希并且不可变的。为了使用混入类为集合添加哈希能力，可以同时继承 Set() 和 Hashable() 类，然后定义 __hash__ = Set._hash。 总结我看了官方文档的描述,一头雾水。下面就我个人理解谈谈这个模块。 abc模块应用的场景 1. 判定某个对象的类型 2. 强制子类实现某些父类方法]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>standard_library</tag>
        <tag>collections.abc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python standard library context-manager-types]]></title>
    <url>%2F2020%2F01%2F11%2Fpython-standard-library-context-manager-types%2F</url>
    <content type="text"><![CDATA[python 标准库 上下文管理类型每日一词: intresting : US [‘ɪntrəstɪŋ] UK [‘ɪntrəstɪŋ] adj.有趣的；有吸引力的 v.“interest”的现在分词 Web有意思的；令人感兴趣的；引人入胜的 比较级：more interesting最高级：most interesting 大部分时候,你都是一个人在默默努力,这样,距离成功才会更进一步。 ​ – 凭海临风语录 python 标准库学习 上下文管理什么是上下文管理器？上下文管理器就是一个用装饰器实现上下文协议管理的对象。主要用于保存和恢复各种全局状态,例如关闭文件等。下面我们来了解具体的内容。 函数 contextmanager.__enter__() 进入运行时上下文并返回此对象或关联到该运行时上下文的其他对象。 此方法的返回值会绑定到使用此上下文管理器的 with 语句的 as 子句中的标识符。一个返回其自身的上下文管理器的例子是 file object。 文件对象会从 enter() 返回其自身，以允许 open() 被用作 with 语句中的上下文表达式。一个返回关联对象的上下文管理器的例子是 decimal.localcontext() 所返回的对象。 此种管理器会将活动的 decimal 上下文设为原始 decimal 上下文的一个副本并返回该副本。 这允许对 with 语句的语句体中的当前 decimal 上下文进行更改，而不会影响 with 语句以外的代码。 contextmanager.__exit__(*exc_type*, *exc_val*, *exc_tb*) 退出运行时上下文并返回一个布尔值旗标来表明所发生的任何异常是否应当被屏蔽。 如果在执行 with 语句的语句体期间发生了异常，则参数会包含异常的类型、值以及回溯信息。 在其他情况下三个参数均为 None。自此方法返回一个真值将导致 with 语句屏蔽异常并继续执行紧随在 with 语句之后的语句。 否则异常将在此方法结束执行后继续传播。 在此方法执行期间发生的异常将会取代 with 语句的语句体中发生的任何异常。传入的异常绝对不应当被显式地重新引发 —— 相反地，此方法应当返回一个假值以表明方法已成功完成并且不希望屏蔽被引发的异常。 这允许上下文管理代码方便地检测 __exit__() 方法是否确实已失败。 一个文件操作实例1234&gt;&gt;&gt; with open("/etc/hosts", "r") as file:... dir(file)... ['__class__', '__delattr__', '__doc__', '__enter__', '__exit__', '__format__', '__getattribute__', '__hash__', '__init__', '__iter__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'close', 'closed', 'encoding', 'errors', 'fileno', 'flush', 'isatty', 'mode', 'name', 'newlines', 'next', 'read', 'readinto', 'readline', 'readlines', 'seek', 'softspace', 'tell', 'truncate', 'write', 'writelines', 'xreadlines'] 此时的open返回的对象file,就实现了管理打开文件、关闭文件的上下文管理协议。 with 语句上下文管理器上下文管理器 是一个对象，它定义了在执行 with 语句时要建立的运行时上下文。 上下文管理器处理进入和退出所需运行时上下文以执行代码块。 通常使用 with 语句（在 with 语句 中描述），但是也可以通过直接调用它们的方法来使用。 上下文管理器的典型用法包括保存和恢复各种全局状态，锁定和解锁资源，关闭打开的文件等等。 要了解上下文管理器的更多信息，请参阅 上下文管理器类型。 object.__enter__(self) 进入与此对象相关的运行时上下文。 with 语句将会绑定这个方法的返回值到 as 子句中指定的目标，如果有的话。 object.__exit__(self, exc_type, exc_value, traceback) 退出关联到此对象的运行时上下文。 各个参数描述了导致上下文退出的异常。 如果上下文是无异常地退出的，三个参数都将为 None。如果提供了异常，并且希望方法屏蔽此异常（即避免其被传播），则应当返回真值。 否则的话，异常将在退出此方法时按正常流程处理。请注意 __exit__() 方法不应该重新引发被传入的异常，这是调用者的责任。 可以参考 PEP 343 - “with” 语句 Python with 语句的规范描述、背景和示例。 自定义上下文管理实现__enter__ 和 __exit__ 方法就是一个实现了上下文管理的类。 12345678910111213141516171819class ContextManager(object): def __init__(self): print '__init__()' def __enter__(self): print '__enter__()' return self def __exit__(self, exc_type, exc_val, exc_tb): print "__exit__()"with ContextManager(): print "OK, we can do something here~~" #输出__init__()__enter__()OK, we can do something here~~__exit__() 另一个不返回当前类的上下文管理器的例子： 123456789101112131415161718192021222324252627282930313233class InnerContext(object): def __init__(self, obj): print 'InnerContext.__init__(%s)' % obj def do_something(self): print 'InnerContext.do_something()' def __del__(self): print 'InnerContext.__del__()'class ContextManager(object): def __init__(self): print 'ContextManager.__init__()' def __enter__(self): print 'ContextManager.__enter__()' return InnerContext(self) def __exit__(self, exc_type, exc_val, exc_tb): print "ContextManager.__exit__()"with ContextManager() as obj: obj.do_something() print "OK, we can do something here~~" #输出ContextManager.__init__()ContextManager.__enter__()InnerContext.__init__(&lt;__main__.ContextManager object at 0x1012f95d0&gt;)InnerContext.do_something()OK, we can do something here~~ContextManager.__exit__()InnerContext.__del__() 异常处理的例子 ： 1234567891011121314151617181920212223242526272829303132class ContextManager(object): def __init__(self, flag): print 'ContextManager.__init__(%s)' % flag self.flag = flag def __enter__(self): print 'ContextManager.__enter__()' return self def __exit__(self, exc_type, exc_val, exc_tb): print 'ContextManager.__exit__(%s, %s, %s)' % (exc_type, exc_val, exc_tb) return self.flagwith ContextManager(True): raise RuntimeError('error message handled')printwith ContextManager(False): raise RuntimeError('error message propagated')#输出ContextManager.__init__(True)ContextManager.__enter__()ContextManager.__exit__(&lt;type 'exceptions.RuntimeError'&gt;, error message handled, &lt;traceback object at 0x10d69dbd8&gt;)ContextManager.__init__(False)ContextManager.__enter__()ContextManager.__exit__(&lt;type 'exceptions.RuntimeError'&gt;, error message propagated, &lt;traceback object at 0x109e0fbd8&gt;)Traceback (most recent call last): File "ContextManager.py", line 19, in &lt;module&gt; raise RuntimeError('error message propagated')RuntimeError: error message propagated contextlib 模块参考文档 源代码 Lib/contextlib.py 这个内置模块实现了上下文管理,使用with关键字。 主要方法如下(节选自源码): 1234__all__ = ["asynccontextmanager", "contextmanager", "closing", "nullcontext", "AbstractContextManager", "AbstractAsyncContextManager", "AsyncExitStack", "ContextDecorator", "ExitStack", "redirect_stdout", "redirect_stderr", "suppress"] 核心类class contextlib.AbstractContextManager 同步的上下文管理类 class contextlib.AbstractAsyncContextManager 异步的上下文管理类 装饰器 `@contextlib.contextmanager` 一个实现了上下文资源管理的例子: 123456789101112131415from contextlib import contextmanager@contextmanagerdef managed_resource(*args, **kwds): # Code to acquire resource, e.g.: resource = acquire_resource(*args, **kwds) try: yield resource finally: # Code to release resource, e.g.: release_resource(resource)&gt;&gt;&gt; with managed_resource(timeout=3600) as resource:... # Resource is released at the end of this block,... # even if code in the block raises an exception ==tips== : 注意这里 返回的是generator对象，每次迭代器只会yield一个对象出来,这个值会用在with语句中,绑定到as 后的对象上。 @contextlib.asynccontextmanager` 下面是一个实现了异步上下文管理器的实例,关于操作数据库对象 12345678910111213from contextlib import asynccontextmanager@asynccontextmanagerasync def get_connection(): conn = await acquire_db_connection() try: yield conn finally: await release_db_connection(conn)async def get_all_users(): async with get_connection() as conn: return conn.query('SELECT ...') 其他方法 contextlib.closing(thing) 返回一个上下文管理对象,在语句结束之前被调用 相当于下面的实现 12345678from contextlib import contextmanager@contextmanagerdef closing(thing): try: yield thing finally: thing.close() 也可以这样实现 123456from contextlib import closingfrom urllib.request import urlopenwith closing(urlopen('http://www.python.org')) as page: for line in page: print(line) contextlib.nullcontext 返回一个上下文管理对象( 实现了__enter__方法) 一个例子 123456789def myfunction(arg, ignore_exceptions=False): if ignore_exceptions: # Use suppress to ignore all exceptions. cm = contextlib.suppress(Exception) else: # Do not ignore any exceptions, cm has no effect. cm = contextlib.nullcontext() with cm: # Do something 另一个例子 12345678910def process_file(file_or_path): if isinstance(file_or_path, str): # If string, open file cm = open(file_or_path) else: # Caller is responsible for closing file cm = nullcontext(file_or_path) with cm as file: # Perform processing on the file contextlib.suppress 返回一个声明的异常对象的上下文管理 一个例子： 1234567from contextlib import suppresswith suppress(FileNotFoundError): os.remove('somefile.tmp')with suppress(FileNotFoundError): os.remove('someotherfile.tmp') 和下面的代码等价 123456789try: os.remove('somefile.tmp')except FileNotFoundError: passtry: os.remove('someotherfile.tmp')except FileNotFoundError: pass contextlib.redirect_stdout 临时输出标准输出的上下文管理器 contextlib.redirect_stderr 临时输出标准错误的上下文管理器 class contextlib.ContextDecorator 允许一个类像装饰器那样使用,ContextDecorator 正好实现了__enter__ and __exit__ 方法。 使用contextlib就自动调用这个装饰器。 一个实例 1234567891011121314151617181920212223242526from contextlib import ContextDecoratorclass mycontext(ContextDecorator): def __enter__(self): print('Starting') return self def __exit__(self, *exc): print('Finishing') return False&gt;&gt;&gt; @mycontext()... def function():... print('The bit in the middle')...&gt;&gt;&gt; function()StartingThe bit in the middleFinishing&gt;&gt;&gt; with mycontext():... print('The bit in the middle')...StartingThe bit in the middleFinishing 其实本质上就是实现了语法糖 例如： 123def f(): with cm(): # Do stuff ContextDecorator 允许你这样使用: 123@cm()def f(): # Do stuff 允许你通过继承ContextBaseClass和ContextDecorator,实现Mixin class(我也不知道该如何翻译,姑且翻译成混合继承吧) 12345678from contextlib import ContextDecoratorclass mycontext(ContextBaseClass, ContextDecorator): def __enter__(self): return self def __exit__(self, *exc): return False class contextlib.ExitStack 一个上下文管理器可以被设计成自动合并其他上下文管理器,清除方法(栈),尤其是那些需要输入数据的功能实现。 这里我看了源码,通过一个栈结构管理上下文管理， 其实就是实现了一个上下文管理器栈 下面是一个例子: 12345with ExitStack() as stack: files = [stack.enter_context(open(fname)) for fname in filenames] # All opened files will automatically be closed at the end of # the with statement, even if attempts to open files later # in the list raise an exception 个人理解这是一个低级的api,内部实现了,你无需关心何时该调用该方法,由python内部去处理。 小结 最近恰好看flask的源码,flask的生命周期管理也是使用上下文管理装饰器实现。 等有空再更新一篇吧。 今天就到这里,祝大家周末愉快！]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>standard_library</tag>
        <tag>context-manager-types</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python standard_library operator]]></title>
    <url>%2F2020%2F01%2F10%2Fpython-standard-library-operator%2F</url>
    <content type="text"><![CDATA[python 标准库 operator今天的关键词: trouble trouble [英] [ˈtrʌbl] [美] [ˈtrʌbəl] n.麻烦； 烦恼； 故障； 动乱； vi.费心； 烦恼； vt.麻烦； 使烦恼； 折磨； python 标准库学习 operatoroperator 模块提供了一套与Python的内置运算符对应的高效率函数。例如，operator.add(x, y) 与表达式 x+y 相同。 许多函数名与特殊方法名相同，只是没有双下划线。为了向后兼容性，也保留了许多包含双下划线的函数。为了表述清楚，建议使用没有双下划线的函数。 函数包含的种类有：对象的比较运算、逻辑运算、数学运算以及序列运算。 对象比较函数适用于所有的对象，函数名根据它们对应的比较运算符命名。 比较运算operator.lt(*a*, *b*) operator.le(*a*, *b*) operator.eq(*a*, *b*) operator.ne*a*, *b*) operator.ge*a*, *b*) operator.gt*a*, *b*) operator.__lt__*a*, *b*) operator.__le__*a*, *b*) operator.__eq__*a*, *b*) operator.__ne__*a*, *b*) operator.__ge__*a*, *b*) operator.__gt__*a*, *b*) 逻辑运算 operator.not_(*obj*)` operator.__not__(*obj*) 返回 not*obj* 的结果。 （请注意对象实例并没有 [not()](https://docs.python.org/zh-cn/3.8/library/operator.html#operator.__not__) 方法；只有解释器核心可定义此操作。 结果会受 [bool()](https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__bool__) 和 [len()`](https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__len__) 方法影响。） `operator.truth(obj) 如果 obj 为真值则返回 True，否则返回 False。 这等价于使用 bool 构造器。 operator.is_(*a*, *b*) 返回 a is b。 检测对象标识。 operator.is_not(*a*, *b*) 返回 a is not b。 检测对象标识。 数学运算和位运算 operator.abs(*obj*) operator.__abs__(*obj*) 返回 obj 的绝对值。 operator.add(*a*, *b*) operator.__add__(*a*, *b*) 对于数字 a 和 b，返回 a + b。 operator.and_(*a*, *b*) operator.__and__(*a*, *b*) 返回 x 和 y 按位与的结果。 operator.floordiv(*a*, *b*) operator.__floordiv__(*a*, *b*) 返回 a // b。 operator.index(*a*) operator.__index__(*a*) 返回 a 转换为整数的结果。 等价于 a.__index__()`。 operator.inv(*obj*) operator.invert(*obj*) operator.__inv__(*obj*) operator.__invert__(*obj*) 返回数字 obj 按位取反的结果。 这等价于 ~obj。 operator.lshift(*a*, *b*) operator.__lshift__(*a*, *b*) 返回 a 左移 b 位的结果。 operator.mod(*a*, *b*) operator.__mod__(*a*, *b*) 返回 a % b。 operator.mul(*a*, *b*) operator.__mul__(*a*, *b*) 对于数字 a 和 b，返回 a * b。 operator.matmul(*a*, *b*) operator.__matmul__(*a*, *b*) 返回 a @ b。 operator.neg(*obj*) operator.__neg__(*obj*) 返回 obj 取负的结果 (-obj)`。 operator.or_(*a*, *b*) operator.__or__(*a*, *b*) 返回 a 和 b 按位或的结果。 operator.pos(*obj*) operator.__pos__(*obj*) 返回 obj 取正的结果 (+obj)`。 operator.pow(*a*, *b*) operator.__pow__(*a*, *b*) 对于数字 a 和 b，返回 a ** b。 operator.rshift(*a*, *b*) operator.__rshift__(*a*, *b*) 返回 a 右移 b 位的结果。 operator.sub(*a*, *b*) operator.__sub__(*a*, *b*) 返回 a - b。 operator.truediv(*a*, *b*) operator.__truediv__(*a*, *b*) 返回 a / b 例如 2/3 将等于 .66 而不是 0。 这也被称为“真”除法。 operator.xor(*a*, *b*) operator.__xor__(*a*, *b*) 返回 a 和 b 按位异或的结果。 适用于序列的操作（其中一些也适用于映射）包括： operator.concat(*a*, *b*) operator.__concat__(*a*, *b*) 对于序列 a 和 b，返回 a + b。 operator.contains(*a*, *b*) operator.__contains__(*a*, *b*) 返回 b in a 检测的结果。 请注意操作数是反序的。 operator.countOf(*a*, *b*) 返回 b 在 a 中的出现次数。 operator.delitem(*a*, *b*) operator.__delitem__(*a*, *b*) 移除索引号 b 上的值 a。 operator.getitem(*a*, *b*) operator.__getitem__(*a*, *b*) 返回索引号 b 上的值 a。 operator.indexOf(*a*, *b*) 返回 b 在 a 中首次出现所在的索引号。 operator.setitem(*a*, *b*, *c*) operator.__setitem__(*a*, *b*, *c*) 将索引号 b 上的值 a 设为 c。 operator.length_hint(*obj*, *default=0*) 返回对象 o 的估计长度。 首先尝试返回其实际长度，再使用 object.__length_hint__() 得出估计值，最后返回默认值。 工具operator.attrgetter(*attr*) operator.attrgetter(**attrs*) 返回一个可从操作数中获取 attr 的可调用对象。 如果请求了一个以上的属性，则返回一个属性元组。 属性名称还可包含点号。 例如： 在 f = attrgetter(&#39;name&#39;) 之后，调用 f(b) 将返回 b.name。 在 f = attrgetter(&#39;name&#39;, &#39;date&#39;) 之后，调用 f(b) 将返回 (b.name, b.date)`。 在 f = attrgetter(&#39;name.first&#39;, &#39;name.last&#39;) 之后，调用 f(b) 将返回 (b.name.first, b.name.last)`。 `operator.itemgetter(item) `operator.itemgetter(*items) 返回一个使用操作数的 __getitem__() 方法从操作数中获取 item 的可调用对象。 如果指定了多个条目，则返回一个查找值的元组。 例如： 在 f = itemgetter(2) 之后，调用 f(r) 将返回 r[2]。 在 g = itemgetter(2, 5, 3) 之后，调用 g(r) 将返回 (r[2], r[5], r[3])`。 将运算符映射到函数 运算 语法 函数 加法 a + b add(a, b) 字符串拼接 seq1 + seq2 concat(seq1, seq2) 包含测试 obj in seq contains(seq, obj) 除法 a / b truediv(a, b) 除法 a // b floordiv(a, b) 按位与 a &amp; b and_(a, b) 按位异或 a ^ b xor(a, b) 按位取反 ~ a invert(a) 按位或 `a b` or_(a, b) 取幂 a ** b pow(a, b) 标识 a is b is_(a, b) 标识 a is not b is_not(a, b) 索引赋值 obj[k] = v setitem(obj, k, v) 索引删除 del obj[k] delitem(obj, k) 索引取值 obj[k] getitem(obj, k) 左移 a &lt;&lt; b lshift(a, b) 取模 a % b mod(a, b) 乘法 a * b mul(a, b) 矩阵乘法 a @ b matmul(a, b) 取反（算术） - a neg(a) 取反（逻辑） not a not_(a) 正数 + a pos(a) 右移 a &gt;&gt; b rshift(a, b) 切片赋值 seq[i:j] = values setitem(seq, slice(i, j), values) 切片删除 del seq[i:j] delitem(seq, slice(i, j)) 切片取值 seq[i:j] getitem(seq, slice(i, j)) 字符串格式化 s % obj mod(s, obj) 减法 a - b sub(a, b) 真值测试 obj truth(obj) 比较 a &lt; b lt(a, b) 比较 a &lt;= b le(a, b) 相等 a == b eq(a, b) 不等 a != b ne(a, b) 比较 a &gt;= b ge(a, b) 比较 a &gt; b gt(a, b) 原地运算符 operator.iadd(*a*, *b*) operator.__iadd__(*a*, *b*) a = iadd(a, b) 等价于 a += b。 operator.iand(*a*, *b*) operator.__iand__(*a*, *b*) a = iand(a, b) 等价于 a &amp;= b。 operator.iconcat(*a*, *b*) operator.__iconcat__(*a*, *b*) a = iconcat(a, b) 等价于 a += b 其中 a 和 b 为序列。 operator.ifloordiv(*a*, *b*) operator.__ifloordiv__(*a*, *b*) a = ifloordiv(a, b) 等价于 a //= b。 operator.ilshift(*a*, *b*) operator.__ilshift__(*a*, *b*) a = ilshift(a, b) 等价于 a &lt;&lt;= b。 operator.imod(*a*, *b*) operator.__imod__(*a*, *b*) a = imod(a, b) 等价于 a %= b。 operator.imul(*a*, *b*) operator.__imul__(*a*, *b*) a = imul(a, b) 等价于 a *= b。 operator.imatmul(*a*, *b*) operator.__imatmul__(*a*, *b*) a = imatmul(a, b) 等价于 a @= b。3.5 新版功能. operator.ior(*a*, *b*) operator.__ior__(*a*, *b*) a = ior(a, b) 等价于 a |= b。 operator.ipow(*a*, *b*) operator.__ipow__(*a*, *b*) a = ipow(a, b) 等价于 a **= b。 operator.irshift(*a*, *b*) operator.__irshift__(*a*, *b*) a = irshift(a, b) 等价于 a &gt;&gt;= b。 operator.isub(*a*, *b*) operator.__isub__(*a*, *b*) a = isub(a, b) 等价于 a -= b。 operator.itruediv(*a*, *b*) operator.__itruediv__(*a*, *b*) a = itruediv(a, b) 等价于 a /= b。 operator.ixor(*a*, *b*) operator.__ixor__(*a*, *b*) a = ixor(a, b) 等价于 a ^= b。 实例朋友建议我说,别光说标准库的基本使用,最好有一些实际的例子,接下来我会在每一篇博客的最后给大家一些实际应用的例子，欢迎大家批评指正。 稍后我会在对应的文章下面开通gitalk,大家可以及时给我留言。 实现一个简单的计算器,不使用if else 12345678910111213from operator import *def calculator(a, b, k): return &#123; '+': add, '-': sub, '*': mul, '/': truediv, '**': pow &#125;[k](a, b)calculator(1, 2, '+') # 3calculator(3, 4, '**') # 81]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>standard_library</tag>
        <tag>operator</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python standard library http.cookies]]></title>
    <url>%2F2020%2F01%2F09%2Fpython-standard-library-http-cookies%2F</url>
    <content type="text"><![CDATA[python 标准库 http.cookies最近需要教孩子自然拼读,所以我想还是每天用一个关键词描述吧。 traffic .n UK /træf.ɪk/ US /ˈtræf.ɪk/ 交通(拥堵) There was heavy/a lot of traffic on the roads this morning.今天早晨道路上车流量很大。 We got stuck in traffic for several hours.我们碰上交通阻塞被堵了好几个小时。 New measures have been introduced to try and ease traffic congestion in the city.这个城市已经采取了新措施，试图缓解交通拥堵。 Five people were injured in a traffic accident (= one involving vehicles).有5人在交通事故中受伤。 US I heard about the accident on the traffic report on the radio this morning.我在今早电台的交通节目中听到了这起事故。 Air traffic has increased 30 percent in the last decade.在过去的10年里，空中交通量增加了30%。 python 标准库学习 http.cookieshttp.cookies 模块定义了类实现了http状态管理机制和cookies概念。不仅支持字符串格式化的cookie值,还支持任何序列化对象的cookie值。 模块的实现完全遵循 RFC 2109 和 RFC 2068 协议规范。但MSIE 3.0x不遵循那些规范中概述的字符规则，并且当涉及Cookie处理时，许多当今的浏览器和服务器已经放宽了解析规则。 Cookie名定义字符集中非法字符囊括在 string.ascii_letters,string.digits 和 !#$%&amp;&#39;*+-.^_|~:`中。 核心类 exception http.cookies.CookieError 违反RFC 2109 规范中的错误,例如:不正确的属性或不正确的Set-Cookies header class http.cookies.BaseCookie([*input*]) 这个类是一个字典类型的对象,键是字符串,值是 Morsel 的实例。 如果设置参数input,实际上是通过load() 方法设置。 class http.cookies.SimpleCookie([*input*]) 这个类是从BaseCookie 继承过来并重写了 value_decode() and value_encode()方法。 SimpleCookies支持字符串格式的cookie values. Cookie对象 BaseCookie.value_decode(val) 以字符串形式返回 一个元组(real_value,coded_value)。其中real_value可以是任意类型。此方法在[BaseCookie]（https://docs.python.org/zh-cn/3.8/library/http.cookies.html#http.cookies.BaseCookie）中不进行解码,---因为已经存在被重写了。 BaseCookie.value_encode(val) 以字符串形式返回 一个元组(real_value,coded_value)。其中val可以是任意类型,coded_value 通常被转换为字符串类型。 BaseCookie.output(*attrs=None*, *header=&#39;Set-Cookie:&#39;*, *sep=&#39;\r\n&#39;*) 返回一个字符串表示的 用来适配 Http请求头,属性的相关方法。分隔符默认使用\r\n（CRLF）。 BaseCookie.js_output(*attrs=None*) 返回一个绑定Javascript脚本的对象,如果运行的浏览器支持Javascript脚本,作为输出和 out_put()的实现一样。 BaseCookie.load(rawdata)` 如果参数rawdata 是字符串,转化为 HTTP_COOKIE对象,并添加值。 如果参数是字典类型,可以这样取值。 12for k, v in rawdata.items(): cookie[k] = v Morsel 对象class http.cookies.Morsel 部分实现了 RFC 2109 规范的键值对抽象类。 Morsels是一个字典类型的对象, 里面的键是一个常量,同RFC 2109 规范,如下面所示: expires path comment domain max-age secure version httponly samesite httponly 属性声明了cookie只能通过HTTP 请求传输,并且包括Javascript脚本。这将会被合并到跨站脚本部分。 samesite 声明了浏览器是否允许发送跨站请求的cookie。这将会避免CSRF 攻击。无效的值包括 “Strict” and “Lax”。 这些键是大小写敏感的.默认值是&#39;&#39;. Morsel.value Cookie的值。 Morsel.coded_value编码后的cookie值。 Morsel.key cookie的名字 Morsel.set(key, value, coded_value) 设置key ,value和 coded_value* attributes 属性。 Morsel.isReservedKey(*K*) 判断 键 知否是 Morsel 里的键的成员。 Morsel.output(*attrs=None*, *header=&#39;Set-Cookie:&#39;*) 返回字符串格式的 Morsel 。默认包括所有的属性,除非指定声明attrs 属性,header 参数默认值是&quot;Set-Cookie:&quot;. Morsel.js_output(*attrs=None*) 返回一个绑定Javascript脚本的对象,如果运行的浏览器支持Javascript脚本,作为输出和 out_put()的实现一样。 Morsel.OutputString(*attrs=None*) 返回一个字符串格式的 Morsel,不包括Http或Javascript。 Morsel.update(*values*) 根据参数值更新Morsel 字典。如果参数不在字典中则引发异常。具体可以参考 RFC 2109 Morsel.copy(*value*) 返回一个 Morsel 对象的浅拷贝。 Morsel.setdefault(*key*, *value=None*) Raise an error if key is not a valid RFC 2109 attribute, otherwise behave the same as dict.setdefault(). 实例123456789101112131415161718192021222324252627282930313233343536373839404142434445&gt;&gt;&gt; from http import cookies&gt;&gt;&gt; C = cookies.SimpleCookie()&gt;&gt;&gt; C["fig"] = "newton"&gt;&gt;&gt; C["sugar"] = "wafer"&gt;&gt;&gt; print(C) # generate HTTP headersSet-Cookie: fig=newtonSet-Cookie: sugar=wafer&gt;&gt;&gt; print(C.output()) # same thingSet-Cookie: fig=newtonSet-Cookie: sugar=wafer&gt;&gt;&gt; C = cookies.SimpleCookie()&gt;&gt;&gt; C["rocky"] = "road"&gt;&gt;&gt; C["rocky"]["path"] = "/cookie"&gt;&gt;&gt; print(C.output(header="Cookie:"))Cookie: rocky=road; Path=/cookie&gt;&gt;&gt; print(C.output(attrs=[], header="Cookie:"))Cookie: rocky=road&gt;&gt;&gt; C = cookies.SimpleCookie()&gt;&gt;&gt; C.load("chips=ahoy; vienna=finger") # load from a string (HTTP header)&gt;&gt;&gt; print(C)Set-Cookie: chips=ahoySet-Cookie: vienna=finger&gt;&gt;&gt; C = cookies.SimpleCookie()&gt;&gt;&gt; C.load('keebler="E=everybody; L=\\"Loves\\"; fudge=\\012;";')&gt;&gt;&gt; print(C)Set-Cookie: keebler="E=everybody; L=\"Loves\"; fudge=\012;"&gt;&gt;&gt; C = cookies.SimpleCookie()&gt;&gt;&gt; C["oreo"] = "doublestuff"&gt;&gt;&gt; C["oreo"]["path"] = "/"&gt;&gt;&gt; print(C)Set-Cookie: oreo=doublestuff; Path=/&gt;&gt;&gt; C = cookies.SimpleCookie()&gt;&gt;&gt; C["twix"] = "none for you"&gt;&gt;&gt; C["twix"].value'none for you'&gt;&gt;&gt; C = cookies.SimpleCookie()&gt;&gt;&gt; C["number"] = 7 # equivalent to C["number"] = str(7)&gt;&gt;&gt; C["string"] = "seven"&gt;&gt;&gt; C["number"].value'7'&gt;&gt;&gt; C["string"].value'seven'&gt;&gt;&gt; print(C)Set-Cookie: number=7Set-Cookie: string=seven 小结顺便了解了下http协议的相关内容,附链接。 RFC 2068 ：http超文本传输协议1.0 RFC 2616 ：http超文本传输协议1.1 RFC 2109: http状态管理机制]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>standard_library</tag>
        <tag>http</tag>
        <tag>cookies</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python standard library http]]></title>
    <url>%2F2020%2F01%2F08%2Fpython-standard-library-http%2F</url>
    <content type="text"><![CDATA[python 标准库之 http 山雨欲来风满楼,最近不是很太平,希望世界和平吧。 python 标准库学习 之 httphttp 是一个包，它收集了多个用于处理超文本传输协议的模块: 参考文档 http.client 是一个低层级的 HTTP 协议客户端；对于高层级的 URL 访问请使用 urllib.request http.server 包含基于 socketserver 的基本 HTTP 服务类 http.cookies 包含一些有用来实现通过 cookies 进行状态管理的工具 http.cookiejar 提供了 cookies 的持久化 本次只整理 http.client的内容,后面持续更新。 常量class http.HTTPStatus 使用方法： 12345678910111213&gt;&gt;&gt; from http import HTTPStatus&gt;&gt;&gt; HTTPStatus.OK&lt;HTTPStatus.OK: 200&gt;&gt;&gt;&gt; HTTPStatus.OK == 200True&gt;&gt;&gt; HTTPStatus.OK.value200&gt;&gt;&gt; HTTPStatus.OK.phrase'OK'&gt;&gt;&gt; HTTPStatus.OK.description'Request fulfilled, document follows'&gt;&gt;&gt; list(HTTPStatus)[&lt;HTTPStatus.CONTINUE: 100&gt;, &lt;HTTPStatus.SWITCHING_PROTOCOLS: 101&gt;, ...] HTTP状态码 状态码 映射名 详情 100 CONTINUE HTTP/1.1 RFC 7231, 6.2.1 节 101 SWITCHING_PROTOCOLS HTTP/1.1 RFC 7231, 6.2.2 节 102 PROCESSING WebDAV RFC 2518, 10.1 节 200 OK HTTP/1.1 RFC 7231, 6.3.1 节 201 CREATED HTTP/1.1 RFC 7231, 6.3.2 节 202 ACCEPTED HTTP/1.1 RFC 7231, 6.3.3 节 203 NON_AUTHORITATIVE_INFORMATION HTTP/1.1 RFC 7231, 6.3.4 节 204 NO_CONTENT HTTP/1.1 RFC 7231, 6.3.5 节 205 RESET_CONTENT HTTP/1.1 RFC 7231, 6.3.6 节 206 PARTIAL_CONTENT HTTP/1.1 RFC 7233, 4.1 节 207 MULTI_STATUS WebDAV RFC 4918, 11.1 节 208 ALREADY_REPORTED WebDAV Binding Extensions RFC 5842, 7.1 节（实验性） 226 IM_USED Delta Encoding in HTTP RFC 3229, 10.4.1 节 300 MULTIPLE_CHOICES：有多种资源可选择 HTTP/1.1 RFC 7231, 6.4.1 节 301 MOVED_PERMANENTLY：永久移动 HTTP/1.1 RFC 7231, 6.4.2 节 302 FOUND：临时移动 HTTP/1.1 RFC 7231, 6.4.3 节 303 SEE_OTHER：已经移动 HTTP/1.1 RFC 7231, 6.4.4 节 304 NOT_MODIFIED：没有修改 HTTP/1.1 RFC 7232, 4.1 节 305 USE_PROXY：使用代理 HTTP/1.1 RFC 7231, 6.4.5 节 307 TEMPORARY_REDIRECT：临时重定向 HTTP/1.1 RFC 7231, 6.4.7 节 308 PERMANENT_REDIRECT：永久重定向 Permanent Redirect RFC 7238, Section 3 (Experimental) 400 BAD_REQUEST：错误请求 HTTP/1.1 RFC 7231, 6.5.1 节 401 UNAUTHORIZED：未授权 HTTP/1.1 Authentication RFC 7235, 3.1 节 402 PAYMENT_REQUIRED：保留，将来使用 HTTP/1.1 RFC 7231, 6.5.2 节 403 FORBIDDEN：禁止 HTTP/1.1 RFC 7231, 6.5.3 节 404 NOT_FOUND：没有找到 HTTP/1.1 RFC 7231, 6.5.4 节 405 METHOD_NOT_ALLOWED：该请求方法不允许 HTTP/1.1 RFC 7231, 6.5.5 节 406 NOT_ACCEPTABLE：不可接受 HTTP/1.1 RFC 7231, 6.5.6 节 407 PROXY_AUTHENTICATION_REQUIRED：要求使用代理验证身份 HTTP/1.1 Authentication RFC 7235, 3.1 节 408 REQUEST_TIMEOUT：请求超时 HTTP/1.1 RFC 7231, 6.5.7 节 409 CONFLICT：冲突 HTTP/1.1 RFC 7231, 6.5.8 节 410 GONE：已经不在了 HTTP/1.1 RFC 7231, 6.5.9 节 411 LENGTH_REQUIRED：长度要求 HTTP/1.1 RFC 7231, 6.5.10 节 412 PRECONDITION_FAILED：前提条件错误 HTTP/1.1 RFC 7232, 4.2 节 413 REQUEST_ENTITY_TOO_LARGE：请求体太大了 HTTP/1.1 RFC 7231, 6.5.11 节 414 REQUEST_URI_TOO_LONG：请求URI太长了 HTTP/1.1 RFC 7231, 6.5.12 节 415 UNSUPPORTED_MEDIA_TYPE：不支持的媒体格式 HTTP/1.1 RFC 7231, 6.5.13 节 416 REQUESTED_RANGE_NOT_SATISFIABLE HTTP/1.1 Range Requests RFC 7233, 4.4 节 417 EXPECTATION_FAILED：期望失败 HTTP/1.1 RFC 7231, 6.5.14 节 421 MISDIRECTED_REQUEST HTTP/2 RFC 7540, 9.1.2 节 422 UNPROCESSABLE_ENTITY：可加工实体 WebDAV RFC 4918, 11.2 节 423 LOCKED：锁着 WebDAV RFC 4918, 11.3 节 424 FAILED_DEPENDENCY：失败的依赖 WebDAV RFC 4918, 11.4 节 426 UPGRADE_REQUIRED：升级需要 HTTP/1.1 RFC 7231, 6.5.15 节 428 PRECONDITION_REQUIRED：先决条件要求 Additional HTTP Status Codes RFC 6585 429 TOO_MANY_REQUESTS：太多的请求 Additional HTTP Status Codes RFC 6585 431 REQUEST_HEADER_FIELDS_TOO_LARGE：请求头太大 Additional HTTP Status Codes RFC 6585 451 UNAVAILABLE_FOR_LEGAL_REASONS HTTP 状态码用于报告法律障碍 RFC 7725 500 INTERNAL_SERVER_ERROR：内部服务错误 HTTP/1.1 RFC 7231, 6.6.1 节 501 NOT_IMPLEMENTED：不可执行 HTTP/1.1 RFC 7231, 6.6.2 节 502 BAD_GATEWAY：无效网关 HTTP/1.1 RFC 7231, 6.6.3 节 503 SERVICE_UNAVAILABLE：服务不可用 HTTP/1.1 RFC 7231, 6.6.4 节 504 GATEWAY_TIMEOUT：网关超时 HTTP/1.1 RFC 7231, 6.6.5 节 505 HTTP_VERSION_NOT_SUPPORTED：HTTP版本不支持 HTTP/1.1 RFC 7231, 6.6.6 节 506 VARIANT_ALSO_NEGOTIATES：服务器存在内部配置错误 透明内容协商在： HTTP RFC 2295, 8.1 节（实验性） 507 INSUFFICIENT_STORAGE：存储不足 WebDAV RFC 4918, 11.5 节 508 LOOP_DETECTED：循环检测 WebDAV Binding Extensions RFC 5842, 7.2 节（实验性） 510 NOT_EXTENDED：不扩展 WebDAV Binding Extensions RFC 5842, 7.2 节（实验性） 511 NETWORK_AUTHENTICATION_REQUIRED：要求网络身份验证 Additional HTTP Status Codes RFC 6585, 6 节 为了保持向后兼容性，枚举值也以常量形式出现在 http.client 模块中，。 枚举名等于常量名 (例如 http.HTTPStatus.OK 也可以是 http.client.OK)。 http.client 对象这个模块定义了实现 HTTP 和 HTTPS 协议客户端的类。 它通常不直接使用 — 模块 urllib.request 用它来处理使用 HTTP 和 HTTPS 的 URL。 参见 The Requests 是一个高级的实现http协议的http客户端接口库. 注意: HTTPS 支持仅在编译 Python 时启用了 SSL 支持的情况下（通过 ssl 模块）可用。 强烈建议看源代码 Lib/http/client.py 我摘取其中关于http请求状态的描述 12345678910111213141516171819202122232425262728293031323334 (null) | | HTTPConnection() v Idle | | putrequest() v Request-started | | ( putheader() )* endheaders() v Request-sent |\_____________________________ | | getresponse() raises | response = getresponse() | ConnectionError v v Unread-response Idle [Response-headers-read] |\____________________ | | | response.read() | putrequest() v v Idle Req-started-unread-response ______/| / |response.read() | | ( putheader() )* endheaders() v v Request-started Req-sent-unread-response | | response.read() v Request-sent 类 class http.client.HTTPConnection(*host*, *port=None*, [*timeout*, ]*source_address=None*, *blocksize=8192*) HTTPConnection 的实例代表与 HTTP 的一个连接事务。 它的实例化应当传入一个主机和可选的端口号。 如果没有传入端口号，如果主机字符串的形式为 主机:端口 则会从中提取端口，否则将使用默认的 HTTP 端口（80）。 如果给出了可选的 timeout 参数，则阻塞操作（例如连接尝试）将在指定的秒数之后超时（如果未给出，则使用全局默认超时设置）。 可选的 source_address 参数可以为一个 (主机, 端口) 元组，用作进行 HTTP 连接的源地址。 可选的 blocksize 参数可以字节为单位设置缓冲区的大小，用来发送文件类消息体。 举个例子，以下调用都是创建连接到同一主机和端口的服务器的实例： 1234&gt;&gt;&gt; h1 = http.client.HTTPConnection('www.python.org')&gt;&gt;&gt; h2 = http.client.HTTPConnection('www.python.org:80')&gt;&gt;&gt; h3 = http.client.HTTPConnection('www.python.org', 80)&gt;&gt;&gt; h4 = http.client.HTTPConnection('www.python.org', 80, timeout=10) `class http.client.HTTPSConnection(host, port=None, key_file=None, cert_file=None, [timeout, ]source_address=None, **, context=None, check_hostname=None, blocksize=8192*)¶ HTTPConnection 的子类，使用 SSL 与安全服务器进行通信。 默认端口为 443。 如果指定了 context，它必须为一个描述 SSL 各选项的 ssl.SSLContext 实例。 class http.client.`HTTPResponse`(sock, debuglevel=0, method=None, url=None) 在成功连接后返回类的实例，而不是由用户直接实例化。 异常 exception http.client.`HTTPException` 此模块中其他异常的基类。 它是 Exception 的一个子类。 exception http.client.`NotConnected` HTTPException 的一个子类。 exception http.client.`InvalidURL` HTTPException 的一个子类，如果给出了一个非数字或为空值的端口就会被引发。 exception http.client.`UnknownProtocol` HTTPException 的一个子类。 exception http.client.`UnknownTransferEncoding` HTTPException 的一个子类。 exception http.client.`UnimplementedFileMode` HTTPException 的一个子类。 exception http.client.`IncompleteRead` HTTPException 的一个子类。 exception http.client.`ImproperConnectionState` HTTPException 的一个子类。 exception http.client.`CannotSendRequest` ImproperConnectionState 的一个子类。 exception http.client.`CannotSendHeader` ImproperConnectionState 的一个子类。 exception http.client.`ResponseNotReady` ImproperConnectionState 的一个子类。 exception http.client.`BadStatusLine` HTTPException 的一个子类。 如果服务器反馈了一个我们不理解的 HTTP 状态码就会被引发。 exception http.client.`LineTooLong` HTTPException 的一个子类。 如果在 HTTP 协议中从服务器接收到过长的行就会被引发。 exception http.client.`RemoteDisconnected` ConnectionResetError 和 BadStatusLine 的一个子类。 当尝试读取响应时的结果是未从连接读取到数据时由 HTTPConnection.getresponse() 引发，表明远端已关闭连接。 常量 http.client.`HTTP_PORT` HTTP 协议默认的端口号 (总是 80)。 http.client.`HTTPS_PORT` HTTPS 协议默认的端口号 (总是 443)。 http.client.`responses` 这个字典把 HTTP 1.1 状态码映射到 W3C 名称。例如：http.client.responses[http.client.NOT_FOUND] 是 &#39;NOT FOUND （未发现）。 HTTPConnection 对象方法 HTTPConnection.request(method, url, body=None, headers={}, , encode_chunked=False*) 这会使用 HTTP 请求方法 method 和选择器 url 向服务器发送请求。 如果给定 body，那么给定的数据会在信息头完成之后发送。它可能是一个 str 、一个 bytes-like object 、一个打开的 file object，或者 bytes 迭代器。如果 body 是字符串，它会按 HTTP 默认的 ISO-8859-1 编码；如果是一个字节类对象，它会按原样发送；如果是 file object ，文件的内容会被发送，这个文件对象应该支持 read() 方法。如果这个文件对象是一个 io.TextIOBase 实例， read() 方法返回的数据会按 ISO-8859-1 编码，否则 read() 方法返回的数据会按原样发送；如果 body 是一个迭代器，迭代器中的元素会被发送，直到迭代器耗尽。 headers 参数应是额外的随请求发送的 HTTP 信息头的字典。 如果 headers 既不包含 Content-Length 也没有 Transfer-Encoding，但存在请求正文，那么这些头字段中的一个会自动设定。如果 body 是 None，那么对于要求正文的方法 (PUT，POST，和 PATCH)，Content-Length 头会被设为 0。如果 body 是字符串或者类似字节的对象，并且也不是 文件，Content-Length 头会设为正文的长度。任何其他类型的 body （一般是文件或迭代器）会按块编码，这时会自动设定 Transfer-Encoding 头以代替 Content-Length。 在 headers 中指定 Transfer-Encoding 时， encode_chunked 是唯一相关的参数。如果 encode_chunked 为 False，HTTPConnection 对象会假定所有的编码都由调用代码处理。如果为 True，正文会按块编码。 HTTPConnection.`set_debuglevel`(level) 设置调试等级。 默认的调试等级为 0，意味着不会打印调试输出。 任何大于 0 的值将使得所有当前定义的调试输出被打印到 stdout。 debuglevel 会被传给任何新创建的 HTTPResponse 对象。 HTTPConnection.`set_tunnel`(host, port=None, headers=None) 为 HTTP 连接隧道设置主机和端口。 这将允许通过代理服务器运行连接。 host 和 port 参数指明隧道连接的位置（即 CONNECT 请求所包含的地址，而 不是 代理服务器的地址）。 headers 参数应为一个随 CONNECT 请求发送的额外 HTTP 标头的映射。 例如，要通过一个运行于本机 8080 端口的 HTTPS 代理服务器隧道，我们应当向 HTTPSConnection 构造器传入代理的地址，并将我们最终想要访问的主机地址传给 set_tunnel() 方法: 1234&gt;&gt;&gt; import http.client&gt;&gt;&gt; conn = http.client.HTTPSConnection("localhost", 8080)&gt;&gt;&gt; conn.set_tunnel("www.python.org")&gt;&gt;&gt; conn.request("HEAD","/index.html") HTTPConnection.connect() 当对象被创建后连接到指定的服务器。 默认情况下，如果客户端还未建立连接，此函数会在发送请求时自动被调用。 HTTPConnection.close() 关闭到服务器的连接。 HTTPConnection.blocksize 用于发送文件类消息体的缓冲区大小。 HTTPConnection.send(data) 发送数据到服务器 。这个方法直接使用将会在endheaders()方法后和 getresponse() 方法调用之前被调用 HTTPResponse 对象HTTPResponse 对象实例绑定从服务器返回的 Http response 内容。 response是一个可迭代对象,可以使用with上下文语句来管理。 方法 HTTPResponse.read([amt]) 读取并返回response body HTTPResponse.`readinto`(b) 读取从 response body 的b长度的字节放到 buffer b中，并返回这个字节b。 HTTPResponse.getheader(name, default=None) 如果有匹配的header name,则返回 header name的值。如果不止一个header name的名字，则返回所有的值的字符串,通过逗号连接。 HTTPResponse.getheaders() 返回一个包含header和value的元组元素的列表 HTTPResponse.fileno() Return the fileno of the underlying socket. 返回底层套接字的fileno HTTPResponse.msg 一个http.client.HTTPMessage 消息的实例,包含response header。 http.client.HTTPMessage 是 email.message.Message的子类 HTTPResponse.version Http response版本号,例如 HTTP/1.0, 11 for HTTP/1.1. HTTPResponse.`status` 由服务器返回的状态码。 HTTPResponse.reason 从服务器返回的状态码 HTTPResponse.debuglevel 一个 debugging hook. 如果 debuglevel 大于0, 消息将会被打印到控制台。 HTTPResponse.closed 如果stream关闭,返回true 实例:一个使用get请求的实例 12345678910111213141516171819202122&gt;&gt;&gt; import http.client&gt;&gt;&gt; conn = http.client.HTTPSConnection("www.python.org")&gt;&gt;&gt; conn.request("GET", "/")&gt;&gt;&gt; r1 = conn.getresponse()&gt;&gt;&gt; print(r1.status, r1.reason)200 OK&gt;&gt;&gt; data1 = r1.read() # This will return entire content.&gt;&gt;&gt; # The following example demonstrates reading data in chunks.&gt;&gt;&gt; conn.request("GET", "/")&gt;&gt;&gt; r1 = conn.getresponse()&gt;&gt;&gt; while chunk := r1.read(200):... print(repr(chunk))b'&lt;!doctype html&gt;\n&lt;!--[if"......&gt;&gt;&gt; # Example of an invalid request&gt;&gt;&gt; conn = http.client.HTTPSConnection("docs.python.org")&gt;&gt;&gt; conn.request("GET", "/parrot.spam")&gt;&gt;&gt; r2 = conn.getresponse()&gt;&gt;&gt; print(r2.status, r2.reason)404 Not Found&gt;&gt;&gt; data2 = r2.read()&gt;&gt;&gt; conn.close() 一个使用head方法的实例 1234567891011&gt;&gt;&gt; import http.client&gt;&gt;&gt; conn = http.client.HTTPSConnection("www.python.org")&gt;&gt;&gt; conn.request("HEAD", "/")&gt;&gt;&gt; res = conn.getresponse()&gt;&gt;&gt; print(res.status, res.reason)200 OK&gt;&gt;&gt; data = res.read()&gt;&gt;&gt; print(len(data))0&gt;&gt;&gt; data == b''True 一个使用post提交请求的实例 12345678910111213&gt;&gt;&gt; import http.client, urllib.parse&gt;&gt;&gt; params = urllib.parse.urlencode(&#123;'@number': 12524, '@type': 'issue', '@action': 'show'&#125;)&gt;&gt;&gt; headers = &#123;"Content-type": "application/x-www-form-urlencoded",... "Accept": "text/plain"&#125;&gt;&gt;&gt; conn = http.client.HTTPConnection("bugs.python.org")&gt;&gt;&gt; conn.request("POST", "", params, headers)&gt;&gt;&gt; response = conn.getresponse()&gt;&gt;&gt; print(response.status, response.reason)302 Found&gt;&gt;&gt; data = response.read()&gt;&gt;&gt; datab'Redirecting to &lt;a href="http://bugs.python.org/issue12524"&gt;http://bugs.python.org/issue12524&lt;/a&gt;'&gt;&gt;&gt; conn.close() 一个使用HTTP PUT请求的实例 1234567891011&gt;&gt;&gt; # This creates an HTTP message&gt;&gt;&gt; # with the content of BODY as the enclosed representation&gt;&gt;&gt; # for the resource http://localhost:8080/file...&gt;&gt;&gt; import http.client&gt;&gt;&gt; BODY = "***filecontents***"&gt;&gt;&gt; conn = http.client.HTTPConnection("localhost", 8080)&gt;&gt;&gt; conn.request("PUT", "/file", BODY)&gt;&gt;&gt; response = conn.getresponse()&gt;&gt;&gt; print(response.status, response.reason)200, OK HTTPMessage 对象一个 http.client.HTTPMessage的实例包含了http response 请求头. 是 email.message.Message类的具体实现. 总结通过阅读源码加深了对http协议的理解,看python实现的方式受益良多。继续加油!]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>standard_library</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python standard library glob]]></title>
    <url>%2F2020%2F01%2F07%2Fpython-standard-library-glob%2F</url>
    <content type="text"><![CDATA[python 标准库之 glob 在严寒的冬季,温暖人的只有笑脸了吧。 今天继续给大家介绍python标准库 glob参考文档 glob 模块可根据 Unix 终端所用规则找出所有匹配特定模式的路径名，但会按不确定的顺序返回结果。支持查找文件只用到三个匹配符：’*’, “?”, “[ ]”，不包括波浪线~,因为这个符号在linux代表当前用户的home目录。 对于波浪号和终端变量扩展，请使用 os.path.expanduser() 和 os.path.expandvars())。 根据阅读代码发现,这个底层使用cpython实现, 有兴趣的童鞋可以移步到源代码: Lib/glob.py 相对于高级面向对象路径查找模块pathlib ,glob更偏向底层实现。 函数 glob.glob(pathname, *, recursive=False) 返回匹配 pathname 的可能为空的路径名列表，其中的元素必须为包含一个路径信息的字符串。 pathname 可以是绝对路径 (如 /usr/src/Python-1.5/Makefile) 或相对路径 (如 ../../Tools/*/*.gif)，并且可包含 shell 风格的通配符。 结果也将包含无效的符号链接 (与在 shell 中一致)。 结果是否排序取决于具体文件系统。 如果 recursive 为真值，则模式 “**“ 将匹配目录中的任何文件以及零个或多个目录、子目录和符号链接。 如果模式加了一个 os.sep 或 os.altsep 则将不匹配文件。 备注：在一个较大的目录树中使用 “**“ 模式可能会消耗非常多的时间。 3.5 版更改: 支持使用 “**“ 的递归 glob glob.iglob(pathname, *, recursive=False) 返回一个 iterator，它会产生与 glob() 相同的结果，但不会实际地同时保存它们。 glob.escape(pathname) 转义所有特殊字符 (&#39;?&#39;, &#39;*&#39; 和 &#39;[&#39;)。 这适用于当你想要匹配可能带有特殊字符的任意字符串字面值的情况。 在 drive/UNC 共享点中的特殊字符不会被转义，例如在 Windows 上 escape(&#39;//?/c:/Quo vadis?.txt&#39;) 将返回 &#39;//?/c:/Quo vadis[?].txt&#39;。 实例123456789101112#例如，考虑一个包含以下内容的目录：文件 1.gif, 2.txt, card.gif 以及一个子目录 sub 其中只包含一个文件 3.txt. glob() 将产生如下结果。 请注意路径的任何开头部分都将被保留。&gt;&gt;&gt; glob.glob('./[0-9].*')['./1.gif', './2.txt']&gt;&gt;&gt; glob.glob('*.gif')['1.gif', 'card.gif']&gt;&gt;&gt; glob.glob('?.gif')['1.gif']&gt;&gt;&gt; glob.glob('**/*.txt', recursive=True)['2.txt', 'sub/3.txt']&gt;&gt;&gt; glob.glob('./**/', recursive=True)['./', './sub/'] 如果目录包含以 . 打头的文件，它们默认将不会被匹配。 例如，考虑一个包含 card.gif 和 .card.gif 的目录: 12345&gt;&gt;&gt; import glob&gt;&gt;&gt; glob.glob('*.gif')['card.gif']&gt;&gt;&gt; glob.glob('.c*')['.card.gif'] 补充内容 ”*”匹配任意0个或多个字符；”?”匹配任意单个字符；”[ ]”匹配指定范围内的字符，如：[0-9]匹配数字。 如下图所示的文件结构 12345678910111213141516171819import glob# 返回上一级所有目录print(glob.glob(r"../*"))# 返回上本级所有目录print(glob.glob(r"./*"))# 本级所有文件print(glob.glob(r"./*.*"))# 本级所有.py文件print(glob.glob('./*.py'))#两级目录所有的.py文件print(glob.glob('./*/*.py'))# c盘所有文件print(glob.glob(r'c:/*'))#C盘所有包含pr/po/br/bo的目录print(glob.glob('C:/*[PB][RO]*'))#C盘所有包含P_o的目录print(glob.glob('C:/*P?O*'))#C盘两级目录所有的.txt文件print(glob.glob('C:/*/*.txt')) 显示内容如下: 12345['..\\class_demo.py', '..\\excel', '..\\flask_test', '..\\glob', '..\\image', '..\\mymodule', '..\\numpy', '..\\opencv', '..\\opencv_demo', '..\\othermodule', '..\\ppt', '..\\python_enuerate.py', '..\\python速成', '..\\selenium_test', '..\\交换算法.py', '..\\爬虫']['.\\app', '.\\config', '.\\data', '.\\glob_demo.py', '.\\other.py', '.\\readme.md']['.\\glob_demo.py', '.\\other.py', '.\\readme.md']['.\\glob_demo.py', '.\\other.py']['.\\app\\__init__.py', '.\\config\\config.py'] 其他阅读源码中发现 12345678"""Filename globbing utility."""import osimport reimport fnmatchimport sys__all__ = ["glob", "iglob", "escape"] 顺便把__all__用法整理下,算是查漏补缺, __all__问题描述: 在研读pythonmodel源码时,会看到一些.py文件或者init.py中会使用all。对于all具体所其的作用是什么?在此对查取结果进行总结下。2.总结(1)在init.py文件中表示形式:all=[“module_a”,”module_b”]在使用frompackage_nameimport时,表示import该package中的两个module及两个module相关的类、方 表示形式: __all__=[&quot;class_name&quot;,&quot;function_name&quot;] 在使用 from module_name import * 时,表示import 该module中的all中所列出的。 使用注意事项: (1) 在普通的*.py中, 使用all 时,可以使用all列出的 类、函数、变量等,不使用all时会使用module中的所有不以下划线开头的成员。 (2)all只能影响到 from import * 这种import 方式, 对于from import 的 import 方式没有影响。 (3) all 的数据类型:List or Tuple 关联的模块模块 fnmatch Shell 风格文件名（而非路径）扩展]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>standard_library</tag>
        <tag>glob</tag>
        <tag>__all__</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python standard library textwrap]]></title>
    <url>%2F2020%2F01%2F06%2Fpython-standard-library-textwrap%2F</url>
    <content type="text"><![CDATA[Python 标准库 之 textwrap 今天给大家介绍 python标准库中的 textwrap参考文档 标准库 textwrap 是一个关于文本自动换行和填充的模块。 关于这个模块官网介绍如下: textwrap 模块提供了一些快捷函数，以及可以完成所有工作的类 TextWrapper。 如果你只是要对一两个文本字符串进行自动换行或填充，快捷函数应该就够用了； 否则的话，你应该使用 TextWrapper 的实例来提高效率。 函数 textwrap.wrap(*text*, *width=70*, kwargs) 对 text (字符串) 中的单独段落自动换行以使每行长度最多为 width 个字符。 返回由输出行组成的列表，行尾不带换行符。 textwrap.fill(text, width=70, kwargs) 对 text 中的单独段落自动换行，并返回一个包含被自动换行段落的单独字符串。 fill() 是以下语句的快捷方式 1"\n".join(wrap(text, ...)) textwrap.shorten(text, width, kwargs) 折叠并截短给定的 text 以符合给定的 width。 textwrap.dedent(text)` 移除 text 中每一行的任何相同前缀空白符。 1234567# end first line with \ to avoid the empty line!s = '''\hello world'''print(repr(s)) # prints ' hello\n world\n 'print(repr(dedent(s))) # prints 'hello\n world\n' textwrap.indent(text, prefix, predicate=None)` 将 prefix 添加到 text 中选定行的开头。 通过调用 text.splitlines(True) 来对行进行拆分。 默认情况下，prefix 会被添加到所有不是只由空白符（包括任何行结束符）组成的行。 例如: 123&gt;&gt;&gt; s = 'hello\n\n \nworld'&gt;&gt;&gt; indent(s, ' ')' hello\n\n \n world' 可选的 predicate 参数可用来控制哪些行要缩进。 例如，可以很容易地为空行或只有空白符的行添加 prefix: 12345&gt;&gt;&gt; print(indent(s, '+ ', lambda line: True))+ hello+++ world 实例属性 width (默认: 70) 自动换行的最大行长度。 只要输入文本中没有长于 width 的单个单词，TextWrapper 就能保证没有长于 width 个字符的输出行。 expand_tabs (默认: True) 如果为真值，则 text 中所有的制表符将使用 text 的 expandtabs() 方法扩展为空格符。 tabsize (默认: 8) 如果 expand_tabs 为真值，则 text 中所有的制表符将扩展为零个或多个空格，具体取决于当前列位置和给定的制表宽度。 replace_whitespace (default: True) 如果为真值，在制表符扩展之后、自动换行之前，wrap() 方法将把每个空白字符都替换为单个空格。 会被替换的空白字符如下：制表，换行，垂直制表，进纸和回车 (&#39;\t\n\v\f\r&#39;)。注解 如果 expand_tabs 为假值且 replace_whitespace 为真值，每个制表符将被替换为单个空格，这与制表符扩展是 不 一样的。注解 如果 replace_whitespace 为假值，在一行的中间有可能出现换行符并导致怪异的输出。 因此，文本应当（使用 str.splitlines() 或类似方法）拆分为段落并分别进行自动换行。 drop_whitespace (默认: True) 如果为真值，每一行开头和末尾的空白字符（在包装之后、缩进之前）会被丢弃。 但是段落开头的空白字符如果后面不带任何非空白字符则不会被丢弃。 如果被丢弃的空白字符占据了一个整行，则该整行将被丢弃。 initial_indent (默认: &#39;&#39;) 将被添加到被自动换行输出内容的第一行的字符串。 其长度会被计入第一行的长度。 空字符串不会被缩进。 subsequent_indent (default: &#39;&#39;) 将被添加到被自动换行输出内容除第一行外的所有行的字符串。 其长度会被计入除行一行外的所有行的长度。 fix_sentence_endings (默认: False) 如果为真值，TextWrapper 将尝试检测句子结尾并确保句子间总是以恰好两个空格符分隔。 对于使用等宽字体的文本来说通常都需要这样。 但是，句子检测算法并不完美：它假定句子结尾是一个小写字母加字符 &#39;.&#39;, &#39;!&#39; 或 &#39;?&#39; 中的一个，并可能带有字符 &#39;&quot;&#39; 或 &quot;&#39;&quot;，最后以一个空格结束。 此算法的问题之一是它无法区分以下文本中的 “Dr.”[...] Dr. Frankenstein&#39;s monster [...]和以下文本中的 “Spot.”[...] See Spot. See Spot run [...]fix_sentence_endings 默认为假值。由于句子检测算法依赖于 string.lowercase 来确定“小写字母”，以及约定在句点后使用两个空格来分隔处于同一行的句子，因此只适用于英语文本。 break_long_words (默认: True) 如果为真值，则长度超过 width 的单词将被分开以保证行的长度不会超过 width。 如果为假值，超长单词不会被分开，因而某些行的长度可能会超过 width。 （超长单词将被单独作为一行，以尽量减少超出 width 的情况。） break_on_hyphens (默认: True) 如果为真值，将根据英语的惯例首选在空白符和复合词的连字符之后自动换行。 如果为假值，则只有空白符会被视为合适的潜在断行位置，但如果你确实不希望出现分开的单词则你必须将 break_long_words 设为假值。 之前版本的默认行为总是允许分开带有连字符的单词。 max_lines (默认: None) 如果不为 None，则输出内容将最多包含 max_lines 行，并使 placeholder 出现在输出内容的末尾。 placeholder (默认: &#39; [...]&#39;) 该文本将在输出文本被截短时出现在文本末尾。 公有方法 wrap(text) 对 text (字符串) 中的单独段落自动换行以使每行长度最多为 width 个字符。 所有自动换行选项均获取自 TextWrapper 实例的实例属性。 返回由输出行组成的列表，行尾不带换行符。 如果自动换行输出结果没有任何内容，则返回空列表。 fill(text) 对 text 中的单独段落自动换行并返回包含被自动换行段落的单独字符串。 具体实例比如我想格式化一个文本,每一行要求输出的文字固定字符的长度30,就可以使用textwrap这个模块 1234567891011121314151617&gt;&gt;&gt; from textwrap import wrap&gt;&gt;&gt;&gt;&gt;&gt; string = 'This is python programming language. One of its kind, it is also one of the most popular language in the world.'&gt;&gt;&gt;&gt;&gt;&gt; s = wrap(text = string, width = 30)&gt;&gt;&gt; print s&gt;&gt;&gt; ['This is python programming', 'language. One of its kind, it', 'is also one of the most', 'popular language in the world.']&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; for i in s: print i This is python programminglanguage. One of its kind, itis also one of the mostpopular language in the world.&gt;&gt;&gt;]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>standard_library</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python standard library http.server]]></title>
    <url>%2F2020%2F01%2F05%2Fpython-standard-library-http-server%2F</url>
    <content type="text"><![CDATA[python 标准库之 http.server 今天下午主要是陪我闺女,组装完成一个桌面足球,很开心的一下午。 孩子的童年只有一次,有时间多陪陪孩子吧。 python 标准库 http.server从python2时代开始 SimpleHttpServer就陪伴我走过那些快乐的时光。可以自己建立一个简单的文件服务器,让同事们通过浏览器就可以访问我电脑上的资源,而不需要http server或者 ftp软件。 到了python3时代,这个模块被合并进了http.server。 参考网址 这个模块定义了实现 HTTP 服务器（ Web 服务器）的类 。 HTTPServer 是 socketserver.TCPServer 的一个子类。它会创建和侦听 HTTP 套接字，并将请求调度给处理程序。用于创建和运行服务器的代码看起来像这样 1234def run(server_class=HTTPServer, handler_class=BaseHTTPRequestHandler): server_address = ('', 8000) httpd = server_class(server_address, handler_class) httpd.serve_forever() 核心类class http.server.HTTPServer(server_address, RequestHandlerClass) 该类基于 TCPServer 类，并会将服务器地址存入名为 server_name 和 server_port 的实例变量中。服务器可被处理程序通过 server 实例变量访问。 class http.server.ThreadingHTTPServer(server_address, RequestHandlerClass) 根据官方说明,这是一个基于 ThreadingMixIn的类,主要功能是使用线程处理请求。 实例变量BaseHTTPRequestHandler has the following instance variables: client_address 包含指向客户地址的元组类型数据(host,port) server 包含Server实例 close_connection 返回一个Boolean类型数据,在handle_one_request() ,表明另一个请求开始,或者当前请求关闭。 requestline 包含http请求行，. 这个属性应该用 handle_one_request()设置. 如果一个不存在的请求被执行,应将其设置成空字符串。 command 包含Http请求类型,例如:’Get’ path 包含请求url路径 request_version 包含请求的版本,例如:’ HTTP/1.0 ‘ headers 包含通过MessageClass 类声明的变量。实例会转化为http请求。http.client 中parse_headers() 方法可以验证一个非法的请求头,参照 RFC 2822 中请求头说明。 rfile 一个io.BufferedIOBase 输入流对象，读取可能输入数据。 wfile 根据客户端请求,返回数据 实例属性 server_version 格式化输出服务器版本信息,例如&#39;BaseHTTP/0.2&#39;. sys_version 包含系统版本,使用version_string 方法和server_version 类变量,例如:&#39;Python/1.4&#39;. error_message_format 声明错误信息 error_content_type 声明错误上下文类型默认值是 &#39;text/html&#39;. protocol_version 声明HTTP协议版本,例如:&#39;HTTP/1.1&#39;, 服务器会保持连接。 MessageClass 声明email.message.Message](https://docs.python.org/zh-cn/3.8/library/email.compat32-message.html#email.message.Message)-like 类处理请求头。通常不用重写,默认指向http.client.HTTPMessage属性。. responses 回应 通常使用send_response_only() 和send_error() 方法实现。 实例方法 handle() 调用handle_one_request() 方法一次(如果保持连接,会调用多次) 来管理http请求。. 此方法不需要重写,除此以外,可以重写 do_*() 等方法实现处理请求。 handle_one_request() 此方法不需要重写,实现处理 do_*()等方法. handle_expect_100() 当 HTTP/1.1 请求时,服务器期望返回 100-continue 并返回 200响应码。如果想拒绝客户端连接,会抛出一个异常。 send_error(code, message=None, explain=None) send_response(code, message=None) send_header(keyword, value) send_response_only(code, message=None) end_headers() flush_headers() log_request(code=’-‘, size=’-‘) log_error(…) log_message(format, …) version_string() date_time_string(timestamp=None) log_date_time_string() address_string() 创建一个简易服务器例如下面的代码: 12345678910import http.serverimport socketserverPORT = 8000Handler = http.server.SimpleHTTPRequestHandlerwith socketserver.TCPServer(("", PORT), Handler) as httpd: print("serving at port", PORT) httpd.serve_forever() 当然也可以通过命令行方式创建,例如: 1python -m http.server 8000 默认绑定本机的ip地址。 当然你可以指定一个ip地址,加入--bind参数 1python -m http.server 8000 --bind 127.0.0.1 3.8 新增 支持绑定ipv6地址 3.7 新增支持绑定一个cgi程序,例如 1python -m http.server --cgi 8000 一个具体应用的实例12345678910111213141516171819202122232425262728293031323334#!/usr/bin/env python from http.server import BaseHTTPRequestHandler, HTTPServer # HTTPRequestHandler classclass testHTTPServer_RequestHandler(BaseHTTPRequestHandler): # GET def do_GET(self): # Send response status code self.send_response(200) # Send headers self.send_header('Content-type','text/html') self.end_headers() # Send message back to client message = "Hello world!" # Write content as utf-8 data self.wfile.write(bytes(message, "utf8")) return def run(): print('starting server...') # Server settings # Choose port 8080, for port 80, which is normally used for a http server, you need root access server_address = ('127.0.0.1', 8081) httpd = HTTPServer(server_address, testHTTPServer_RequestHandler) print('running server...') httpd.serve_forever() run() 备注: 此处wfile.write方法 需要转成 byte类型, 可以参考stackoverflow上的关于这个问题的讨论:: python-3-x-basehttpserver-or-http-server 小结看完http.server 深有感触,一个简单的服务器学习了这么多http协议实现,看来还得继续深入理解。]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>standard_library</tag>
        <tag>http.server</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows jupyter notebook nbextension usage]]></title>
    <url>%2F2020%2F01%2F04%2Fwindows-jupyter-notebook-nbextension-usage%2F</url>
    <content type="text"><![CDATA[windows下jupyter 安装nbextension 插件填坑记 环境 软件和操作系统 版本号 操作系统 win7 64位 sp1 python版本 3.6.2 jupyter core 4.5.0 jupyter notebook 6.0.0 问题描述本来以为给jupyter安装个插件,分分钟搞定的事,结果三天了还是没解决。 我回家用win10的电脑,5分钟搞定。 尝试了各种方式,卸载重装,修改环境变量,换不同的python版本。后来我快要放放弃的时候，我终于搞定了。 问题定位我突然想到,是不是因为我安装了anaconda,于是增加了搜索关键字,终于发现了问题所在。 正确操作步骤 确定是已经安装好anaconda 要在anaconda prompt模式下(重要的事情说三遍,三遍,三遍，此处省略一万字,万马奔腾) pip install jupyter_contrib_nbextensions 配置：jupyter contrib nbextension install --user --skip-running-check 启动jupyter notebook，“Nbextensions”出现在导航栏中，在勾选目录。 查看 jupyter 版本123456789101112(base) C:\Users\Mr.Sui&gt;jupyter --versionjupyter core : 4.5.0jupyter-notebook : 6.0.0qtconsole : 4.5.1ipython : 7.6.1ipykernel : 5.1.1jupyter client : 5.3.1jupyter lab : 1.0.2nbconvert : 5.5.0ipywidgets : 7.5.0nbformat : 4.4.0traitlets : 4.3.2 有用的插件 代码导航功能 Table of Contents 变量检查器 Variable Inspector 显示单元格运行的时间和长度 Excute time 折叠/放下标题 Collapsible Headings 折叠代码 Codefolding 隐藏代码 hide input 隐藏选定代码 hide input all 隐藏所有代码 代码自动补全 Hinterland 通知 Notify Jupyter Notebook 首先你要勾选Notify扩展，其次再点击按钮正式启动。你选择的时间是Jupyter Notebook运行的最短时间，到点后它会向你发送通知 隐藏活动状态栏 zenmode tqdm_notebook 为循环代码显示执行进度条 12# 先安装 tqdm ：pip install tqdm# 使用时导入：from tqdm import tqdm_notebook 脚本自动保存 AutoSaveTime 参考文章官网教程 jupyter notebook的插件拓展—-jupyter_contrib_nbextensions 使用Jupyter Notebook编写技术文档]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>python</tag>
        <tag>juypter</tag>
        <tag>nbextension</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python standard library webbrowser]]></title>
    <url>%2F2020%2F01%2F03%2Fpython-standard-library-webbrowser%2F</url>
    <content type="text"><![CDATA[python 标准库之 webbrowser没啥前提一张图表示我现在的心情 标准库 webbrowserwebbrowser 模块提供了一个高级接口，允许向用户显示基于Web的文档。 在大多数情况下，只需从该模块调用 open() 函数就可以了。 在 Unix 下，图形浏览器在 X11 下是首选，但如果图形浏览器不可用或 X11 显示不可用，则将使用文本模式浏览器。 如果使用文本模式浏览器，则调用进程将阻塞，直到用户退出浏览器。 如果存在环境变量 BROWSER ，则将其解释为 os.pathsep 分隔的浏览器列表，以便在平台默认值之前尝试。 当列表部分的值包含字符串 ％s 时，它被解释为一个文字浏览器命令行，用于替换 ％s 的参数 URL ；如果该部分不包含 ％s，则它只被解释为要启动的浏览器的名称。 脚本 webbrowser 可以用作模块的命令行界面。它接受一个 URL 作为参数。还接受以下可选参数：-n 如果可能，在新的浏览器窗口中打开 URL ； -t 在新的浏览器页面（“标签”）中打开 URL。这些选择当然是相互排斥的。用法示例: 1python -m webbrowser -t "https://jeffsui.github.io" 异常exception webbrowser.Error 发生浏览器控件错误时引发异常。 函数 webbrowser.`open`(url, new=0, autoraise=True) 使用默认浏览器显示 url。 如果 new 为 0，则尽可能在同一浏览器窗口中打开 url。 如果 new 为 1，则尽可能打开新的浏览器窗口。 如果 new 为 2，则尽可能打开新的浏览器页面（“标签”）。 如果 autoraise 为 “True”，则会尽可能置前窗口（请注意，在许多窗口管理器下，无论此变量的设置如何，都会置前窗口）。请注意，在某些平台上，尝试使用此函数打开文件名，可能会起作用并启动操作系统的关联程序。 但是，这种方式不被支持也不可移植。使用 url 参数会引发 auditing event webbrowser.open 。 webbrowser.open_new(url) 如果可能，在默认浏览器的新窗口中打开 url，否则，在唯一的浏览器窗口中打开 url。 webbrowser.open_new_tab(url) 如果可能，在默认浏览器的新页面（“标签”）中打开 url，否则等效于 open_new()。 webbrowser.get(*using=None*) 返回浏览器类型为 using 指定的控制器对象。 如果 using 为 None，则返回适用于调用者环境的默认浏览器的控制器。 webbrowser.register(name, constructor, instance=None, **, preferred=False*) 注册 name 浏览器类型。 注册浏览器类型后， get() 函数可以返回该浏览器类型的控制器。 如果没有提供 instance，或者为 None，constructor 将在没有参数的情况下被调用，以在需要时创建实例。 如果提供了 instance，则永远不会调用 constructor，并且可能是 None。将 preferred 设置为 True 使得这个浏览器成为 get() 不带参数调用的首选结果。 否则，只有在您计划设置 BROWSER 变量，或使用与您声明的处理程序的名称相匹配的非空参数调用 get() 时，此入口点才有用。 浏览器类型预定义了许多浏览器类型。 此表给出了可以传递给 get() 函数的类型名称以及控制器类的相应实例化，这些都在此模块中定义。 类型名 类名 注释 &#39;mozilla&#39; Mozilla(&#39;mozilla&#39;) &#39;firefox&#39; Mozilla(&#39;mozilla&#39;) &#39;netscape&#39; Mozilla(&#39;netscape&#39;) &#39;galeon&#39; Galeon(&#39;galeon&#39;) &#39;epiphany&#39; Galeon(&#39;epiphany&#39;) &#39;skipstone&#39; BackgroundBrowser(&#39;skipstone&#39;) &#39;kfmclient&#39; Konqueror() (1) &#39;konqueror&#39; Konqueror() (1) &#39;kfm&#39; Konqueror() (1) &#39;mosaic&#39; BackgroundBrowser(&#39;mosaic&#39;) &#39;opera&#39; Opera() &#39;grail&#39; Grail() &#39;links&#39; GenericBrowser(&#39;links&#39;) &#39;elinks&#39; Elinks(&#39;elinks&#39;) &#39;lynx&#39; GenericBrowser(&#39;lynx&#39;) &#39;w3m&#39; GenericBrowser(&#39;w3m&#39;) &#39;windows-default&#39; WindowsDefault (2) &#39;macosx&#39; MacOSX(&#39;default&#39;) (3) &#39;safari&#39; MacOSX(&#39;safari&#39;) (3) &#39;google-chrome&#39; Chrome(&#39;google-chrome&#39;) &#39;chrome&#39; Chrome(&#39;chrome&#39;) &#39;chromium&#39; Chromium(&#39;chromium&#39;) &#39;chromium-browser&#39; Chromium(&#39;chromium-browser&#39;) 简单的例子: 1234567url = 'http://docs.python.org/'# Open URL in a new tab, if a browser window is already open.webbrowser.open_new_tab(url)# Open URL in new window, raising the window if possible.webbrowser.open_new(url) 浏览器控制器对象浏览器控制器提供三个与模块级便捷函数相同的方法： controller.open(url, new=0, autoraise=True)` 使用此控制器处理的浏览器显示 url。 如果 new 为 1，则尽可能打开新的浏览器窗口。 如果 new 为 2，则尽可能打开新的浏览器页面（“标签”）。 controller.open_new(url)` 如果可能，在此控制器处理的浏览器的新窗口中打开 url ，否则，在唯一的浏览器窗口中打开 url 。 别名 open_new()。 controller.open_new_tab(url)` 如果可能，在此控制器处理的浏览器的新页面（“标签”）中打开 url，否则等效于 open_new() 总结标准库中的webbrowser只提供了一个简单的操作本地浏览器的接口。]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>standard_library</tag>
        <tag>webbrowser</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python standard library csv]]></title>
    <url>%2F2020%2F01%2F02%2Fpython-standard-library-csv%2F</url>
    <content type="text"><![CDATA[python 标准库学习之csv前言2019年立的flag,今年继续,标准库系列文章继续更新。 今天是真冷啊,屋里头才16℃,只能用一张图来表示我的心情。 标准库 csv文档路径python标准库csv CSV 文件格式文件扩展名为.csv,通用的电子表格文件格式,经常使用在数据分析中。 分隔符可能有所差别, python中的csv模块提供了对csv文件的读写操作,非常方便。 csv 常用方法csv.reader(csvfile,dialect=&#39;excel&#39;, ***fmtparams) 返回一个reader对象,该对象遍历csvfile。csv对象可以是任何对象,只要这个对象支持iteratable协议,并在每次调用__next__()方法时都返回字符串即可。如果csvfile是文件对象,则打开它时应使用newline=&#39;&#39;。可选参数dialect是用于不同的csv文件类型,它可以是 Dialect 类的子类的实例，也可以是 list_dialects() 函数返回的字符串之一。完整的解释可以参考csv文件格式参数。 csv文件的每一行都会默认当做字符串列表解析,除非指定了 QUOTE_NONNUMERIC 格式选项（在这种情况下，未加引号的字段会转换为浮点数），否则不会执行自动数据类型转换。 一个读文件例子 1234567&gt;&gt;&gt; import csv&gt;&gt;&gt; with open('eggs.csv', newline='') as csvfile:... spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')... for row in spamreader:... print(', '.join(row))Spam, Spam, Spam, Spam, Spam, Baked BeansSpam, Lovely Spam, Wonderful Spam csv.writer(csvfile, dialect=&#39;excel&#39;, **fmtparams) 返回一个 writer 对象，该对象负责将用户的数据在给定的文件类对象上转换为带分隔符的字符串。csvfile 可以是具有 write() 方法的任何对象。如果 csvfile 是文件对象，则打开它时应使用 newline=&#39;&#39;。 为了尽量简化与数据库 API 模块之间的对接，None 值会写入为空字符串。虽然这个转换是不可逆的，但它让 SQL 空数据值转储到 CSV 文件更容易，而无需预处理从 cursor.fetch* 调用返回的数据。写入前，所有非字符串数据都先用 str() 转化为字符串再写入。 一个写文件例子 123456import csvwith open('eggs.csv', 'w', newline='') as csvfile: spamwriter = csv.writer(csvfile, delimiter=' ', quotechar='|', quoting=csv.QUOTE_MINIMAL) spamwriter.writerow(['Spam'] * 5 + ['Baked Beans']) spamwriter.writerow(['Spam', 'Lovely Spam', 'Wonderful Spam']) csv.register_dialect(name[, dialect[, **fmtparams]]) 将 name 与 dialect 关联起来。name 必须是字符串。要指定变种 (dialect)，可以给出 Dialect 的子类，或给出 fmtparams 关键字参数，或两者都给出（此时关键字参数会覆盖 dialect 参数）。 有关方言和格式设置参数的完整详细信息，请参见 方言格式参数 部分。 其他方法: csv.unregister_dialect(name) 从变种注册表中删除 name 对应的变种。如果 name 不是已注册的变种名称，则抛出 Error 异常。 csv.get_dialect(name) 返回 name 对应的变种。如果 name 不是已注册的变种名称，则抛出 Error 异常。该函数返回的是不可变的 Dialect 对象。 csv.list_dialects() 返回所有已注册变种的名称。 csv.field_size_limit([new_limit]) 返回解析器当前允许的最大字段大小。如果指定了 new_limit，则它将成为新的最大字段大小。 csv模块定义的类class csv.DictReader(*f*, *fieldnames=None*, *restkey=None*, *restval=None*, *dialect=&#39;excel&#39;*, **args*, ***kwds*) 创建一个对象，该对象在操作上类似于常规 reader，但是将每行中的信息映射到一个 dict，该 dict 的键由 fieldnames 可选参数给出。 fieldnames 参数是一个 sequence。如果省略 fieldnames，则文件 f 第一行中的值将用作字段名。无论字段名是如何确定的，字典都将保留其原始顺序。 如果某一行中的字段多于字段名，则其余字段将放入列表中，字段名由 restkey 指定（默认为 None）。如果非空白行的字段少于字段名，则缺少的值将用 None 填充。 所有其他可选或关键字参数都传递给底层的 reader 实例。 3.8 中,返回的行是 dict 类型。 一个使用DictReader例子 1234567891011&gt;&gt;&gt; import csv&gt;&gt;&gt; with open('names.csv', newline='') as csvfile:... reader = csv.DictReader(csvfile)... for row in reader:... print(row['first_name'], row['last_name'])...Eric IdleJohn Cleese&gt;&gt;&gt; print(row)&#123;'first_name': 'John', 'last_name': 'Cleese'&#125; class csv.DictWriter(f, fieldnames, restval=&#39;&#39;, extrasaction=&#39;raise&#39;, dialect=&#39;excel&#39;, **args, **kwds) 创建一个对象，该对象在操作上类似常规 writer，但会将字典映射到输出行。 fieldnames 参数是由键组成的 序列，它指定字典中值的顺序，这些值会按指定顺序传递给 writerow() 方法并写入文件 f。 如果字典缺少 fieldnames 中的键，则可选参数 restval 用于指定要写入的值。 如果传递给 writerow() 方法的字典的某些键在 fieldnames 中找不到，则可选参数 extrasaction 用于指定要执行的操作。 如果将其设置为默认值 &#39;raise&#39;，则会引发 ValueError。 如果将其设置为 &#39;ignore&#39;，则字典中的其他键值将被忽略。 所有其他可选或关键字参数都传递给底层的 writer 实例。 注意，与 DictReader 类不同，DictWriter 类的 fieldnames 参数不是可选参数 一个使用DictWriter写入文件例子 12345678910import csvwith open('names.csv', 'w', newline='') as csvfile: fieldnames = ['first_name', 'last_name'] writer = csv.DictWriter(csvfile, fieldnames=fieldnames) writer.writeheader() writer.writerow(&#123;'first_name': 'Baked', 'last_name': 'Beans'&#125;) writer.writerow(&#123;'first_name': 'Lovely', 'last_name': 'Spam'&#125;) writer.writerow(&#123;'first_name': 'Wonderful', 'last_name': 'Spam'&#125;) 其他方法: class csv.Dialect Dialect 类是主要依赖于其属性的容器类，用于将定义好的参数传递给特定的 reader 或 writer 实例。 class csv.excel excel 类定义了 Excel 生成的 CSV 文件的常规属性。它在变种注册表中的名称是 &#39;excel&#39;。 class csv.excel_tab excel_tab 类定义了 Excel 生成的、制表符分隔的 CSV 文件的常规属性。它在变种注册表中的名称是 &#39;excel-tab&#39;。 class csv.unix_dialect unix_dialect 类定义了在 UNIX 系统上生成的 CSV 文件的常规属性，即使用 &#39;\n&#39; 作为换行符，且所有字段都有引号包围。它在变种注册表中的名称是 &#39;unix&#39;。 class csv.SnifferSniffer 类用于推断 CSV 文件的格式。 Sniffer 类提供了两个方法： sniff(sample, delimiters=None) 分析给定的 sample 并返回一个 Dialect 子类，该子类中包含了分析出的格式参数。如果给出可选的 delimiters 参数，则该参数会被解释为字符串，该字符串包含了可能的有效定界符。 has_header(sample) 分析示例文本（假定为 CSV 格式），如果第一行很可能是一系列列标题，则返回 True。 一个使用Sniffer的例子: 12345with open('example.csv', newline='') as csvfile: dialect = csv.Sniffer().sniff(csvfile.read(1024)) csvfile.seek(0) reader = csv.reader(csvfile, dialect) # ... process CSV file contents here ... csv 中定义的常量 csv.QUOTE_ALL 指示 writer 对象给所有字段加上引号。 csv.QUOTE_MINIMAL 指示 writer 对象仅为包含特殊字符（例如 定界符、引号字符 或 行结束符 中的任何字符）的字段加上引号。 csv.QUOTE_NONNUMERIC 指示 writer 对象为所有非数字字段加上引号。指示 reader 将所有未用引号引出的字段转换为 float 类型。 csv.QUOTE_NONE 指示 writer 对象不使用引号引出字段。当 定界符 出现在输出数据中时，其前面应该有 转义符。如果未设置 转义符，则遇到任何需要转义的字符时，writer 都会抛出 Error 异常。指示 reader 不对引号字符进行特殊处理。 csv模块定义了以下异常： exception csv.Error 该异常可能由任何发生错误的函数抛出。 备注如果没有指定 newline=&#39;&#39;，则嵌入引号中的换行符将无法正确解析，并且在写入时，使用 \r\n 换行的平台会有多余的 \r 写入。由于 csv 模块会执行自己的（通用）换行符处理，因此指定 newline=&#39;&#39; 应该总是安全的。 总结csv模块是一个非常实用的处理csv文件的标准库，提供了两种处理方法。 一个是把csv文件对象当作字符串列表解析csv文件的方法,reader， writer， 另一个是把csv文件对象当作字典解析的类dictReader, dictWriter。]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>standard_library</tag>
        <tag>csv</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[using python venv to create virtual environment]]></title>
    <url>%2F2019%2F12%2F26%2Fusing-python-venv-to-create-virtual-environment%2F</url>
    <content type="text"><![CDATA[python env 创建虚拟环境前言又断更了,长此以往,我可能无法完成100天打卡任务了。 红包是刺激自己前进的动力。 python 标准库03之虚拟环境创建参考文档 python目前官方推荐的工具是venv 顺便介绍下目前常用的python虚拟环境工具 virsualenv pyvenv (3.3,3.4中推荐的虚拟环境创建工具,3.6中被弃用) venv(3.6以后推荐的虚拟环境创建工具) 创建虚拟环境使用下面的命令创建一个虚拟环境 1python3 -m venv /path/to/new/virtual/environment windows下使用venv来创建虚拟环境 1c:\&gt;c:\Python35\python -m venv c:\path\to\myenv 使用-h参数可以查看venv命令行的帮助文档 1234567891011121314151617181920212223242526usage: venv [-h] [--system-site-packages] [--symlinks | --copies] [--clear] [--upgrade] [--without-pip] [--prompt PROMPT] ENV_DIR [ENV_DIR ...]Creates virtual Python environments in one or more target directories.positional arguments: ENV_DIR A directory to create the environment in.optional arguments: -h, --help show this help message and exit --system-site-packages Give the virtual environment access to the system site-packages dir. --symlinks Try to use symlinks rather than copies, when symlinks are not the default for the platform. --copies Try to use copies rather than symlinks, even when symlinks are the default for the platform. --clear Delete the contents of the environment directory if it already exists, before environment creation. --upgrade Upgrade the environment directory to use this version of Python, assuming Python has been upgraded in-place. --without-pip Skips installing or upgrading pip in the virtual environment (pip is bootstrapped by default) --prompt PROMPT Provides an alternative prompt prefix for this environment. 除非你使用了--without-pip 参数,否则 ensurepip 模块会默认安装pip指令到创建好的虚拟环境中。 一旦一个虚拟环境被创建，可以通过下面的命令激活这个虚拟环境。不同平台下的激活方式略有不同,下面总结了各个平台下虚拟环境的激活命令脚本,请参考。 激活虚拟环境 平台 Shell 用于激活虚拟环境的命令 POSIX bash/zsh $ source /bin/activate fish $ . /bin/activate.fish csh/tcsh $ source /bin/activate.csh PowerShell Core $ /bin/Activate.ps1 Windows cmd.exe C:> \Scripts\activate.bat PowerShell PS C:> \Scripts\Activate.ps1 You don’t specifically need to activate an environment; activation just prepends the virtual environment’s binary directory to your path, so that “python” invokes the virtual environment’s Python interpreter and you can run installed scripts without having to use their full path. However, all scripts installed in a virtual environment should be runnable without activating it, and run with the virtual environment’s Python automatically. You can deactivate a virtual environment by typing “deactivate” in your shell. The exact mechanism is platform-specific and is an internal implementation detail (typically a script or shell function will be used). 你无需关心如何激活一个虚拟环境；使用相对于项目当前路径下的可执行方法,python解析器就可以激活虚拟环境。已经激活的虚拟环境, 就可以使用python的命令直接执行脚本或者安装其他软件包到当前的虚拟环境，而不需要关心是否会污染本地python环境的问题。同样，使用deactivate 就可以退出当前的虚拟环境。 API下面展示的是一个使用EnvBuilder 创建一个自定义虚拟环境的脚本。 1class venv.EnvBuilder(system_site_packages=False, clear=False, symlinks=False, upgrade=False, with_pip=False, prompt=None) create(env_dir) system_site_packages – 一个Boolean值,是否将site-packages添加到虚拟环境中 默认是False. clear – 一个Boolean值,如果为真,将会在创建环境之前清除已经存在的目标路径. symlinks – 一个Boolean值,如果为真,将会在创建环境前删除包含内容的目录 upgrade – 一个Boolean值,如果为真, 则将用正在运行的Python升级现有环境 - 用于在Python就地升级（默认为False）时使用。. with_pip – 一个Boolean值,如果为真,pip命令将会安装到虚拟环境中 ,使用 ensurepip 的默认 --default-pip 参数选项. prompt – 在激活虚拟环境后使用的字符串（默认为None表示将使用环境的目录名称）。. 1234567891011def create(self, env_dir): """ Create a virtualized Python environment in a directory. env_dir is the target directory to create an environment in. """ env_dir = os.path.abspath(env_dir) context = self.ensure_directories(env_dir) self.create_configuration(context) self.setup_python(context) self.setup_scripts(context) self.post_setup(context) ensure_directories(env_dir) 创建环境目录和所有必需的目录，并返回一个上下文对象。这只是属性（如路径）的持有者，供其他方法使用。这些目录已被允许存在，只要其中一个clear或被upgrade指定为允许在现有环境目录上进行操作即可。 create_configuration(context) pyvenv.cfg在环境中创建配置文件。 setup_python(context) 在环境中创建Python可执行文件（以及Windows下的DLL）的副本。在POSIX系统中，如果一个特定的可执行文件 python3.x使用，符号链接python和python3将创建指向该可执行文件，除非已存在具有这些名称的文件。 setup_scripts(context) 将适合该平台的激活脚本安装到虚拟环境中。 post_setup(context) 一种占位符方法，可以在第三方实现中重写，以在虚拟环境中预安装包或执行其他后创建步骤。 此外，EnvBuilder提供这种工具方法，可以从被称为setup_scripts()或post_setup()在子类中，以协助安装自定义脚本到虚拟环境中。install_scripts（上下文，路径）路径是应包含子目录“common”，“posix”，“nt”的目录的路径，每个目录都包含指向环境中bin目录的脚本。os.name经过一些文本替换占位符后，“common”的内容和相应的目录被复制： __VENV_DIR__ 被替换为环境目录的绝对路径。 __VENV_NAME__ 被替换为环境名称（环境目录的最终路径段）。 __VENV_PROMPT__ 被提示符替换（环境名称由括号括起来，并带有下面的空格） __VENV_BIN_NAME__被替换为bin目录的名称（bin或者Scripts）。 __VENV_PYTHON__被替换为环境可执行文件的绝对路径。允许目录存在（用于在现有环境正在升级时）。 还有一个模块级的便利功能： 12venv.create（env_dir，system_site_packages = False，clear = False，symlinks =False，with_pip = False ） EnvBuilder用给定的关键字参数创建一个参数，并调用create()并使用env_dir参数。 一个扩展EnvBuilder例子以下脚本展示了如何EnvBuilder通过实现将setuptools和pip安装到创建的虚拟环境中的子类来进行扩展：import osimport os.pathfrom subprocess import Popen, PIPEimport sysfrom threading import Threadfrom urllib.parse import urlparsefrom urllib.request import urlretrieveimport venvclass ExtendedEnvBuilder(venv.EnvBuilder): """ This builder installs setuptools and pip so that you can pip or easy_install other packages into the created virtual environment. :param nodist: If true, setuptools and pip are not installed into the created virtual environment. :param nopip: If true, pip is not installed into the created virtual environment. :param progress: If setuptools or pip are installed, the progress of the installation can be monitored by passing a progress callable. If specified, it is called with two arguments: a string indicating some progress, and a context indicating where the string is coming from. The context argument can have one of three values: 'main', indicating that it is called from virtualize() itself, and 'stdout' and 'stderr', which are obtained by reading lines from the output streams of a subprocess which is used to install the app. If a callable is not specified, default progress information is output to sys.stderr. """ def __init__(self, *args, **kwargs): self.nodist = kwargs.pop('nodist', False) self.nopip = kwargs.pop('nopip', False) self.progress = kwargs.pop('progress', None) self.verbose = kwargs.pop('verbose', False) super().__init__(*args, **kwargs) def post_setup(self, context): """ Set up any packages which need to be pre-installed into the virtual environment being created. :param context: The information for the virtual environment creation request being processed. """ os.environ['VIRTUAL_ENV'] = context.env_dir if not self.nodist: self.install_setuptools(context) # Can't install pip without setuptools if not self.nopip and not self.nodist: self.install_pip(context) def reader(self, stream, context): """ Read lines from a subprocess' output stream and either pass to a progress callable (if specified) or write progress information to sys.stderr. """ progress = self.progress while True: s = stream.readline() if not s: break if progress is not None: progress(s, context) else: if not self.verbose: sys.stderr.write('.') else: sys.stderr.write(s.decode('utf-8')) sys.stderr.flush() stream.close() def install_script(self, context, name, url): _, _, path, _, _, _ = urlparse(url) fn = os.path.split(path)[-1] binpath = context.bin_path distpath = os.path.join(binpath, fn) # Download script into the virtual environment's binaries folder urlretrieve(url, distpath) progress = self.progress if self.verbose: term = '\n' else: term = '' if progress is not None: progress('Installing %s ...%s' % (name, term), 'main') else: sys.stderr.write('Installing %s ...%s' % (name, term)) sys.stderr.flush() # Install in the virtual environment args = [context.env_exe, fn] p = Popen(args, stdout=PIPE, stderr=PIPE, cwd=binpath) t1 = Thread(target=self.reader, args=(p.stdout, 'stdout')) t1.start() t2 = Thread(target=self.reader, args=(p.stderr, 'stderr')) t2.start() p.wait() t1.join() t2.join() if progress is not None: progress('done.', 'main') else: sys.stderr.write('done.\n') # Clean up - no longer needed os.unlink(distpath) def install_setuptools(self, context): """ Install setuptools in the virtual environment. :param context: The information for the virtual environment creation request being processed. """ url = 'https://bitbucket.org/pypa/setuptools/downloads/ez_setup.py' self.install_script(context, 'setuptools', url) # clear up the setuptools archive which gets downloaded pred = lambda o: o.startswith('setuptools-') and o.endswith('.tar.gz') files = filter(pred, os.listdir(context.bin_path)) for f in files: f = os.path.join(context.bin_path, f) os.unlink(f) def install_pip(self, context): """ Install pip in the virtual environment. :param context: The information for the virtual environment creation request being processed. """ url = 'https://raw.github.com/pypa/pip/master/contrib/get-pip.py' self.install_script(context, 'pip', url)def main(args=None): compatible = True if sys.version_info &lt; (3, 3): compatible = False elif not hasattr(sys, 'base_prefix'): compatible = False if not compatible: raise ValueError('This script is only for use with ' 'Python 3.3 or later') else: import argparse parser = argparse.ArgumentParser(prog=__name__, description='Creates virtual Python ' 'environments in one or ' 'more target ' 'directories.') parser.add_argument('dirs', metavar='ENV_DIR', nargs='+', help='A directory in which to create the 'virtual environment.') parser.add_argument('--no-setuptools', default=False, action='store_true', dest='nodist', help="Don't install setuptools or pip in the " "virtual environment.") parser.add_argument('--no-pip', default=False, action='store_true', dest='nopip', help="Don't install pip in the virtual " "environment.") parser.add_argument('--system-site-packages', default=False, action='store_true', dest='system_site', help='Give the virtual environment access to the ' 'system site-packages dir.') if os.name == 'nt': use_symlinks = False else: use_symlinks = True parser.add_argument('--symlinks', default=use_symlinks, action='store_true', dest='symlinks', help='Try to use symlinks rather than copies, ' 'when symlinks are not the default for ' 'the platform.') parser.add_argument('--clear', default=False, action='store_true', dest='clear', help='Delete the contents of the ' 'virtual environment ' 'directory if it already ' 'exists, before virtual ' 'environment creation.') parser.add_argument('--upgrade', default=False, action='store_true', dest='upgrade', help='Upgrade the virtual ' 'environment directory to ' 'use this version of ' 'Python, assuming Python ' 'has been upgraded ' 'in-place.') parser.add_argument('--verbose', default=False, action='store_true', dest='verbose', help='Display the output ' 'from the scripts which ' 'install setuptools and pip.') options = parser.parse_args(args) if options.upgrade and options.clear: raise ValueError('you cannot supply --upgrade and --clear together.') builder = ExtendedEnvBuilder(system_site_packages=options.system_site, clear=options.clear, symlinks=options.symlinks, upgrade=options.upgrade, nodist=options.nodist, nopip=options.nopip, verbose=options.verbose) for d in options.dirs: builder.create(d)if __name__ == '__main__': rc = 1 try: main() rc = 0 except Exception as e: print('Error: %s' % e, file=sys.stderr) sys.exit(rc) 实践在windows下vscode中通过venv 创建虚拟环境步骤: powershell下,执行命令 python -m venv .venv 执行激活命令 .\Scripts\activate.ps1 退出虚拟环境 在项目目录下执行deactivate 即可。]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>standard_library</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python standard library -2 dictionary]]></title>
    <url>%2F2019%2F12%2F23%2Fpython-standard-library-2-dictionary%2F</url>
    <content type="text"><![CDATA[python 标准库学习笔记 – dictionary0.0 前言家里孩子发烧了,延迟更新标准库学习笔记 折腾了三个晚上,一家三口都累倒了。 人生就好比一个蹒跚学步的孩童,很容易被外界环境影响。 1.0 标准库- 内置函数参考文档: 内置类型-字典 python中主要内置类型包括numbers,sequences,mappings,classes,instance和exception。 1.1 逻辑值检测任何对象都可以进行逻辑值检测,以便在if 或while作为条件或是作为上下文所指返回值是布尔类型的表达式来使用。所以就有下面的用法。 12345L = []if(L): passwhile(L): pass 一个对象在默认情况下被认为是True,除非该对象定义了__boolean__() 方法且返回False 或者定义__len__()方法且返回零。下面三种情况的内置对象都会被认为是逻辑假值。 None 或 False 任何数值类型的零 空的序列和多项集 包括 空字符串、空列表、空集合、空字典、空元组以及空数列(reange(0)) 1.2 布尔运算 – and,or,not 运算 结果 注释 x or y if x is false, then y, else x 短路运算,只有第一个为假的时候才会对第二个求值 x and y if x is false, then x, else y 短路运算,只有第二个为真的时候才会对第二个求值 not x if x is false, then True, else False 逻辑取反 1.3 比较运算 运算 含义 &lt; 严格小于 &lt;= 小于或等于 &gt; 严格大于 &gt;= 大于或等于 == 等于 != 不等于 is 对象标识 is not 否定的对象标识 ==tips== 不同类型的对象之间不能使用比较运算,除非定义了对应的方法，例如__lt__(),__eq__()这样的函数 具有不同标识的类的实例,比较结果为False,除非你自己定义了__eq__()方法 一个类实例不能与相同类或的其他实例或其他类型的对象进行排序,除非定义了对应的方法，包括 __lt__(), __le__(), __gt__() 以及 __ge__() 1.4 数字类型 – int、float、complexpython中存在三种不同的数字类型: 整数, 浮点数 和 复数*。 运算 结果 注释 完整文档 x + y x 和 y 的和 x - y x 和 y 的差 x * y x 和 y 的乘积 x / y x 和 y 的商 x // y x 和 y 的商数 取整 x % y remainder of x / y 不可用于负数 -x x 取反 +x x 不变 abs(x) x 的绝对值或大小 abs() int(x) 将 x 转换为整数 小数会被截断 int() float(x) 将 x 转换为浮点数 (4)(6) float() complex(re, im) 一个带有实部 re 和虚部 im 的复数。im 默认为0。 (6) complex() c.conjugate() 复数 c 的共轭 divmod(x, y) (x // y, x % y) (2) divmod() pow(x, y) x 的 y 次幂 (5) pow() x ** y x 的 y 次幂 (5) 所有的numbers.Real类型（包括int 和 float)还包括以下运算: 运算 结果 math.trunc(x) x 截断为 Integral round(x[, n\]) x 舍入到 n 位小数，半数值会舍入到偶数。 如果省略 n，则默认为 0。 math.floor(x) &lt;= x 的最大 Integral math.ceil(x) &gt;= x 的最小 Integral 1.5 整数类型的附加方法int.bit_length() 返回以二进制表示一个整数锁需要的位数，不包括符号位和前面的零 1.6 浮点数类型的附加方法float.as_integer_ratio() 返回一对整数，其比率正好等于原浮点数并且分母为正数。 无穷大会引发 OverflowError 而 NaN 则会引发 ValueError。 float.is_integer() 如果 float 实例可用有限位整数表示则返回 True，否则返回 False: float.hex() 以十六进制字符串的形式返回一个浮点数表示。 对于有限浮点数，这种表示法将总是包含前导的 0x 和尾随的 p 加指数。 classmethod float.fromhex(s) 返回以十六进制字符串 s 表示的浮点数的类方法。 字符串 s 可以带有前导和尾随的空格。 ==tips==: float.hex() 是实例方法, float.fromhex(s)是类方法 1234&gt;&gt;&gt; float.fromhex('0x3.a7p10')3740.0&gt;&gt;&gt; float.hex(3740.0)'0x1.d380000000000p+11' 1.7 数字类型的哈希运算一个例子说明 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import sys, mathdef hash_fraction(m, n): """Compute the hash of a rational number m / n. Assumes m and n are integers, with n positive. Equivalent to hash(fractions.Fraction(m, n)). """ P = sys.hash_info.modulus # Remove common factors of P. (Unnecessary if m and n already coprime.) while m % P == n % P == 0: m, n = m // P, n // P if n % P == 0: hash_value = sys.hash_info.inf else: # Fermat's Little Theorem: pow(n, P-1, P) is 1, so # pow(n, P-2, P) gives the inverse of n modulo P. hash_value = (abs(m) % P) * pow(n, P - 2, P) % P if m &lt; 0: hash_value = -hash_value if hash_value == -1: hash_value = -2 return hash_valuedef hash_float(x): """Compute the hash of a float x.""" if math.isnan(x): return sys.hash_info.nan elif math.isinf(x): return sys.hash_info.inf if x &gt; 0 else -sys.hash_info.inf else: return hash_fraction(*x.as_integer_ratio())def hash_complex(z): """Compute the hash of a complex number z.""" hash_value = hash_float(z.real) + sys.hash_info.imag * hash_float(z.imag) # do a signed reduction modulo 2**sys.hash_info.width M = 2**(sys.hash_info.width - 1) hash_value = (hash_value &amp; (M - 1)) - (hash_value &amp; M) if hash_value == -1: hash_value = -2 return hash_value 1.8 映射类型 – dictpython中目前只有一种映射类型, 字典,映射属于可变对象。映射类型会将hashtable值映射到任意对象. 字典的键 几乎可以是任意值， 可hash的任意值,也就是包含列表、字典和其他可变类型的值,不可以用来充当字典中的键。 1.创建字典字典可以通过将以逗号分隔的 键: 值 对列表包含于花括号之内来创建，例如: {&#39;jack&#39;: 4098, &#39;sjoerd&#39;: 4127} 或 {4098: &#39;jack&#39;, 4127: &#39;sjoerd&#39;}，也可以通过 dict 构造器来创建。 2.构造函数class dict(**kwarg) class dict(mapping, **kwarg) class dict(iterable, **kwarg) 3. 其他函数 函数名 描述 list(d) 返回字典 d 中使用的所有键的列表。 len(d) 返回字典 d 中的项数。 d[key] 返回 d 中以 key 为键的项。 如果映射中不存在 key 则会引发 KeyError。 [1] d[key] = value 给d[key]的值设为value del d[key] 将 d[key] 从 d 中移除。 如果映射中不存在 key 则会引发 KeyError。 key in d 如果 d 中存在键 key 则返回 True，否则返回 False。 key not in d 等价于 not key in d。 iter(d) 返回以字典的键为元素的迭代器 clear() 移除字典中的所有元素。 copy() 返回原字典的浅拷贝。 classmethod fromkeys(iterable[, value]) 使用来自 iterable 的键创建一个新字典，并将键值设为 value。 get(key[, default]) 如果 key 存在于字典中则返回 key 的值，否则返回 default。 如果 default 未给出则默认为 None，因而此方法绝不会引发 KeyError。 items() 返回由字典项 ((键, 值) 对) 组成的一个新视图。 keys() 返回由字典键组成的一个新视图 pop(key[, default]) 如果 key 存在于字典中则将其移除并返回其值，否则返回 default。 如果 default 未给出且 key 不存在于字典中，则会引发 KeyError。 popitem() 从字典中移除并返回一个 (键, 值) 对。 键值对会按 LIFO 的顺序被返回。 reversed(d) 返回一个逆序获取字典键的迭代器 setdefault(key[, default]) 如果字典存在键 key ，返回它的值。如果不存在，插入值为 default 的键 key ，并返回 default 。 default 默认为 None。 update([other]) 使用来自 other 的键/值对更新字典，覆盖原有的键。 values() 返回由字典值组成的一个新视图 [2] 1234567891011121314#[1] 如果字典的子类定义了方法 __missing__() 并且 key 不存在，则 d[key] 操作将调用该方法并附带键 key 作为参数。 d[key] 随后将返回或引发 __missing__(key) 调用所返回或引发的任何对象或异常。 没有其他操作或方法会发起调用 __missing__()。 如果未定义 __missing__()，则会引发 KeyError。 __missing__() 必须是一个方法；它不能是一个实例变量:&gt;&gt;&gt; class Counter(dict):... def __missing__(self, key):... return 0&gt;&gt;&gt; c = Counter()&gt;&gt;&gt; c['red']0&gt;&gt;&gt; c['red'] += 1&gt;&gt;&gt; c['red']1#[2]两个 dict.values() 视图之间的相等性比较将总是返回 False。 这在 dict.values() 与其自身比较时也同样适用: &gt;&gt;&gt; d = &#123;'a': 1&#125;&gt;&gt;&gt; d.values() == d.values()False 字典比较: 两个字典的比较当且仅当它们具有相同的 (键, 值) 对时才会相等（不考虑顺序）。 排序比较 (‘&lt;’, ‘&lt;=’, ‘&gt;=’, ‘&gt;’) 会引发 TypeError。 字典会保留插入时的顺序。 请注意对键的更新不会影响顺序。 删除并再次添加的键将被插入到末尾。 1234567891011121314&gt;&gt;&gt; d = &#123;"one": 1, "two": 2, "three": 3, "four": 4&#125;&gt;&gt;&gt; d&#123;'one': 1, 'two': 2, 'three': 3, 'four': 4&#125;&gt;&gt;&gt; list(d)['one', 'two', 'three', 'four']&gt;&gt;&gt; list(d.values())[1, 2, 3, 4]&gt;&gt;&gt; d["one"] = 42&gt;&gt;&gt; d&#123;'one': 42, 'two': 2, 'three': 3, 'four': 4&#125;&gt;&gt;&gt; del d["two"]&gt;&gt;&gt; d["two"] = None&gt;&gt;&gt; d&#123;'one': 42, 'three': 3, 'four': 4, 'two': None&#125; 4.字典视图对象由 dict.keys(), dict.values() 和 dict.items() 所返回的对象是 视图对象。 该对象提供字典条目的一个动态视图，这意味着当字典改变时，视图也会相应改变。 字典视图函数 描述 len(dictview) 返回字典中的条目数 iter(dictview) 返回字典中的键、值或项（以 (键, 值) 为元素的元组表示）的迭代器 [1] x in dictview 如果 x 是对应字典中存在的键、值或项（在最后一种情况下 x 应为一个 (键, 值) 元组） 则返回 True reversed(dictview) 返回一个逆序获取字典键、值或项的迭代器。 视图将按与插入时相反的顺序进行迭代。 [2] 1234567891011121314151617181920212223242526272829#键视图类似于集合，因为其条目不重复且可哈希。 如果所有值都是可哈希的，即 (键, 值) 对也是不重复且可哈希的，那么条目视图也会类似于集合。 （值视图则不被视为类似于集合，因其条目通常都是有重复的。） 对于类似于集合的视图，为抽象基类 collections.abc.Set 所定义的全部操作都是有效的 (例如 ==, &lt; 或 ^)。&gt;&gt;&gt; dishes = &#123;'eggs': 2, 'sausage': 1, 'bacon': 1, 'spam': 500&#125;&gt;&gt;&gt; keys = dishes.keys()&gt;&gt;&gt; values = dishes.values()&gt;&gt;&gt; # iteration&gt;&gt;&gt; n = 0&gt;&gt;&gt; for val in values:... n += val&gt;&gt;&gt; print(n)504&gt;&gt;&gt; # keys and values are iterated over in the same order (insertion order)&gt;&gt;&gt; list(keys)['eggs', 'sausage', 'bacon', 'spam']&gt;&gt;&gt; list(values)[2, 1, 1, 500]&gt;&gt;&gt; # view objects are dynamic and reflect dict changes&gt;&gt;&gt; del dishes['eggs']&gt;&gt;&gt; del dishes['sausage']&gt;&gt;&gt; list(keys)['bacon', 'spam']&gt;&gt;&gt; # set operations&gt;&gt;&gt; keys &amp; &#123;'eggs', 'bacon', 'salad'&#125;&#123;'bacon'&#125;&gt;&gt;&gt; keys ^ &#123;'sausage', 'juice'&#125;&#123;'juice', 'sausage', 'bacon', 'spam'&#125; 2.0 小结 字典是可变类型,键只能是由非hash的数据类型充当 字典子类的__missing__方法。 字典视图的元素为不重复且可哈希。 一张图总结如下 后记记得五年前听过的一句话,赠给自己,也赠给凑巧看到这篇博文的有缘人。 种一棵树最好的时间是在十年前，其次是现在。]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>standard_library</tag>
        <tag>dictionary</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python_standard_library_1_string]]></title>
    <url>%2F2019%2F12%2F20%2Fpython-standard-library-1-string%2F</url>
    <content type="text"><![CDATA[python 标准库学习笔记 – string前言今天是2019年12月20日,刚刚晴朗的天 入冬以来的第二场雪就悄然而至 从今天开始,坚持更新博文100天,也算是对python学习的总结。那么从哪里开始呢？ 那就从python标准库开始撸吧。 操作系统 win7 sp1 64位 标准版 python版本 3.8 工具 vscode 标准库基础在不同操作系统,标准库的路径有所不同,以windows平台为例,我的python安装在C:\Python38 标准库文件就在C:\Python38\Lib 文件夹下 标准库分为几个部分,参考标准库介绍 内置函数:不需要import就可以使用的函数,例如 print 内置异常 内置模块 文本 二进制数据 数据类型 数学 函数式编程模块 文件和目录访问 数据持久化 文件格式 加密服务 并发执行 网络和进程间通信 互联网数据处理 互联网协议和支持 多媒体服务 国际化 程序框架 Tk图形用户界面 开发工具 调试和分析 软件打包和分发 python运行时服务 自定义python解释器 导入模块 Python语言服务 杂项服务 Windows系统相关模块 Unix专有服务 被取代的模块 day1 标准库 string参考：文本处理服务 string常见字符串操作 字符串常量123__all__ = ["ascii_letters", "ascii_lowercase", "ascii_uppercase", "capwords", "digits", "hexdigits", "octdigits", "printable", "punctuation", "whitespace", "Formatter", "Template"] 测试如下： 123456789101112import stringprint(string.__all__)print(string.ascii_letters) #abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZprint(string.ascii_lowercase) #abcdefghijklmnopqrstuvwxyzprint(string.ascii_uppercase) #ABCDEFGHIJKLMNOPQRSTUVWXYZprint(string.digits)# 十进制数字常数 0123456789print(string.hexdigits)#十六进制数字常数 0123456789abcdefABCDEFprint(string.octdigits)#八进制数字常数 01234567print(string.punctuation)print(string.printable)print(string.whitespace) 其中： string.whitespace ：由被视为空白符号的 ASCII 字符组成的字符串。 其中包括空格、制表、换行、回车、进纸和纵向制表符。 自定义字符串格式化 主要函数 功能 format(format_string, *args, **kwargs) 它采用格式字符串和一组任意位置和关键字参数。它只是一个调用vformat（）的包装器。 vformat(format_string, args, kwargs) 执行格式化的实际工作 parse(format_string) 循环遍历format_string并返回一个可迭代的元组（literal_text，field_name，format_spec，conversion）。 1234567891011121314151617181920212223242526data = ("Pi = ",3.1415926)strtmp = "This is a test:&#123;&#125;&#123;:.4f&#125;"formatter = string.Formatter()strtmp = formatter.vformat(strtmp,data,&#123;&#125;)print(strtmp) #This is a test:&#123;&#125;&#123;:.4f&#125;data =&#123;"key1":3.1415926,"key2":"Pi: ="&#125;strtmp = "This is a test:&#123;key2&#125;&#123;key1&#125;"formatter = string.Formatter()strtmp = formatter.vformat(strtmp,(),data)print(strtmp)import stringdata = ("Pi=",3.1415926)strtmp = "This is a test:&#123;&#125;&#123;:.4f&#125;"formatter = string.Formatter()formatter.vformat(strtmp,data,&#123;&#125;)print(strtmp) #This is a test:&#123;&#125;&#123;:.4f&#125;data =&#123;"key1":3.1415926,"key2":"Pi: ="&#125;strtmp = "This is a test:&#123;key2&#125;&#123;key1&#125;"formatter = string.Formatter()strtmp = formatter.vformat(strtmp,(),data)print(strtmp) 12345678910111213141516171819202122import stringstrtmp = "This is a test:&#123;&#125;&#123;:.4f&#125;"formatter = string.Formatter()strtuple = formatter.parse(strtmp)for i, v in enumerate(strtuple): print(i, v) ''' 0 ('This is a test:', '', '', None) 1 ('', '', '.4f', None) '''strtmp = "This is a test:&#123;Key2&#125;&#123;Key1&#125;"formatter = string.Formatter()strtuple = formatter.parse(strtmp)for i, v in enumerate(strtuple): print(i, v) ''' 0 ('This is a test:', 'Key2', '', None) 1 ('', 'Key1', '', None) '''# string.Formatter.parse(format_string) End 格式化字符串范例按位置访问参数123456789tupdata = ("This","is","a","test") # 元组formatstr = '&#123;0&#125; &#123;1&#125; &#123;2&#125; &#123;3&#125;'.format("This","is","a","test") print(formatstr) # This is a testformatstr = '&#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;'.format(*tupdata) # *data 解包参数序列print(formatstr) # This is a testformatstr = '&#123;3&#125; &#123;2&#125; &#123;1&#125; &#123;0&#125;'.format(*tupdata) # *data 解包参数序列print(formatstr) # test a is Thisformatstr = '&#123;2&#125; &#123;3&#125; &#123;1&#125; &#123;2&#125; &#123;3&#125;'.format(*tupdata) # 参数可以重复print(formatstr) # a test is a test 按关键字访问参数12345dicdata = &#123;'Author':'leacoder','Time':'2019/04/17'&#125;formatstr = 'The author is &#123;Author&#125;，The time is &#123;Time&#125;'.format(Author='leacoder',Time='2019/04/17')print(formatstr) # The author is leacoder，The time is 2019/04/17formatstr = 'The author is &#123;Author&#125;，The time is &#123;Time&#125;'.format(**dicdata)print(formatstr) # The author is leacoder，The time is 2019/04/17 访问参数的属性12345678class Point: def __init__(self,x,y): self.x ,self.y = x, ypoint = Point(4,2)formatstr = 'Thie point is (&#123;key.x&#125;,&#123;key.y&#125;)'.format(key = point) # key 可为其他 print(formatstr) # Thie point is (4,2)formatstr = 'Thie point is (&#123;point.x&#125;,&#123;point.y&#125;)'.format(point = point) # point 可为其他 print(formatstr) # Thie point is (4,2) 访问参数的各项12345tupdata = ("leacoder","2019/04/17") # 元组formatstr = 'The author is &#123;0[0]&#125;,The time is &#123;0[1]&#125;'.format(tupdata)print(formatstr) # The author is leacoder,The time is 2019/04/17formatstr = 'The author is &#123;0[0]&#125;,The time is &#123;0[1]&#125;'.format(*tupdata) # 注意区别print(formatstr) # The author is l,The time is e 对齐文本并指定宽度12345678formatstr = '&#123;:&lt;30&#125;'.format('left aligned') # 左对齐 30位print(formatstr) # ‘left aligned ’ 为了体现位数加了‘’formatstr = '&#123;:&gt;30&#125;'.format('right aligned') # 右对齐 30位print(formatstr) # ‘ right aligned’formatstr = '&#123;:^30&#125;'.format('centered') # 中间对齐 30位print(formatstr) # ‘ centered ’formatstr = '&#123;:*^30&#125;'.format('centered') # 使用* 作为填充字符print(formatstr) # ‘***********centered***********’ Replacing %+f, %-f, and % f and specifying a sign: 替换％+ f，％ - f和％f并指定符号:123456formatstr = '&#123;:+f&#125;; &#123;:+f&#125;'.format(3.14, -3.14) # 总是显示它符号print(formatstr) # ‘+3.140000; -3.140000’formatstr = '&#123;: f&#125;; &#123;: f&#125;'.format(3.14, -3.14) # 正数前显示空格print(formatstr) # ‘ 3.140000; -3.140000’formatstr = '&#123;:-f&#125;; &#123;:-f&#125;'.format(3.14, -3.14) # 只显示负号 同 '&#123;:f&#125;; &#123;:f&#125;'print(formatstr) # ‘3.140000; -3.140000’ Replacing %x and %o and converting the value to different bases: 替换％x和％o并将值转换为不同的进制123456formatstr = "int: &#123;0:d&#125;; hex: &#123;0:x&#125;; oct: &#123;0:o&#125;; bin: &#123;0:b&#125;".format(64)print(formatstr) # int: 64; hex: 40; oct: 100; bin: 1000000formatstr = "int: &#123;0:d&#125;; hex: &#123;0:#x&#125;; oct: &#123;0:#o&#125;; bin: &#123;0:#b&#125;".format(64)print(formatstr) # int: 64; hex: 0x40; oct: 0o100; bin: 0b1000000formatstr = "int: &#123;0:d&#125;; hex: &#123;0:#x&#125;; oct: &#123;0:#o&#125;; bin: &#123;0:#b&#125;".format(0b1000001) # 也支持其他进制print(formatstr) # int: 65; hex: 0x41; oct: 0o101; bin: 0b100000 使用逗号作为千位分隔符1234points = 1total = 3formatstr = 'points / total = &#123;:.2%&#125;'.format(points/total)print(formatstr) # points / total = 33.33% 使用特定类型的格式1234import datetimed = datetime.datetime(2019, 4, 17, 22, 49, 2) # 2019/04/17 22:49:02formatstr = '&#123;:%Y-%m-%d %H:%M:%S&#125;'.format(d)print(formatstr) # 2019-04-17 22:49:02 模板字符串模板字符串规则12345678910'''模板字符串提供更简单的字符串替换，如PEP 292中所述 https://www.python.org/dev/peps/pep-0292/模板字符串支持基于$的替换，使用以下规则： 1、$$是转义; 它被替换为单个$。 2、$identifier 一个替换占位符，用于匹配映射关键字“identifier”默认情况下， “标识符”仅限于以下划线或ASCII字母开头的任何不区分大小写的ASCII字母数字字符串（包括下划线）。$字符后面的第一个非标识符字符结束此占位符。 3、$ &#123;identifier&#125;相当于$ identifier。当有效标识符字符跟随占位符但不是占位符的一部分时，例如“$ &#123;noun&#125; ification”，则需要它。 4、字符串中$的任何其他形式都将导致引发ValueError。字符串模块提供实现这些规则的Template类。class string.Template(template)''' class string.`Template`(template)substitute(mapping,**kwargs)123456789101112131415161718'''执行模板替换，返回一个新字符串。 mapping 为任意字典类对象，其中的键将匹配模板中的占位符。 或者你也可以提供一组关键字参数，其中的关键字即对应占位符。 当同时给出 mapping 和 kwds 并且存在重复时，则以 kwds 中的占位符为优先'''s = Template('The Author is $Author, The Time is $Time') # 使用Template类构造函数kewds = &#123;'Author':'leacoder', 'Time':'2019/04/18 00:01:38'&#125;templatestr = s.substitute(Author='leacoder', Time='2019/04/18 00:01:38') # **kewdsprint(templatestr) # The Author is leacoder, The Time is 2019/04/18 00:01:38templatestr = s.substitute(**kewds) # **kewdsprint(templatestr) # The Author is leacoder, The Time is 2019/04/18 00:01:38templatestr = s.substitute(kewds) # mappingprint(templatestr) # The Author is leacoder, The Time is 2019/04/18 00:01:38templatestr = s.substitute(kewds,Author='250',Time = 'No Time') # mapping **kewdsprint(templatestr) # The Author is 250, The Time is No Timekewds1 = &#123;'Author':'leacoder'&#125;templatestr = s.substitute(kewds1)print(templatestr) # KeyError: 'Time'# substitute(mapping, **kwds) End safe_substitute(mapping, **kwds)12345678'''类似于 substitute()，不同之处是如果有占位符未在 mapping 和 kwds 中找到，不是引发 KeyError 异常，而是将原始占位符不加修改地显示在结果字符串中。 另一个与 substitute() 的差异是任何在其他情况下出现的 $ 将简单地返回 $ 而不是引发 ValueError。'''# safe_substitute(mapping, **kwds)kewds1 = &#123;'Author':'leacoder'&#125;templatestr = s.safe_substitute(kewds1)print(templatestr) # The Author is leacoder, The Time is $Time# safe_substitute(mapping, **kwds) End 辅助函数string.`capwords`(s, sep=None）123'''使用 str.split() 将参数拆分为单词，使用 str.capitalize() 将单词转为大写形式，使用 str.join() 将大写的单词进行拼接。 如果可选的第二个参数 sep 被省略或为 None，则连续的空白字符会被替换为单个空格符并且开头和末尾的空白字符会被移除，否则 sep 会被用来拆分和拼接单词''']]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>standard_library</tag>
        <tag>string</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vscode Cannot edit in read-only editor]]></title>
    <url>%2F2019%2F12%2F12%2Fvscode-Cannot-edit-in-read-only-editor%2F</url>
    <content type="text"><![CDATA[vscode Cannot edit in read-only editor 错误解决原因 使用了Run Code插件,output是只读的 解决方法将 run code设置为在Terminal中运行 1File -&gt; Preferences -&gt; Settings 找到 run code in terminal 打上 √ 或 在settings.json文件中,添加一行配置信息 1"code-runner.runInTerminal": true]]></content>
      <categories>
        <category>python</category>
        <category>IDEs</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Install python3.8 on Centos6.5]]></title>
    <url>%2F2019%2F12%2F03%2FInstall-python3-8-on-Centos6-5%2F</url>
    <content type="text"><![CDATA[1. 安装必要的工具1sudo yum install yum-utils 2. 使用 yum-builddep 命令 设置 python 编译环境，下载缺少的依赖1sudo yum-builddep python 3. 下载 python3 的源代码源代码可以在 https://www.python.org/ftp/python/ 下载 1curl -O https://www.python.org/ftp/python/3.8.0/Python-3.8.0a1.tgz 4. 对源代码进行解压并编译安装1234tar xf Python-3.8.0a1.tgzcd Python-3.8.0a1./configuresudo make &amp;&amp; make install 5. 现在 python3 已经完成安装，使用 python3 -version 查看版本号显示 Python 3.8.0a1 表示已经成功 1python3 --version 6. 如果你想把 python3 作为默认python 解析器，可以进行如下设置1alias python='/usr/local/bin/python3.8' 7. 配置阿里pip源1234567891011[root@localhost ~]# cd [root@localhost ~]# mkdir .pip[root@localhost ~]# cd .pip[root@localhost .pip]# vim pip.conf#文件内容如下[global]index-url = http://mirrors.aliyun.com/pypi/simple [install]trusted-host=mirrors.aliyun.com]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>python3</tag>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ios devices list]]></title>
    <url>%2F2019%2F12%2F02%2Fios-devices-list%2F</url>
    <content type="text"><![CDATA[ios 设备一览表iPhone 设备 时间 CPU 分辨率 大小 密度 @Nx iOS系统 iPhone 2007 armv6 320 x 480 3.5 165 @1x 1.0 - 3.1.3 iPhone 3G 2008 armv6 320 x 480 3.5 165 @1x 2.0 - 4.2.1 iPhone 3GS 2009 armv7 320 x 480 3.5 165 @1x 3.0 - 6.1.4 iPhone 4 (GSM) 2010 armv7 640 x 960 3.5 330 @2x 4.0 - 7.1.2 iPhone 4 (CDMA) 2011 armv7 640 x 960 3.5 330 @2x 4.2.4 - 7.1.2 iPhone 4S 2011 armv7 640 x 960 3.5 330 @2x 5.0 - 9.3.5 iPhone 5 2012 armv7s 640 x 1136 4 326 @2x 6.0 - 10.3.3 iPhone 5c 2013 armv7s 640 x 1136 4 326 @2x 7.0 - 10.3.3 iPhone 5s 2013 arm64 640 x 1136 4 326 @2x 7.0 - iPhone 6 2014 arm64 750 x 1334 4.7 326 @2x 8.0 - iPhone 6 Plus 2014 arm64 1242 x 2208 5.5 461 @3x 8.0 - iPhone 6s 2015 arm64 750 x 1334 4.7 326 @2x 9.0 - iPhone 6s Plus 2015 arm64 1242 x 2208 5.5 461 @3x 9.0 - iPhone SE 2016 arm64 640 x 1136 4 326 @2x 9.3 - iPhone 7 2016 arm64 750 x 1334 4.7 326 @2x 10.0 - iPhone 7 Plus 2016 arm64 1242 x 2208 5.5 461 @3x 10.0 - iPhone 8 2017 arm64 750 x 1334 4.7 326 @2x 11.0 - iPhone 8 Plus 2017 arm64 1242 x 2208 5.5 461 @3x 11.0 - iPhone X 2017 arm64 1125 x 2436 5.8 463 @3x 11.0 - iPhone XS 2018 arm64 1125 x 2436 5.8 463 @3x 12.0 - iPhone XS Max 2018 arm64 1242 x 2688 6.5 458 @3x 12.0 - iPhone XR 2018 arm64 828 x 1792 6.1 326 @2x 12.0 - iPhone 11 2019 arm64 828 x 1792 6.1 326 @2x 13.0 - iPhone 11 Pro 2019 arm64 1125 x 2436 5.8 458 @3x 13.0 - iPhone 11 Pro Max 2019 arm64 1242 x 2688 6.5 458 @3x 13.0 - 注：屏幕分辨率单位为英寸(inch)，分辨率密度单位为ppi iPad 设备 发布年份 CPU架构 分辨率 @Nx iOS系统 iPad 2010 armv7 768 x 1024 @1x 3.2 - 5.1.1 iPad 2 2011 armv7 768 x 1024 @1x 4.3 - 9.3.5 iPad (3rd) 2012 armv7 1536 x 2048 @2x 5.1 - 9.3.5 iPad mini 2012 armv7s 768 x 1024 @1x 6.0 - 9.3.5 iPad (4rd) 2012 armv7s 1536 x 2048 @2x 6.0 - iPad Air 2013 arm64 1536 x 2048 @2x 7.0 - iPad mini Retina 2013 arm64 1536 x 2048 @2x 7.0 - iPad Air 2 2014 arm64 1536 x 2048 @2x 8.1 - iPad mini 3 2014 arm64 1536 x 2048 @2x 8.1 - iPad mini 4 2015 arm64 1536 x 2048 @2x 9.0 - iPad Pro (12.9) 2015 arm64 2048 x 2732 @2x 9.1 - iPad Pro (9.7) 2016 arm64 1536 x 2048 @2x 9.3 - iPad (5rd) 2017 arm64 1536 x 2048 @2x 10.2.1 - iPad Pro (10.5) 2017 arm64 1668 x 2224 @2x 10.3.2 - iPad Pro (12.9-2) 2017 arm64 2048 x 2732 @2x 10.3.2 - iPad (10.2) 2019 arm64 1620 x 2160 @2x iPadOS iPod touch 设备 发布年份 CPU架构 分辨率 @Nx iOS系统 iPod touch 2007 armv6 320 x 480 @1x 1.1 - 3.1.3 iPod touch (2nd) 2008 armv6 320 x 480 @1x 2.1.1 - 4.2.1 iPod touch (3rd) 2009 armv7 320 x 480 @1x 3.1 - 5.1.1 iPod touch (4th) 2010 armv7 640 x 960 @2x 4.1 - 6.1.4 iPod touch (5th) 2012 armv7 640 x 1136 @2x 6.0 - 9.3.5 iPod touch (6th) 2015 arm64 640 x 1136 @2x 8.4 - 参考文档iOS设备一览表]]></content>
      <categories>
        <category>ios</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>ios</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git diff usage]]></title>
    <url>%2F2019%2F11%2F21%2Fgit-diff-usage%2F</url>
    <content type="text"><![CDATA[Git 中 diff 命令使用整理总结工作中常用的git 命令, 今天是一个非常有用的命令 git diff 主要作用是用来比较差异，包括 commits之间,commit 和 工作区间 差异 命令格式如下： 12345git diff [&lt;options&gt;] [&lt;commit&gt;] [--] [&lt;path&gt;…​]git diff [&lt;options&gt;] --cached [&lt;commit&gt;] [--] [&lt;path&gt;…​]git diff [&lt;options&gt;] &lt;commit&gt; &lt;commit&gt; [--] [&lt;path&gt;…​]git diff [&lt;options&gt;] &lt;blob&gt; &lt;blob&gt;git diff [&lt;options&gt;] --no-index [--] &lt;path&gt; &lt;path&gt; 1. 比较工作区与暂存区1git diff 不加参数 2. 比较暂存区与 本地 最新版本 (最后一次commit)1git diff --cached 3. 比较工作区与最新本地版本库1git diff HEAD 4. 比较工作区与commit-id的差异1git diff commit-id 5. 比较暂存区与指定commit-id的差异1git diff --cached commit-id 6. 比较两个commit-id之间的差异1git diff commit-id commit-id 7. 比较不同本地分支的差异1git diff dev # 当前所处分支为master 8. 比较本地分支和远程分支之间的差异12git fetch origin mastergit diff master origin/master 9. 比较差异只显示文件名1git diff --name-only 10 . 比较差异 显示更改文件状态1git diff --name-status]]></content>
      <categories>
        <category>版本管理</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript get checkbox checked value]]></title>
    <url>%2F2019%2F09%2F28%2Fjavascript-get-checkbox-checked-value%2F</url>
    <content type="text"><![CDATA[javascript如何获取checkbox被选中的值预备知识javascript dom 常用方法 方法名 描述 例子 document.getElementById 返回给定id属性值的元素节点相对应的对象 document.getElementsByTagName 返回给定name属性的元素节点对应的元素集合 var hobbies = document.getElementsByName(“hobbies”); element.nextSibling 返回该元素紧跟的一个节点 nodeValue 获取节点中的文本值 ,例如：跑步 跑步 数组常用方法： 方法 或者 属性 说明 例子 arrayObject.length 属性：数组长度 arrayObject.push() 向数组末尾添加一个或多个元素 var arr = new Array(3) arr[0] = “George” arr[1] = “John” arr[2] = “Thomas” 页面如下：12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;javascript获取复选框值方法&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt; &lt;input type="checkbox" name="hobbies" id="hobbies" class="hobbies" value="1"&gt;游泳 &lt;input type="checkbox" name="hobbies" id="hobbies" class="hobbies" value="2"&gt;跑步 &lt;/p&gt; &lt;p&gt; &lt;button id="btn1"&gt;获取复选框值&lt;/button&gt; &lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 方法一 通过复选框的name属性,遍历后将被选中的复选框的值输出 checkbox[index].nextSibling.nodeValue: 获取的是checkbox中标签包裹的文本值 123456789function get_checkbox_val() &#123; var hobbies = document.getElementsByName("hobbies"); for (let index = 0; index &lt; hobbies.length; index++) &#123; if (hobbies[index].checked) &#123; alert(hobbies[index].value + "," + hobbies[index].nextSibling.nodeValue); &#125; &#125; &#125; 方法二 建立一个数组,使用push方法将被选中的元素保存到数组 123456789function get_checkbox_val_with_array() &#123; var arr = []; for (let index = 0; index &lt; hobbies.length; index++) &#123; if (hobbies[index].checked) &#123; arr.push(hobbies[index].value); &#125; &#125; alert(arr); &#125; 方法三 通过class选择器 获取被选中的复选框的值 123456789function get_checkbox_val_with_selector() &#123; var hobbies = document.getElementsByClassName('hobbies'); for (let index = 0; index &lt; hobbies.length; index++) &#123; if (hobbies[index].checked) &#123; checkedValue = hobbies[index].value; alert(hobbies[index].value + "," + hobbies[index].nextSibling.nodeValue); &#125; &#125; &#125; 使用jquery 需要引入jquery,这里我使用国内的cdn jquery中通过each() 方法遍历所有被选中的复选框的值 12345678910&lt;script src="https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"&gt;&lt;/script&gt;&lt;script&gt; $('#btn1').click(function () &#123; $("input[name='hobbies']:checked").each(function () &#123; alert($(this).val()); &#125;); &#125;); &lt;/script&gt; &lt;/script&gt; ==tips== : $(“input[name=’xxxx’]:checked”) 被选中的复选框对象集合]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>checkbox</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript中Boolean_Object与Boolean_Primitives]]></title>
    <url>%2F2019%2F09%2F20%2Fjavascript%E4%B8%ADBoolean-Object%E4%B8%8EBoolean-Primitives%2F</url>
    <content type="text"><![CDATA[先看下面的脚本，预测下结果 123456var flag = true;console.log(typeof(flag));//booleanvar fa = Boolean(true);console.log(typeof(fa));//booleanvar ff = new Boolean(true);console.log(typeof(ff)); //Object 在 jslint中明确提示 new Boolean(true)；do not use Boolean as a constructor. (W053)jshint(W053) 接下来的例子 123456789if(flag)&#123; console.log("true is true");&#125;if(fa)&#123; console.log("Boolean is true");&#125;if(ff)&#123; console.log("Object Boolean is true");&#125; 结果如下 123true is trueBoolean is trueObject Boolean is true 修改脚本： 123456var flag = true;console.log(typeof(false));//booleanvar fa = Boolean(false);console.log(typeof(fa));//booleanvar ff = new Boolean(false);console.log(typeof(ff)); //Object 结果竟然显示： 1Object Boolean is true 后来查阅资料发现, JavaScript的其他数据类型都可以转换成Boolean类型，注意！！！只有这几种类型会转换为false 123456undefinednull0-0NaN"" (空字符串) 其他都转化为true,包括空对象{}，空数组[] ， 负数 ，false的对象包装等。 123456789101112if(-1)&#123; console.log('-1转换为true');&#125;if(&#123;&#125;)&#123; console.log('&#123;&#125;转换为true');&#125;if([])&#123; console.log('[]转换为true');&#125;if(new Boolean(false))&#123; console.log('new Boolean(false)转换为true');&#125; new Boolean(false)是布尔值的包装对象 typeof (new Boolean(false)) // ‘object’ ,所以 转换为boolean是true，而不是false。 从另一个层面也证明了为啥jslint 禁止在构造方法里使用Boolean类型的数据。 后记Boolean.valueOf() 可以返回Boolean对象对应的值类型 1234/**/if(ff.valueOf())&#123; console.log("Object Boolean is true"); &#125; 补充对于数字0 连续使用两次!! 仍旧返回false. 123var fa = Boolean(0);console.log(fa); //falseconsole.log(!!0);//false 参考文章 JavaScript Boolean( new Boolean(false) ) 其实是true The Difference Between Boolean Objects and Boolean Primitives in JavaScript]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>Boolean</tag>
        <tag>坑</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[how to add 163 music to hexo]]></title>
    <url>%2F2019%2F09%2F06%2Fhow-to-add-163-music-to-hexo%2F</url>
    <content type="text"><![CDATA[如何给hexo添加网易音乐先看看效果 1.访问网易云首页，选择你喜欢的音乐，点击生成外链,我不希望音乐一直播放,如果来访的朋友想听,点击下播放就好。 这里我选择二十岁的某一天 2. 复制iframe插件下的src里的地址 3. 修改themes/next/layout/sidebar.swig文件12345&#123;% if theme.background_music %&#125; &lt;div&gt; &lt;iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="210" height="110" src="&#123;&#123; theme.background_music &#125;&#125;"&gt;&lt;/iframe&gt; &lt;/div&gt;&#123;% endif %&#125; 4.添加音乐地址到主题1background_music : //music.163.com/outchain/player?type=2&amp;id=247172&amp;auto=1&amp;height=66]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网易音乐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[how to Sort Python Dictionaries by Key or Value]]></title>
    <url>%2F2019%2F07%2F28%2Fhow-to-Sort-Python-Dictionaries-by-Key-or-Value%2F</url>
    <content type="text"><![CDATA[众所周知,python中字典是无序的,那么该如何对字典排序呢？ 例如下面的字典： 1numbers = &#123;'second': 2,'first': 1, 'third': 3, 'Fourth': 4&#125; 我们可以通过list()函数打印value,12&gt;&gt;&gt;list(numbers)['second', 'first', 'third', 'Fourth'] 备注: python3.6.4 以上的版本,字典根据插入的顺序自动排序 如何根据key 对字典排序可以使用python的内置函数sorted 来对字典排序,如下面的代码 12&gt;&gt;&gt; sorted(numbers)['Fourth', 'first', 'second', 'third'] 结果有点差强人意,因为默认sorted函数是根据字母的顺序升序排列的,这里的字典中 key 恰好是字母，所以才会显示这个结果。 根据value对字典排序用同样的方法,我们可以根据value来排序 12&gt;&gt;&gt; sorted(numbers.values())[1, 2, 3, 4] 如何根据自定义的规则对字典排序sorted函数还有一个可选参数叫key,注意这里的key和字典的key没有关系,根据指定的key 来进行排序,实现的机制类似迭代器。来看这个例子： 12&gt;&gt;&gt; sorted(numbers,key=numbers.__getitem__)['first', 'second', 'third', 'Fourth'] 这里我们使用了字典类中内置函数__getitem__ 在遍历字典值的过程中,获取对应的值来对字典排序 关于__getitem__ 函数的详细说明，请参考官方文档。 当然我们也可以使用列表推导的方式来进行排序(实质上是转化成了列表来进行排序) 1234&gt;&gt;&gt; sorted(numbers,key=numbers.__getitem__,reverse=True)['Fourth', 'third', 'second', 'first']&gt;&gt;&gt; [value for (key,value) in sorted(numbers.items(),reverse=True)][3, 2, 1, 4] 字典的key是数字或者字母的情况下对字典排序12&gt;&gt;&gt; sorted(numbers,key=str.lower)['first', 'Fourth', 'second', 'third'] 我们定义一个新的字典 12345&gt;&gt;&gt; month = dict(one='January', two='February', three='March', four='April', five='May') 通过__getitem__方法比较 我们定义的字典month中对应的值 123&gt;&gt;&gt; numbermap = &#123;'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5&#125;&gt;&gt;&gt; sorted(month, key=numbermap.__getitem__)['one', 'two', 'three', 'four', 'five'] 同样的原理,可以使用列表推导来实现排序 12&gt;&gt;&gt; [month[i] for i in sorted(month,key=numbermap.__getitem__)]['January', 'February', 'March', 'April', 'May'] 定义一个方法来定义我们自己的排序规则1234567891011def repeats(string): # Lower the case in the string string = string.lower() # Get a set of the unique letters uniques = set(string) # Count the max occurrences of each unique letter counts = [string.count(letter) for letter in uniques] return max(counts) 根据字母小写排序 12&gt;&gt;&gt; sorted(month.values(), key=repeats, reverse=True)['February', 'January', 'March', 'April', 'May'] 使用lambda表达式排序使用lambda表达式 12&gt;&gt;&gt; sorted(month.items(),key=lambda x:x[1])[('four', 'April'), ('two', 'February'), ('one', 'January'), ('three', 'March'), ('five', 'May')] 12&gt;&gt;&gt; sorted(month.items(),key=lambda x:x[0])[('five', 'May'), ('four', 'April'), ('one', 'January'), ('three', 'March'), ('two', 'February')] 其中： lambda x:x[1] 表明根据值排序 lambda x:x[0] 表明根据键排序 以上就是python中对字典排序的一个总结,希望能帮到大家。]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>dict</tag>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript-undefined-description]]></title>
    <url>%2F2019%2F06%2F11%2Fjavascript-undefined-description%2F</url>
    <content type="text"><![CDATA[Javascript 基础拾遗之undefined先看一个例子： 123var a;console.log(a);//undefinedconsole.log(typeof(a)); //undefined javascript中的数据类型包括undefined，null,boolean,number,string,boolean六种类型(ECMAScript 2015) undefined 小结undefined 类型的意思是当前对象未定义,适用于下面几种情况 变量声明,但未赋值 对象没有赋值的属性,该属性的值为undefined 调用函数参数,但是未提供参数，该参数的值为undefined 函数没有返回值时,默认返回undefined 再看下面的例子 123456789101112131415161718//1.var i;console.log(i);//2.var o = new Object();console.log(o.p);//3.function test(a)&#123; console.log(typeof a); // undefined return a;&#125;test();//4.myfunc()function myfunc()&#123; //console.log("my function.");&#125;console.log(myfunc()); 需要区别下面这个情况,不同浏览器提示信息可能会不同(Chrome和IE测试) 12console.log(b);// Uncaught ReferenceError: b is not defined 如何判断为空下面三种判断方法： 123456// 方式1if(typeof age === 'undefined')// 方式2if(age === undefined)// 方式3if(varName) //万能判断,包括boolean 参考文档火狐JavaScript教程 stackoverflow如何检查undefined]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Build path entry is missing /src/test/java missing问题解决]]></title>
    <url>%2F2019%2F06%2F03%2FMaven-webapp-buildpath-missing-test-folder%2F</url>
    <content type="text"><![CDATA[[问题描述]通过maven构建webapp,发现缺少java和test目录 [解决方案] project –right click –build path– config build path – libraries – double click “JRE System Library”–choose “workspace default JRE” OK 如下图所示]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>maven</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[how-to-fix-cannot-change-version-of-project-dynamic-web-module-to-3.1-in-Eclipse]]></title>
    <url>%2F2019%2F06%2F03%2Fhow-to-fix-cannot-change-version-of-project-dynamic-web-module-to-3.1-in-Eclipse%2F</url>
    <content type="text"><![CDATA[1.问题描述 试图转换Dynamic Web Module 发生如下错误: 12Cannot change version of project facet Dynamic Web Module to 3.0 One or more constraints have not been satisfied 操作步骤： 右键点击项目 选择Properties 点击Project facet 选项 更改Dynamic Web Module, 2.3 到 3.1 ,如下图 2. 解决步骤Step 1： 选择navigator 视图 Step 2: 打开org.eclipse.wst.common.project.facet.core.xml 修改jst.web 的值2.3 为 3.1 12345678&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;faceted-project&gt; &lt;fixed facet="wst.jsdt.web"/&gt; &lt;installed facet="jst.jaxrs" version="2.0"/&gt; &lt;installed facet="wst.jsdt.web" version="1.0"/&gt; &lt;installed facet="java" version="1.8"/&gt; &lt;installed facet="jst.web" version="3.1"/&gt;&lt;/faceted-project&gt; 注意 jst.web版本3.1,那么java版本必须是1.7以上才可以 Step 3: 刷新项目 鼠标右键点击项目 F5刷新项目 清理项目 点击顶部菜单栏 Project 选择Clean maven更新 鼠标右键点击项目名称 选择Maven 选择Update project 3. 问题总结没有清理项目就直接更新,缓存造成更新失败。 参考链接 how-to-fix-cannot-change-version-of-project-dynamic-web-module-to-3.1-in-Eclipse]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>maven</tag>
        <tag>eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo建站搭建流程]]></title>
    <url>%2F2019%2F05%2F31%2Fhexo%E5%BB%BA%E7%AB%99%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[下载并安装 Visual Studio Code, 官方下载 下载并安装 Nodejs, 官方下载 12node -vnpm -v npm 镜像源修改为 淘宝NPM镜像 1npm install -g cnpm --registry=https://registry.npm.taobao.org 下载并安装 Git, 官方下载 123#配置名字和邮箱git config --global user.name &quot;test&quot;git config --global user.email &quot;test@.com&quot; 安装 Hexo, 官方文档 12cnpm install -g hexo-clihexo -v 初始化博客目录 1234cd Dhexo init blogcd blogcnpm install 启动服务器,本地预览 1hexo server Hexo 常用站点配置_config.yml 12345678910#网站标题title: test#作者昵称author: test#站点描述[签名]description: 站点描述#网站地址url: http://www.test.com#文章的链接格式permalink: :title.html 添加标签 1234#生成文件路径 source/tags/index.mdhexo new page tags#编辑index.md,添加typetype: &quot;tags&quot; 添加分类 1234#生成文件路径 source/categories/index.mdhexo new page categories#编辑index.md,添加typetype: &quot;categories&quot; 文章添加标签与分类 12345categories: - hexotags: - hexo - github 设置阅读全文 12#在文章中使用 &lt;!-- more --&gt; 手动截断 &lt;!-- more --&gt; Hexo 主题,这里选择 Next, Github地址 文档安装 Next 主题 1git clone https://github.com/iissnan/hexo-theme-next themes/next 启用主题并设置语言,站点配置 12theme: nextlanguage: zh-CN 主题常用配置,themes/next/_config.yml 12345678910111213141516171819#主题外观设定scheme: Gemini#设置菜单menu: home: / || home tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive#设置代码高亮主题highlight_theme: night eighties#添加友情链接links: test: http://www.test.com#文章自动添加版权声明post_copyright: enable: true#返回顶部按钮显示百分比sidebar: scrollpercent: true 设置RSS,安装hexo-generator-feed 1cnpm install hexo-generator-feed --save 安装hexo-generator-searchdb,添加百度/谷歌/本地 自定义站点内容搜索 1cnpm install hexo-generator-searchdb --save 启用搜索,主题配置 12local_search: enable: true 配置搜索,站点配置 12345search: path: search.xml field: post format: html limit: 7777 设置favicon.ico,将favicon.ico上传至站点根目录/source 目录下,主题配置 123favicon: small: favicon.ico medium: favicon.ico 部署Hexo至Github安装 hexo-deployer-git 1cnpm install hexo-deployer-git --save 站点配置 123deploy: type: git repo: https://github.com/github账号/github账号.github.io.git 生成并部署 1hexo d -g Github 自定义域名,由于Hexo每次部署到Github都会覆盖Github的域名配置,所以直接在Hexo配置,然后再部署,在根目录下的source目录下新建CNAME文件,无后缀名 12#自定义域名xxx.com 解析域名到 github.io,记录类型 = CNAME, 记录值 = github账号.github.io 码云新建一个项目, 路径 https://gitee.com/test/test.git Hexo 目录说明 12.deploy_git Hexo默认的.git配置文件夹public 根据source文件夹内容自动生成 进入 Hexo根目录,执行以下命令,先删除 themes/next 目录下的 .gitignore 文件 12345678910#初始化仓库git init#添加远程主机git remote add origin https://gitee.com/test/test.git#添加目录下所有文件,不包含 .gitignore 声明的文件git add .#添加更新说明git commit -m &quot;hexo first commit&quot;#推送更新到云端服务器git push -u origin master 创建 test 目录,将 Git 的内容同步到本地并安装Hexo 1234567mkdir testcd testgit initgit remote add origin https://gitee.com/test/test.gitgit fetch --allgit reset --hard origin/mastercnpm install blog 目录是A电脑, test 目录是B电脑, 更新文章后的同步操作： 12345678#A电脑修改了 test.md,添加更新说明并推送到远程仓库,使用git status查看状态会显示刚刚更改过的文件状态git commit -m &quot;update test.md&quot;git push origin mastergit status#B电脑同步更新git pull origin master#可以通过指定当前目录工作分支与远程仓库分支之间的链接关系git branch --set-upstream-to=origin/master master hexo 数据文件,通用配置文件,新建 source/_data 目录, 主题的配置可以在此目录下配置,以 Next 主题为例,在此目录下新建 next.yml, 则 next.yml 的配置会覆盖 themes/next/_config.yml 的相同配置]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python创建字典的几种方法]]></title>
    <url>%2F2019%2F05%2F28%2Fpython%E5%88%9B%E5%BB%BA%E5%AD%97%E5%85%B8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[python创建字典的几种方法1. 创建空字典123&gt;&gt;&gt; dic = &#123;&#125;&gt;&gt;&gt; type(dic)&lt;type &apos;dict&apos;&gt; 另一种形式：12temp = dict()temp[&apos;name&apos;] = &apos;xiaoming&apos; 2. 直接赋值创建123&gt;&gt;&gt; dic = &#123;&apos;spam&apos;:1, &apos;egg&apos;:2, &apos;bar&apos;:3&#125;&gt;&gt;&gt; dic&#123;&apos;bar&apos;: 3, &apos;egg&apos;: 2, &apos;spam&apos;: 1&#125; 3. 通过关键字dict和关键字参数创建123&gt;&gt;&gt; dic = dict(spam = 1, egg = 2, bar =3)&gt;&gt;&gt; dic&#123;&apos;bar&apos;: 3, &apos;egg&apos;: 2, &apos;spam&apos;: 1&#125; 4. 通过二元组列表创建1234&gt;&gt;&gt; list = [(&apos;spam&apos;, 1), (&apos;egg&apos;, 2), (&apos;bar&apos;, 3)]&gt;&gt;&gt; dic = dict(list)&gt;&gt;&gt; dic&#123;&apos;bar&apos;: 3, &apos;egg&apos;: 2, &apos;spam&apos;: 1&#125; 5. dict和zip结合创建123&gt;&gt;&gt; dic = dict(zip(&apos;abc&apos;, [1, 2, 3]))&gt;&gt;&gt; dic&#123;&apos;a&apos;: 1, &apos;c&apos;: 3, &apos;b&apos;: 2&#125; 6. 通过字典推导式创建123&gt;&gt;&gt; dic = &#123;i:2*i for i in range(3)&#125;&gt;&gt;&gt; dic&#123;0: 0, 1: 2, 2: 4&#125; 7. 通过dict.fromkeys()创建123&gt;&gt;&gt; dic = dict.fromkeys(range(3), &apos;x&apos;)&gt;&gt;&gt; dic&#123;0: &apos;x&apos;, 1: &apos;x&apos;, 2: &apos;x&apos;&#125; 8. 其他1234&gt;&gt;&gt; list = [&apos;x&apos;, 1, &apos;y&apos;, 2, &apos;z&apos;, 3]&gt;&gt;&gt; dic = dict(zip(list[::2], list[1::2]))&gt;&gt;&gt; dic&#123;&apos;y&apos;: 2, &apos;x&apos;: 1, &apos;z&apos;: 3&#125;]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>字典</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python操作sqlite3]]></title>
    <url>%2F2019%2F05%2F28%2Fpython%E6%93%8D%E4%BD%9Csqlite3%2F</url>
    <content type="text"><![CDATA[sqlite3 简介1234567891011121314151617181920212223242526272829303132SQLite数据库是一款非常小巧的嵌入式开源数据库软件，也就是说没有独立的维护进程，所有的维护都来自于程序本身。在python中，使用sqlite3创建数据库的连接，当我们指定的数据库文件不存在的时候连接对象会自动创建数据库文件；如果数据库文件已经存在，则连接对象不会再创建数据库文件，而是直接打开该数据库文件。 连接对象可以是硬盘上面的数据库文件，也可以是建立在内存中的，在内存中的数据库 执行完任何操作后，都不需要提交事务的(commit) 创建在硬盘上面： conn = sqlite3.connect(&apos;c:\\test\\test.db&apos;) 创建在内存上面： conn = sqlite3.connect(&apos;&quot;memory:&apos;) 下面我们一硬盘上面创建数据库文件为例来具体说明： conn = sqlite3.connect(&apos;c:\\test\\hongten.db&apos;) 其中conn对象是数据库链接对象，而对于数据库链接对象来说，具有以下操作： commit() --事务提交 rollback() --事务回滚 close() --关闭一个数据库链接 cursor() --创建一个游标 cu = conn.cursor() 这样我们就创建了一个游标对象：cu 在sqlite3中，所有sql语句的执行都要在游标对象的参与下完成 对于游标对象cu，具有以下具体操作： execute() --执行一条sql语句 executemany() --执行多条sql语句 close() --游标关闭 fetchone() --从结果中取出一条记录 fetchmany() --从结果中取出多条记录 fetchall() --从结果中取出所有记录 scroll() --游标滚动 sqlite3常用操作123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197#!/usr/bin/env python# -*- coding: utf-8 -*-# @Date : 2019-03-14 16:10:24# @Author : Jeff.Sui (215687736@qq.com)# @Link : http://example.org# @Version : $Id$import sqlite3con = sqlite3.connect(&quot;:memory:&quot;)c = con.cursor()# Create tablec.execute(&apos;&apos;&apos;CREATE TABLE stocks (date text, trans text, symbol text, qty real, price real)&apos;&apos;&apos;)# Insert a row of datac.execute(&quot;INSERT INTO stocks VALUES (?,?,?,?,?)&quot;, (&apos;2006-03-27&apos;,&apos;BUY&apos;,&apos;RHAT&apos;,100,60.14))# Larger example that inserts many records at a timepurchases = [(&apos;2006-03-28&apos;, &apos;BUY&apos;, &apos;IBM&apos;, 1000, 45.00), (&apos;2006-04-05&apos;, &apos;BUY&apos;, &apos;MSFT&apos;, 1000, 72.00), (&apos;2006-04-06&apos;, &apos;SELL&apos;, &apos;IBM&apos;, 500, 53.00), (&apos;2006-04-07&apos;, &apos;SELL&apos;, &apos;MSFT&apos;, 500, 74.00), (&apos;2006-04-08&apos;, &apos;SELL&apos;, &apos;IBM&apos;, 500, 54.00), (&apos;2006-04-09&apos;, &apos;SELL&apos;, &apos;MSFT&apos;, 500, 73.00), (&apos;2006-04-10&apos;, &apos;SELL&apos;, &apos;MSFT&apos;, 500, 75.00), (&apos;2006-04-12&apos;, &apos;SELL&apos;, &apos;IBM&apos;, 500, 55.00), ]c.executemany(&apos;INSERT INTO stocks VALUES (?,?,?,?,?)&apos;, purchases)# Save (commit) the changescon.commit()# Do this insteadt = (&apos;RHAT&apos;,)c.execute(&apos;SELECT * FROM stocks WHERE symbol=?&apos;, t)#print(c.fetchone())#for row in c.execute(&apos;SELECT * FROM stocks ORDER BY price&apos;):# print(row) #for row in c.execute(&apos;SELECT * FROM stocks LIMIT 5 OFFSET 0&apos;):# print(row)for row in c.execute(&apos;SELECT * FROM stocks LIMIT 5 OFFSET 1&apos;): print(row)#Select Top N * From# ====================================================================================# SQLite 日期 &amp; 时间# ====================================================================================print(&apos;=&apos;*30)print(&apos;SQLite 日期 &amp; 时间&apos;)print(&apos;=&apos;*30)# 计算当前日期c.execute(&quot;SELECT date(&apos;now&apos;)&quot;)print(c.fetchone())# 计算当前月份的最后一天：c.execute(&quot;SELECT date(&apos;now&apos;,&apos;start of month&apos;,&apos;+1 month&apos;,&apos;-1 day&apos;);&quot;)print(c.fetchone())# 计算给定 UNIX 时间戳 1092941466 的日期和时间：c.execute(&quot;SELECT datetime(1092941466, &apos;unixepoch&apos;);&quot;)print(c.fetchone())# 计算给定 UNIX 时间戳 1092941466 相对本地时区的日期和时间：c.execute(&quot;SELECT datetime(1092941466, &apos;unixepoch&apos;, &apos;localtime&apos;);&quot;)print(c.fetchone())# 计算当前的 UNIX 时间戳：c.execute(&quot;SELECT datetime(1092941466, &apos;unixepoch&apos;, &apos;localtime&apos;);&quot;)print(c.fetchone())# 计算美国&quot;独立宣言&quot;签署以来的天数：c.execute(&quot;SELECT julianday(&apos;now&apos;) - julianday(&apos;1776-07-04&apos;);&quot;)print(c.fetchone())# 计算从 2004 年某一特定时刻以来的秒数：c.execute(&quot;SELECT strftime(&apos;%s&apos;,&apos;now&apos;) - strftime(&apos;%s&apos;,&apos;2004-01-01 02:34:56&apos;);&quot;)print(c.fetchone())# 计算当年 10 月的第一个星期二的日期：c.execute(&quot;SELECT date(&apos;now&apos;,&apos;start of year&apos;,&apos;+9 months&apos;,&apos;weekday 2&apos;);&quot;)print(c.fetchone())# 计算从 UNIX 纪元算起的以秒为单位的时间（类似 strftime(&apos;%s&apos;,&apos;now&apos;) ，不同的是这里有包括小数部分）：c.execute(&quot;SELECT (julianday(&apos;now&apos;) - 2440587.5)*86400.0;&quot;)print(c.fetchone())# 在 UTC 与本地时间值之间进行转换，当格式化日期时，使用 utc 或 localtime 修饰符，如下所示：c.execute(&quot;SELECT time(&apos;12:00&apos;, &apos;localtime&apos;);&quot;)print(c.fetchone())# c.execute(&quot;SELECT time(&apos;12:00&apos;, &apos;utc&apos;);&quot;)print(c.fetchone())con.close()# ====================================================================================# SQLite 常用函数# ====================================================================================print(&apos;=&apos;*30)print(&apos;SQLite 常用函数&apos;)print(&apos;=&apos;*30)con = sqlite3.connect(&quot;:memory:&quot;)c = con.cursor()# Create tablec.execute(&apos;&apos;&apos;CREATE TABLE COMPANY (ID integer, NAME text, AGE integer, ADDRESS text, SALARY real)&apos;&apos;&apos;)# Larger example that inserts many records at a timepurchases = [(1,&apos;Paul&apos;,32,&apos;California&apos;,20000.0), (2,&apos;Allen&apos;,25,&apos;Texas&apos;,15000.0), (3,&apos;Teddy&apos;,23,&apos;Norway&apos;,20000.0), (4,&apos;Mark&apos;,25,&apos;Rich-Mond&apos;,65000.0), (5,&apos;David&apos;,27,&apos;Texas&apos;,85000.0), (6,&apos;Kim&apos;,22,&apos;South-Hall&apos;,45000.0), (7,&apos;James&apos;,24,&apos;Houston&apos;,10000.0)]c.executemany(&apos;INSERT INTO COMPANY VALUES (?,?,?,?,?)&apos;, purchases)# Save (commit) the changescon.commit()# 返回数据库表最后 n 行记录# 先计算一个数据库表中的行数c.execute(&quot;SELECT count(*) FROM COMPANY;&quot;)last = c.fetchone()[0]n = 5c.execute(&quot;SELECT * FROM COMPANY LIMIT ? OFFSET ?;&quot;, (n, last-n))for row in c: print(row)# 计算一个数据库表中的行数c.execute(&quot;SELECT count(*) FROM COMPANY;&quot;)print(c.fetchone())# 选择某列的最大值c.execute(&quot;SELECT max(salary) FROM COMPANY;&quot;)print(c.fetchone())# 选择某列的最小值c.execute(&quot;SELECT min(salary) FROM COMPANY;&quot;)print(c.fetchone())# 计算某列的平均值c.execute(&quot;SELECT avg(salary) FROM COMPANY;&quot;)print(c.fetchone())# 为一个数值列计算总和c.execute(&quot;SELECT sum(salary) FROM COMPANY;&quot;)print(c.fetchone())# 返回一个介于 -9223372036854775808 和 +9223372036854775807 之间的伪随机整数c.execute(&quot;SELECT random() AS Random;&quot;)print(c.fetchone())# 返回数值参数的绝对值c.execute(&quot;SELECT abs(5), abs(-15), abs(NULL), abs(0), abs(&apos;ABC&apos;);&quot;)print(c.fetchone())# 把字符串转换为大写字母c.execute(&quot;SELECT upper(name) FROM COMPANY;&quot;)print(c.fetchone())# 把字符串转换为小写字母c.execute(&quot;SELECT lower(name) FROM COMPANY;&quot;)print(c.fetchone())# 返回字符串的长度c.execute(&quot;SELECT name, length(name) FROM COMPANY;&quot;)print(c.fetchone())# 返回 SQLite 库的版本c.execute(&quot;SELECT sqlite_version() AS &apos;SQLite Version&apos;;&quot;)print(c.fetchone())# c.execute(&quot;SELECT CURRENT_TIMESTAMP;&quot;)print(c.fetchone())]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>sqlite3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[selenium元素操作封装]]></title>
    <url>%2F2019%2F05%2F28%2Fselenium%E5%85%83%E7%B4%A0%E6%93%8D%E4%BD%9C%E5%B0%81%E8%A3%85%2F</url>
    <content type="text"><![CDATA[selenium 常用的元素定位操作Selenium提供了8种定位方式。 id name class name tag name link text partial link text xpath css selector 这8种定位方式在Python selenium中所对应的方法为： find_element_by_id() find_element_by_name() find_element_by_class_name() find_element_by_tag_name() find_element_by_link_text() find_element_by_partial_link_text() find_element_by_xpath() find_element_by_css_selector() 常用元素定位封装12345678910111213141516171819202122232425262728293031323334def _locate_element(self, selector): """ to locate element by selector :arg selector should be passed by an example with "i,xxx" "x,//*[@id='langs']/button" :returns DOM element """ if self.by_char not in selector: return self.base_driver.find_element_by_id(selector) selector_by = selector.split(self.by_char)[0].strip() selector_value = selector.split(self.by_char)[1].strip() if selector_by == "i" or selector_by == 'id': element = self.base_driver.find_element_by_id(selector_value) elif selector_by == "n" or selector_by == 'name': element = self.base_driver.find_element_by_name(selector_value) elif selector_by == "c" or selector_by == 'class_name': element = self.base_driver.find_element_by_class_name(selector_value) elif selector_by == "l" or selector_by == 'link_text': element = self.base_driver.find_element_by_link_text(selector_value) elif selector_by == "p" or selector_by == 'partial_link_text': element = self.base_driver.find_element_by_partial_link_text(selector_value) elif selector_by == "t" or selector_by == 'tag_name': element = self.base_driver.find_element_by_tag_name(selector_value) elif selector_by == "x" or selector_by == 'xpath': element = self.base_driver.find_element_by_xpath(selector_value) elif selector_by == "s" or selector_by == 'css_selector': element = self.base_driver.find_element_by_css_selector(selector_value) else: raise NameError("Please enter a valid type of targeting elements.") return element]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>selenium</tag>
        <tag>web test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用selenium访问爱奇艺网站]]></title>
    <url>%2F2019%2F05%2F28%2Fusing-selenium-visit-iqiyi-website%2F</url>
    <content type="text"><![CDATA[使用selenium访问爱奇艺网站 selenium 是一种常用的自动化测试工具。它支持各种浏览器，包括 Chrome，Safari，Firefox 等主流界面式浏览器，如果你在这些浏览器里面安装一个 Selenium 的插件，还可以通过录制，快速生成脚本。 selenium 支持多种主流的开发语言，比如Ruby，java，python，javascript。 环境搭建python3.7.3 运行 pip install selenium 就可以直接下载最新的selenium版本 准备浏览器:chrome 70.0.3538.77 操作系统：win7 selenium版本: 3.14.1 chromedriver: https://npm.taobao.org/mirrors/chromedriver/70.0.3538.97/ 使用selenium 打开和关闭浏览器1234from selenium import webdriverdriver = webdriver.Chrome()driver.get("http://www.iqiyi.com/")driver.quit() 定位搜索框12search_xpath=r"//*[@id='nav_searchboxIn']/input"driver.find_element_by_xpath(search_xpath).send_keys("复仇者联盟") 点击搜索图片12search_button=r"//*[@id='nav_searchboxOut']/span"driver.find_element_by_xpath(search_button).click() 切换tab页123456789101112131415#导入键盘操作--20190528更新from selenium.webdriver.common.keys import Keys#此处通过键盘操作切换tab页driver.find_element_by_tag_name("body").send_keys(Keys.CONTROL + "t")#all_handles 保存所有已经打开的tab窗体all_handles = driver.window_handlesprint(driver.window_handles)index_handle=driver.current_window_handleprint(index_handle)#用switch_to方法切换到tab窗体for handle in all_handles: if handle!=index_handle: print('now is search window') search_handle = handledriver.switch_to.window(search_handle) 打印页面的title，并截图12print(driver.title)driver.get_screenshot_as_file("aqiyi.png") 总结本文主要介绍了自动化工具selenium的基本使用，如何对页面元素进行基本操作，实现自动抓取关键字图片功能。]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>selenium</tag>
        <tag>web test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F05%2F28%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[copy maven dependencies to a folder]]></title>
    <url>%2F2016%2F09%2F30%2Fcopy-maven-dependencies-to-a-folder%2F</url>
    <content type="text"><![CDATA[copy maven dependencies to a folderbackground一个简单的需求,当你的同事需要调试代码的时候,他并不想建立maven环境,这时候依赖的jar包 该如何导出呢? no code say nothing这时候你需要的是maven-dependency-plugin。 添加依赖配置123456789101112131415161718192021222324252627282930313233&lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.eclipse.m2e&lt;/groupId&gt; &lt;artifactId&gt;lifecycle-mapping&lt;/artifactId&gt; &lt;version&gt;1.0.0&lt;/version&gt; &lt;configuration&gt; &lt;lifecycleMappingMetadata&gt; &lt;pluginExecutions&gt; &lt;!-- copy-dependency plugin --&gt; &lt;pluginExecution&gt; &lt;pluginExecutionFilter&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt; &lt;versionRange&gt;[1.0.0,)&lt;/versionRange&gt; &lt;goals&gt; &lt;goal&gt;copy-dependencies&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;outputDirectory&gt;$&#123;project.build.directory&#125;/alternateLocation&lt;/outputDirectory&gt; &lt;overWriteReleases&gt;false&lt;/overWriteReleases&gt; &lt;overWriteSnapshots&gt;false&lt;/overWriteSnapshots&gt; &lt;overWriteIfNewer&gt;true&lt;/overWriteIfNewer&gt; &lt;/configuration&gt; &lt;/pluginExecutionFilter&gt; &lt;action&gt; &lt;ignore /&gt; &lt;/action&gt; &lt;/pluginExecution&gt; &lt;/pluginExecutions&gt; &lt;/lifecycleMappingMetadata&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; 此处的&lt;outputDirectory&gt; 指定了你导出jar包的路径. 执行命令 mvn dependency:copy-dependencies查看项目多了一个/alternateLocation目录,并且依赖的jar包都下载到这个目录下了。]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[how to use nginx on windows]]></title>
    <url>%2F2016%2F09%2F27%2Fhow-to-use-nginx-on-windows%2F</url>
    <content type="text"><![CDATA[how to use nginx on windows1. Download nginx lastest release from here.2. unzip to your local driver. eg: c:/apps/nginx3. start nginx12cd c:/apps/nginxstart nginx 4. monitoring nginx process12345tasklist /fi &quot;imagename eq nginx.exe&quot;Image Name PID Session Name Session# Mem Usage========================= ======== ================ =========== ============nginx.exe 11700 Console 1 10,696 Knginx.exe 1160 Console 1 11,180 K notice一个是主进程(main process),另一个是工作进程(work process).如果启动失败,请查看错误日志logs\error.log 5. visit http://localhost:80806. configuration file nginx.confreference config123456789101112131415161718error_log logs/error.log;http &#123; include mime.types; default_type application/octet-stream; server &#123; listen 8080; server_name localhost; location / &#123; root html; index index.html index.htm; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125; ...&#125; 7. the command list of nginx：1234nginx -s stop 快速退出nginx -s quit 优雅退出nginx -s reload 更换配置，启动新的工作进程，优雅的关闭以往的工作进程nginx -s reopen 重新打开日志文件]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[how git changing author info]]></title>
    <url>%2F2016%2F09%2F22%2Fhow-git-changing-author-info%2F</url>
    <content type="text"><![CDATA[how git changing author info背景 gitlab中的统计视图是根据用户的信息统计工作量 迁移git repo中经常会遇到用户和邮箱不一致的情况 解决思路那么如何修改已经推送到远程的author信息呢? github 官方提供的建议如何变更用户信息 同时也有类似的项托管在github上，git-tips-blame-someone-else 思路基本一致,就是替换提交记录、分支、标签里的author信息。 方案1.打开终端或命令行(git bash)2.创建一个你项目的全新裸库12git clone --bare https://github.com/user/repo.gitcd repo.git 3.复制粘贴脚本,并根据你的信息修改下面的变量:123OLD_EMAILCORRECT_NAMECORRECT_EMAIL 脚本replace.sh12345678910111213141516171819#!/bin/shgit filter-branch --env-filter &apos;OLD_EMAIL=&quot;your-old-email@example.com&quot;CORRECT_NAME=&quot;Your Correct Name&quot;CORRECT_EMAIL=&quot;your-correct-email@example.com&quot;if [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]then export GIT_COMMITTER_NAME=&quot;$CORRECT_NAME&quot; export GIT_COMMITTER_EMAIL=&quot;$CORRECT_EMAIL&quot;fiif [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]then export GIT_AUTHOR_NAME=&quot;$CORRECT_NAME&quot; export GIT_AUTHOR_EMAIL=&quot;$CORRECT_EMAIL&quot;fi&apos; --tag-name-filter cat -- --branches --tags 4.执行这个脚本sh replace.sh 5.察看Git历史有没有错误git log 6.强制推送到远程git push --force --tags origin &#39;refs/heads/*&#39; 7.清除repo.git仓库12cd ..rm -rf repo.git]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[how to understand git detached HEAD]]></title>
    <url>%2F2016%2F08%2F08%2Fhow-to-understand-git-detached-HEAD%2F</url>
    <content type="text"><![CDATA[场景远程有一个develop分支，我想获取到本地,但是clone该项目的时候这个远程分支还没有创建,于是执行 git checkout commit_id(develop) 提示如下 1234567891011121314$ git checkout f7c774bChecking out files: 100% (357/357), done.Note: checking out &apos;f7c774b&apos;.You are in &apos;detached HEAD&apos; state. You can look around, make experimentalchanges and commit them, and you can discard any commits you make in thisstate without impacting any branches by performing another checkout.If you want to create a new branch to retain commits you create, you maydo so (now or later) by using -b with the checkout command again. Example: git checkout -b new_branch_nameHEAD is now at f7c774b... update jeffsui.github.io 出现 detached from ...此时用git branch -av察看分支1234567$ git branch -av* (detached from f7c774b) f7c774b update jeffsui.github.io master 6ce1857 Site updated: 2016-08-07 22:09:10 remotes/origin/HEAD -&gt; origin/master remotes/origin/develop f7c774b update jeffsui.github.io remotes/origin/gh-pages 1eee93f Site updated: 2016-02-13 21:03:46 remotes/origin/master 6ce1857 Site updated: 2016-08-07 22:09:10 所谓的 detached HEAD 其实就是HEAD指向的是一个commit而不指向任何一个branch的临时分支,翻译过来就是游离. 众所周知,每一个分支都对应了一个commit,git checkout其实就是修改HEAD文件内容,让它指向不同的分支. 如何让detached HEAD所处分支指向远程分支此时的分支你可以执行commit操作,但是无法push到远程分支。那么我们如何把游离状态的分支指向我们指定的远程分支呢。123$ git fetch origin develop:developFrom https://github.com/jeffsui/jeffsui.github.io * [new branch] develop -&gt; develop 继续执行git branch -av 命令查看分支 12345678$ git branch -av* (detached from f7c774b) f7c774b update jeffsui.github.io develop f7c774b update jeffsui.github.io master 6ce1857 Site updated: 2016-08-07 22:09:10 remotes/origin/HEAD -&gt; origin/master remotes/origin/develop f7c774b update jeffsui.github.io remotes/origin/gh-pages 1eee93f Site updated: 2016-02-13 21:03:46 remotes/origin/master 6ce1857 Site updated: 2016-08-07 22:09:10 此时我们发现多了一个develop分支指向了远程develop 分支，这样我们就可以通过命令git push origin develop:develop到远程分支了。 更简洁的方法git fetch origin develop:develop or git checkount -b origin develop:develop 这样可以直接获取远程分支并创建一个本地分支。]]></content>
      <tags>
        <tag>git</tag>
        <tag>版本管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[my-angle]]></title>
    <url>%2F2016%2F02%2F15%2Fmy-angle%2F</url>
    <content type="text"><![CDATA[]]></content>
      <tags>
        <tag>photo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows-mongodb-install]]></title>
    <url>%2F2016%2F02%2F13%2Fwindows-mongodb-install%2F</url>
    <content type="text"><![CDATA[#windows下mongodb安装 ##下载mongodb http://www.mongodb.org/downloads ##选择自定义安装 本机路径为:d:\tools\mongodb ##建立如下文件目录数据库路径:d:\tools\mongodb\db日志路径:d:\tools\mongodb\log配置文件目录d:\tools\mongodb\etc建立配置文件d:\tools\mongodb\etc\mongodb.conf 123456dbpath=d:\tools\mongodb\db #数据库路径logpath=d:\tools\mongodb\log\mongodb.log #日志输出文件路径logappend=true #错误日志采用追加模式，配置这个选项后mongodb的日志会追加到现有的日志文件，而不是从新创建一个新文件journal=true #启用日志文件，默认启用quiet=true #这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为falseport=27017 #端口号 默认为27017 ##启动服务 切换到d:\tools\mongodb\bin 目录下: 普通启动 mongod --config d:\tools\mongodb\etc\mongodb.conf 注册为windows服务 mongod --config d:\tools\mongodb\etc\mongodb.conf --install 补充 windows服务卸载 mongod --remove --serviceName &quot;MongoDB&quot; 启动服务net start mongodb 启动成功后,通过浏览器访问 http://localhost:27017 ,看到下面的文字,证明启动服务成功！ It looks like you are trying to access MongoDB over HTTP on the native driver port. 关闭服务net stop mongodb #图形化工具 官方提供的很全:https://docs.mongodb.org/ecosystem/tools/administration-interfaces/ mongo express –Nodejs MongoBooster UMongo MongoHub MongoVUE –.NET]]></content>
      <categories>
        <category>db</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[maven3-jdk1.7-problem-fixed]]></title>
    <url>%2F2016%2F02%2F13%2Fmaven3-jdk1-7-problem-fixed%2F</url>
    <content type="text"><![CDATA[#maven3下jdk1.7编译错误解决 #环境12345678Apache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06; 2015-04-22T19:57:37+08:00)Maven home: d:\tools\apache-maven-3.3.3Java version: 1.7.0_45, vendor: Oracle CorporationJava home: c:\Program Files\Java\jdk1.7.0_45\jreDefault locale: zh_CN, platform encoding: GBKOS name: &quot;windows 7&quot;, version: &quot;6.1&quot;, arch: &quot;amd64&quot;, family: &quot;windows&quot; #使用maven命令行创建java项目1mvn archetype:generate -DgroupId=org.linfeng -DartifactId=mavendemo -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false 创建成功 12$ cd mavendemo &amp;&amp; lspom.xml src pom.xml 123456789101112131415161718&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;org.linfeng&lt;/groupId&gt; &lt;artifactId&gt;mavendemo&lt;/artifactId&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;name&gt;mavendemo&lt;/name&gt; &lt;url&gt;http://maven.apache.org&lt;/url&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;3.8.1&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 执行maven命令 mvn test 错误信息 12[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.1:compile (default-compile) on project mavendemo: Compilation failure[ERROR] No compiler is provided in this environment. Perhaps you are running on a JRE rather than a JDK? #解决方案 修改settings.xml,添加jdk1.7相关内容 123456789101112&lt;profile&gt; &lt;id&gt;jdk-1.7&lt;/id&gt; &lt;activation&gt; &lt;activeByDefault&gt;true&lt;/activeByDefault&gt; &lt;jdk&gt;1.7&lt;/jdk&gt; &lt;/activation&gt; &lt;properties&gt; &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt; &lt;maven.compiler.compilerVersion&gt;1.7&lt;/maven.compiler.compilerVersion&gt; &lt;/properties&gt;&lt;/profile&gt; 缺点:修改所有项目的jre环境 修改当前项目的pom.xml 12345678910111213&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.1&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;1.7&lt;/source&gt; &lt;target&gt;1.7&lt;/target&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 重新执行mvn build 成功！ #问题分析Maven官方文档有如下描述： 编译器插件用来编译项目的源文件.从3.0版本开始, 用来编译Java源文件的默认编译器是javax.tools.JavaCompiler (如果你是用的是java 1.6) . 如果你想强制性的让插件使用javac,你必须配置插件选项 forceJavacCompilerUse.同时需要注意的是目前source选项和target 选项的默认设置都是1.5, 与运行Maven时的JDK版本无关.如果你想要改变这些默认设置, 可以参考 Setting the -source and -target of the Java Compiler中的描述来设置 source 和target 选项. #参考资料 http://stackoverflow.com/questions/15220392/maven-package-compilation-error http://www.cnblogs.com/leo100w/p/4017647.html]]></content>
      <categories>
        <category>ci</category>
      </categories>
      <tags>
        <tag>maven</tag>
        <tag>jdk</tag>
        <tag>持续集成</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[how make cygwin multi-color]]></title>
    <url>%2F2015%2F08%2F12%2Fhow-make-cygwin-multi-color%2F</url>
    <content type="text"><![CDATA[打开.bashrc 123456789101112131415161718# Default to human readable figures# alias df=&apos;df -h&apos;# alias du=&apos;du -h&apos;## Misc # alias less=&apos;less -r&apos; # raw control characters# alias whence=&apos;type -a&apos; # where, of a sort# alias grep=&apos;grep --color&apos; # show differences in colour# alias egrep=&apos;egrep --color=auto&apos; # show differences in colour# alias fgrep=&apos;fgrep --color=auto&apos; # show differences in colour## Some shortcuts for different directory listings# alias ls=&apos;ls -hF --color=tty&apos; # classify files in colour# alias dir=&apos;ls --color=auto --format=vertical&apos;# alias vdir=&apos;ls --color=auto --format=long&apos;# alias ll=&apos;ls -l&apos; # long list# alias la=&apos;ls -A&apos; # all but . and ..# alias l=&apos;ls -CF&apos; # 而我们要做的只是去掉#，启动即可： 123456789101112131415161718# Default to human readable figuresalias df=&apos;df -h&apos;alias du=&apos;du -h&apos;## Misc alias less=&apos;less -r&apos; # raw control charactersalias whence=&apos;type -a&apos; # where, of a sortalias grep=&apos;grep --color&apos; # show differences in colouralias egrep=&apos;egrep --color=auto&apos; # show differences in colouralias fgrep=&apos;fgrep --color=auto&apos; # show differences in colour## Some shortcuts for different directory listingsalias ls=&apos;ls -hF --color=tty&apos; # classify files in colouralias dir=&apos;ls --color=auto --format=vertical&apos;alias vdir=&apos;ls --color=auto --format=long&apos;alias ll=&apos;ls -l&apos; # long listalias la=&apos;ls -A&apos; # all but . and ..alias l=&apos;ls -CF&apos; # 然后保存一下，再重启cygwin（或者直接用：source ~/.bashrc]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>cygwin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[how to build a private docker registry]]></title>
    <url>%2F2015%2F07%2F21%2Fhow-to-build-a-private-docker-registry%2F</url>
    <content type="text"><![CDATA[如何搭建docker私服##环境准备 软件包： centos6.5_x86_64 docker-engine-1.7.0-1.el6.x86_64.rpm docker环境搭建,请参照官方说明，本文采用的是官方的rpm包 ##何谓私服 官方的image镜像站位dockerhub,因为伟大的墙的缘故,所以下载镜像是很痛苦的一件事。当然你可以采用其他科学上网或者镜像加速的方法来获取image。docker官方也提供了一个私服镜像,大家可以通过docker search registry来查找该镜像。 12345NAME DESCRIPTION STARS OFFICIAL AUTOMATEDregistry Containerized docker registry 320 [OK] atcol/docker-registry-ui A web UI for easy private/local Docker Reg... 55 [OK]konradkleine/docker-registry-frontend Browse and modify your Docker registry in ... 40 [OK]samalba/docker-registry 35 ##下载官方registry镜像 下载镜像 使用命令docker pull registry执行下载镜像。 查看镜像 下载完毕后,通过docker images 查看该镜像。 给镜像打标签 执行这个命令docker tag registry:latest localhost:5000/registry:latest ##启动镜像 docker run -d -e SETTINGS_FLAVOR=dev -e STORAGE_PATH=/tmp/registry -v /opt/data/registry:/tmp/registry -p 5000:5000 registry 这里有几个参数说明下: 1.-e STORAGE_PATH=/tmp/registry :强制使用存储路径 2.-v /opt/data/registry:/tmp/registry :绑定本地镜像存储路径 3.-p 5000:5000:映射容器5000端口到本地5000端口 ##查看镜像状态 docker ps ##查看私服状态 curl http://localhost:5000 显示如下信息,证明registry启动成功: &quot;\&quot;docker-registry server\&quot;&quot; ##推送本地镜像库到registry私服 ###1. 第一步 给本地镜像 打tag例如给官方的nginx镜像打tag,执行下面的命令行docker pull nginxdocker tag nginx:latest localhost:5000/nginx:latest查看镜像库,发现localhost:5000/nginx的镜像已经有了。 ###2. 第二步 推送tag到registry私服 docker push localhost:5000/nginx:latest ###3. 第三步 查看私服镜像列表 curl http://localhost：5000/V1/search 看到类似这样的信息 12&#123;&quot;num_results&quot;: 5, &quot;query&quot;: &quot;&quot;, &quot;results&quot;: [&#123;&quot;description&quot;: null, &quot;name&quot;: &quot;correl/erlang&quot;&#125;, &#123;&quot;description&quot;: null, &quot;name&quot;: &quot;linfeng/cmd&quot;&#125;, &#123;&quot;description&quot;: null, &quot;name&quot;: &quot;library/my_nodejs_image&quot;&#125;, &#123;&quot;description&quot;: null, &quot;name&quot;: &quot;library/centos&quot;&#125;, &#123;&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;library/nginx&quot;&#125;]&#125; ##拉取私服镜像 docker pull 192.168.20.85:5000/library/centos:7 ##结论 这只是演示如何搭建一个简单的registry私服。因为只有通过命令行方式才能查看私服信息,所以不是很便于操作。下面的博文将演示如何给registry添加web界面。]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>registry</tag>
        <tag>registry-ui</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[how git version rollback]]></title>
    <url>%2F2015%2F05%2F16%2Fhow-git-version-rollback%2F</url>
    <content type="text"><![CDATA[如何进行远程版本回退…… #引言 一切都要从一个蛋疼的需求开始,老板说,能给远程仓库的版本回退吗？我说为毛？他说我就是试试看git好使不,我…… #咋搞 背景 gitcafe 国内知名的源码托管平台 分析 12345678910111213141、git checkout the_branch2、git pull3、git branch the_branch_backup //备份一下这个分支当前的情况4、git reset --hard the_commit_id //把the_branch本地回滚到the_commit_id5、git push origin :the_branch //删除远程 the_branch6、git push origin the_branch //用回滚后的本地分支重新建立远程分支7、git push origin :the_branch_backup //如果前面都成功了，删除这个备份分支 删除远程分支 首先,任何一个git源码托管平台都会告诉你,别删除远程master分支,因为它是默认的分支……,请移步这里 操作步骤 如果远程只有一个master分支,请你创建一个非master分支,然后推送到远程。有人会问我为什么？打个比方,你见过上旱厕的时候,给自己脚下站着的板子抽走吗？ 脚本类似下面这样 1234git branch the_master_backupgit push origin the_master_backup 此时你查看远程分支应该有两个:master和the_master_backup 设置默认的分支为 the_master_backup 1234git branch -D branch_name //删除本地master分支git push :master //推送一个空分支,相当于删除远程master分支 然后你在the_master_backup分支上 回滚到你要回滚的commit_id,然后重建master分支并推送到远程,顺便删除the_master_backup分支(包括远程the_master_backup分支)。 123456789101112git checkout the_master_backupgit reset --hard commit_idgit branch master //重新创建master分支git push origin master //重新推送master分支git branch -D the_master_backup //删除本地the_master_backup分支git push origin :the_master_backup//删除远程the_master_backup分支 #遇到的问题 忘记设置默认分支为非master分支 1234567891011121314remote: error: By default, deleting the current branch is denied, because the nextremote: error: &apos;git clone&apos; won&apos;t result in any file checked out, causing confusion.remote: error:remote: error: You can set &apos;receive.denyDeleteCurrent&apos; configuration variable toremote: error: &apos;warn&apos; or &apos;ignore&apos; in the remote repository to allow deleting theremote: error: current branch, with or without a warning message.remote: error:remote: error: To squelch this message, you can set it to &apos;refuse&apos;.... #总结 如果你遇到的是所有提交只有master分支,那么希望我这个博文能帮到你。当然git强大的分支功能你基本也用不到了。]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>gitcafe</tag>
        <tag>版本管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript oop 15 min programming]]></title>
    <url>%2F2015%2F04%2F23%2Fjavascript-oop-15-min-programming%2F</url>
    <content type="text"><![CDATA[#javascript的面向对象15分钟教程 第一种面向对象的写法##创建空对象 12var bill =&#123;&#125;;//创建一个空对象 ##给对象添加属性和方法 12345bill.name = &quot;Bill Goat&quot;;bill.work = function ()&#123; console.log(&quot;programming....&quot;);&#125;; ##一步完成上面的两件事 1234567var bill =&#123; name : &quot;Bill Goat&quot;; work : function()&#123; console.log(&quot;programming....&quot;);&#125;&#125;; ##访问对象和属性 123console.log(bill.name);bill.work(); ##方法重写 12345bill.name = &quot;Bill Goat&quot;;bill.work =function(who)&#123; console.log(&quot;programming for &quot;+who);&#125;; ##通过this关键字访问内部属性 1234bill.say = function ()&#123; console.log(&quot;bill&apos;s name is&quot;+this.name);&#125;; ##对象引用123456var silly = bill;console.log(silly.name);sally.name = &quot;Silly&quot;;console.log(silly.name);console.log(bill.name); ##另一个方式引用1234567bill.name = &quot;Bill Goat&quot;;bill.say();var sayName = bill.say();sayName;sayName(); ##有意思的地方 ：全局属性123var name = &quot;Global&quot;;bill.say(); 发现此时输出的是bill&#39;s name is Global 另一种面向对象的写法##定义对象及属性 12function Game()&#123;&#125;; ##创建对象 1var DF = new Game(); ##对象属性 1DF.title = &quot;星际争霸2&quot;; ##构造方法 12345678function Game (title)&#123; this.title = typeof title !== &apos;undifined&apos; ? title :&quot;&quot;;&#125;;var d3 = new Game(&quot;d3&quot;);d3.title;d3.title =&quot;starcraft2&quot;; this.title = typeof title !== &#39;undifined&#39; ? title :&quot;&quot;;相当于 123456if(typeof title !== &quot;undifined&quot;）&#123; this.title = title;&#125;else&#123; this.title = &quot;&quot;;&#125; ##创建一个方法来访问这个属性1234d3.loveTitle = function ()&#123; console.log(&quot;I love &quot;+this.title);&#125; ##更好的写法 12345Game.prototype.heartIt = function ()&#123; console.log(&quot;I love &quot;+this.title);&#125;d3.heartIt(); 下次详解javascript的原生对象模型 to be continued~~~~]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>oop</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[talk about software engineering]]></title>
    <url>%2F2015%2F04%2F22%2Ftalk-about-software-engineering%2F</url>
    <content type="text"><![CDATA[#关于软件工程的讨论–质量篇 那为什么软件系统的质量不容易高呢？我觉得主要原因是流程不完善。那为什么不完善？需求容易变。为什么容易变？是因为不论程序员自己，还是需求方，其实潜意识都认为自己做的东西是变更成本较低的。 试想一下，为什么没人在盖高楼盖一半变更需求？为什么没人修大桥修一半变更需求？甚至做衣服做一半的时候变更需求，理发到一半变更需求，都会被人认为是不讲理。但是在软件领域，好像这倒成了普遍现象。 因为整个软件系统的实现，都是虚拟的，看不见摸不着，并不消耗什么物料，所以从这个角度想，变起来当然是容易的。但软件系统的架构，其实也跟实体的没本质区别，变更时候要考虑很多关联因素，并不是就那么孤立的看一小块地方，当然，也会有一些不影响全局的变更。打个比方说，如果你在盖房子盖到一半，那变更外墙颜色肯定是要比变更窗户大小容易的。要是想变得太多，估计只好拆了重来。 下面的讨论更加精彩: A:其实不是流程问题，老板和甲方问题 A:甲方尤其关键 A:尼玛，要8层楼房，付2层费用 ……]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript asynchronous programming learning :event]]></title>
    <url>%2F2015%2F04%2F20%2Fjavascript-asynchronous-programming-learning-event%2F</url>
    <content type="text"><![CDATA[#javascript异步编程读书笔记之事件机制 ##事件的调度 异步执行 setTimeout函数的解释:给定一个回调及n毫秒的延迟,setTimeout会在n毫秒后运行该回调。 代码清单1:12345for (var i = 1; i &lt;= 3; i++) &#123; setTimeout(function()&#123; console.log(i); &#125;, 0);&#125;; 输出结果: 123444 线程阻塞代码清单2: 123456var start = new Date;setTimeout(function()&#123;var end = new Date;console.log(&apos;Time elapsed:&apos;, end - start, &apos;ms&apos;);&#125;, 500);while (new Date - start &lt; 1000) &#123;&#125;; 队列 javascript使用队列的方式来循环处理请求,这种机制被称为事件循环。]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>异步</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[use-shorturl and two-dimensional-barcodes to beautify blog]]></title>
    <url>%2F2015%2F04%2F20%2Fuse-shorturl-and-two-dimensional-barcodes-to-beautify-blog%2F</url>
    <content type="text"><![CDATA[#如何使用短网址和二维码简化网站访问 短网址(shorturl) web2.0时代的潮流,借助短网址您可以用简短的网址替代原来冗长的网址，让使用者可以更容易的分享链接。这里我使用的是百度的短网址服务:http://dwz.cn/ 访问http://dwz.cn/主页 输入你的博客地址我输入http://jeffsui.github.io/pinghailinfeng_blog/ 复制短网址 二维码(two-dimensional-barcodes)微信时代,不知道二维码的基本都属于外星球人了。这里我选择的是草料二维码:http://cli.im/ 输入二维码地址 进行一些基本设置包括前景色、背景色、渐变色等等。 嵌入图片 选用你喜欢的模板 保存二维码 在线存储这里我选择国内知名的七牛云存储。 4.在博客中引用图片地址就可以了]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>美化</tag>
        <tag>短网址</tag>
        <tag>二维码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的新文章]]></title>
    <url>%2F2015%2F04%2F17%2Fmy-new-post%2F</url>
    <content type="text"><![CDATA[#我的新文章 这是我的第一篇在github上的博客。记录下我的工作和生活,慢慢给其他的文章都更新到这里。嬉笑怒骂也好,喜怒哀乐也罢,我就是一个俗人罢了。]]></content>
      <tags>
        <tag>杂记</tag>
        <tag>博客</tag>
        <tag>文章</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[push-hexo-to-github]]></title>
    <url>%2F2015%2F04%2F17%2Fpush-hexo-to-github%2F</url>
    <content type="text"><![CDATA[#如何使用hexo在github上建立静态博客 ##环境搭建 hexo环境搭建 请参考 hexo.io 官方站点, 强烈建议给基本操作下的内容快速浏览一遍,下面的操作是我一个一个命令敲出来的,遇到的坑也会记录下来,希望大家能少走弯路。 github上建立静态博客 github账号申请（略） 建立一个github项目 git clone 项目地址 到本地 项目初始化cd 项目名echo # hexo 实例站点 &gt;&gt; README.mdgit initgit add README.mdgit commit -m “first blood”git remote add origin 项目地址git push -u origin master github免费站点建立规则,请仔细阅读这个规则https://help.github.com/articles/user-organization-and-project-pages/ 默认github域名 默认github 分配了 一个name.github.io的域名,还有一个name.github.io/project_name的二级域名,请参照github的提示设置URL。 华丽的分割线 站点配置流程 建立站点文件夹,并站点初始化 安装hexo依赖 修改node_module/hexo-server/index.js,用于本地调试 安装hexo-git-deployer插件 修改全局配置文件_config.yml,配置deploy# Site 站点配置title: 凭海临风的测试江湖subtitle:description: 凭海临风的博客author: Jeff Suilanguage: zh-CNtimezone # URL 站点链接## If your site is put in a subdirectory, set url as ‘http://yoursite.com/child&#39; and root as ‘/child/‘url: http://jeffsui.github.ioroot: /pinghailinfeng_blog/permalink: :year/:month/:day/:title/permalink_defaults: # Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy:type: gitrepo: https://github.com/jeffsui/pinghailinfeng_blog.gitbranch : mastermessage : 以上配置仅供参考 创建文章 执行hexo new 命令 例如:hexo new post my-first-blog 将会自动在source/_posts下创建一个my-first-blog.md的文件,使用的是scaffolds下的post.md模板 修改并保存my-first-blog.md文件 站点生成hexo g 站点部署 hexo d 如果没有报错,恭喜你已经成功推送到 项目的master分支。 创建gh-pages分支并推送到远程 git fetch origin master git checkout gh-pages git merge master git push origin gh-pages 访问http://jeffsui.github.io/pinghailinfeng_blog/ ##遇到的问题 github站点的规则不熟悉,url配置浪费我2个小时。项目建立的是二级域名,所以必须要按照我说的那样配置。 本地预览有可能不加载样式,重新删除node_module下所有,执行npm install,再hexo g,hexo server -i 127.0.0.1 -s -o即可。 hexo3.0版本的git插件必须要独立安装。 其他坑,自己填吧。 ##总结 大坑各种有,github特别多,还有伟大的墙,兄弟们,github好上,填坑需谨慎！]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>搭建</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sublime run slow problem]]></title>
    <url>%2F2015%2F04%2F17%2Fsublime-run-slow-problem%2F</url>
    <content type="text"><![CDATA[#解决sublime Text2运行缓慢的方法 今天打开sublime想写博客发现整个页面打开很慢,切换tab要等好几秒。发现了一个帖子,说GitGutter这个插件在st2下会影响切换tab速度。 于是 ctrl+shift+p调出命令,remove package,选择GitGutter,回车。重启sublime,世界都变得清静了。]]></content>
      <categories>
        <category>工具篇</category>
      </categories>
      <tags>
        <tag>sublime</tag>
        <tag>GitGutter</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[first-blog]]></title>
    <url>%2F2015%2F04%2F17%2Ffirst-blog%2F</url>
    <content type="text"><![CDATA[#第一个博客 ##记录使用hexo的各种填坑。]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
</search>
