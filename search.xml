<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[javascript中Boolean_Object与Boolean_Primitives]]></title>
    <url>%2F2019%2F09%2F20%2Fjavascript%E4%B8%ADBoolean-Object%E4%B8%8EBoolean-Primitives%2F</url>
    <content type="text"><![CDATA[先看下面的脚本，预测下结果 123456var flag = true;console.log(typeof(flag));//booleanvar fa = Boolean(true);console.log(typeof(fa));//booleanvar ff = new Boolean(true);console.log(typeof(ff)); //Object 在 jslint中明确提示 new Boolean(true)；do not use Boolean as a constructor. (W053)jshint(W053) 接下来的例子 123456789if(flag)&#123; console.log("true is true");&#125;if(fa)&#123; console.log("Boolean is true");&#125;if(ff)&#123; console.log("Object Boolean is true");&#125; 结果如下 123true is trueBoolean is trueObject Boolean is true 修改脚本： 123456var flag = true;console.log(typeof(false));//booleanvar fa = Boolean(false);console.log(typeof(fa));//booleanvar ff = new Boolean(false);console.log(typeof(ff)); //Object 结果竟然显示： 1Object Boolean is true 后来查阅资料发现, JavaScript的其他数据类型都可以转换成Boolean类型，注意！！！只有这几种类型会转换为false 123456undefinednull0-0NaN"" (空字符串) 其他都转化为true,包括空对象{}，空数组[] ， 负数 ，false的对象包装等。 123456789101112if(-1)&#123; console.log('-1转换为true');&#125;if(&#123;&#125;)&#123; console.log('&#123;&#125;转换为true');&#125;if([])&#123; console.log('[]转换为true');&#125;if(new Boolean(false))&#123; console.log('new Boolean(false)转换为true');&#125; new Boolean(false)是布尔值的包装对象 typeof (new Boolean(false)) // ‘object’ ,所以 转换为boolean是true，而不是false。 从另一个层面也证明了为啥jslint 禁止在构造方法里使用Boolean类型的数据。 后记Boolean.valueOf() 可以返回Boolean对象对应的值类型 1234/**/if(ff.valueOf())&#123; console.log("Object Boolean is true"); &#125; 补充对于数字0 连续使用两次!! 仍旧返回false. 123var fa = Boolean(0);console.log(fa); //falseconsole.log(!!0);//false 参考文章 JavaScript Boolean( new Boolean(false) ) 其实是true The Difference Between Boolean Objects and Boolean Primitives in JavaScript]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>Boolean</tag>
        <tag>坑</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[how to add 163 music to hexo]]></title>
    <url>%2F2019%2F09%2F06%2Fhow-to-add-163-music-to-hexo%2F</url>
    <content type="text"><![CDATA[如何给hexo添加网易音乐先看看效果 1.访问网易云首页，选择你喜欢的音乐，点击生成外链,我不希望音乐一直播放,如果来访的朋友想听,点击下播放就好。 这里我选择二十岁的某一天 2. 复制iframe插件下的src里的地址 3. 修改themes/next/layout/sidebar.swig文件12345&#123;% if theme.background_music %&#125; &lt;div&gt; &lt;iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="210" height="110" src="&#123;&#123; theme.background_music &#125;&#125;"&gt;&lt;/iframe&gt; &lt;/div&gt;&#123;% endif %&#125; 4.添加音乐地址到主题1background_music : //music.163.com/outchain/player?type=2&amp;id=247172&amp;auto=1&amp;height=66]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>网易音乐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[how to Sort Python Dictionaries by Key or Value]]></title>
    <url>%2F2019%2F07%2F28%2Fhow-to-Sort-Python-Dictionaries-by-Key-or-Value%2F</url>
    <content type="text"><![CDATA[众所周知,python中字典是无序的,那么该如何对字典排序呢？ 例如下面的字典： 1numbers = &#123;'second': 2,'first': 1, 'third': 3, 'Fourth': 4&#125; 我们可以通过list()函数打印value,12&gt;&gt;&gt;list(numbers)['second', 'first', 'third', 'Fourth'] 备注: python3.6.4 以上的版本,字典根据插入的顺序自动排序 如何根据key 对字典排序可以使用python的内置函数sorted 来对字典排序,如下面的代码 12&gt;&gt;&gt; sorted(numbers)['Fourth', 'first', 'second', 'third'] 结果有点差强人意,因为默认sorted函数是根据字母的顺序升序排列的,这里的字典中 key 恰好是字母，所以才会显示这个结果。 根据value对字典排序用同样的方法,我们可以根据value来排序 12&gt;&gt;&gt; sorted(numbers.values())[1, 2, 3, 4] 如何根据自定义的规则对字典排序sorted函数还有一个可选参数叫key,注意这里的key和字典的key没有关系,根据指定的key 来进行排序,实现的机制类似迭代器。来看这个例子： 12&gt;&gt;&gt; sorted(numbers,key=numbers.__getitem__)['first', 'second', 'third', 'Fourth'] 这里我们使用了字典类中内置函数__getitem__ 在遍历字典值的过程中,获取对应的值来对字典排序 关于__getitem__ 函数的详细说明，请参考官方文档。 当然我们也可以使用列表推导的方式来进行排序(实质上是转化成了列表来进行排序) 1234&gt;&gt;&gt; sorted(numbers,key=numbers.__getitem__,reverse=True)['Fourth', 'third', 'second', 'first']&gt;&gt;&gt; [value for (key,value) in sorted(numbers.items(),reverse=True)][3, 2, 1, 4] 字典的key是数字或者字母的情况下对字典排序12&gt;&gt;&gt; sorted(numbers,key=str.lower)['first', 'Fourth', 'second', 'third'] 我们定义一个新的字典 12345&gt;&gt;&gt; month = dict(one='January', two='February', three='March', four='April', five='May') 通过__getitem__方法比较 我们定义的字典month中对应的值 123&gt;&gt;&gt; numbermap = &#123;'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5&#125;&gt;&gt;&gt; sorted(month, key=numbermap.__getitem__)['one', 'two', 'three', 'four', 'five'] 同样的原理,可以使用列表推导来实现排序 12&gt;&gt;&gt; [month[i] for i in sorted(month,key=numbermap.__getitem__)]['January', 'February', 'March', 'April', 'May'] 定义一个方法来定义我们自己的排序规则1234567891011def repeats(string): # Lower the case in the string string = string.lower() # Get a set of the unique letters uniques = set(string) # Count the max occurrences of each unique letter counts = [string.count(letter) for letter in uniques] return max(counts) 根据字母小写排序 12&gt;&gt;&gt; sorted(month.values(), key=repeats, reverse=True)['February', 'January', 'March', 'April', 'May'] 使用lambda表达式排序使用lambda表达式 12&gt;&gt;&gt; sorted(month.items(),key=lambda x:x[1])[('four', 'April'), ('two', 'February'), ('one', 'January'), ('three', 'March'), ('five', 'May')] 12&gt;&gt;&gt; sorted(month.items(),key=lambda x:x[0])[('five', 'May'), ('four', 'April'), ('one', 'January'), ('three', 'March'), ('two', 'February')] 其中： lambda x:x[1] 表明根据值排序 lambda x:x[0] 表明根据键排序 以上就是python中对字典排序的一个总结,希望能帮到大家。]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>dict</tag>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript-undefined-description]]></title>
    <url>%2F2019%2F06%2F11%2Fjavascript-undefined-description%2F</url>
    <content type="text"><![CDATA[Javascript 基础拾遗之undefined先看一个例子： 123var a;console.log(a);//undefinedconsole.log(typeof(a)); //undefined javascript中的数据类型包括undefined，null,boolean,number,string,boolean六种类型(ECMAScript 2015) undefined 小结undefined 类型的意思是当前对象未定义,适用于下面几种情况 变量声明,但未赋值 对象没有赋值的属性,该属性的值为undefined 调用函数参数,但是未提供参数，该参数的值为undefined 函数没有返回值时,默认返回undefined 再看下面的例子 123456789101112131415161718//1.var i;console.log(i);//2.var o = new Object();console.log(o.p);//3.function test(a)&#123; console.log(typeof a); // undefined return a;&#125;test();//4.myfunc()function myfunc()&#123; //console.log("my function.");&#125;console.log(myfunc()); 需要区别下面这个情况,不同浏览器提示信息可能会不同(Chrome和IE测试) 12console.log(b);// Uncaught ReferenceError: b is not defined 如何判断为空下面三种判断方法： 123456// 方式1if(typeof age === 'undefined')// 方式2if(age === undefined)// 方式3if(varName) //万能判断,包括boolean 参考文档火狐JavaScript教程 stackoverflow如何检查undefined]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Build path entry is missing /src/test/java missing问题解决]]></title>
    <url>%2F2019%2F06%2F03%2FMaven-webapp-buildpath-missing-test-folder%2F</url>
    <content type="text"><![CDATA[[问题描述]通过maven构建webapp,发现缺少java和test目录 [解决方案] project –right click –build path– config build path – libraries – double click “JRE System Library”–choose “workspace default JRE” OK 如下图所示]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>maven</tag>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[how-to-fix-cannot-change-version-of-project-dynamic-web-module-to-3.1-in-Eclipse]]></title>
    <url>%2F2019%2F06%2F03%2Fhow-to-fix-cannot-change-version-of-project-dynamic-web-module-to-3.1-in-Eclipse%2F</url>
    <content type="text"><![CDATA[1.问题描述 试图转换Dynamic Web Module 发生如下错误: 12Cannot change version of project facet Dynamic Web Module to 3.0 One or more constraints have not been satisfied 操作步骤： 右键点击项目 选择Properties 点击Project facet 选项 更改Dynamic Web Module, 2.3 到 3.1 ,如下图 2. 解决步骤Step 1： 选择navigator 视图 Step 2: 打开org.eclipse.wst.common.project.facet.core.xml 修改jst.web 的值2.3 为 3.1 12345678&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;faceted-project&gt; &lt;fixed facet="wst.jsdt.web"/&gt; &lt;installed facet="jst.jaxrs" version="2.0"/&gt; &lt;installed facet="wst.jsdt.web" version="1.0"/&gt; &lt;installed facet="java" version="1.8"/&gt; &lt;installed facet="jst.web" version="3.1"/&gt;&lt;/faceted-project&gt; 注意 jst.web版本3.1,那么java版本必须是1.7以上才可以 Step 3: 刷新项目 鼠标右键点击项目 F5刷新项目 清理项目 点击顶部菜单栏 Project 选择Clean maven更新 鼠标右键点击项目名称 选择Maven 选择Update project 3. 问题总结没有清理项目就直接更新,缓存造成更新失败。 参考链接 how-to-fix-cannot-change-version-of-project-dynamic-web-module-to-3.1-in-Eclipse]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>maven</tag>
        <tag>eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo建站搭建流程]]></title>
    <url>%2F2019%2F05%2F31%2Fhexo%E5%BB%BA%E7%AB%99%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[下载并安装 Visual Studio Code, 官方下载 下载并安装 Nodejs, 官方下载 12node -vnpm -v npm 镜像源修改为 淘宝NPM镜像 1npm install -g cnpm --registry=https://registry.npm.taobao.org 下载并安装 Git, 官方下载 123#配置名字和邮箱git config --global user.name &quot;test&quot;git config --global user.email &quot;test@.com&quot; 安装 Hexo, 官方文档 12cnpm install -g hexo-clihexo -v 初始化博客目录 1234cd Dhexo init blogcd blogcnpm install 启动服务器,本地预览 1hexo server Hexo 常用站点配置_config.yml 12345678910#网站标题title: test#作者昵称author: test#站点描述[签名]description: 站点描述#网站地址url: http://www.test.com#文章的链接格式permalink: :title.html 添加标签 1234#生成文件路径 source/tags/index.mdhexo new page tags#编辑index.md,添加typetype: &quot;tags&quot; 添加分类 1234#生成文件路径 source/categories/index.mdhexo new page categories#编辑index.md,添加typetype: &quot;categories&quot; 文章添加标签与分类 12345categories: - hexotags: - hexo - github 设置阅读全文 12#在文章中使用 &lt;!-- more --&gt; 手动截断 &lt;!-- more --&gt; Hexo 主题,这里选择 Next, Github地址 文档安装 Next 主题 1git clone https://github.com/iissnan/hexo-theme-next themes/next 启用主题并设置语言,站点配置 12theme: nextlanguage: zh-CN 主题常用配置,themes/next/_config.yml 12345678910111213141516171819#主题外观设定scheme: Gemini#设置菜单menu: home: / || home tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive#设置代码高亮主题highlight_theme: night eighties#添加友情链接links: test: http://www.test.com#文章自动添加版权声明post_copyright: enable: true#返回顶部按钮显示百分比sidebar: scrollpercent: true 设置RSS,安装hexo-generator-feed 1cnpm install hexo-generator-feed --save 安装hexo-generator-searchdb,添加百度/谷歌/本地 自定义站点内容搜索 1cnpm install hexo-generator-searchdb --save 启用搜索,主题配置 12local_search: enable: true 配置搜索,站点配置 12345search: path: search.xml field: post format: html limit: 7777 设置favicon.ico,将favicon.ico上传至站点根目录/source 目录下,主题配置 123favicon: small: favicon.ico medium: favicon.ico 部署Hexo至Github安装 hexo-deployer-git 1cnpm install hexo-deployer-git --save 站点配置 123deploy: type: git repo: https://github.com/github账号/github账号.github.io.git 生成并部署 1hexo d -g Github 自定义域名,由于Hexo每次部署到Github都会覆盖Github的域名配置,所以直接在Hexo配置,然后再部署,在根目录下的source目录下新建CNAME文件,无后缀名 12#自定义域名xxx.com 解析域名到 github.io,记录类型 = CNAME, 记录值 = github账号.github.io 码云新建一个项目, 路径 https://gitee.com/test/test.git Hexo 目录说明 12.deploy_git Hexo默认的.git配置文件夹public 根据source文件夹内容自动生成 进入 Hexo根目录,执行以下命令,先删除 themes/next 目录下的 .gitignore 文件 12345678910#初始化仓库git init#添加远程主机git remote add origin https://gitee.com/test/test.git#添加目录下所有文件,不包含 .gitignore 声明的文件git add .#添加更新说明git commit -m &quot;hexo first commit&quot;#推送更新到云端服务器git push -u origin master 创建 test 目录,将 Git 的内容同步到本地并安装Hexo 1234567mkdir testcd testgit initgit remote add origin https://gitee.com/test/test.gitgit fetch --allgit reset --hard origin/mastercnpm install blog 目录是A电脑, test 目录是B电脑, 更新文章后的同步操作： 12345678#A电脑修改了 test.md,添加更新说明并推送到远程仓库,使用git status查看状态会显示刚刚更改过的文件状态git commit -m &quot;update test.md&quot;git push origin mastergit status#B电脑同步更新git pull origin master#可以通过指定当前目录工作分支与远程仓库分支之间的链接关系git branch --set-upstream-to=origin/master master hexo 数据文件,通用配置文件,新建 source/_data 目录, 主题的配置可以在此目录下配置,以 Next 主题为例,在此目录下新建 next.yml, 则 next.yml 的配置会覆盖 themes/next/_config.yml 的相同配置]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python创建字典的几种方法]]></title>
    <url>%2F2019%2F05%2F28%2Fpython%E5%88%9B%E5%BB%BA%E5%AD%97%E5%85%B8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[python创建字典的几种方法1. 创建空字典123&gt;&gt;&gt; dic = &#123;&#125;&gt;&gt;&gt; type(dic)&lt;type &apos;dict&apos;&gt; 另一种形式：12temp = dict()temp[&apos;name&apos;] = &apos;xiaoming&apos; 2. 直接赋值创建123&gt;&gt;&gt; dic = &#123;&apos;spam&apos;:1, &apos;egg&apos;:2, &apos;bar&apos;:3&#125;&gt;&gt;&gt; dic&#123;&apos;bar&apos;: 3, &apos;egg&apos;: 2, &apos;spam&apos;: 1&#125; 3. 通过关键字dict和关键字参数创建123&gt;&gt;&gt; dic = dict(spam = 1, egg = 2, bar =3)&gt;&gt;&gt; dic&#123;&apos;bar&apos;: 3, &apos;egg&apos;: 2, &apos;spam&apos;: 1&#125; 4. 通过二元组列表创建1234&gt;&gt;&gt; list = [(&apos;spam&apos;, 1), (&apos;egg&apos;, 2), (&apos;bar&apos;, 3)]&gt;&gt;&gt; dic = dict(list)&gt;&gt;&gt; dic&#123;&apos;bar&apos;: 3, &apos;egg&apos;: 2, &apos;spam&apos;: 1&#125; 5. dict和zip结合创建123&gt;&gt;&gt; dic = dict(zip(&apos;abc&apos;, [1, 2, 3]))&gt;&gt;&gt; dic&#123;&apos;a&apos;: 1, &apos;c&apos;: 3, &apos;b&apos;: 2&#125; 6. 通过字典推导式创建123&gt;&gt;&gt; dic = &#123;i:2*i for i in range(3)&#125;&gt;&gt;&gt; dic&#123;0: 0, 1: 2, 2: 4&#125; 7. 通过dict.fromkeys()创建123&gt;&gt;&gt; dic = dict.fromkeys(range(3), &apos;x&apos;)&gt;&gt;&gt; dic&#123;0: &apos;x&apos;, 1: &apos;x&apos;, 2: &apos;x&apos;&#125; 8. 其他1234&gt;&gt;&gt; list = [&apos;x&apos;, 1, &apos;y&apos;, 2, &apos;z&apos;, 3]&gt;&gt;&gt; dic = dict(zip(list[::2], list[1::2]))&gt;&gt;&gt; dic&#123;&apos;y&apos;: 2, &apos;x&apos;: 1, &apos;z&apos;: 3&#125;]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>字典</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python操作sqlite3]]></title>
    <url>%2F2019%2F05%2F28%2Fpython%E6%93%8D%E4%BD%9Csqlite3%2F</url>
    <content type="text"><![CDATA[sqlite3 简介1234567891011121314151617181920212223242526272829303132SQLite数据库是一款非常小巧的嵌入式开源数据库软件，也就是说没有独立的维护进程，所有的维护都来自于程序本身。在python中，使用sqlite3创建数据库的连接，当我们指定的数据库文件不存在的时候连接对象会自动创建数据库文件；如果数据库文件已经存在，则连接对象不会再创建数据库文件，而是直接打开该数据库文件。 连接对象可以是硬盘上面的数据库文件，也可以是建立在内存中的，在内存中的数据库 执行完任何操作后，都不需要提交事务的(commit) 创建在硬盘上面： conn = sqlite3.connect(&apos;c:\\test\\test.db&apos;) 创建在内存上面： conn = sqlite3.connect(&apos;&quot;memory:&apos;) 下面我们一硬盘上面创建数据库文件为例来具体说明： conn = sqlite3.connect(&apos;c:\\test\\hongten.db&apos;) 其中conn对象是数据库链接对象，而对于数据库链接对象来说，具有以下操作： commit() --事务提交 rollback() --事务回滚 close() --关闭一个数据库链接 cursor() --创建一个游标 cu = conn.cursor() 这样我们就创建了一个游标对象：cu 在sqlite3中，所有sql语句的执行都要在游标对象的参与下完成 对于游标对象cu，具有以下具体操作： execute() --执行一条sql语句 executemany() --执行多条sql语句 close() --游标关闭 fetchone() --从结果中取出一条记录 fetchmany() --从结果中取出多条记录 fetchall() --从结果中取出所有记录 scroll() --游标滚动 sqlite3常用操作123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197#!/usr/bin/env python# -*- coding: utf-8 -*-# @Date : 2019-03-14 16:10:24# @Author : Jeff.Sui (215687736@qq.com)# @Link : http://example.org# @Version : $Id$import sqlite3con = sqlite3.connect(&quot;:memory:&quot;)c = con.cursor()# Create tablec.execute(&apos;&apos;&apos;CREATE TABLE stocks (date text, trans text, symbol text, qty real, price real)&apos;&apos;&apos;)# Insert a row of datac.execute(&quot;INSERT INTO stocks VALUES (?,?,?,?,?)&quot;, (&apos;2006-03-27&apos;,&apos;BUY&apos;,&apos;RHAT&apos;,100,60.14))# Larger example that inserts many records at a timepurchases = [(&apos;2006-03-28&apos;, &apos;BUY&apos;, &apos;IBM&apos;, 1000, 45.00), (&apos;2006-04-05&apos;, &apos;BUY&apos;, &apos;MSFT&apos;, 1000, 72.00), (&apos;2006-04-06&apos;, &apos;SELL&apos;, &apos;IBM&apos;, 500, 53.00), (&apos;2006-04-07&apos;, &apos;SELL&apos;, &apos;MSFT&apos;, 500, 74.00), (&apos;2006-04-08&apos;, &apos;SELL&apos;, &apos;IBM&apos;, 500, 54.00), (&apos;2006-04-09&apos;, &apos;SELL&apos;, &apos;MSFT&apos;, 500, 73.00), (&apos;2006-04-10&apos;, &apos;SELL&apos;, &apos;MSFT&apos;, 500, 75.00), (&apos;2006-04-12&apos;, &apos;SELL&apos;, &apos;IBM&apos;, 500, 55.00), ]c.executemany(&apos;INSERT INTO stocks VALUES (?,?,?,?,?)&apos;, purchases)# Save (commit) the changescon.commit()# Do this insteadt = (&apos;RHAT&apos;,)c.execute(&apos;SELECT * FROM stocks WHERE symbol=?&apos;, t)#print(c.fetchone())#for row in c.execute(&apos;SELECT * FROM stocks ORDER BY price&apos;):# print(row) #for row in c.execute(&apos;SELECT * FROM stocks LIMIT 5 OFFSET 0&apos;):# print(row)for row in c.execute(&apos;SELECT * FROM stocks LIMIT 5 OFFSET 1&apos;): print(row)#Select Top N * From# ====================================================================================# SQLite 日期 &amp; 时间# ====================================================================================print(&apos;=&apos;*30)print(&apos;SQLite 日期 &amp; 时间&apos;)print(&apos;=&apos;*30)# 计算当前日期c.execute(&quot;SELECT date(&apos;now&apos;)&quot;)print(c.fetchone())# 计算当前月份的最后一天：c.execute(&quot;SELECT date(&apos;now&apos;,&apos;start of month&apos;,&apos;+1 month&apos;,&apos;-1 day&apos;);&quot;)print(c.fetchone())# 计算给定 UNIX 时间戳 1092941466 的日期和时间：c.execute(&quot;SELECT datetime(1092941466, &apos;unixepoch&apos;);&quot;)print(c.fetchone())# 计算给定 UNIX 时间戳 1092941466 相对本地时区的日期和时间：c.execute(&quot;SELECT datetime(1092941466, &apos;unixepoch&apos;, &apos;localtime&apos;);&quot;)print(c.fetchone())# 计算当前的 UNIX 时间戳：c.execute(&quot;SELECT datetime(1092941466, &apos;unixepoch&apos;, &apos;localtime&apos;);&quot;)print(c.fetchone())# 计算美国&quot;独立宣言&quot;签署以来的天数：c.execute(&quot;SELECT julianday(&apos;now&apos;) - julianday(&apos;1776-07-04&apos;);&quot;)print(c.fetchone())# 计算从 2004 年某一特定时刻以来的秒数：c.execute(&quot;SELECT strftime(&apos;%s&apos;,&apos;now&apos;) - strftime(&apos;%s&apos;,&apos;2004-01-01 02:34:56&apos;);&quot;)print(c.fetchone())# 计算当年 10 月的第一个星期二的日期：c.execute(&quot;SELECT date(&apos;now&apos;,&apos;start of year&apos;,&apos;+9 months&apos;,&apos;weekday 2&apos;);&quot;)print(c.fetchone())# 计算从 UNIX 纪元算起的以秒为单位的时间（类似 strftime(&apos;%s&apos;,&apos;now&apos;) ，不同的是这里有包括小数部分）：c.execute(&quot;SELECT (julianday(&apos;now&apos;) - 2440587.5)*86400.0;&quot;)print(c.fetchone())# 在 UTC 与本地时间值之间进行转换，当格式化日期时，使用 utc 或 localtime 修饰符，如下所示：c.execute(&quot;SELECT time(&apos;12:00&apos;, &apos;localtime&apos;);&quot;)print(c.fetchone())# c.execute(&quot;SELECT time(&apos;12:00&apos;, &apos;utc&apos;);&quot;)print(c.fetchone())con.close()# ====================================================================================# SQLite 常用函数# ====================================================================================print(&apos;=&apos;*30)print(&apos;SQLite 常用函数&apos;)print(&apos;=&apos;*30)con = sqlite3.connect(&quot;:memory:&quot;)c = con.cursor()# Create tablec.execute(&apos;&apos;&apos;CREATE TABLE COMPANY (ID integer, NAME text, AGE integer, ADDRESS text, SALARY real)&apos;&apos;&apos;)# Larger example that inserts many records at a timepurchases = [(1,&apos;Paul&apos;,32,&apos;California&apos;,20000.0), (2,&apos;Allen&apos;,25,&apos;Texas&apos;,15000.0), (3,&apos;Teddy&apos;,23,&apos;Norway&apos;,20000.0), (4,&apos;Mark&apos;,25,&apos;Rich-Mond&apos;,65000.0), (5,&apos;David&apos;,27,&apos;Texas&apos;,85000.0), (6,&apos;Kim&apos;,22,&apos;South-Hall&apos;,45000.0), (7,&apos;James&apos;,24,&apos;Houston&apos;,10000.0)]c.executemany(&apos;INSERT INTO COMPANY VALUES (?,?,?,?,?)&apos;, purchases)# Save (commit) the changescon.commit()# 返回数据库表最后 n 行记录# 先计算一个数据库表中的行数c.execute(&quot;SELECT count(*) FROM COMPANY;&quot;)last = c.fetchone()[0]n = 5c.execute(&quot;SELECT * FROM COMPANY LIMIT ? OFFSET ?;&quot;, (n, last-n))for row in c: print(row)# 计算一个数据库表中的行数c.execute(&quot;SELECT count(*) FROM COMPANY;&quot;)print(c.fetchone())# 选择某列的最大值c.execute(&quot;SELECT max(salary) FROM COMPANY;&quot;)print(c.fetchone())# 选择某列的最小值c.execute(&quot;SELECT min(salary) FROM COMPANY;&quot;)print(c.fetchone())# 计算某列的平均值c.execute(&quot;SELECT avg(salary) FROM COMPANY;&quot;)print(c.fetchone())# 为一个数值列计算总和c.execute(&quot;SELECT sum(salary) FROM COMPANY;&quot;)print(c.fetchone())# 返回一个介于 -9223372036854775808 和 +9223372036854775807 之间的伪随机整数c.execute(&quot;SELECT random() AS Random;&quot;)print(c.fetchone())# 返回数值参数的绝对值c.execute(&quot;SELECT abs(5), abs(-15), abs(NULL), abs(0), abs(&apos;ABC&apos;);&quot;)print(c.fetchone())# 把字符串转换为大写字母c.execute(&quot;SELECT upper(name) FROM COMPANY;&quot;)print(c.fetchone())# 把字符串转换为小写字母c.execute(&quot;SELECT lower(name) FROM COMPANY;&quot;)print(c.fetchone())# 返回字符串的长度c.execute(&quot;SELECT name, length(name) FROM COMPANY;&quot;)print(c.fetchone())# 返回 SQLite 库的版本c.execute(&quot;SELECT sqlite_version() AS &apos;SQLite Version&apos;;&quot;)print(c.fetchone())# c.execute(&quot;SELECT CURRENT_TIMESTAMP;&quot;)print(c.fetchone())]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>sqlite3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[selenium元素操作封装]]></title>
    <url>%2F2019%2F05%2F28%2Fselenium%E5%85%83%E7%B4%A0%E6%93%8D%E4%BD%9C%E5%B0%81%E8%A3%85%2F</url>
    <content type="text"><![CDATA[selenium 常用的元素定位操作Selenium提供了8种定位方式。 id name class name tag name link text partial link text xpath css selector 这8种定位方式在Python selenium中所对应的方法为： find_element_by_id() find_element_by_name() find_element_by_class_name() find_element_by_tag_name() find_element_by_link_text() find_element_by_partial_link_text() find_element_by_xpath() find_element_by_css_selector() 常用元素定位封装12345678910111213141516171819202122232425262728293031323334def _locate_element(self, selector): """ to locate element by selector :arg selector should be passed by an example with "i,xxx" "x,//*[@id='langs']/button" :returns DOM element """ if self.by_char not in selector: return self.base_driver.find_element_by_id(selector) selector_by = selector.split(self.by_char)[0].strip() selector_value = selector.split(self.by_char)[1].strip() if selector_by == "i" or selector_by == 'id': element = self.base_driver.find_element_by_id(selector_value) elif selector_by == "n" or selector_by == 'name': element = self.base_driver.find_element_by_name(selector_value) elif selector_by == "c" or selector_by == 'class_name': element = self.base_driver.find_element_by_class_name(selector_value) elif selector_by == "l" or selector_by == 'link_text': element = self.base_driver.find_element_by_link_text(selector_value) elif selector_by == "p" or selector_by == 'partial_link_text': element = self.base_driver.find_element_by_partial_link_text(selector_value) elif selector_by == "t" or selector_by == 'tag_name': element = self.base_driver.find_element_by_tag_name(selector_value) elif selector_by == "x" or selector_by == 'xpath': element = self.base_driver.find_element_by_xpath(selector_value) elif selector_by == "s" or selector_by == 'css_selector': element = self.base_driver.find_element_by_css_selector(selector_value) else: raise NameError("Please enter a valid type of targeting elements.") return element]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>selenium</tag>
        <tag>web test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用selenium访问爱奇艺网站]]></title>
    <url>%2F2019%2F05%2F28%2Fusing-selenium-visit-iqiyi-website%2F</url>
    <content type="text"><![CDATA[使用selenium访问爱奇艺网站 selenium 是一种常用的自动化测试工具。它支持各种浏览器，包括 Chrome，Safari，Firefox 等主流界面式浏览器，如果你在这些浏览器里面安装一个 Selenium 的插件，还可以通过录制，快速生成脚本。 selenium 支持多种主流的开发语言，比如Ruby，java，python，javascript。 环境搭建python3.7.3 运行 pip install selenium 就可以直接下载最新的selenium版本 准备浏览器:chrome 70.0.3538.77 操作系统：win7 selenium版本: 3.14.1 chromedriver: https://npm.taobao.org/mirrors/chromedriver/70.0.3538.97/ 使用selenium 打开和关闭浏览器1234from selenium import webdriverdriver = webdriver.Chrome()driver.get("http://www.iqiyi.com/")driver.quit() 定位搜索框12search_xpath=r"//*[@id='nav_searchboxIn']/input"driver.find_element_by_xpath(search_xpath).send_keys("复仇者联盟") 点击搜索图片12search_button=r"//*[@id='nav_searchboxOut']/span"driver.find_element_by_xpath(search_button).click() 切换tab页123456789101112131415#导入键盘操作--20190528更新from selenium.webdriver.common.keys import Keys#此处通过键盘操作切换tab页driver.find_element_by_tag_name("body").send_keys(Keys.CONTROL + "t")#all_handles 保存所有已经打开的tab窗体all_handles = driver.window_handlesprint(driver.window_handles)index_handle=driver.current_window_handleprint(index_handle)#用switch_to方法切换到tab窗体for handle in all_handles: if handle!=index_handle: print('now is search window') search_handle = handledriver.switch_to.window(search_handle) 打印页面的title，并截图12print(driver.title)driver.get_screenshot_as_file("aqiyi.png") 总结本文主要介绍了自动化工具selenium的基本使用，如何对页面元素进行基本操作，实现自动抓取关键字图片功能。]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>selenium</tag>
        <tag>web test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F05%2F28%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[copy maven dependencies to a folder]]></title>
    <url>%2F2016%2F09%2F30%2Fcopy-maven-dependencies-to-a-folder%2F</url>
    <content type="text"><![CDATA[copy maven dependencies to a folderbackground一个简单的需求,当你的同事需要调试代码的时候,他并不想建立maven环境,这时候依赖的jar包 该如何导出呢? no code say nothing这时候你需要的是maven-dependency-plugin。 添加依赖配置123456789101112131415161718192021222324252627282930313233&lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.eclipse.m2e&lt;/groupId&gt; &lt;artifactId&gt;lifecycle-mapping&lt;/artifactId&gt; &lt;version&gt;1.0.0&lt;/version&gt; &lt;configuration&gt; &lt;lifecycleMappingMetadata&gt; &lt;pluginExecutions&gt; &lt;!-- copy-dependency plugin --&gt; &lt;pluginExecution&gt; &lt;pluginExecutionFilter&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt; &lt;versionRange&gt;[1.0.0,)&lt;/versionRange&gt; &lt;goals&gt; &lt;goal&gt;copy-dependencies&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;outputDirectory&gt;$&#123;project.build.directory&#125;/alternateLocation&lt;/outputDirectory&gt; &lt;overWriteReleases&gt;false&lt;/overWriteReleases&gt; &lt;overWriteSnapshots&gt;false&lt;/overWriteSnapshots&gt; &lt;overWriteIfNewer&gt;true&lt;/overWriteIfNewer&gt; &lt;/configuration&gt; &lt;/pluginExecutionFilter&gt; &lt;action&gt; &lt;ignore /&gt; &lt;/action&gt; &lt;/pluginExecution&gt; &lt;/pluginExecutions&gt; &lt;/lifecycleMappingMetadata&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; 此处的&lt;outputDirectory&gt; 指定了你导出jar包的路径. 执行命令 mvn dependency:copy-dependencies查看项目多了一个/alternateLocation目录,并且依赖的jar包都下载到这个目录下了。]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[how to use nginx on windows]]></title>
    <url>%2F2016%2F09%2F27%2Fhow-to-use-nginx-on-windows%2F</url>
    <content type="text"><![CDATA[how to use nginx on windows1. Download nginx lastest release from here.2. unzip to your local driver. eg: c:/apps/nginx3. start nginx12cd c:/apps/nginxstart nginx 4. monitoring nginx process12345tasklist /fi &quot;imagename eq nginx.exe&quot;Image Name PID Session Name Session# Mem Usage========================= ======== ================ =========== ============nginx.exe 11700 Console 1 10,696 Knginx.exe 1160 Console 1 11,180 K notice一个是主进程(main process),另一个是工作进程(work process).如果启动失败,请查看错误日志logs\error.log 5. visit http://localhost:80806. configuration file nginx.confreference config123456789101112131415161718error_log logs/error.log;http &#123; include mime.types; default_type application/octet-stream; server &#123; listen 8080; server_name localhost; location / &#123; root html; index index.html index.htm; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125; ...&#125; 7. the command list of nginx：1234nginx -s stop 快速退出nginx -s quit 优雅退出nginx -s reload 更换配置，启动新的工作进程，优雅的关闭以往的工作进程nginx -s reopen 重新打开日志文件]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[how git changing author info]]></title>
    <url>%2F2016%2F09%2F22%2Fhow-git-changing-author-info%2F</url>
    <content type="text"><![CDATA[how git changing author info背景 gitlab中的统计视图是根据用户的信息统计工作量 迁移git repo中经常会遇到用户和邮箱不一致的情况 解决思路那么如何修改已经推送到远程的author信息呢? github 官方提供的建议如何变更用户信息 同时也有类似的项托管在github上，git-tips-blame-someone-else 思路基本一致,就是替换提交记录、分支、标签里的author信息。 方案1.打开终端或命令行(git bash)2.创建一个你项目的全新裸库12git clone --bare https://github.com/user/repo.gitcd repo.git 3.复制粘贴脚本,并根据你的信息修改下面的变量:123OLD_EMAILCORRECT_NAMECORRECT_EMAIL 脚本replace.sh12345678910111213141516171819#!/bin/shgit filter-branch --env-filter &apos;OLD_EMAIL=&quot;your-old-email@example.com&quot;CORRECT_NAME=&quot;Your Correct Name&quot;CORRECT_EMAIL=&quot;your-correct-email@example.com&quot;if [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]then export GIT_COMMITTER_NAME=&quot;$CORRECT_NAME&quot; export GIT_COMMITTER_EMAIL=&quot;$CORRECT_EMAIL&quot;fiif [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]then export GIT_AUTHOR_NAME=&quot;$CORRECT_NAME&quot; export GIT_AUTHOR_EMAIL=&quot;$CORRECT_EMAIL&quot;fi&apos; --tag-name-filter cat -- --branches --tags 4.执行这个脚本sh replace.sh 5.察看Git历史有没有错误git log 6.强制推送到远程git push --force --tags origin &#39;refs/heads/*&#39; 7.清除repo.git仓库12cd ..rm -rf repo.git]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[how to understand git detached HEAD]]></title>
    <url>%2F2016%2F08%2F08%2Fhow-to-understand-git-detached-HEAD%2F</url>
    <content type="text"><![CDATA[场景远程有一个develop分支，我想获取到本地,但是clone该项目的时候这个远程分支还没有创建,于是执行 git checkout commit_id(develop) 提示如下 1234567891011121314$ git checkout f7c774bChecking out files: 100% (357/357), done.Note: checking out &apos;f7c774b&apos;.You are in &apos;detached HEAD&apos; state. You can look around, make experimentalchanges and commit them, and you can discard any commits you make in thisstate without impacting any branches by performing another checkout.If you want to create a new branch to retain commits you create, you maydo so (now or later) by using -b with the checkout command again. Example: git checkout -b new_branch_nameHEAD is now at f7c774b... update jeffsui.github.io 出现 detached from ...此时用git branch -av察看分支1234567$ git branch -av* (detached from f7c774b) f7c774b update jeffsui.github.io master 6ce1857 Site updated: 2016-08-07 22:09:10 remotes/origin/HEAD -&gt; origin/master remotes/origin/develop f7c774b update jeffsui.github.io remotes/origin/gh-pages 1eee93f Site updated: 2016-02-13 21:03:46 remotes/origin/master 6ce1857 Site updated: 2016-08-07 22:09:10 所谓的 detached HEAD 其实就是HEAD指向的是一个commit而不指向任何一个branch的临时分支,翻译过来就是游离. 众所周知,每一个分支都对应了一个commit,git checkout其实就是修改HEAD文件内容,让它指向不同的分支. 如何让detached HEAD所处分支指向远程分支此时的分支你可以执行commit操作,但是无法push到远程分支。那么我们如何把游离状态的分支指向我们指定的远程分支呢。123$ git fetch origin develop:developFrom https://github.com/jeffsui/jeffsui.github.io * [new branch] develop -&gt; develop 继续执行git branch -av 命令查看分支 12345678$ git branch -av* (detached from f7c774b) f7c774b update jeffsui.github.io develop f7c774b update jeffsui.github.io master 6ce1857 Site updated: 2016-08-07 22:09:10 remotes/origin/HEAD -&gt; origin/master remotes/origin/develop f7c774b update jeffsui.github.io remotes/origin/gh-pages 1eee93f Site updated: 2016-02-13 21:03:46 remotes/origin/master 6ce1857 Site updated: 2016-08-07 22:09:10 此时我们发现多了一个develop分支指向了远程develop 分支，这样我们就可以通过命令git push origin develop:develop到远程分支了。 更简洁的方法git fetch origin develop:develop or git checkount -b origin develop:develop 这样可以直接获取远程分支并创建一个本地分支。]]></content>
      <tags>
        <tag>git</tag>
        <tag>版本管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[my-angle]]></title>
    <url>%2F2016%2F02%2F15%2Fmy-angle%2F</url>
    <content type="text"><![CDATA[]]></content>
      <tags>
        <tag>photo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows-mongodb-install]]></title>
    <url>%2F2016%2F02%2F13%2Fwindows-mongodb-install%2F</url>
    <content type="text"><![CDATA[#windows下mongodb安装 ##下载mongodb http://www.mongodb.org/downloads ##选择自定义安装 本机路径为:d:\tools\mongodb ##建立如下文件目录数据库路径:d:\tools\mongodb\db日志路径:d:\tools\mongodb\log配置文件目录d:\tools\mongodb\etc建立配置文件d:\tools\mongodb\etc\mongodb.conf 123456dbpath=d:\tools\mongodb\db #数据库路径logpath=d:\tools\mongodb\log\mongodb.log #日志输出文件路径logappend=true #错误日志采用追加模式，配置这个选项后mongodb的日志会追加到现有的日志文件，而不是从新创建一个新文件journal=true #启用日志文件，默认启用quiet=true #这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为falseport=27017 #端口号 默认为27017 ##启动服务 切换到d:\tools\mongodb\bin 目录下: 普通启动 mongod --config d:\tools\mongodb\etc\mongodb.conf 注册为windows服务 mongod --config d:\tools\mongodb\etc\mongodb.conf --install 补充 windows服务卸载 mongod --remove --serviceName &quot;MongoDB&quot; 启动服务net start mongodb 启动成功后,通过浏览器访问 http://localhost:27017 ,看到下面的文字,证明启动服务成功！ It looks like you are trying to access MongoDB over HTTP on the native driver port. 关闭服务net stop mongodb #图形化工具 官方提供的很全:https://docs.mongodb.org/ecosystem/tools/administration-interfaces/ mongo express –Nodejs MongoBooster UMongo MongoHub MongoVUE –.NET]]></content>
      <categories>
        <category>db</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[maven3-jdk1.7-problem-fixed]]></title>
    <url>%2F2016%2F02%2F13%2Fmaven3-jdk1-7-problem-fixed%2F</url>
    <content type="text"><![CDATA[#maven3下jdk1.7编译错误解决 #环境12345678Apache Maven 3.3.3 (7994120775791599e205a5524ec3e0dfe41d4a06; 2015-04-22T19:57:37+08:00)Maven home: d:\tools\apache-maven-3.3.3Java version: 1.7.0_45, vendor: Oracle CorporationJava home: c:\Program Files\Java\jdk1.7.0_45\jreDefault locale: zh_CN, platform encoding: GBKOS name: &quot;windows 7&quot;, version: &quot;6.1&quot;, arch: &quot;amd64&quot;, family: &quot;windows&quot; #使用maven命令行创建java项目1mvn archetype:generate -DgroupId=org.linfeng -DartifactId=mavendemo -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false 创建成功 12$ cd mavendemo &amp;&amp; lspom.xml src pom.xml 123456789101112131415161718&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;org.linfeng&lt;/groupId&gt; &lt;artifactId&gt;mavendemo&lt;/artifactId&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;name&gt;mavendemo&lt;/name&gt; &lt;url&gt;http://maven.apache.org&lt;/url&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;3.8.1&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 执行maven命令 mvn test 错误信息 12[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.1:compile (default-compile) on project mavendemo: Compilation failure[ERROR] No compiler is provided in this environment. Perhaps you are running on a JRE rather than a JDK? #解决方案 修改settings.xml,添加jdk1.7相关内容 123456789101112&lt;profile&gt; &lt;id&gt;jdk-1.7&lt;/id&gt; &lt;activation&gt; &lt;activeByDefault&gt;true&lt;/activeByDefault&gt; &lt;jdk&gt;1.7&lt;/jdk&gt; &lt;/activation&gt; &lt;properties&gt; &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt; &lt;maven.compiler.compilerVersion&gt;1.7&lt;/maven.compiler.compilerVersion&gt; &lt;/properties&gt;&lt;/profile&gt; 缺点:修改所有项目的jre环境 修改当前项目的pom.xml 12345678910111213&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.1&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;1.7&lt;/source&gt; &lt;target&gt;1.7&lt;/target&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 重新执行mvn build 成功！ #问题分析Maven官方文档有如下描述： 编译器插件用来编译项目的源文件.从3.0版本开始, 用来编译Java源文件的默认编译器是javax.tools.JavaCompiler (如果你是用的是java 1.6) . 如果你想强制性的让插件使用javac,你必须配置插件选项 forceJavacCompilerUse.同时需要注意的是目前source选项和target 选项的默认设置都是1.5, 与运行Maven时的JDK版本无关.如果你想要改变这些默认设置, 可以参考 Setting the -source and -target of the Java Compiler中的描述来设置 source 和target 选项. #参考资料 http://stackoverflow.com/questions/15220392/maven-package-compilation-error http://www.cnblogs.com/leo100w/p/4017647.html]]></content>
      <categories>
        <category>ci</category>
      </categories>
      <tags>
        <tag>maven</tag>
        <tag>jdk</tag>
        <tag>持续集成</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[how make cygwin multi-color]]></title>
    <url>%2F2015%2F08%2F12%2Fhow-make-cygwin-multi-color%2F</url>
    <content type="text"><![CDATA[打开.bashrc 123456789101112131415161718# Default to human readable figures# alias df=&apos;df -h&apos;# alias du=&apos;du -h&apos;## Misc # alias less=&apos;less -r&apos; # raw control characters# alias whence=&apos;type -a&apos; # where, of a sort# alias grep=&apos;grep --color&apos; # show differences in colour# alias egrep=&apos;egrep --color=auto&apos; # show differences in colour# alias fgrep=&apos;fgrep --color=auto&apos; # show differences in colour## Some shortcuts for different directory listings# alias ls=&apos;ls -hF --color=tty&apos; # classify files in colour# alias dir=&apos;ls --color=auto --format=vertical&apos;# alias vdir=&apos;ls --color=auto --format=long&apos;# alias ll=&apos;ls -l&apos; # long list# alias la=&apos;ls -A&apos; # all but . and ..# alias l=&apos;ls -CF&apos; # 而我们要做的只是去掉#，启动即可： 123456789101112131415161718# Default to human readable figuresalias df=&apos;df -h&apos;alias du=&apos;du -h&apos;## Misc alias less=&apos;less -r&apos; # raw control charactersalias whence=&apos;type -a&apos; # where, of a sortalias grep=&apos;grep --color&apos; # show differences in colouralias egrep=&apos;egrep --color=auto&apos; # show differences in colouralias fgrep=&apos;fgrep --color=auto&apos; # show differences in colour## Some shortcuts for different directory listingsalias ls=&apos;ls -hF --color=tty&apos; # classify files in colouralias dir=&apos;ls --color=auto --format=vertical&apos;alias vdir=&apos;ls --color=auto --format=long&apos;alias ll=&apos;ls -l&apos; # long listalias la=&apos;ls -A&apos; # all but . and ..alias l=&apos;ls -CF&apos; # 然后保存一下，再重启cygwin（或者直接用：source ~/.bashrc]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>cygwin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[how to build a private docker registry]]></title>
    <url>%2F2015%2F07%2F21%2Fhow-to-build-a-private-docker-registry%2F</url>
    <content type="text"><![CDATA[如何搭建docker私服##环境准备 软件包： centos6.5_x86_64 docker-engine-1.7.0-1.el6.x86_64.rpm docker环境搭建,请参照官方说明，本文采用的是官方的rpm包 ##何谓私服 官方的image镜像站位dockerhub,因为伟大的墙的缘故,所以下载镜像是很痛苦的一件事。当然你可以采用其他科学上网或者镜像加速的方法来获取image。docker官方也提供了一个私服镜像,大家可以通过docker search registry来查找该镜像。 12345NAME DESCRIPTION STARS OFFICIAL AUTOMATEDregistry Containerized docker registry 320 [OK] atcol/docker-registry-ui A web UI for easy private/local Docker Reg... 55 [OK]konradkleine/docker-registry-frontend Browse and modify your Docker registry in ... 40 [OK]samalba/docker-registry 35 ##下载官方registry镜像 下载镜像 使用命令docker pull registry执行下载镜像。 查看镜像 下载完毕后,通过docker images 查看该镜像。 给镜像打标签 执行这个命令docker tag registry:latest localhost:5000/registry:latest ##启动镜像 docker run -d -e SETTINGS_FLAVOR=dev -e STORAGE_PATH=/tmp/registry -v /opt/data/registry:/tmp/registry -p 5000:5000 registry 这里有几个参数说明下: 1.-e STORAGE_PATH=/tmp/registry :强制使用存储路径 2.-v /opt/data/registry:/tmp/registry :绑定本地镜像存储路径 3.-p 5000:5000:映射容器5000端口到本地5000端口 ##查看镜像状态 docker ps ##查看私服状态 curl http://localhost:5000 显示如下信息,证明registry启动成功: &quot;\&quot;docker-registry server\&quot;&quot; ##推送本地镜像库到registry私服 ###1. 第一步 给本地镜像 打tag例如给官方的nginx镜像打tag,执行下面的命令行docker pull nginxdocker tag nginx:latest localhost:5000/nginx:latest查看镜像库,发现localhost:5000/nginx的镜像已经有了。 ###2. 第二步 推送tag到registry私服 docker push localhost:5000/nginx:latest ###3. 第三步 查看私服镜像列表 curl http://localhost：5000/V1/search 看到类似这样的信息 12&#123;&quot;num_results&quot;: 5, &quot;query&quot;: &quot;&quot;, &quot;results&quot;: [&#123;&quot;description&quot;: null, &quot;name&quot;: &quot;correl/erlang&quot;&#125;, &#123;&quot;description&quot;: null, &quot;name&quot;: &quot;linfeng/cmd&quot;&#125;, &#123;&quot;description&quot;: null, &quot;name&quot;: &quot;library/my_nodejs_image&quot;&#125;, &#123;&quot;description&quot;: null, &quot;name&quot;: &quot;library/centos&quot;&#125;, &#123;&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;library/nginx&quot;&#125;]&#125; ##拉取私服镜像 docker pull 192.168.20.85:5000/library/centos:7 ##结论 这只是演示如何搭建一个简单的registry私服。因为只有通过命令行方式才能查看私服信息,所以不是很便于操作。下面的博文将演示如何给registry添加web界面。]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>registry</tag>
        <tag>registry-ui</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[how git version rollback]]></title>
    <url>%2F2015%2F05%2F16%2Fhow-git-version-rollback%2F</url>
    <content type="text"><![CDATA[如何进行远程版本回退…… #引言 一切都要从一个蛋疼的需求开始,老板说,能给远程仓库的版本回退吗？我说为毛？他说我就是试试看git好使不,我…… #咋搞 背景 gitcafe 国内知名的源码托管平台 分析 12345678910111213141、git checkout the_branch2、git pull3、git branch the_branch_backup //备份一下这个分支当前的情况4、git reset --hard the_commit_id //把the_branch本地回滚到the_commit_id5、git push origin :the_branch //删除远程 the_branch6、git push origin the_branch //用回滚后的本地分支重新建立远程分支7、git push origin :the_branch_backup //如果前面都成功了，删除这个备份分支 删除远程分支 首先,任何一个git源码托管平台都会告诉你,别删除远程master分支,因为它是默认的分支……,请移步这里 操作步骤 如果远程只有一个master分支,请你创建一个非master分支,然后推送到远程。有人会问我为什么？打个比方,你见过上旱厕的时候,给自己脚下站着的板子抽走吗？ 脚本类似下面这样 1234git branch the_master_backupgit push origin the_master_backup 此时你查看远程分支应该有两个:master和the_master_backup 设置默认的分支为 the_master_backup 1234git branch -D branch_name //删除本地master分支git push :master //推送一个空分支,相当于删除远程master分支 然后你在the_master_backup分支上 回滚到你要回滚的commit_id,然后重建master分支并推送到远程,顺便删除the_master_backup分支(包括远程the_master_backup分支)。 123456789101112git checkout the_master_backupgit reset --hard commit_idgit branch master //重新创建master分支git push origin master //重新推送master分支git branch -D the_master_backup //删除本地the_master_backup分支git push origin :the_master_backup//删除远程the_master_backup分支 #遇到的问题 忘记设置默认分支为非master分支 1234567891011121314remote: error: By default, deleting the current branch is denied, because the nextremote: error: &apos;git clone&apos; won&apos;t result in any file checked out, causing confusion.remote: error:remote: error: You can set &apos;receive.denyDeleteCurrent&apos; configuration variable toremote: error: &apos;warn&apos; or &apos;ignore&apos; in the remote repository to allow deleting theremote: error: current branch, with or without a warning message.remote: error:remote: error: To squelch this message, you can set it to &apos;refuse&apos;.... #总结 如果你遇到的是所有提交只有master分支,那么希望我这个博文能帮到你。当然git强大的分支功能你基本也用不到了。]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>gitcafe</tag>
        <tag>版本管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript oop 15 min programming]]></title>
    <url>%2F2015%2F04%2F23%2Fjavascript-oop-15-min-programming%2F</url>
    <content type="text"><![CDATA[#javascript的面向对象15分钟教程 第一种面向对象的写法##创建空对象 12var bill =&#123;&#125;;//创建一个空对象 ##给对象添加属性和方法 12345bill.name = &quot;Bill Goat&quot;;bill.work = function ()&#123; console.log(&quot;programming....&quot;);&#125;; ##一步完成上面的两件事 1234567var bill =&#123; name : &quot;Bill Goat&quot;; work : function()&#123; console.log(&quot;programming....&quot;);&#125;&#125;; ##访问对象和属性 123console.log(bill.name);bill.work(); ##方法重写 12345bill.name = &quot;Bill Goat&quot;;bill.work =function(who)&#123; console.log(&quot;programming for &quot;+who);&#125;; ##通过this关键字访问内部属性 1234bill.say = function ()&#123; console.log(&quot;bill&apos;s name is&quot;+this.name);&#125;; ##对象引用123456var silly = bill;console.log(silly.name);sally.name = &quot;Silly&quot;;console.log(silly.name);console.log(bill.name); ##另一个方式引用1234567bill.name = &quot;Bill Goat&quot;;bill.say();var sayName = bill.say();sayName;sayName(); ##有意思的地方 ：全局属性123var name = &quot;Global&quot;;bill.say(); 发现此时输出的是bill&#39;s name is Global 另一种面向对象的写法##定义对象及属性 12function Game()&#123;&#125;; ##创建对象 1var DF = new Game(); ##对象属性 1DF.title = &quot;星际争霸2&quot;; ##构造方法 12345678function Game (title)&#123; this.title = typeof title !== &apos;undifined&apos; ? title :&quot;&quot;;&#125;;var d3 = new Game(&quot;d3&quot;);d3.title;d3.title =&quot;starcraft2&quot;; this.title = typeof title !== &#39;undifined&#39; ? title :&quot;&quot;;相当于 123456if(typeof title !== &quot;undifined&quot;）&#123; this.title = title;&#125;else&#123; this.title = &quot;&quot;;&#125; ##创建一个方法来访问这个属性1234d3.loveTitle = function ()&#123; console.log(&quot;I love &quot;+this.title);&#125; ##更好的写法 12345Game.prototype.heartIt = function ()&#123; console.log(&quot;I love &quot;+this.title);&#125;d3.heartIt(); 下次详解javascript的原生对象模型 to be continued~~~~]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>oop</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[talk about software engineering]]></title>
    <url>%2F2015%2F04%2F22%2Ftalk-about-software-engineering%2F</url>
    <content type="text"><![CDATA[#关于软件工程的讨论–质量篇 那为什么软件系统的质量不容易高呢？我觉得主要原因是流程不完善。那为什么不完善？需求容易变。为什么容易变？是因为不论程序员自己，还是需求方，其实潜意识都认为自己做的东西是变更成本较低的。 试想一下，为什么没人在盖高楼盖一半变更需求？为什么没人修大桥修一半变更需求？甚至做衣服做一半的时候变更需求，理发到一半变更需求，都会被人认为是不讲理。但是在软件领域，好像这倒成了普遍现象。 因为整个软件系统的实现，都是虚拟的，看不见摸不着，并不消耗什么物料，所以从这个角度想，变起来当然是容易的。但软件系统的架构，其实也跟实体的没本质区别，变更时候要考虑很多关联因素，并不是就那么孤立的看一小块地方，当然，也会有一些不影响全局的变更。打个比方说，如果你在盖房子盖到一半，那变更外墙颜色肯定是要比变更窗户大小容易的。要是想变得太多，估计只好拆了重来。 下面的讨论更加精彩: A:其实不是流程问题，老板和甲方问题 A:甲方尤其关键 A:尼玛，要8层楼房，付2层费用 ……]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript asynchronous programming learning :event]]></title>
    <url>%2F2015%2F04%2F20%2Fjavascript-asynchronous-programming-learning-event%2F</url>
    <content type="text"><![CDATA[#javascript异步编程读书笔记之事件机制 ##事件的调度 异步执行 setTimeout函数的解释:给定一个回调及n毫秒的延迟,setTimeout会在n毫秒后运行该回调。 代码清单1:12345for (var i = 1; i &lt;= 3; i++) &#123; setTimeout(function()&#123; console.log(i); &#125;, 0);&#125;; 输出结果: 123444 线程阻塞代码清单2: 123456var start = new Date;setTimeout(function()&#123;var end = new Date;console.log(&apos;Time elapsed:&apos;, end - start, &apos;ms&apos;);&#125;, 500);while (new Date - start &lt; 1000) &#123;&#125;; 队列 javascript使用队列的方式来循环处理请求,这种机制被称为事件循环。]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>异步</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[use-shorturl and two-dimensional-barcodes to beautify blog]]></title>
    <url>%2F2015%2F04%2F20%2Fuse-shorturl-and-two-dimensional-barcodes-to-beautify-blog%2F</url>
    <content type="text"><![CDATA[#如何使用短网址和二维码简化网站访问 短网址(shorturl) web2.0时代的潮流,借助短网址您可以用简短的网址替代原来冗长的网址，让使用者可以更容易的分享链接。这里我使用的是百度的短网址服务:http://dwz.cn/ 访问http://dwz.cn/主页 输入你的博客地址我输入http://jeffsui.github.io/pinghailinfeng_blog/ 复制短网址 二维码(two-dimensional-barcodes)微信时代,不知道二维码的基本都属于外星球人了。这里我选择的是草料二维码:http://cli.im/ 输入二维码地址 进行一些基本设置包括前景色、背景色、渐变色等等。 嵌入图片 选用你喜欢的模板 保存二维码 在线存储这里我选择国内知名的七牛云存储。 4.在博客中引用图片地址就可以了]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>美化</tag>
        <tag>短网址</tag>
        <tag>二维码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的新文章]]></title>
    <url>%2F2015%2F04%2F17%2Fmy-new-post%2F</url>
    <content type="text"><![CDATA[#我的新文章 这是我的第一篇在github上的博客。记录下我的工作和生活,慢慢给其他的文章都更新到这里。嬉笑怒骂也好,喜怒哀乐也罢,我就是一个俗人罢了。]]></content>
      <tags>
        <tag>博客</tag>
        <tag>文章</tag>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[push-hexo-to-github]]></title>
    <url>%2F2015%2F04%2F17%2Fpush-hexo-to-github%2F</url>
    <content type="text"><![CDATA[#如何使用hexo在github上建立静态博客 ##环境搭建 hexo环境搭建 请参考 hexo.io 官方站点, 强烈建议给基本操作下的内容快速浏览一遍,下面的操作是我一个一个命令敲出来的,遇到的坑也会记录下来,希望大家能少走弯路。 github上建立静态博客 github账号申请（略） 建立一个github项目 git clone 项目地址 到本地 项目初始化cd 项目名echo # hexo 实例站点 &gt;&gt; README.mdgit initgit add README.mdgit commit -m “first blood”git remote add origin 项目地址git push -u origin master github免费站点建立规则,请仔细阅读这个规则https://help.github.com/articles/user-organization-and-project-pages/ 默认github域名 默认github 分配了 一个name.github.io的域名,还有一个name.github.io/project_name的二级域名,请参照github的提示设置URL。 华丽的分割线 站点配置流程 建立站点文件夹,并站点初始化 安装hexo依赖 修改node_module/hexo-server/index.js,用于本地调试 安装hexo-git-deployer插件 修改全局配置文件_config.yml,配置deploy# Site 站点配置title: 凭海临风的测试江湖subtitle:description: 凭海临风的博客author: Jeff Suilanguage: zh-CNtimezone # URL 站点链接## If your site is put in a subdirectory, set url as ‘http://yoursite.com/child&#39; and root as ‘/child/‘url: http://jeffsui.github.ioroot: /pinghailinfeng_blog/permalink: :year/:month/:day/:title/permalink_defaults: # Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy:type: gitrepo: https://github.com/jeffsui/pinghailinfeng_blog.gitbranch : mastermessage : 以上配置仅供参考 创建文章 执行hexo new 命令 例如:hexo new post my-first-blog 将会自动在source/_posts下创建一个my-first-blog.md的文件,使用的是scaffolds下的post.md模板 修改并保存my-first-blog.md文件 站点生成hexo g 站点部署 hexo d 如果没有报错,恭喜你已经成功推送到 项目的master分支。 创建gh-pages分支并推送到远程 git fetch origin master git checkout gh-pages git merge master git push origin gh-pages 访问http://jeffsui.github.io/pinghailinfeng_blog/ ##遇到的问题 github站点的规则不熟悉,url配置浪费我2个小时。项目建立的是二级域名,所以必须要按照我说的那样配置。 本地预览有可能不加载样式,重新删除node_module下所有,执行npm install,再hexo g,hexo server -i 127.0.0.1 -s -o即可。 hexo3.0版本的git插件必须要独立安装。 其他坑,自己填吧。 ##总结 大坑各种有,github特别多,还有伟大的墙,兄弟们,github好上,填坑需谨慎！]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>搭建</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sublime run slow problem]]></title>
    <url>%2F2015%2F04%2F17%2Fsublime-run-slow-problem%2F</url>
    <content type="text"><![CDATA[#解决sublime Text2运行缓慢的方法 今天打开sublime想写博客发现整个页面打开很慢,切换tab要等好几秒。发现了一个帖子,说GitGutter这个插件在st2下会影响切换tab速度。 于是 ctrl+shift+p调出命令,remove package,选择GitGutter,回车。重启sublime,世界都变得清静了。]]></content>
      <categories>
        <category>工具篇</category>
      </categories>
      <tags>
        <tag>sublime</tag>
        <tag>GitGutter</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[first-blog]]></title>
    <url>%2F2015%2F04%2F17%2Ffirst-blog%2F</url>
    <content type="text"><![CDATA[#第一个博客 ##记录使用hexo的各种填坑。]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>杂记</tag>
      </tags>
  </entry>
</search>
