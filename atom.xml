<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>凭海临风的IT江湖</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pinghailinfeng.gitee.io/"/>
  <updated>2020-02-10T03:35:04.872Z</updated>
  <id>https://pinghailinfeng.gitee.io/</id>
  
  <author>
    <name>Jeff Sui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python standard library fractions</title>
    <link href="https://pinghailinfeng.gitee.io/2020/02/09/python-standard-library-fractions/"/>
    <id>https://pinghailinfeng.gitee.io/2020/02/09/python-standard-library-fractions/</id>
    <published>2020-02-09T14:56:42.000Z</published>
    <updated>2020-02-10T03:35:04.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库-fractions-分数"><a href="#python-标准库-fractions-分数" class="headerlink" title="python 标准库 fractions 分数"></a>python 标准库 fractions 分数</h1><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200210_hope.jpg?raw=true" alt></p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><strong>源代码</strong> <a href="https://github.com/python/cpython/tree/3.8/Lib/fractions.py" target="_blank" rel="noopener">Lib/fractions.py</a></p><h2 id="模块概述"><a href="#模块概述" class="headerlink" title="模块概述"></a>模块概述</h2><p><a href="https://docs.python.org/zh-cn/3.8/library/fractions.html#module-fractions" target="_blank" rel="noopener"><code>fractions</code></a> 模块支持分数运算。</p><p>分数实例可以由一对整数，一个分数，或者一个字符串构建而成。</p><ul><li><p><em>class</em> <code>fractions.Fraction</code>(<em>numerator=0</em>, <em>denominator=1</em>)</p></li><li><p><em>class</em> <code>fractions.Fraction</code>(<em>other_fraction</em>)</p></li><li><p><em>class</em> <code>fractions.Fraction</code>(<em>float</em>)</p></li><li><p><em>class</em> <code>fractions.Fraction</code>(<em>decimal</em>)</p></li><li><p><em>class</em> <code>fractions.Fraction</code>(<em>string</em>)</p><p>第一个版本要求 <em>numerator</em> 和 <em>denominator</em> 是 <a href="https://docs.python.org/zh-cn/3.8/library/numbers.html#numbers.Rational" target="_blank" rel="noopener"><code>numbers.Rational</code></a> 的实例，并返回一个新的 <a href="https://docs.python.org/zh-cn/3.8/library/fractions.html#fractions.Fraction" target="_blank" rel="noopener"><code>Fraction</code></a> 实例，其值为 <code>numerator/denominator</code>。 如果 <em>denominator</em> 为 <code>0</code> 将会引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#ZeroDivisionError" target="_blank" rel="noopener"><code>ZeroDivisionError</code></a>。 第二个版本要求 <em>other_fraction</em> 是 <a href="https://docs.python.org/zh-cn/3.8/library/numbers.html#numbers.Rational" target="_blank" rel="noopener"><code>numbers.Rational</code></a> 的实例，并返回一个 <a href="https://docs.python.org/zh-cn/3.8/library/fractions.html#fractions.Fraction" target="_blank" rel="noopener"><code>Fraction</code></a> 实例且与传入值相等。 下两个版本接受 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#float" target="_blank" rel="noopener"><code>float</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/decimal.html#decimal.Decimal" target="_blank" rel="noopener"><code>decimal.Decimal</code></a> 的实例，并返回一个 <a href="https://docs.python.org/zh-cn/3.8/library/fractions.html#fractions.Fraction" target="_blank" rel="noopener"><code>Fraction</code></a> 实例且与传入值完全相等。 请注意由于二进制浮点数通常存在的问题 (参见 <a href="https://docs.python.org/zh-cn/3.8/tutorial/floatingpoint.html#tut-fp-issues" target="_blank" rel="noopener">浮点算术：争议和限制</a>)，<code>Fraction(1.1)</code> 的参数并不会精确等于 11/10，因此 <code>Fraction(1.1)</code> 也 <em>不会</em> 返回用户所期望的 <code>Fraction(11, 10)</code>。 （请参阅下文中 <a href="https://docs.python.org/zh-cn/3.8/library/fractions.html#fractions.Fraction.limit_denominator" target="_blank" rel="noopener"><code>limit_denominator()</code></a> 方法的文档。） 构造器的最后一个版本接受一个字符串或 unicode 实例。 此实例的通常形式为:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[sign] numerator [<span class="string">'/'</span> denominator]</span><br></pre></td></tr></table></figure><p>其中的可选项 <code>sign</code> 可以为 ‘+’ 或 ‘-‘ 并且 <code>numerator</code> 和 <code>denominator</code> (如果存在) 是十进制数码的字符串。 此外，<a href="https://docs.python.org/zh-cn/3.8/library/functions.html#float" target="_blank" rel="noopener"><code>float</code></a> 构造器所接受的任何表示一个有限值的字符串也都为 <a href="https://docs.python.org/zh-cn/3.8/library/fractions.html#fractions.Fraction" target="_blank" rel="noopener"><code>Fraction</code></a> 构造器所接受。 不论哪种形式的输入字符串也都可以带有前缀和/或后缀的空格符。 这里是一些示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> fractions <span class="keyword">import</span> Fraction</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="number">16</span>, <span class="number">-10</span>)</span><br><span class="line">Fraction(<span class="number">-8</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="number">123</span>)</span><br><span class="line">Fraction(<span class="number">123</span>, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction()</span><br><span class="line">Fraction(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="string">'3/7'</span>)</span><br><span class="line">Fraction(<span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="string">' -3/7 '</span>)</span><br><span class="line">Fraction(<span class="number">-3</span>, <span class="number">7</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="string">'1.414213 \t\n'</span>)</span><br><span class="line">Fraction(<span class="number">1414213</span>, <span class="number">1000000</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="string">'-.125'</span>)</span><br><span class="line">Fraction(<span class="number">-1</span>, <span class="number">8</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="string">'7e-6'</span>)</span><br><span class="line">Fraction(<span class="number">7</span>, <span class="number">1000000</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="number">2.25</span>)</span><br><span class="line">Fraction(<span class="number">9</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="number">1.1</span>)</span><br><span class="line">Fraction(<span class="number">2476979795053773</span>, <span class="number">2251799813685248</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(Decimal(<span class="string">'1.1'</span>))</span><br><span class="line">Fraction(<span class="number">11</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><a href="https://docs.python.org/zh-cn/3.8/library/fractions.html#fractions.Fraction" target="_blank" rel="noopener"><code>Fraction</code></a> 类继承自抽象基类 <a href="https://docs.python.org/zh-cn/3.8/library/numbers.html#numbers.Rational" target="_blank" rel="noopener"><code>numbers.Rational</code></a>，并实现了该类的所有方法和操作。 <a href="https://docs.python.org/zh-cn/3.8/library/fractions.html#fractions.Fraction" target="_blank" rel="noopener"><code>Fraction</code></a> 实例是可哈希的，并应当被视为不可变对象。 此外，<a href="https://docs.python.org/zh-cn/3.8/library/fractions.html#fractions.Fraction" target="_blank" rel="noopener"><code>Fraction</code></a> 还具有以下属性和方法：</p><ul><li><p><code>numerator</code></p><p>最简分数形式的分子。</p></li><li><p><code>denominator</code></p><p>最简分数形式的分母。</p></li><li><p><code>as_integer_ratio</code>()</p><p>返回由两个整数组成的元组，两数之比等于该分数的值且其分母为正数。<em>3.8 新版功能.</em></p></li><li><p><code>from_float</code>(<em>flt</em>) : classmethod</p><p>此类方法可构造一个 <a href="https://docs.python.org/zh-cn/3.8/library/fractions.html#fractions.Fraction" target="_blank" rel="noopener"><code>Fraction</code></a> 来表示 <em>flt</em> 的精确值，该参数必须是一个 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#float" target="_blank" rel="noopener"><code>float</code></a>。 请注意 <code>Fraction.from_float(0.3)</code> 的值并不等于 <code>Fraction(3, 10)</code>。</p></li><li><p><code>from_decimal</code>(<em>dec</em>) : classmethod</p><p>此类方法可构造一个 <a href="https://docs.python.org/zh-cn/3.8/library/fractions.html#fractions.Fraction" target="_blank" rel="noopener"><code>Fraction</code></a> 来表示 <em>dec</em> 的精确值，该参数必须是一个 <a href="https://docs.python.org/zh-cn/3.8/library/decimal.html#decimal.Decimal" target="_blank" rel="noopener"><code>decimal.Decimal</code></a> 实例。</p></li><li><p><code>limit_denominator</code>(<em>max_denominator=1000000</em>)</p><p>找到并返回一个 <a href="https://docs.python.org/zh-cn/3.8/library/fractions.html#fractions.Fraction" target="_blank" rel="noopener"><code>Fraction</code></a> 使得其值最接近 <code>self</code> 并且分母不大于 max_denominator。 此方法适用于找出给定浮点数的有理数近似值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> fractions <span class="keyword">import</span> Fraction</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="string">'3.1415926535897932'</span>).limit_denominator(<span class="number">1000</span>)</span><br><span class="line">Fraction(<span class="number">355</span>, <span class="number">113</span>)</span><br></pre></td></tr></table></figure><p>或是用来恢复被表示为一个浮点数的有理数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> math <span class="keyword">import</span> pi, cos</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(cos(pi/<span class="number">3</span>))</span><br><span class="line">Fraction(<span class="number">4503599627370497</span>, <span class="number">9007199254740992</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(cos(pi/<span class="number">3</span>)).limit_denominator()</span><br><span class="line">Fraction(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fraction(<span class="number">1.1</span>).limit_denominator()</span><br><span class="line">Fraction(<span class="number">11</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>__floor__</code>()</p><p>返回最大的 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a> <code>&lt;= self</code>。 此方法也可通过 <a href="https://docs.python.org/zh-cn/3.8/library/math.html#math.floor" target="_blank" rel="noopener"><code>math.floor()</code></a> 函数来使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> math <span class="keyword">import</span> floor</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>floor(Fraction(<span class="number">355</span>, <span class="number">113</span>))</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p><code>__ceil__</code>()</p><p>返回最小的 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a> <code>&gt;= self</code>。 此方法也可通过 <a href="https://docs.python.org/zh-cn/3.8/library/math.html#math.ceil" target="_blank" rel="noopener"><code>math.ceil()</code></a> 函数来使用。</p></li><li><p><code>__round__</code>()</p></li><li><p><code>__round__</code>(<em>ndigits</em>)</p><p>第一个版本返回一个 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a> 使得其值最接近 <code>self</code>，位值为二分之一时只对偶数舍入。第二个版本会将 <code>self</code> 舍入到最接近 <code>Fraction(1, 10**ndigits)</code> 的倍数（如果 <code>ndigits</code> 为负值则为逻辑运算），位值为二分之一时同样只对偶数舍入。 此方法也可通过 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#round" target="_blank" rel="noopener"><code>round()</code></a> 函数来使用</p></li></ul></li></ul><ul><li><p><code>fractions.gcd</code>(<em>a</em>, <em>b</em>)</p><p>返回整数 <em>a</em> 和 <em>b</em> 的最大公约数。如果 <em>a</em> 或 <em>b</em> 之一非零，则 <code>gcd(a, b)</code> 的绝对值是能同时整除 <em>a</em> 和 <em>b</em> 的最大整数。若 <em>b</em> 非零，则 <code>gcd(a,b)</code> 与 <em>b</em> 同号；否则返回值与 <em>a</em> 同号。<code>gcd(0, 0)</code> 返回 <code>0</code>。</p><p><em>3.5 版后已移除:</em> 由 <a href="https://docs.python.org/zh-cn/3.8/library/math.html#math.gcd" target="_blank" rel="noopener"><code>math.gcd()</code></a> 取代.</p></li></ul><p>​    </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库-fractions-分数&quot;&gt;&lt;a href=&quot;#python-标准库-fractions-分数&quot; class=&quot;headerlink&quot; title=&quot;python 标准库 fractions 分数&quot;&gt;&lt;/a&gt;python 标准库 fractions 分数&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/jeffsui/app_image_resource/blob/master/20200210_hope.jpg?raw=true&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/categories/python/standard-library/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="fractions" scheme="https://pinghailinfeng.gitee.io/tags/fractions/"/>
    
  </entry>
  
  <entry>
    <title>python standard library json</title>
    <link href="https://pinghailinfeng.gitee.io/2020/02/08/python-standard-library-json/"/>
    <id>https://pinghailinfeng.gitee.io/2020/02/08/python-standard-library-json/</id>
    <published>2020-02-08T03:53:06.000Z</published>
    <updated>2020-02-10T03:43:31.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库-json"><a href="#python-标准库-json" class="headerlink" title="python 标准库 json"></a>python 标准库 json</h1><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20191223_blog_6.jpg?raw=true" alt></p><a id="more"></a><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=25706282&auto=0&height=66"></iframe><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><strong>源代码:</strong> <a href="https://github.com/python/cpython/tree/3.8/Lib/json/__init__.py" target="_blank" rel="noopener">Lib/json/<strong>init</strong>.py</a></p><p> <a href="http://json.org/" target="_blank" rel="noopener">JSON (JavaScript Object Notation)</a>，由 <a href="https://tools.ietf.org/html/rfc7159.html" target="_blank" rel="noopener"><strong>RFC 7159</strong></a> (which obsoletes <a href="https://tools.ietf.org/html/rfc4627.html" target="_blank" rel="noopener"><strong>RFC 4627</strong></a>) 和 <a href="http://www.ecma-international.org/publications/standards/Ecma-404.htm" target="_blank" rel="noopener">ECMA-404</a> 指定，是一个受 <a href="https://en.wikipedia.org/wiki/JavaScript" target="_blank" rel="noopener">JavaScript</a> 的对象字面量语法启发的轻量级数据交换格式，尽管它不仅仅是一个严格意义上的 JavaScript 的字集。</p><p> <a href="https://docs.python.org/zh-cn/3.8/library/json.html#module-json" target="_blank" rel="noopener"><code>json</code></a> 提供了与标准库 <a href="https://docs.python.org/zh-cn/3.8/library/marshal.html#module-marshal" target="_blank" rel="noopener"><code>marshal</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/library/pickle.html#module-pickle" target="_blank" rel="noopener"><code>pickle</code></a> 相似的API接口。 </p><p> 对基本的 Python 对象层次结构进行编码： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.dumps([<span class="string">'foo'</span>, &#123;<span class="string">'bar'</span>: (<span class="string">'baz'</span>, <span class="literal">None</span>, <span class="number">1.0</span>, <span class="number">2</span>)&#125;])</span><br><span class="line"><span class="string">'["foo", &#123;"bar": ["baz", null, 1.0, 2]&#125;]'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(json.dumps(<span class="string">"\"foo\bar"</span>))</span><br><span class="line"><span class="string">"\"foo\bar"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(json.dumps(<span class="string">'\u1234'</span>))</span><br><span class="line"><span class="string">"\u1234"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(json.dumps(<span class="string">'\\'</span>))</span><br><span class="line"><span class="string">"\\"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(json.dumps(&#123;<span class="string">"c"</span>: <span class="number">0</span>, <span class="string">"b"</span>: <span class="number">0</span>, <span class="string">"a"</span>: <span class="number">0</span>&#125;, sort_keys=<span class="literal">True</span>))</span><br><span class="line">&#123;<span class="string">"a"</span>: <span class="number">0</span>, <span class="string">"b"</span>: <span class="number">0</span>, <span class="string">"c"</span>: <span class="number">0</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>io = StringIO()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.dump([<span class="string">'streaming API'</span>], io)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>io.getvalue()</span><br><span class="line"><span class="string">'["streaming API"]'</span></span><br></pre></td></tr></table></figure><p> 紧凑编码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.dumps([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123;<span class="string">'4'</span>: <span class="number">5</span>, <span class="string">'6'</span>: <span class="number">7</span>&#125;], separators=(<span class="string">','</span>, <span class="string">':'</span>))</span><br><span class="line"><span class="string">'[1,2,3,&#123;"4":5,"6":7&#125;]'</span></span><br></pre></td></tr></table></figure><p>美化输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(json.dumps(&#123;<span class="string">'4'</span>: <span class="number">5</span>, <span class="string">'6'</span>: <span class="number">7</span>&#125;, sort_keys=<span class="literal">True</span>, indent=<span class="number">4</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"4"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">"6"</span>: <span class="number">7</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSON解码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.loads(<span class="string">'["foo", &#123;"bar":["baz", null, 1.0, 2]&#125;]'</span>)</span><br><span class="line">[<span class="string">'foo'</span>, &#123;<span class="string">'bar'</span>: [<span class="string">'baz'</span>, <span class="literal">None</span>, <span class="number">1.0</span>, <span class="number">2</span>]&#125;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.loads(<span class="string">'"\\"foo\\bar"'</span>)</span><br><span class="line"><span class="string">'"foo\x08ar'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>io = StringIO(<span class="string">'["streaming API"]'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.load(io)</span><br><span class="line">[<span class="string">'streaming API'</span>]</span><br></pre></td></tr></table></figure><p> 特殊JSON对象解码: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">as_complex</span><span class="params">(dct)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> <span class="string">'__complex__'</span> <span class="keyword">in</span> dct:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> complex(dct[<span class="string">'real'</span>], dct[<span class="string">'imag'</span>])</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> dct</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.loads(<span class="string">'&#123;"__complex__": true, "real": 1, "imag": 2&#125;'</span>,</span><br><span class="line"><span class="meta">... </span>    object_hook=as_complex)</span><br><span class="line">(<span class="number">1</span>+<span class="number">2j</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> decimal</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.loads(<span class="string">'1.1'</span>, parse_float=decimal.Decimal)</span><br><span class="line">Decimal(<span class="string">'1.1'</span>)</span><br></pre></td></tr></table></figure><p>扩展 <a href="https://docs.python.org/zh-cn/3.8/library/json.html#json.JSONEncoder" target="_blank" rel="noopener"><code>JSONEncoder</code></a>: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">ComplexEncoder</span><span class="params">(json.JSONEncoder)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">default</span><span class="params">(self, obj)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> isinstance(obj, complex):</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> [obj.real, obj.imag]</span><br><span class="line"><span class="meta">... </span>        <span class="comment"># Let the base class default method raise the TypeError</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> json.JSONEncoder.default(self, obj)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.dumps(<span class="number">2</span> + <span class="number">1j</span>, cls=ComplexEncoder)</span><br><span class="line"><span class="string">'[2.0, 1.0]'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ComplexEncoder().encode(<span class="number">2</span> + <span class="number">1j</span>)</span><br><span class="line"><span class="string">'[2.0, 1.0]'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(ComplexEncoder().iterencode(<span class="number">2</span> + <span class="number">1j</span>))</span><br><span class="line">[<span class="string">'[2.0'</span>, <span class="string">', 1.0'</span>, <span class="string">']'</span>]</span><br></pre></td></tr></table></figure><p> 从命令行使用 <a href="https://docs.python.org/zh-cn/3.8/library/json.html#module-json.tool" target="_blank" rel="noopener"><code>json.tool</code></a> 来验证并美化输出： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ echo <span class="string">'&#123;"json":"obj"&#125;'</span> | python -m json.tool</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"json"</span>: <span class="string">"obj"</span></span><br><span class="line">&#125;</span><br><span class="line">$ echo <span class="string">'&#123;1.2:3.4&#125;'</span> | python -m json.tool</span><br><span class="line">Expecting property name enclosed <span class="keyword">in</span> double quotes: line <span class="number">1</span> column <span class="number">2</span> (char <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p> 详细文档请参见 <a href="https://docs.python.org/zh-cn/3.8/library/json.html#json-commandline" target="_blank" rel="noopener">命令行界面</a>。 </p><blockquote><p> JSON 是 <a href="http://yaml.org/" target="_blank" rel="noopener">YAML</a> 1.2 的一个子集。由该模块的默认设置生成的 JSON （尤其是默认的 “分隔符” 设置值）也是 YAML 1.0 and 1.1 的一个子集。因此该模块也能够用于序列化为 YAML。 </p></blockquote><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ul><li><p><code>json.dump</code>(<em>obj</em>, <em>fp</em>, <strong><em>, </em>skipkeys=False<em>, </em>ensure_ascii=True<em>, </em>check_circular=True<em>, </em>allow_nan=True<em>, </em>cls=None<em>, </em>indent=None<em>, </em>separators=None<em>, </em>default=None<em>, </em>sort_keys=False<em>, </em></strong>kw*) </p><p> 使用这个 <a href="https://docs.python.org/zh-cn/3.8/library/json.html#py-to-json-table" target="_blank" rel="noopener">转换表</a> 将 <em>obj</em> 序列化为 JSON 格式化流形式的 <em>fp</em> (支持 <code>.write()</code> 的 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-file-like-object" target="_blank" rel="noopener">file-like object</a>)。 </p><p>如果 <em>skipkeys</em> 是 true （默认为 <code>False</code>），那么那些不是基本对象（包括 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a>、<a href="https://docs.python.org/zh-cn/3.8/library/functions.html#float" target="_blank" rel="noopener"><code>float</code></a>、<a href="https://docs.python.org/zh-cn/3.8/library/functions.html#bool" target="_blank" rel="noopener"><code>bool</code></a>、<code>None</code>）的字典的键会被跳过；否则引发一个 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a>。</p><p><a href="https://docs.python.org/zh-cn/3.8/library/json.html#module-json" target="_blank" rel="noopener"><code>json</code></a> 模块始终产生 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str</code></a> 对象而非 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#bytes" target="_blank" rel="noopener"><code>bytes</code></a> 对象。因此，<code>fp.write()</code> 必须支持 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str</code></a> 输入。</p><p>如果 <em>ensure_ascii</em> 是 true （即默认值），输出保证将所有输入的非 ASCII 字符转义。如果 <em>ensure_ascii</em> 是 false，这些字符会原样输出。</p><p>如果 <em>check_circular</em> 是为假值 (默认为 <code>True</code>)，那么容器类型的循环引用检验会被跳过并且循环引用会引发一个 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#OverflowError" target="_blank" rel="noopener"><code>OverflowError</code></a> (或者更糟的情况)。</p><p>如果 <em>allow_nan</em> 是 false（默认为 <code>True</code>），那么在对严格 JSON 规格范围外的 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#float" target="_blank" rel="noopener"><code>float</code></a> 类型值（<code>nan</code>、<code>inf</code> 和 <code>-inf</code>）进行序列化时会引发一个 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#ValueError" target="_blank" rel="noopener"><code>ValueError</code></a>。如果 <em>allow_nan</em> 是 true，则使用它们的 JavaScript 等价形式（<code>NaN</code>、<code>Infinity</code> 和 <code>-Infinity</code>）。</p><p>如果 <em>indent</em> 是一个非负整数或者字符串，那么 JSON 数组元素和对象成员会被美化输出为该值指定的缩进等级。如果缩进等级为零、负数或者 <code>&quot;&quot;</code>，则只会添加换行符。<code>None（默认值）选择最紧凑的表达。使用一个正整数会让每一层缩进同样数量的空格。如果 *indent* 是一个字符串（比如 &quot;\t&quot;</code>），那个字符串会被用于缩进每一层。</p><p><em>在 3.2 版更改:</em> 允许使用字符串作为 <em>indent</em> 而不再仅仅是整数。</p><p>当指定时，<em>separators</em> 应当是一个 <code>(item_separator, key_separator)</code> 元组。当 <em>indent</em> 为 <code>None</code> 时，默认值取 <code>(&#39;, &#39;, &#39;: &#39;)</code>，否则取 <code>(&#39;,&#39;, &#39;: &#39;)</code>。为了得到最紧凑的 JSON 表达式，你应该指定其为 <code>(&#39;,&#39;, &#39;:&#39;)</code> 以消除空白字符。</p><p><em>在 3.4 版更改:</em> 现当 <em>indent</em> 不是 <code>None</code> 时，采用 <code>(&#39;,&#39;, &#39;: &#39;)</code> 作为默认值。</p><p>当 <em>default</em> 被指定时，其应该是一个函数，每当某个对象无法被序列化时它会被调用。它应该返回该对象的一个可以被 JSON 编码的版本或者引发一个 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a>。如果没有被指定，则会直接引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a>。</p><p>如果 <em>sort_keys</em> 是 true（默认为 <code>False</code>），那么字典的输出会以键的顺序排序。</p><p>为了使用一个自定义的 <a href="https://docs.python.org/zh-cn/3.8/library/json.html#json.JSONEncoder" target="_blank" rel="noopener"><code>JSONEncoder</code></a> 子类（比如：覆盖了 <code>default()</code> 方法来序列化额外的类型）， 通过 <em>cls</em> 关键字参数来指定；否则将使用 <a href="https://docs.python.org/zh-cn/3.8/library/json.html#json.JSONEncoder" target="_blank" rel="noopener"><code>JSONEncoder</code></a>。</p></li><li><p>json.dumps(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)</p><p> 使用这个 <a href="https://docs.python.org/zh-cn/3.8/library/json.html#py-to-json-table" target="_blank" rel="noopener">转换表</a> 将 <em>obj</em> 序列化为 JSON 格式的 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str</code></a>。 其参数的含义与 <a href="https://docs.python.org/zh-cn/3.8/library/json.html#json.dump" target="_blank" rel="noopener"><code>dump()</code></a> 中的相同。 </p></li><li><p><code>json.load</code>(<em>fp</em>, <strong><em>, </em>cls=None<em>, </em>object_hook=None<em>, </em>parse_float=None<em>, </em>parse_int=None<em>, </em>parse_constant=None<em>, </em>object_pairs_hook=None<em>, </em></strong>kw*) </p><p>使用这个 <a href="https://docs.python.org/zh-cn/3.8/library/json.html#json-to-py-table" target="_blank" rel="noopener">转换表</a> 将 <em>fp</em> (一个支持 <code>.read()</code> 并包含一个 JSON 文档的 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-text-file" target="_blank" rel="noopener">text file</a> 或者 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-binary-file" target="_blank" rel="noopener">binary file</a>) 反序列化为一个 Python 对象。</p><p><em>object_hook</em> 是一个可选的函数，它会被调用于每一个解码出的对象字面量（即一个 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#dict" target="_blank" rel="noopener"><code>dict</code></a>）。<em>object_hook</em> 的返回值会取代原本的 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#dict" target="_blank" rel="noopener"><code>dict</code></a>。这一特性能够被用于实现自定义解码器（如 <a href="http://www.jsonrpc.org/" target="_blank" rel="noopener">JSON-RPC</a> 的类型提示)。</p><p><em>object_pairs_hook</em> 是一个可选的函数，它会被调用于每一个有序列表对解码出的对象字面量。 <em>object_pairs_hook</em> 的返回值将会取代原本的 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#dict" target="_blank" rel="noopener"><code>dict</code></a> 。这一特性能够被用于实现自定义解码器。如果 <em>object_hook</em> 也被定义， <em>object_pairs_hook</em> 优先。</p><p><em>在 3.1 版更改:</em> 添加了对 <em>object_pairs_hook</em> 的支持。</p><p><em>parse_float</em> ，如果指定，将与每个要解码 JSON 浮点数的字符串一同调用。默认状态下，相当于 <code>float(num_str)</code> 。可以用于对 JSON 浮点数使用其它数据类型和语法分析程序 （比如 <a href="https://docs.python.org/zh-cn/3.8/library/decimal.html#decimal.Decimal" target="_blank" rel="noopener"><code>decimal.Decimal</code></a> ）。</p><p><em>parse_int</em> ，如果指定，将与每个要解码 JSON 整数的字符串一同调用。默认状态下，相当于 <code>int(num_str)</code> 。可以用于对 JSON 整数使用其它数据类型和语法分析程序 （比如 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#float" target="_blank" rel="noopener"><code>float</code></a> ）。</p><p><em>parse_constant</em> ，如果指定，将要与以下字符串中的一个一同调用： <code>&#39;-Infinity&#39;</code> ， <code>&#39;Infinity&#39;</code> ， <code>&#39;NaN&#39;</code> 。如果遇到无效的 JSON 数字则可以使用它引发异常。</p><p><em>在 3.1 版更改:</em> <em>parse_constant</em> 不再调用 ‘null’ ， ‘true’ ， ‘false’ 。</p><p>要使用自定义的 <a href="https://docs.python.org/zh-cn/3.8/library/json.html#json.JSONDecoder" target="_blank" rel="noopener"><code>JSONDecoder</code></a> 子类，用 <code>cls</code> 指定他；否则使用 <a href="https://docs.python.org/zh-cn/3.8/library/json.html#json.JSONDecoder" target="_blank" rel="noopener"><code>JSONDecoder</code></a> 。额外的关键词参数会通过类的构造函数传递。</p><p>如果反序列化的数据不是有效 JSON 文档，引发 <a href="https://docs.python.org/zh-cn/3.8/library/json.html#json.JSONDecodeError" target="_blank" rel="noopener"><code>JSONDecodeError</code></a> 错误。</p><p><em>在 3.6 版更改:</em> 所有的可选参数现在是 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#keyword-only-parameter" target="_blank" rel="noopener">keyword-only</a> 的了。</p><p><em>在 3.6 版更改:</em> <em>fp</em> 现在可以是 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-binary-file" target="_blank" rel="noopener">binary file</a> 。输入编码应当是 UTF-8 ， UTF-16 或者 UTF-32 。</p></li><li><p><code>json.loads</code>(<em>s</em>, <strong><em>, </em>cls=None<em>, </em>object_hook=None<em>, </em>parse_float=None<em>, </em>parse_int=None<em>, </em>parse_constant=None<em>, </em>object_pairs_hook=None<em>, </em></strong>kw*) </p><p>使用这个 <a href="https://docs.python.org/zh-cn/3.8/library/json.html#json-to-py-table" target="_blank" rel="noopener">转换表</a> 将 <em>s</em> (一个包含 JSON 文档的 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#bytes" target="_blank" rel="noopener"><code>bytes</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#bytearray" target="_blank" rel="noopener"><code>bytearray</code></a> 实例) 反序列化为 Python 对象。</p><p>除了<em>encoding</em>被忽略和弃用自 Python 3.1 以来，其他参数的含义与 <a href="https://docs.python.org/zh-cn/3.8/library/json.html#json.load" target="_blank" rel="noopener"><code>load()</code></a> 中相同。</p><p>如果反序列化的数据不是有效 JSON 文档，引发 <a href="https://docs.python.org/zh-cn/3.8/library/json.html#json.JSONDecodeError" target="_blank" rel="noopener"><code>JSONDecodeError</code></a> 错误。</p><p><em>Deprecated since version 3.1, will be removed in version 3.9:</em> <em>encoding</em> 关键字参数。</p><p><em>在 3.6 版更改:</em> <em>s</em> 现在可以为 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#bytes" target="_blank" rel="noopener"><code>bytes</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#bytearray" target="_blank" rel="noopener"><code>bytearray</code></a> 类型。 输入编码应为 UTF-8, UTF-16 或 UTF-32。</p></li></ul><h2 id="编码器和解码器"><a href="#编码器和解码器" class="headerlink" title="编码器和解码器"></a>编码器和解码器</h2><ul><li><p><em>class</em> <code>json.JSONDecoder</code>(<em>**, </em>object_hook=None<em>, </em>parse_float=None<em>, </em>parse_int=None<em>, </em>parse_constant=None<em>, </em>strict=True<em>, </em>object_pairs_hook=None*) </p><p>简单的JSON解码器。</p><p>默认情况下，解码执行以下翻译:</p><p>| JSON          | Python |<br>| :———— | :—– |<br>| object        | dict   |<br>| array         | list   |<br>| string        | str    |<br>| number (int)  | int    |<br>| number (real) | float  |<br>| true          | True   |<br>| false         | False  |<br>| null          | None   |</p></li></ul><p>​      它还将“NaN”、“Infinity”和“-Infinity”理解为它们对应的“float”值，这超出了JSON规范。</p><p>​    <em>object_hook</em> ，如果指定，会被每个解码的 JSON 对象的结果调用，并且返回值会替代给定 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#dict" target="_blank" rel="noopener"><code>dict</code></a> 。它可被用于提供自定义反序列化（比如去支持 JSON-RPC 类的暗示）。</p><p>如果指定了 <em>object_pairs_hook</em> 则它将被调用并传入以对照值有序列表进行解码的每个 JSON 对象的结果。 <em>object_pairs_hook</em> 的结果值将被用来替代 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#dict" target="_blank" rel="noopener"><code>dict</code></a>。 这一特性可被用于实现自定义解码器。 如果还定义了 <em>object_hook</em>，则 <em>object_pairs_hook</em> 的优先级更高。</p><p><em>在 3.1 版更改:</em> 添加了对 <em>object_pairs_hook</em> 的支持。</p><p><em>parse_float</em> ，如果指定，将与每个要解码 JSON 浮点数的字符串一同调用。默认状态下，相当于 <code>float(num_str)</code> 。可以用于对 JSON 浮点数使用其它数据类型和语法分析程序 （比如 <a href="https://docs.python.org/zh-cn/3.8/library/decimal.html#decimal.Decimal" target="_blank" rel="noopener"><code>decimal.Decimal</code></a> ）。</p><p><em>parse_int</em> ，如果指定，将与每个要解码 JSON 整数的字符串一同调用。默认状态下，相当于 <code>int(num_str)</code> 。可以用于对 JSON 整数使用其它数据类型和语法分析程序 （比如 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#float" target="_blank" rel="noopener"><code>float</code></a> ）。</p><p><em>parse_constant</em> ，如果指定，将要与以下字符串中的一个一同调用： <code>&#39;-Infinity&#39;</code> ， <code>&#39;Infinity&#39;</code> ， <code>&#39;NaN&#39;</code> 。如果遇到无效的 JSON 数字则可以使用它引发异常。</p><p>如果 <em>strict</em> 为 false （默认为 <code>True</code> ），那么控制字符将被允许在字符串内。在此上下文中的控制字符编码在范围 0–31 内的字符，包括 <code>&#39;\t&#39;</code> (制表符）， <code>&#39;\n&#39;</code> ， <code>&#39;\r&#39;</code> 和 <code>&#39;\0&#39;</code> 。</p><p>如果反序列化的数据不是有效 JSON 文档，引发 <a href="https://docs.python.org/zh-cn/3.8/library/json.html#json.JSONDecodeError" target="_blank" rel="noopener"><code>JSONDecodeError</code></a> 错误。</p><p><em>在 3.6 版更改:</em> 所有形参现在都是 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#keyword-only-parameter" target="_blank" rel="noopener">仅限关键字参数</a>。</p><ul><li><p><code>decode</code>(<em>s</em>) </p><p>返回 <em>s</em> 的 Python 表示形式（包含一个 JSON 文档的 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str</code></a> 实例）。</p><p>如果给定的 JSON 文档无效则将引发 <a href="https://docs.python.org/zh-cn/3.8/library/json.html#json.JSONDecodeError" target="_blank" rel="noopener"><code>JSONDecodeError</code></a>。</p></li><li><p><code>raw_decode</code>(<em>s</em>) </p><p>从 <em>s</em> 中解码出 JSON 文档（以 JSON 文档开头的一个 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str</code></a> 对象）并返回一个 Python 表示形式为 2 元组以及指明该文档在 <em>s</em> 中结束位置的序号。</p><p>这可以用于从一个字符串解码JSON文档，该字符串的末尾可能有无关的数据。</p></li></ul><ul><li><p><em>lass</em> <code>json.JSONEncoder</code>(<em>**, </em>skipkeys=False<em>, </em>ensure_ascii=True<em>, </em>check_circular=True<em>, </em>allow_nan=True<em>, </em>sort_keys=False<em>, </em>indent=None<em>, </em>separators=None<em>, </em>default=None*) </p><p>用于Python数据结构的可扩展JSON编码器。</p><p>默认支持以下对象和类型：</p><p>| Python                              | JSON   |<br>| :———————————- | :—– |<br>| dict                                | object |<br>| list, tuple                         | array  |<br>| str                                 | string |<br>| int, float, int 和 float 派生的枚举 | number |<br>| True                                | true   |<br>| False                               | false  |<br>| None                                | null   |</p><p><em>在 3.4 版更改:</em> 添加了对 int 和 float 派生的枚举类的支持</p><p>为了将其拓展至识别其他对象，需要子类化并实现 <a href="https://docs.python.org/zh-cn/3.8/library/json.html#json.JSONEncoder.default" target="_blank" rel="noopener"><code>default()</code></a> 方法于另一种返回 <code>o</code> 的可序列化对象的方法如果可行，否则它应该调用超类实现（来引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a> ）。</p><p>如果 <em>skipkeys</em> 为假值（默认），则尝试对不是 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#float" target="_blank" rel="noopener"><code>float</code></a> 或 <code>None</code> 的键进行编码将会引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a>。 如果 <em>skipkeys</em> 为真值，这些条目将被直接跳过。</p><p>如果 <em>ensure_ascii</em> 是 true （即默认值），输出保证将所有输入的非 ASCII 字符转义。如果 <em>ensure_ascii</em> 是 false，这些字符会原样输出。</p><p>如果 <em>check_circular</em> 为 true （默认），那么列表，字典，和自定义编码的对象在编码期间会被检查重复循环引用防止无限递归（无限递归将导致 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#OverflowError" target="_blank" rel="noopener"><code>OverflowError</code></a> ）。否则，这样进行检查。</p><p>如果 <em>allow_nan</em> 为 true （默认），那么 <code>NaN</code> ， <code>Infinity</code> ，和 <code>-Infinity</code> 进行编码。此行为不符合 JSON 规范，但与大多数的基于 Javascript 的编码器和解码器一致。否则，它将是一个 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#ValueError" target="_blank" rel="noopener"><code>ValueError</code></a> 来编码这些浮点数。</p><p>如果 <em>sort_keys</em> 为 true （默认为： <code>False</code> ），那么字典的输出是按照键排序；这对回归测试很有用，以确保可以每天比较 JSON 序列化。</p><p>如果 <em>indent</em> 是一个非负整数或者字符串，那么 JSON 数组元素和对象成员会被美化输出为该值指定的缩进等级。如果缩进等级为零、负数或者 <code>&quot;&quot;</code>，则只会添加换行符。<code>None（默认值）选择最紧凑的表达。使用一个正整数会让每一层缩进同样数量的空格。如果 *indent* 是一个字符串（比如 &quot;\t&quot;</code>），那个字符串会被用于缩进每一层。</p><p><em>在 3.2 版更改:</em> 允许使用字符串作为 <em>indent</em> 而不再仅仅是整数。</p><p>当指定时，<em>separators</em> 应当是一个 <code>(item_separator, key_separator)</code> 元组。当 <em>indent</em> 为 <code>None</code> 时，默认值取 <code>(&#39;, &#39;, &#39;: &#39;)</code>，否则取 <code>(&#39;,&#39;, &#39;: &#39;)</code>。为了得到最紧凑的 JSON 表达式，你应该指定其为 <code>(&#39;,&#39;, &#39;:&#39;)</code> 以消除空白字符。</p><p><em>在 3.4 版更改:</em> 现当 <em>indent</em> 不是 <code>None</code> 时，采用 <code>(&#39;,&#39;, &#39;: &#39;)</code> 作为默认值。</p><p>当 <em>default</em> 被指定时，其应该是一个函数，每当某个对象无法被序列化时它会被调用。它应该返回该对象的一个可以被 JSON 编码的版本或者引发一个 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a>。如果没有被指定，则会直接引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a>。</p><p><em>在 3.6 版更改:</em> 所有形参现在都是 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#keyword-only-parameter" target="_blank" rel="noopener">仅限关键字参数</a>。</p><ul><li><p><code>default</code>(<em>o</em>) </p><p>在子类中实现这种方法使其返回 <em>o</em> 的可序列化对象，或者调用基础实现（引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a> ）。</p><p>比如说，为了支持任意迭代器，你可以像这样实现默认设置:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">default</span><span class="params">(self, o)</span>:</span></span><br><span class="line">   <span class="keyword">try</span>:</span><br><span class="line">       iterable = iter(o)</span><br><span class="line">   <span class="keyword">except</span> TypeError:</span><br><span class="line">       <span class="keyword">pass</span></span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">return</span> list(iterable)</span><br><span class="line">   <span class="comment"># Let the base class default method raise the TypeError</span></span><br><span class="line">   <span class="keyword">return</span> json.JSONEncoder.default(self, o)</span><br></pre></td></tr></table></figure></li><li><p><code>encode</code>(<em>o</em>) </p><p>返回 Python <em>o</em> 数据结构的 JSON 字符串表达方式。例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.JSONEncoder().encode(&#123;<span class="string">"foo"</span>: [<span class="string">"bar"</span>, <span class="string">"baz"</span>]&#125;)</span><br><span class="line"><span class="string">'&#123;"foo": ["bar", "baz"]&#125;'</span></span><br></pre></td></tr></table></figure></li><li><p><code>iterencode</code>(<em>o</em>) </p><p>编码给定对象 <em>o</em> ，并且让每个可用的字符串表达方式。例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> json.JSONEncoder().iterencode(bigobject):</span><br><span class="line">    mysocket.write(chunk)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p><em>exception</em> <code>json.JSONDecodeError</code>(<em>msg</em>, <em>doc</em>, <em>pos</em>)</p><p>拥有以下附加属性的 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#ValueError" target="_blank" rel="noopener"><code>ValueError</code></a> 的子类：</p><ul><li><p><code>msg</code></p><p>未格式化的错误消息。</p></li><li><p><code>doc</code></p><p>正在解析的 JSON 文档。</p></li><li><p><code>pos</code></p><p>从文档开始解析失败的索引</p></li><li><p><code>lineno</code></p><p>定位的行号</p></li><li><p><code>colno</code></p><p>定位的列号</p></li></ul><h2 id="标准符合性和互操作性"><a href="#标准符合性和互操作性" class="headerlink" title="标准符合性和互操作性"></a>标准符合性和互操作性</h2><p>JSON 格式由 <a href="https://tools.ietf.org/html/rfc7159.html" target="_blank" rel="noopener"><strong>RFC 7159</strong></a> 和 <a href="http://www.ecma-international.org/publications/standards/Ecma-404.htm" target="_blank" rel="noopener">ECMA-404</a> 指定。此段落详细讲了这个模块符合 RFC 的级别。简单来说， <a href="https://docs.python.org/zh-cn/3.8/library/json.html#json.JSONEncoder" target="_blank" rel="noopener"><code>JSONEncoder</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/library/json.html#json.JSONDecoder" target="_blank" rel="noopener"><code>JSONDecoder</code></a> 子类，和明确提到的参数以外的参数，不作考虑。</p><p>此模块不严格遵循于 RFC ，它实现了一些扩展是有效的 Javascript 但不是有效的 JSON。尤其是：</p><ul><li>无限和 NaN 数值是被接受并输出；</li><li>对象内的重复名称是接受的，并且仅使用最后一对属性-值对的值。</li></ul><p>自从 RFC 允许符合 RFC 的语法分析程序接收 不符合 RFC 的输入文本以来，这个模块的解串器在默认状态下默认符合 RFC 。</p><h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><p>RFC 要求使用 UTF-8 ， UTF-16 ，或 UTF-32 之一来表示 JSON ，为了最大互通性推荐使用 UTF-8 。</p><p>RFC允许，尽管不是必须的，这个模块的序列化默认设置为 <em>ensure_ascii=True</em> ，这样消除输出以便结果字符串至容纳 ASCII 字符。</p><p><em>ensure_ascii</em> 参数以外，此模块是严格的按照在 Python 对象和 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#str" target="_blank" rel="noopener"><code>Unicode strings</code></a> 间的转换定义的，并且因此不能直接解决字符编码的问题。</p><p>RFC 禁止添加字符顺序标记（ BOM ）在 JSON 文本的开头，这个模块的序列化器不添加 BOM 标记在它的输出上。 RFC，准许 JSON 反序列化器忽略它们输入中的初始 BOM 标记，但不要求。此模块的反序列化器引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#ValueError" target="_blank" rel="noopener"><code>ValueError</code></a> 当存在初始 BOM 标记。</p><p>RFC 不会明确禁止包含字节序列的 JSON 字符串这不对应有效的 Unicode 字符（比如 不成对的 UTF-16 的替代物），但是它确实指出它们可能会导致互操作性问题。默认下，模块对这样的序列接受和输出（当在原始 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str</code></a> 存在时）代码点。</p><h3 id="Infinite-和-NaN-数值"><a href="#Infinite-和-NaN-数值" class="headerlink" title="Infinite 和 NaN 数值"></a>Infinite 和 NaN 数值</h3><p>RFC 不允许 infinite 或者 NaN 数值的表达方式。尽管这样，默认情况下，此模块接受并且输出 <code>Infinity</code> ， <code>-Infinity</code>，和 <code>NaN</code> 好像它们是有效的JSON数字字面值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Neither of these calls raises an exception, but the results are not valid JSON</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.dumps(float(<span class="string">'-inf'</span>))</span><br><span class="line"><span class="string">'-Infinity'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.dumps(float(<span class="string">'nan'</span>))</span><br><span class="line"><span class="string">'NaN'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Same when deserializing</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.loads(<span class="string">'-Infinity'</span>)</span><br><span class="line">-inf</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.loads(<span class="string">'NaN'</span>)</span><br><span class="line">nan</span><br></pre></td></tr></table></figure><p>序列化器中， <em>allow_nan</em> 参数可用于替代这个行为。反序列化器中， <em>parse_constant</em> 参数，可用于替代这个行为。</p><h3 id="对象中的重复名称"><a href="#对象中的重复名称" class="headerlink" title="对象中的重复名称"></a>对象中的重复名称</h3><p>RFC 具体说明了 在 JSON对象里的名字应该是唯一的，但没有规定如何处理JSON对象中的重复名称。默认下，此模块不引发异常；作为替代，对于给定名它将忽略除姓-值对之外的所有对:</p><p>>&gt;&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; weird_json = &apos;&#123;&quot;x&quot;: 1, &quot;x&quot;: 2, &quot;x&quot;: 3&#125;&apos;</span><br><span class="line">&gt;&gt;&gt; json.loads(weird_json)</span><br><span class="line">&#123;&apos;x&apos;: 3&#125;</span><br></pre></td></tr></table></figure><p>参数 <code>*object_pairs_hook*</code> 可以改变这个行为</p><h3 id="顶级非对象，非数组值"><a href="#顶级非对象，非数组值" class="headerlink" title="顶级非对象，非数组值"></a>顶级非对象，非数组值</h3><p>老版本的JSON声明遵循<a href="https://tools.ietf.org/html/rfc4627.html" target="_blank" rel="noopener"><strong>RFC 4627</strong></a> ,需要顶级的JSON 文本必须是JSON对象或数组(Python中的字典或列表),并且不能是null,boolean,number或字符串。<a href="https://tools.ietf.org/html/rfc7159.html" target="_blank" rel="noopener"><strong>RFC 7159</strong></a> 移除了这个限制,意味着无需在序列化和反序列化时实现该规范。</p><p>除此以外,为了获得最大限度的操作灵活性,你可以根据自己的实际情况选择是否遵循该规范。</p><h3 id="实现限制"><a href="#实现限制" class="headerlink" title="实现限制"></a>实现限制</h3><p>一些json 实现可能有下面的限制:</p><ul><li>可以接受的 JSON 文本大小 </li><li>对象和数组的最大层数</li><li>JSON numbers的范围以及小数位数。</li><li>JSON字符串的内容和最大长度</li></ul><p>json模块并不会强制这些限制,这取决于自定义Python数据类型自身的实现。</p><h2 id="命令行界面"><a href="#命令行界面" class="headerlink" title="命令行界面"></a>命令行界面</h2><p> <a href="https://docs.python.org/zh-cn/3.8/library/json.html#module-json.tool" target="_blank" rel="noopener"><code>json.tool</code></a> 模块实现了一个简易的命令行接口,用来验证和打印格式良好的JSON 对象。</p><p>如果没有设定可选参数<code>infile</code> and <code>outfile</code>,将会使用<a href="https://docs.python.org/zh-cn/3.8/library/sys.html#sys.stdin" target="_blank" rel="noopener"><code>sys.stdin</code></a> and <a href="https://docs.python.org/zh-cn/3.8/library/sys.html#sys.stdout" target="_blank" rel="noopener"><code>sys.stdout</code></a> 标准输入输出代替。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ echo <span class="string">'&#123;"json": "obj"&#125;'</span> | python -m json.tool</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"json"</span>: <span class="string">"obj"</span></span><br><span class="line">&#125;</span><br><span class="line">$ echo <span class="string">'&#123;1.2:3.4&#125;'</span> | python -m json.tool</span><br><span class="line">Expecting property name enclosed <span class="keyword">in</span> double quotes: line <span class="number">1</span> column <span class="number">2</span> (char <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="命令行选项"><a href="#命令行选项" class="headerlink" title="命令行选项"></a>命令行选项</h3><p> <strong>infile</strong> </p><p>JSON 文件校验或美化打印。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ python -m json.tool mp_films.json</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"title"</span>: <span class="string">"And Now for Something Completely Different"</span>,</span><br><span class="line">        <span class="string">"year"</span>: <span class="number">1971</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"title"</span>: <span class="string">"Monty Python and the Holy Grail"</span>,</span><br><span class="line">        <span class="string">"year"</span>: <span class="number">1975</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>If <em>infile</em> is not specified, read from <a href="https://docs.python.org/zh-cn/3.8/library/sys.html#sys.stdin" target="_blank" rel="noopener"><code>sys.stdin</code></a>.</p><p> <strong>outfile</strong> </p><p> Write the output of the <em>infile</em> to the given <em>outfile</em>. Otherwise, write it to </p><p>输出到文件,如果没有设置则使用<a href="https://docs.python.org/zh-cn/3.8/library/sys.html#sys.stdout" target="_blank" rel="noopener"><code>sys.stdout</code></a>(标准输出)</p><p> <strong>–sort-keys</strong> </p><p>根据输出的字典的键根据字母顺序排序</p><p> <strong>–json-lines</strong> </p><p>解析每一行作为单独的JSON对象</p><p> <code>-h, --help</code> </p><p>显示帮助信息</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库-json&quot;&gt;&lt;a href=&quot;#python-标准库-json&quot; class=&quot;headerlink&quot; title=&quot;python 标准库 json&quot;&gt;&lt;/a&gt;python 标准库 json&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/jeffsui/app_image_resource/blob/master/20191223_blog_6.jpg?raw=true&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/categories/python/standard-library/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="json" scheme="https://pinghailinfeng.gitee.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>python standard library types</title>
    <link href="https://pinghailinfeng.gitee.io/2020/02/07/python-standard-library-types/"/>
    <id>https://pinghailinfeng.gitee.io/2020/02/07/python-standard-library-types/</id>
    <published>2020-02-07T12:10:40.000Z</published>
    <updated>2020-02-10T02:35:57.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库-types"><a href="#python-标准库-types" class="headerlink" title="python 标准库 types"></a>python 标准库 types</h1><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200207_RIP.jpg?raw=true" alt></p><a id="more"></a><blockquote><p>今天心情很沉重,李文亮医生一路走好！R.I.P</p></blockquote><p><a href="https://v.youku.com/v_show/id_XNDQ1MTYyMDI4OA==.html" target="_blank" rel="noopener">https://v.youku.com/v_show/id_XNDQ1MTYyMDI4OA==.html</a></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><strong>源代码:</strong> <a href="https://github.com/python/cpython/tree/3.8/Lib/types.py" target="_blank" rel="noopener">Lib/types.py</a></p><hr><p>此模块定义了一些工具函数，用于协助动态创建新的类型。</p><p>它还为某些对象类型定义了名称，这些名称由标准 Python 解释器所使用，但并不像内置的 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str</code></a> 那样对外公开。</p><p>最后，它还额外提供了一些类型相关但重要程度不足以作为内置对象的工具类和函数。</p><h2 id="动态类型创建"><a href="#动态类型创建" class="headerlink" title="动态类型创建"></a>动态类型创建</h2><ul><li><p><code>types.new_class</code>(<em>name</em>, <em>bases=()</em>, <em>kwds=None</em>, <em>exec_body=None</em>) </p><p>使用适当的元类动态地创建一个类对象。</p><p>前三个参数是组成类定义头的部件：类名称，基类 (有序排列)，关键字参数 (例如 <code>metaclass</code>)。</p><p><em>exec_body</em> 参数是一个回调函数，用于填充新创建类的命名空间。 它应当接受类命名空间作为其唯一的参数并使用类内容直接更新命名空间。 如果未提供回调函数，则它就等效于传入 <code>lambda ns: ns</code>。</p><p><em>3.3 新版功能.</em></p></li><li><p><code>types.prepare_class</code>(<em>name</em>, <em>bases=()</em>, <em>kwds=None</em>) </p><p>计算适当的元类并创建类命名空间。</p><p>参数是组成类定义头的部件：类名称，基类 (有序排列) 以及关键字参数 (例如 <code>metaclass</code>)。</p><p>返回值是一个 3 元组: <code>metaclass, namespace, kwds</code></p><p><em>metaclass</em> 是适当的元类，<em>namespace</em> 是预备好的类命名空间而 <em>kwds</em> 是所传入 <em>kwds</em> 参数移除每个 <code>&#39;metaclass&#39;</code> 条目后的已更新副本。 如果未传入 <em>kwds</em> 参数，这将为一个空字典。</p><p><em>3.3 新版功能.</em></p><p><em>在 3.6 版更改:</em> 所返回元组中 <code>namespace</code> 元素的默认值已被改变。 现在当元类没有 <code>__prepare__</code> 方法时将会使用一个保留插入顺序的映射。</p></li><li><p><code>types.resolve_bases</code>(<em>bases</em>) </p><p>动态地解析 MRO 条目，具体描述见 <a href="https://www.python.org/dev/peps/pep-0560" target="_blank" rel="noopener"><strong>PEP 560</strong></a>。</p><p>此函数会在 <em>bases</em> 中查找不是 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#type" target="_blank" rel="noopener"><code>type</code></a> 的实例的项，并返回一个元组，其中每个具有 <code>__mro_entries__</code> 方法的此种对象对象将被替换为调用该方法解包后的结果。 如果一个 <em>bases</em> 项是 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#type" target="_blank" rel="noopener"><code>type</code></a> 的实例，或它不具有 <code>__mro_entries__</code> 方法，则它将不加改变地被包含在返回的元组中。</p></li></ul><h2 id="标准解释器类型"><a href="#标准解释器类型" class="headerlink" title="标准解释器类型"></a>标准解释器类型</h2><p>此模块为许多类型提供了实现 Python 解释器所要求的名称。 它刻意地避免了包含某些仅在处理过程中偶然出现的类型，例如 <code>listiterator</code> 类型。</p><p>此种名称的典型应用如 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#isinstance" target="_blank" rel="noopener"><code>isinstance()</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#issubclass" target="_blank" rel="noopener"><code>issubclass()</code></a> 检测。</p><p>如果你要实例化这些类型中的任何一种，请注意其签名在不同 Python 版本之间可能出现变化。</p><p>以下类型有相应的标准名称定义：</p><ul><li><p><code>types.FunctionType</code></p></li><li><p><code>types.LambdaType</code> </p><p>用户自定义函数以及由 <a href="https://docs.python.org/zh-cn/3.8/reference/expressions.html#lambda" target="_blank" rel="noopener"><code>lambda</code></a> 表达式所创建函数的类型。 </p></li><li><p><code>types.GeneratorType</code> </p><p><a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-generator" target="_blank" rel="noopener">generator</a> 迭代器对象的类型，由生成器函数创建。 </p></li><li><p><code>types.CoroutineType</code> </p><p><a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-coroutine" target="_blank" rel="noopener">coroutine</a> 对象的类型，由 <a href="https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#async-def" target="_blank" rel="noopener"><code>async def</code></a> 函数创建。 </p></li><li><p><code>types.AsyncGeneratorType</code>  </p><p><a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-asynchronous-generator" target="_blank" rel="noopener">asynchronous generator</a> 迭代器对象的类型，由异步生成器函数创建。 </p></li><li><p><em>class</em> <code>types.CodeType</code>(<strong><em>kwargs</em>) </strong></p><p>代码对象的类型，例如 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#compile" target="_blank" rel="noopener"><code>compile()</code></a> 的返回值。</p><p>引发 <a href="https://docs.python.org/zh-cn/3.8/library/sys.html#auditing" target="_blank" rel="noopener">审计事件</a> <code>code.__new__</code> 附带参数 <code>code</code>, <code>filename</code>, <code>name</code>, <code>argcount</code>, <code>posonlyargcount</code>, <code>kwonlyargcount</code>, <code>nlocals</code>, <code>stacksize</code>, <code>flags</code>。</p><p>请注意被审核参数可能不匹配初始化器所要求的名称或位置。</p><ul><li><p><strong><code>replace</code>(*</strong>kwargs*)</p><p>返回代码对象的一个副本，使用指定的新字段值。</p></li></ul></li><li><p><code>types.CellType</code> </p><p>单元对象的类型：这种对象被用作函数中自由变量的容器。 </p></li><li><p><code>types.MethodType</code> </p><p>用户自定义类实例方法的类型。 </p></li><li><p><code>types.BuiltinFunctionType</code> </p></li><li><p><code>types.BuiltinMethodType</code> </p><p>内置函数例如 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#len" target="_blank" rel="noopener"><code>len()</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/sys.html#sys.exit" target="_blank" rel="noopener"><code>sys.exit()</code></a> 以及内置类方法的类型。 （这里所说的“内置”是指“以 C 语言编写”。） </p></li><li><p><code>types.WrapperDescriptorType</code> </p><p>某些内置数据类型和基类的方法的类型，例如 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__init__" target="_blank" rel="noopener"><code>object.__init__()</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__lt__" target="_blank" rel="noopener"><code>object.__lt__()</code></a>。 </p></li><li><p><code>types.MethodWrapperType</code> </p><p>某些内置数据类型和基类的 <em>绑定</em> 方法的类型。 例如 <code>object().__str__</code> 所属的类型。 </p></li><li><p><code>types.MethodDescriptorType</code> </p><p>某些内置数据类型方法例如 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#str.join" target="_blank" rel="noopener"><code>str.join()</code></a> 的类型。 </p></li><li><p><code>types.MethodDescriptorType</code> </p><p>某些内置数据类型 <em>非绑定</em> 类方法例如 <code>dict.__dict__[&#39;fromkeys&#39;]</code> 的类型 </p></li><li><p><code>types.ClassMethodDescriptorType</code> </p><p>某些内置数据类型 <em>非绑定</em> 类方法例如 <code>dict.__dict__[&#39;fromkeys&#39;]</code> 的类型。 </p><p><em>class</em> <code>types.ModuleType</code>(<em>name</em>, <em>doc=None</em>) </p></li></ul><p><a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-module" target="_blank" rel="noopener">模块</a> 的类型。 构造器接受待创建模块的名称及其作为可选项 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-docstring" target="_blank" rel="noopener">docstring</a>。</p><p>如果你希望设置各种由导入控制的属性，请使用 <a href="https://docs.python.org/zh-cn/3.8/library/importlib.html#importlib.util.module_from_spec" target="_blank" rel="noopener"><code>importlib.util.module_from_spec()</code></a> 来创建一个新模块。</p><ul><li><p><code>__doc__</code></p><p>模块的 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-docstring" target="_blank" rel="noopener">docstring</a>。 默认为 <code>None</code>。</p></li><li><p><code>__loader__</code></p><p>用于加载模块的 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-loader" target="_blank" rel="noopener">loader</a>。 默认为 <code>None</code>。<em>在 3.4 版更改:</em> 默认为 <code>None</code>。 之前该属性为可选项。</p></li><li><p><code>__name__</code></p><p>模块的名字</p></li><li><p><code>__package__</code></p><p>一个模块所属的 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-package" target="_blank" rel="noopener">package</a>。 如果模块为最高层级的（即不是任何特定包的组成部分）则该属性应设为 <code>&#39;&#39;</code>，否则它应设为特定包的名称 (如果模块本身也是一个包则名称可以为 <a href="https://docs.python.org/zh-cn/3.8/reference/import.html#__name__" target="_blank" rel="noopener"><code>__name__</code></a>)。 默认为 <code>None</code>。</p><p><em>class</em> <code>types.TracebackType</code>(<em>tb_next</em>, <em>tb_frame</em>, <em>tb_lasti</em>, <em>tb_lineno</em>) </p></li></ul><p>回溯对象的类型，例如 <code>sys.exc_info()[2]</code> 中的对象。</p><p>请查看 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#traceback-objects" target="_blank" rel="noopener">语言参考</a> 了解可用属性和操作的细节，以及动态地创建回溯对象的指南。</p><ul><li><p><code>types.FrameType</code></p><p>帧对象的类型，例如 <code>tb.tb_frame</code> 中的对象，其中 <code>tb</code> 是一个回溯对象。请查看 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#frame-objects" target="_blank" rel="noopener">语言参考</a> 了解可用属性和操作的细节。</p></li><li><p><code>types.GetSetDescriptorType</code></p><p> 使用 <code>PyGetSetDef</code> 在扩展模块中定义的对象的类型，例如 <code>FrameType.f_locals</code> 或 <code>array.array.typecode</code>。 此类型被用作对象属性的描述器；它的目的与 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#property" target="_blank" rel="noopener"><code>property</code></a> 类型相同，但专门针对在扩展模块中定义的类。 </p></li><li><p><code>types.MemberDescriptorType</code></p><p>使用 <code>PyMemberDef</code> 在扩展模块中定义的对象的类型，例如 <code>datetime.timedelta.days</code>。 此类型被用作使用标准转换函数的简单 C 数据成员的描述器；它的目的与 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#property" target="_blank" rel="noopener"><code>property</code></a> 类型相同，但专门针对在扩展模块中定义的类。</p><p><strong>CPython implementation detail:</strong> 在 Python 的其它实现中，此类型可能与 <code>GetSetDescriptorType</code> 完全相同。</p></li><li><p><em>class</em> <code>types.MappingProxyType</code>(<em>mapping</em>)</p><p>一个映射的只读代理。 它提供了对映射条目的动态视图，这意味着当映射发生改变时，视图会反映这些改变。</p><p><em>3.3 新版功能.</em></p><ul><li><p><code>key in proxy</code></p><p>如果下层的映射中存在键 <em>key</em> 则返回 <code>True</code>，否则返回 <code>False</code>。</p></li><li><p><code>proxy[key]</code></p><p>返回下层的映射中以 <em>key</em> 为键的项。 如果下层的映射中不存在键 <em>key</em> 则引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#KeyError" target="_blank" rel="noopener"><code>KeyError</code></a>。</p></li><li><p><code>iter(proxy)</code></p><p>返回由下层映射的键为元素的迭代器。 这是 <code>iter(proxy.keys())</code> 的快捷方式。</p></li><li><p><code>len(proxy)</code></p><p>返回下层映射中的项数。</p></li><li><p><code>copy</code>()</p><p>返回下层映射的浅拷贝。</p></li><li><p><code>get</code>(<em>key</em>[, <em>default</em>])</p><p>如果 <em>key</em> 存在于下层映射中则返回 <em>key</em> 的值，否则返回 <em>default</em>。 如果 <em>default</em> 未给出则默认为 <code>None</code>，因而此方法绝不会引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#KeyError" target="_blank" rel="noopener"><code>KeyError</code></a>。</p></li><li><p><code>items</code>()</p><p>返回由下层映射的项 (<code>(键, 值)</code> 对) 组成的一个新视图。</p></li><li><p><code>keys</code>()</p><p>返回由下层映射的键组成的一个新视图。</p></li><li><p><code>values</code>()</p><p>返回由下层映射的值组成的一个新视图。</p></li></ul></li></ul><h2 id="附加工具类和函数"><a href="#附加工具类和函数" class="headerlink" title="附加工具类和函数"></a>附加工具类和函数</h2><ul><li><p>class* <code>types.SimpleNamespace</code> </p><p>一个简单的 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#object" target="_blank" rel="noopener"><code>object</code></a> 子类，提供了访问其命名空间的属性，以及一个有意义的 repr。</p><p>不同于 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#object" target="_blank" rel="noopener"><code>object</code></a>，对于 <code>SimpleNamespace</code> 你可以添加和移除属性。 如果一个 <code>SimpleNamespace</code> 对象使用关键字参数进行初始化，这些参数会被直接加入下层命名空间。</p><p>此类型大致等价于以下代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleNamespace</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, /, **kwargs)</span>:</span></span><br><span class="line">        self.__dict__.update(kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        keys = sorted(self.__dict__)</span><br><span class="line">        items = (<span class="string">"&#123;&#125;=&#123;!r&#125;"</span>.format(k, self.__dict__[k]) <span class="keyword">for</span> k <span class="keyword">in</span> keys)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&#123;&#125;(&#123;&#125;)"</span>.format(type(self).__name__, <span class="string">", "</span>.join(items))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__dict__ == other.__dict__</span><br></pre></td></tr></table></figure><p> <code>SimpleNamespace</code> 可被用于替代 <code>class NS: pass</code>。 但是，对于结构化记录类型则应改用 <a href="https://docs.python.org/zh-cn/3.8/library/collections.html#collections.namedtuple" target="_blank" rel="noopener"><code>namedtuple()</code></a>。 </p></li><li><p><code>types.DynamicClassAttribute</code>(<em>fget=None</em>, <em>fset=None</em>, <em>fdel=None</em>, <em>doc=None</em>) </p></li></ul><p>在类上访问 <strong>getattr</strong> 的路由属性。</p><p>这是一个描述器，用于定义通过实例与通过类访问时具有不同行为的属性。 当实例访问时保持正常行为，但当类访问属性时将被路由至类的 <strong>getattr</strong> 方法；这是通过引发 AttributeError 来完成的。</p><p>这样就允许有在实例上激活的特征属性，同时又有在类上的同名虚拟属性（一个这样的例子是 Enum）。</p><h2 id="协程工具函数"><a href="#协程工具函数" class="headerlink" title="协程工具函数"></a>协程工具函数</h2><p> <code>types.coroutine</code>(<em>gen_func</em>) </p><p>此函数可将 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-generator" target="_blank" rel="noopener">generator</a> 函数转换为返回基于生成器的协程的 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-coroutine-function" target="_blank" rel="noopener">coroutine function</a>。 基于生成器的协程仍然属于 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-generator-iterator" target="_blank" rel="noopener">generator iterator</a>，但同时又可被视为 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-coroutine" target="_blank" rel="noopener">coroutine</a> 对象兼 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-awaitable" target="_blank" rel="noopener">awaitable</a>。 不过，它没有必要实现 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__await__" target="_blank" rel="noopener"><code>__await__()</code></a> 方法。</p><p>如果 <em>gen_func</em> 是一个生成器函数，它将被原地修改。</p><p>如果 <em>gen_func</em> 不是一个生成器函数，则它会被包装。 如果它返回一个 <a href="https://docs.python.org/zh-cn/3.8/library/collections.abc.html#collections.abc.Generator" target="_blank" rel="noopener"><code>collections.abc.Generator</code></a> 的实例，该实例将被包装在一个 <em>awaitable</em> 代理对象中。 所有其他对象类型将被原样返回。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库-types&quot;&gt;&lt;a href=&quot;#python-标准库-types&quot; class=&quot;headerlink&quot; title=&quot;python 标准库 types&quot;&gt;&lt;/a&gt;python 标准库 types&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/jeffsui/app_image_resource/blob/master/20200207_RIP.jpg?raw=true&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/categories/python/standard-library/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="types" scheme="https://pinghailinfeng.gitee.io/tags/types/"/>
    
  </entry>
  
  <entry>
    <title>python standard library statistics</title>
    <link href="https://pinghailinfeng.gitee.io/2020/02/06/python-standard-library-statistics/"/>
    <id>https://pinghailinfeng.gitee.io/2020/02/06/python-standard-library-statistics/</id>
    <published>2020-02-06T12:51:05.000Z</published>
    <updated>2020-02-10T02:35:57.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库-statistics-数学统计函数"><a href="#python-标准库-statistics-数学统计函数" class="headerlink" title="python 标准库 statistics 数学统计函数"></a>python 标准库 statistics 数学统计函数</h1><p><img src="http://up.enterdesk.com/edpic_source/f7/89/27/f7892747c14c5f25b62b651023891d86.jpg" alt></p><a id="more"></a><blockquote><p> I have self-doubt. I have insecurity. I have fear of failure. I have nights when I show up at the arena and I’m like, ‘My back hurts, my feet hurt, my knees hurt. I don’t have it. I just want to chill.’ We all have self-doubt. You don’t deny it, but you also don’t capitulate to it. You embrace it.<br>我有自我怀疑。我有不安全感。我害怕失败。当我出现在竞技场的时候，我会说，‘我的背疼，我的脚疼，我的膝盖疼。我没有打赢的信心。我只是想冷静一下。’我们都有自我怀疑。你不要否认，但你也不屈服于它。你要拥抱它。 </p><p>​                                                                                                                                                  by   Kobe Bryant </p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=27867449&auto=0&height=66"></iframe><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p><strong>源代码:</strong> <a href="https://github.com/python/cpython/tree/3.8/Lib/statistics.py" target="_blank" rel="noopener">Lib/statistics.py</a></p><p><em>主要方法</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">==================  ==================================================</span><br><span class="line">Function            Description</span><br><span class="line">==================  ==================================================</span><br><span class="line">mean                Arithmetic mean (average) of data.</span><br><span class="line">fmean               Fast, floating point arithmetic mean.</span><br><span class="line">geometric_mean      Geometric mean of data.</span><br><span class="line">harmonic_mean       Harmonic mean of data.</span><br><span class="line">median              Median (middle value) of data.</span><br><span class="line">median_low          Low median of data.</span><br><span class="line">median_high         High median of data.</span><br><span class="line">median_grouped      Median, <span class="keyword">or</span> <span class="number">50</span>th percentile, of grouped data.</span><br><span class="line">mode                Mode (most common value) of data.</span><br><span class="line">multimode           List of modes (most common values of data).</span><br><span class="line">quantiles           Divide data into intervals <span class="keyword">with</span> equal probability.</span><br><span class="line">==================  ==================================================</span><br></pre></td></tr></table></figure><hr><p>该模块提供了用于计算数字 (<a href="https://docs.python.org/zh-cn/3.8/library/numbers.html#numbers.Real" target="_blank" rel="noopener"><code>Real</code></a>-valued) 数据的数理统计量的函数。</p><p>此模块并不是诸如 <a href="https://numpy.org/" target="_blank" rel="noopener">NumPy</a> ， <a href="https://www.scipy.org/" target="_blank" rel="noopener">SciPy</a> 等第三方库或者诸如 Minitab ， SAS ， Matlab 等针对专业统计学家的专有全功能统计软件包的竟品。此模块针对图形和科学计算器的水平。</p><p>除非明确注释，这些函数支持 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a> ， <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#float" target="_blank" rel="noopener"><code>float</code></a> ， <a href="https://docs.python.org/zh-cn/3.8/library/decimal.html#decimal.Decimal" target="_blank" rel="noopener"><code>Decimal</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/library/fractions.html#fractions.Fraction" target="_blank" rel="noopener"><code>Fraction</code></a> 。当前不支持同其他类型（是否在数字塔中）的行为。混合类型的集合也是未定义的，并且依赖于实现。如果你输入的数据由混合类型组成，你应该能够使用 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#map" target="_blank" rel="noopener"><code>map()</code></a> 来确保一个一致的结果，比如： <code>map(float, input_data)</code> 。</p><h2 id="中心位置的平均值和度量"><a href="#中心位置的平均值和度量" class="headerlink" title="中心位置的平均值和度量"></a>中心位置的平均值和度量</h2><p> 这些函数计算一个整体或样本的平均值或者特定值 </p><table><thead><tr><th><a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.mean" target="_blank" rel="noopener"><code>mean()</code></a></th><th>数据的算术平均数（“平均数”）。</th></tr></thead><tbody><tr><td><a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.fmean" target="_blank" rel="noopener"><code>fmean()</code></a></td><td>快速的，浮点算数平均数。</td></tr><tr><td><a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.geometric_mean" target="_blank" rel="noopener"><code>geometric_mean()</code></a></td><td>数据的几何平均数</td></tr><tr><td><a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.harmonic_mean" target="_blank" rel="noopener"><code>harmonic_mean()</code></a></td><td>数据的调和均值</td></tr><tr><td><a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.median" target="_blank" rel="noopener"><code>median()</code></a></td><td>数据的中位数（中间值）</td></tr><tr><td><a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.median_low" target="_blank" rel="noopener"><code>median_low()</code></a></td><td>数据的低中位数</td></tr><tr><td><a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.median_high" target="_blank" rel="noopener"><code>median_high()</code></a></td><td>数据的高中位数</td></tr><tr><td><a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.median_grouped" target="_blank" rel="noopener"><code>median_grouped()</code></a></td><td>分组数据的中位数，即第50个百分点。</td></tr><tr><td><a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.mode" target="_blank" rel="noopener"><code>mode()</code></a></td><td>离散的或标称的数据的单模（最常见的值）。</td></tr><tr><td><a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.multimode" target="_blank" rel="noopener"><code>multimode()</code></a></td><td>离散的或标称的数据的模式列表（最常见的值）。</td></tr><tr><td><a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.quantiles" target="_blank" rel="noopener"><code>quantiles()</code></a></td><td>将数据以相等的概率分为多个间隔。</td></tr></tbody></table><h2 id="传播措施"><a href="#传播措施" class="headerlink" title="传播措施"></a>传播措施</h2><p>这些函数计算多少总体或者样本偏离典型值或平均值的度量。</p><table><thead><tr><th><a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.pstdev" target="_blank" rel="noopener"><code>pstdev()</code></a></th><th>数据的总体标准差</th></tr></thead><tbody><tr><td><a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.pvariance" target="_blank" rel="noopener"><code>pvariance()</code></a></td><td>数据的总体方差</td></tr><tr><td><a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.stdev" target="_blank" rel="noopener"><code>stdev()</code></a></td><td>数据的样本标准差</td></tr><tr><td><a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.variance" target="_blank" rel="noopener"><code>variance()</code></a></td><td>数据的样本方差</td></tr></tbody></table><h2 id="函数细节"><a href="#函数细节" class="headerlink" title="函数细节"></a>函数细节</h2><p>这些函数不需要对提供给它们的数据进行排序。但是，为了方便阅读，大多数例子展示的是已排序的序列。</p><ul><li><p><code>statistics.mean</code>(<em>data</em>)</p><p>返回 <em>data</em> 的样本算术平均数，形式为序列或迭代器。算术平均数是数据之和与数据点个数的商。通常称作“平均数”，尽管它指示诸多数学平均数之一。它是数据的中心位置的度量。若 <em>data</em> 为空，将会引发 <a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.StatisticsError" target="_blank" rel="noopener"><code>StatisticsError</code></a>。一些用法示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mean([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>])</span><br><span class="line"><span class="number">2.8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mean([<span class="number">-1.0</span>, <span class="number">2.5</span>, <span class="number">3.25</span>, <span class="number">5.75</span>])</span><br><span class="line"><span class="number">2.625</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> fractions <span class="keyword">import</span> Fraction <span class="keyword">as</span> F</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mean([F(<span class="number">3</span>, <span class="number">7</span>), F(<span class="number">1</span>, <span class="number">21</span>), F(<span class="number">5</span>, <span class="number">3</span>), F(<span class="number">1</span>, <span class="number">3</span>)])</span><br><span class="line">Fraction(<span class="number">13</span>, <span class="number">21</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal <span class="keyword">as</span> D</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mean([D(<span class="string">"0.5"</span>), D(<span class="string">"0.75"</span>), D(<span class="string">"0.625"</span>), D(<span class="string">"0.375"</span>)])</span><br><span class="line">Decimal(<span class="string">'0.5625'</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>statistics.fmean</code>(<em>data</em>) </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">将浮点数转换成 data 并且计算算术平均数。</span><br><span class="line"></span><br><span class="line">此函数的运行速度比 mean() 函数快并且它总是返回一个 float。 data 可以为序列或迭代器。 如果输入数据集为空，则会引发 StatisticsError。</span><br></pre></td></tr></table></figure></li><li><p><code>statistics.geometric_mean</code>(<em>data</em>) </p><p>返回 <em>data</em> 调和均值，该参数可以是序列或包含实数值的可迭代对象。</p><p>调和均值,也叫次相反均值，所有数据的倒数的算术平均数 <a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.mean" target="_blank" rel="noopener"><code>mean()</code></a> 的倒数。比如说，数据 <em>a</em> ， <em>b</em> ， <em>c</em> 的调和均值等于 <code>3/(1/a + 1/b + 1/c)</code> 。如果其中一个值为零，结果为零。</p><p>调和均值是一种均值类型，是数据中心位置的度量。它通常适合于求比率和比例的平均值，比如速率。</p><p>假设一辆车在 40 km/hr 的速度下行驶了 10 km ，然后又以 60 km/hr 的速度行驶了 10 km 。车辆的平均速率是多少？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>harmonic_mean([<span class="number">40</span>, <span class="number">60</span>])</span><br><span class="line"><span class="number">48.0</span></span><br></pre></td></tr></table></figure><p>假设一名投资者在三家公司各购买了等价值的股票，以 2.5， 3 ， 10 的 P/E (价格/收益) 率。投资者投资组合的平均市盈率是多少？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>harmonic_mean([<span class="number">2.5</span>, <span class="number">3</span>, <span class="number">10</span>])  <span class="comment"># For an equal investment portfolio.</span></span><br><span class="line"><span class="number">3.6</span></span><br></pre></td></tr></table></figure><p>如果 <em>data</em> 为空或者 任何一个元素的值小于零，会引发 <a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.StatisticsError" target="_blank" rel="noopener"><code>StatisticsError</code></a> 。</p><p>当前算法在输入中遇到零时会提前退出。这意味着不会测试后续输入的有效性。（此行为将来可能会更改。）</p></li><li><p><code>statistics.median</code>(<em>data</em>) </p><p>使用普通的“取中间两数平均值”方法返回数值数据的中位数（中间值）。 如果 <em>data</em> 为空，则将引发 <a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.StatisticsError" target="_blank" rel="noopener"><code>StatisticsError</code></a>。 <em>data</em> 可以是序列或可迭代对象。</p><p>中位数是衡量中间位置的可靠方式，并且较少受到极端值的影响。 当数据点的总数为奇数时，将返回中间数据点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>median([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>])</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>当数据点的总数为偶数时，中位数将通过对两个中间值求平均进行插值得出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>median([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>])</span><br><span class="line"><span class="number">4.0</span></span><br></pre></td></tr></table></figure><p>这适用于当你的数据是离散的，并且你不介意中位数不是实际数据点的情况。</p><p>如果数据是有序的（支持排序操作）但不是数字（不支持加法），请考虑改用 <a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.median_low" target="_blank" rel="noopener"><code>median_low()</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.median_high" target="_blank" rel="noopener"><code>median_high()</code></a>。</p></li><li><p><code>statistics.median_low</code>(<em>data</em>) </p><p>返回数值数据的低中位数。 如果 <em>data</em> 为空则将引发 <a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.StatisticsError" target="_blank" rel="noopener"><code>StatisticsError</code></a>。 <em>data</em> 可以是序列或可迭代对象。</p><p>低中位数一定是数据集的成员。 当数据点总数为奇数时，将返回中间值。 当其为偶数时，将返回两个中间值中较小的那个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>median_low([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>])</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>median_low([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>])</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>当你的数据是离散的，并且你希望中位数是一个实际数据点而非插值结果时可以使用低中位数。</p></li><li><p><code>statistics.median_high</code>(<em>data</em>) </p><p>​    返回数据的高中位数。 如果 <em>data</em> 为空则将引发 <a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.StatisticsError" target="_blank" rel="noopener"><code>StatisticsError</code></a>。 <em>data</em> 可以是序列或可迭代对象。</p><p>高中位数一定是数据集的成员。 当数据点总数为奇数时，将返回中间值。 当其为偶数时，将返回两个中间值中较大的那个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>median_high([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>])</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>median_high([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>])</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>当你的数据是离散的，并且你希望中位数是一个实际数据点而非插值结果时可以使用高中位数。</p></li><li><p><code>statistics.median_grouped</code>(<em>data</em>, <em>interval=1</em>) </p><p>返回分组的连续数据的中位数，根据第 50 个百分点的位置使用插值来计算。 如果 <em>data</em> 为空则将引发 <a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.StatisticsError" target="_blank" rel="noopener"><code>StatisticsError</code></a>。 <em>data</em> 可以是序列或可迭代对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>median_grouped([<span class="number">52</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>])</span><br><span class="line"><span class="number">52.5</span></span><br></pre></td></tr></table></figure><p>在下面的示例中，数据已经过舍入，这样每个值都代表数据分类的中间点，例如 1 是 0.5–1.5 分类的中间点，2 是 1.5–2.5 分类的中间点，3 是 2.5–3.5 的中间点等待。 根据给定的数据，中间值应落在 3.5–4.5 分类之内，并可使用插值法来进行估算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>median_grouped([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="number">3.7</span></span><br></pre></td></tr></table></figure><p>可选参数 <em>interval</em> 表示分类间隔，默认值为 1。 改变分类间隔自然会改变插件结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>median_grouped([<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>], interval=<span class="number">1</span>)</span><br><span class="line"><span class="number">3.25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>median_grouped([<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>], interval=<span class="number">2</span>)</span><br><span class="line"><span class="number">3.5</span></span><br></pre></td></tr></table></figure><p>此函数不会检查数据点之间是否至少相隔 <em>interval</em> 的距离。</p></li><li><p><code>statistics.mode</code>(<em>data</em>) </p><p>根据离散或标称的 <em>data</em> 返回单个最觉的数据点。 此模式（如果存在）是最典型的值，并可用来度量中心的位置。</p><p>如果存在具有相同频率的多个模式，则返回在 <em>data</em> 中遇到的第一个。 如果想要其中最小或最大的一个，请使用 <code>min(multimode(data))</code> 或 <code>max(multimode(data))</code>。 如果输入的 <em>data</em> 为空，则会引发 <a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.StatisticsError" target="_blank" rel="noopener"><code>StatisticsError</code></a>。</p><p><code>mode</code> 将假定是离散数据并返回一个单一的值。 这是通常的学校教学中标准的处理方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; mode([1, 1, 2, 3, 3, 3, 3, 4])</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>此模式的独特之处在于它是这个包中唯一还可应用于标称（非数字）数据的统计信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; mode([&quot;red&quot;, &quot;blue&quot;, &quot;blue&quot;, &quot;red&quot;, &quot;green&quot;, &quot;red&quot;, &quot;red&quot;])</span><br><span class="line">&apos;red&apos;</span><br></pre></td></tr></table></figure><p><em>在 3.8 版更改:</em> 现在会通过返回所遇到的第一个模式来处理多模数据集。 之前它会在遇到超过一个的模式时引发 <a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.StatisticsError" target="_blank" rel="noopener"><code>StatisticsError</code></a>。</p></li><li><p><code>statistics.multimode</code>(<em>data</em>) </p><p>返回最频繁出现的值的列表，并按它们在 <em>data</em> 中首次出现的位置排序。 如果存在多种模式则将返回一个以上的模式，或者如果 <em>data</em> 为空则将返回空列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>multimode(<span class="string">'aabbbbccddddeeffffgg'</span>)</span><br><span class="line">[<span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'f'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>multimode(<span class="string">''</span>)</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><p><em>3.8 新版功能.</em> </p></li><li><p><code>statistics.pstdev</code>(<em>data</em>, <em>mu=None</em>) </p><p>返回总体标准差（总体方差的平方根）。 请参阅 <a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.pvariance" target="_blank" rel="noopener"><code>pvariance()</code></a> 了解参数和其他细节。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pstdev([<span class="number">1.5</span>, <span class="number">2.5</span>, <span class="number">2.5</span>, <span class="number">2.75</span>, <span class="number">3.25</span>, <span class="number">4.75</span>])</span><br><span class="line"><span class="number">0.986893273527251</span></span><br></pre></td></tr></table></figure></li><li><p><code>statistics.pvariance</code>(<em>data</em>, <em>mu=None</em>) </p><p>返回非空序列或包含实数值的可迭代对象 <em>data</em> 的总体方差。 方差或称相对于均值的二阶距，是对数据变化幅度（延展度或分散度）的度量。 方差值较大表明数据的散布范围较大；方差值较小表明它紧密聚集于均值附近。</p><p>如果给出了可选的第二个参数 <em>mu</em>，它通常是 <em>data</em> 的均值。 它也可以被用来计算相对于一个非均值点的二阶距。 如果该参数省略或为 <code>None</code> (默认值)，则会自动进行算术均值的计算。</p><p>使用此函数可根据所有数值来计算方差。 要根据一个样本来估算方差，通常 <a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.variance" target="_blank" rel="noopener"><code>variance()</code></a> 函数是更好的选择。</p><p>如果 <em>data</em> 为空则会引发 <a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.StatisticsError" target="_blank" rel="noopener"><code>StatisticsError</code></a>。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; data = [0.0, 0.25, 0.25, 1.25, 1.5, 1.75, 2.75, 3.25]</span><br><span class="line">&gt;&gt;&gt; pvariance(data)</span><br><span class="line">1.25</span><br></pre></td></tr></table></figure><p>如果你已经计算过数据的平均值，你可以将其作为可选的第二个参数 <em>mu</em> 传入以避免重复计算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mu = mean(data)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pvariance(data, mu)</span><br><span class="line"><span class="number">1.25</span></span><br></pre></td></tr></table></figure><p>同样也支持使用 Decimal 和 Fraction 值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal <span class="keyword">as</span> D</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pvariance([D(<span class="string">"27.5"</span>), D(<span class="string">"30.25"</span>), D(<span class="string">"30.25"</span>), D(<span class="string">"34.5"</span>), D(<span class="string">"41.75"</span>)])</span><br><span class="line">Decimal(<span class="string">'24.815'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> fractions <span class="keyword">import</span> Fraction <span class="keyword">as</span> F</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pvariance([F(<span class="number">1</span>, <span class="number">4</span>), F(<span class="number">5</span>, <span class="number">4</span>), F(<span class="number">1</span>, <span class="number">2</span>)])</span><br><span class="line">Fraction(<span class="number">13</span>, <span class="number">72</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>statistics.stdev</code>(<em>data</em>, <em>xbar=None</em>) </p><p>返回样本标准差（样本方差的平方根）。 请参阅 <a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.variance" target="_blank" rel="noopener"><code>variance()</code></a> 了解参数和其他细节。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stdev([<span class="number">1.5</span>, <span class="number">2.5</span>, <span class="number">2.5</span>, <span class="number">2.75</span>, <span class="number">3.25</span>, <span class="number">4.75</span>])</span><br><span class="line"><span class="number">1.0810874155219827</span></span><br></pre></td></tr></table></figure></li><li><p><code>statistics.variance</code>(<em>data</em>, <em>xbar=None</em>) </p><p>返回包含至少两个实数值的可迭代对象 <em>data</em> 的样本方差。 方差或称相对于均值的二阶矩，是对数据变化幅度（延展度或分散度）的度量。 方差值较大表明数据的散布范围较大；方差值较小表明它紧密聚集于均值附近。</p><p>如果给出了可选的第二个参数 <em>xbar</em>，它应当是 <em>data</em> 的均值。 如果该参数省略或为 <code>None</code> (默认值)，则会自动进行均值的计算。</p><p>当你的数据是总体数据的样本时请使用此函数。 要根据整个总体数据来计算方差，请参见 <a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.pvariance" target="_blank" rel="noopener"><code>pvariance()</code></a>。</p><p>如果 <em>data</em> 包含的值少于两个则会引发 <a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.StatisticsError" target="_blank" rel="noopener"><code>StatisticsError</code></a>。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; data = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]</span><br><span class="line">&gt;&gt;&gt; variance(data)</span><br><span class="line">1.3720238095238095</span><br></pre></td></tr></table></figure><p>如果你已经计算过数据的平均值，你可以将其作为可选的第二个参数 <em>xbar</em> 传入以避免重复计算：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; m = mean(data)</span><br><span class="line">&gt;&gt;&gt; variance(data, m)</span><br><span class="line">1.3720238095238095</span><br></pre></td></tr></table></figure><p>此函数不会试图检查你所传入的 <em>xbar</em> 是否为真实的平均值。 使用任意值作为 <em>xbar</em> 可能导致无效或不可能的结果。</p><p>同样也支持使用 Decimal 和 Fraction 值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal <span class="keyword">as</span> D</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>variance([D(<span class="string">"27.5"</span>), D(<span class="string">"30.25"</span>), D(<span class="string">"30.25"</span>), D(<span class="string">"34.5"</span>), D(<span class="string">"41.75"</span>)])</span><br><span class="line">Decimal(<span class="string">'31.01875'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> fractions <span class="keyword">import</span> Fraction <span class="keyword">as</span> F</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>variance([F(<span class="number">1</span>, <span class="number">6</span>), F(<span class="number">1</span>, <span class="number">2</span>), F(<span class="number">5</span>, <span class="number">3</span>)])</span><br><span class="line">Fraction(<span class="number">67</span>, <span class="number">108</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>statistics.quantiles</code>(<em>data</em>, <em>**, </em>n=4<em>, </em>method=’exclusive’*) </p><p>将 <em>data</em> 分隔为具有相等概率的 <em>n</em> 个连续区间。 返回分隔这些区间的 <code>n - 1</code> 个分隔点的列表。</p><p>将 <em>n</em> 设为 4 以使用四分位（默认值）。 将 <em>n</em> 设为 10 以使用十分位。 将 <em>n</em> 设为 100 以使用百分位，即给出 99 个分隔点来将 <em>data</em> 分隔为 100 个大小相等的组。 如果 <em>n</em> 小于 1 则将引发 <a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.StatisticsError" target="_blank" rel="noopener"><code>StatisticsError</code></a>。</p><p><em>data</em> 可以是包含样本数据的任意可迭代对象。 为了获得有意义的结果，<em>data</em> 中数据点的数量应当大于 <em>n</em>。 如果数据点的数量小于两个则将引发 <a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.StatisticsError" target="_blank" rel="noopener"><code>StatisticsError</code></a>。</p><p>分隔点是通过对两个最接近的数据点进行线性插值得到的。 例如，如果一个分隔点落在两个样本值 <code>100</code> 和 <code>112</code> 之间距离三分之一的位置，则分隔点的取值将为 <code>104</code>。</p><p><em>method</em> 用于计算分位值，它会由于 <em>data</em> 是包含还是排除总体的最低和最高可能值而有所不同。</p><p>默认 <em>method</em> 是 “唯一的” 并且被用于在总体中数据采样这样可以有比样本中找到的更多的极端值。落在 <em>m</em> 个排序数据点的第 <em>i-th</em> 个以下的总体部分被计算为 <code>i / (m + 1)</code> 。给定九个样本值，方法排序它们并且分配一下的百分位： 10%, 20%, 30%, 40%, 50%, 60%, 70%, 80%, 90% 。</p><p>将 <em>method</em> 设为 “inclusive” 可用于描述总体数据或已明确知道包含有总体数据中最极端值的样本。 <em>data</em> 中的最小值会被作为第 0 个百分位而最大值会被作为第 100 个百分位。 总体数据里处于 <em>m</em> 个已排序数据点中 <em>第 i 个</em> 以下的部分会以 <code>(i - 1) / (m - 1)</code> 来计算。 给定 11 个样本值，该方法会对它们进行排序并赋予以下百分位: 0%, 10%, 20%, 30%, 40%, 50%, 60%, 70%, 80%, 90%, 100%。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Decile cut points for empirically sampled data</span><br><span class="line">&gt;&gt;&gt; data = [105, 129, 87, 86, 111, 111, 89, 81, 108, 92, 110,</span><br><span class="line">...         100, 75, 105, 103, 109, 76, 119, 99, 91, 103, 129,</span><br><span class="line">...         106, 101, 84, 111, 74, 87, 86, 103, 103, 106, 86,</span><br><span class="line">...         111, 75, 87, 102, 121, 111, 88, 89, 101, 106, 95,</span><br><span class="line">...         103, 107, 101, 81, 109, 104]</span><br><span class="line">&gt;&gt;&gt; [round(q, 1) for q in quantiles(data, n=10)]</span><br><span class="line">[81.0, 86.2, 89.0, 99.4, 102.5, 103.6, 106.0, 109.8, 111.0]</span><br></pre></td></tr></table></figure><p><em>3.8 新版功能.</em></p></li></ul><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>只定义了一个异常：</p><ul><li><p><em>exception</em> <code>statistics.StatisticsError</code></p><p><a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#ValueError" target="_blank" rel="noopener"><code>ValueError</code></a> 的子类，表示统计相关的异常。</p></li></ul><h2 id="NormalDist对象"><a href="#NormalDist对象" class="headerlink" title="NormalDist对象"></a><code>NormalDist</code>对象</h2><p><a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.NormalDist" target="_blank" rel="noopener"><code>NormalDist</code></a> 工具可用于创建和操纵 <a href="http://www.stat.yale.edu/Courses/1997-98/101/ranvar.htm" target="_blank" rel="noopener">随机变量</a> 的正态分布。 这个类将数据度量值的平均值和标准差作为单一实体来处理。</p><p>正态分布的概念来自于 <a href="https://en.wikipedia.org/wiki/Central_limit_theorem" target="_blank" rel="noopener">中央极限定理</a> 并且在统计学中有广泛的应用。</p><ul><li><p><em>class</em> <code>statistics.NormalDist</code>(<em>mu=0.0</em>, <em>sigma=1.0</em></p><p>返回一个新的 <em>NormalDist</em> 对象，其中 <em>mu</em> 代表 <a href="https://en.wikipedia.org/wiki/Arithmetic_mean" target="_blank" rel="noopener">算术平均值</a> 而 <em>sigma</em> 代表 <a href="https://en.wikipedia.org/wiki/Standard_deviation" target="_blank" rel="noopener">标准差</a>。</p><p>若 <em>sigma</em> 为负数，将会引发 <a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.StatisticsError" target="_blank" rel="noopener"><code>StatisticsError</code></a>。</p><ul><li><p><code>mean</code></p><p>一个只读特征属性，表示特定正态分布的 <a href="https://en.wikipedia.org/wiki/Arithmetic_mean" target="_blank" rel="noopener">算术平均值</a>。</p></li><li><p><code>median</code></p><p>一个只读特征属性，表示特定正态分布的 <a href="https://en.wikipedia.org/wiki/Median" target="_blank" rel="noopener">中位数</a>。</p></li><li><p><code>mode</code></p><p>一个只读特征属性，表示特定正态分布的 <a href="https://en.wikipedia.org/wiki/Mode_(statistics" target="_blank" rel="noopener">模式</a>)。</p></li><li><p><code>stdev</code></p><p>一个只读特征属性，表示特定正态分布的 <a href="https://en.wikipedia.org/wiki/Standard_deviation" target="_blank" rel="noopener">标准差</a>。</p></li><li><p><code>variance</code><a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.NormalDist.variance" target="_blank" rel="noopener">¶</a></p><p>一个只读特征属性，表示特定正态分布的 <a href="https://en.wikipedia.org/wiki/Variance" target="_blank" rel="noopener">方差</a>。 等于标准差的平方</p></li></ul></li><li><p><em>classmethod</em> <code>from_samples</code>(<em>data</em>)</p><p>传入使用 <a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.fmean" target="_blank" rel="noopener"><code>fmean()</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.stdev" target="_blank" rel="noopener"><code>stdev()</code></a> 基于 <em>data</em> 估算出的 <em>mu</em> 和 <em>sigma</em> 形参创建一个正态分布实例。<em>data</em> 可以是任何 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-iterable" target="_blank" rel="noopener">iterable</a> 并且应当包含能被转换为 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#float" target="_blank" rel="noopener"><code>float</code></a> 类型的值。 如果 <em>data</em> 不包含至少两个元素，则会引发 <a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.StatisticsError" target="_blank" rel="noopener"><code>StatisticsError</code></a>，因为估算中心值至少需要一个点而估算分散度至少需要两个点。</p></li><li><p><code>samples</code>(<em>n</em>, <em>**, </em>seed=None*)</p><p>对于给定的平均值和标准差生成 <em>n</em> 个随机样本。 返回一个由 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#float" target="_blank" rel="noopener"><code>float</code></a> 值组成的 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#list" target="_blank" rel="noopener"><code>list</code></a>。当给定 <em>seed</em> 时，创建一个新的底层随机数生成器实例。 这适用于创建可重现的结果，即使对于多线程上下文也有效。</p></li><li><p><code>pdf</code>(<em>x</em>)</p><p>使用 <a href="https://en.wikipedia.org/wiki/Probability_density_function" target="_blank" rel="noopener">概率密度函数 (pdf)</a>，计算一个随机变量 <em>X</em> 趋向于给定值 <em>x</em> 的相对可能性。 在数学意义上，它是当 <em>dx</em> 趋向于零时比率 <code>P(x &lt;= X &lt; x+dx) / dx</code> 的极限。相对可能性的计算方法是用一个狭窄区间内某个样本出现的概率除以区间的宽度（因此使用“密度”一词）。 由于可能性是相对于其他点的，它的值可以大于 1.0。</p></li><li><p><code>cdf</code>(<em>x</em>)</p><p>使用 <a href="https://en.wikipedia.org/wiki/Cumulative_distribution_function" target="_blank" rel="noopener">累积分布函数 (cdf)</a>，计算一个随机变量 <em>X</em> 小于等于 <em>x</em> 的概率。 在数学上，它表示为 <code>P(X &lt;= x)</code>。</p></li><li><p><code>inv_cdf</code>(<em>p</em>)</p><p>计算反向累积分布函数，也称为 <a href="https://en.wikipedia.org/wiki/Quantile_function" target="_blank" rel="noopener">分位数函数</a> 或 <a href="https://www.statisticshowto.datasciencecentral.com/inverse-distribution-function/" target="_blank" rel="noopener">百分点</a> 函数。 在数学上，它表示为 <code>x : P(X &lt;= x) = p</code>。找出随机变量 <em>X</em> 的值 <em>x</em> 使得该变量小于等于该值的概率等于给定的概率 <em>p</em>。</p></li><li><p><code>overlap</code>(<em>other</em>)</p><p>测量两个正态概率分布之间的一致性。 返回介于 0.0 和 1.0 之间的值，给出 <a href="https://www.rasch.org/rmt/rmt101r.htm" target="_blank" rel="noopener">两个概率密度函数的重叠区域</a>。</p></li><li><p><code>quantiles</code>(<em>n=4</em>)</p><p>将指定正态分布划分为 <em>n</em> 个相等概率的连续分隔区。 返回这些分隔区对应的 (n - 1) 个分隔点的列表。将 <em>n</em> 设为 4 以使用四分位（默认值）。 将 <em>n</em> 设为 10 以使用十分位。将 <em>n</em> 设为 100 以使用百分位，即给出 99 个分隔点来将正态分布分隔为 100 个大小相等的组。</p></li></ul><p><a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.NormalDist" target="_blank" rel="noopener"><code>NormalDist</code></a> 的实例支持加上、减去、乘以或除以一个常量。 这些运算被用于转换和缩放。 例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; temperature_february = NormalDist(5, 2.5)             # Celsius</span><br><span class="line">&gt;&gt;&gt; temperature_february * (9/5) + 32                     # Fahrenheit</span><br><span class="line">NormalDist(mu=41.0, sigma=4.5)</span><br></pre></td></tr></table></figure><p>不允许一个常量除以 <a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.NormalDist" target="_blank" rel="noopener"><code>NormalDist</code></a> 的实例，因为结果将不是正态分布。</p><p>由于正态分布是由独立变量的累加效应产生的，因此允许表示为 <a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.NormalDist" target="_blank" rel="noopener"><code>NormalDist</code></a> 实例的 <a href="https://en.wikipedia.org/wiki/Sum_of_normally_distributed_random_variables" target="_blank" rel="noopener">两组独立正态分布的随机变量相加和相减</a>。 例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>birth_weights = NormalDist.from_samples([<span class="number">2.5</span>, <span class="number">3.1</span>, <span class="number">2.1</span>, <span class="number">2.4</span>, <span class="number">2.7</span>, <span class="number">3.5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>drug_effects = NormalDist(<span class="number">0.4</span>, <span class="number">0.15</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>combined = birth_weights + drug_effects</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>round(combined.mean, <span class="number">1</span>)</span><br><span class="line"><span class="number">3.1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>round(combined.stdev, <span class="number">1</span>)</span><br><span class="line"><span class="number">0.5</span></span><br></pre></td></tr></table></figure><h3 id="NormalDist-示例和用法"><a href="#NormalDist-示例和用法" class="headerlink" title="NormalDist 示例和用法"></a><a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.NormalDist" target="_blank" rel="noopener"><code>NormalDist</code></a> 示例和用法</h3><p><a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.NormalDist" target="_blank" rel="noopener"><code>NormalDist</code></a> 适合用来解决经典概率问题。</p><p>举例来说，如果 <a href="https://nces.ed.gov/programs/digest/d17/tables/dt17_226.40.asp" target="_blank" rel="noopener">SAT 考试的历史数据</a> 显示分数呈平均值为 1060 且标准差为 195 的正态分布，则可以确定考试分数处于 1100 和 1200 之间的学生的百分比舍入到最接近的整数应为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sat = NormalDist(<span class="number">1060</span>, <span class="number">195</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fraction = sat.cdf(<span class="number">1200</span> + <span class="number">0.5</span>) - sat.cdf(<span class="number">1100</span> - <span class="number">0.5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>round(fraction * <span class="number">100.0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="number">18.4</span></span><br></pre></td></tr></table></figure><p>求 SAT 分数的 <a href="https://en.wikipedia.org/wiki/Quartile" target="_blank" rel="noopener">四分位</a> 和 <a href="https://en.wikipedia.org/wiki/Decile" target="_blank" rel="noopener">十分位</a>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(round, sat.quantiles()))</span><br><span class="line">[<span class="number">928</span>, <span class="number">1060</span>, <span class="number">1192</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(round, sat.quantiles(n=<span class="number">10</span>)))</span><br><span class="line">[<span class="number">810</span>, <span class="number">896</span>, <span class="number">958</span>, <span class="number">1011</span>, <span class="number">1060</span>, <span class="number">1109</span>, <span class="number">1162</span>, <span class="number">1224</span>, <span class="number">1310</span>]</span><br></pre></td></tr></table></figure><p>为了估算一个不易解析的模型分布，<a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.NormalDist" target="_blank" rel="noopener"><code>NormalDist</code></a> 可以生成用于 <a href="https://en.wikipedia.org/wiki/Monte_Carlo_method" target="_blank" rel="noopener">蒙特卡洛模拟</a> 的输入样本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">model</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> (<span class="number">3</span>*x + <span class="number">7</span>*x*y - <span class="number">5</span>*y) / (<span class="number">11</span> * z)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = <span class="number">100</span>_000</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X = NormalDist(<span class="number">10</span>, <span class="number">2.5</span>).samples(n, seed=<span class="number">3652260728</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Y = NormalDist(<span class="number">15</span>, <span class="number">1.75</span>).samples(n, seed=<span class="number">4582495471</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Z = NormalDist(<span class="number">50</span>, <span class="number">1.25</span>).samples(n, seed=<span class="number">6582483453</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>quantiles(map(model, X, Y, Z))       </span><br><span class="line">[<span class="number">1.4591308524824727</span>, <span class="number">1.8035946855390597</span>, <span class="number">2.175091447274739</span>]</span><br></pre></td></tr></table></figure><p>当样本量较大并且成功试验的可能性接近 50% 时，正态分布可以被用来模拟 <a href="http://mathworld.wolfram.com/BinomialDistribution.html" target="_blank" rel="noopener">二项分布</a>。</p><p>例如，一次开源会议有 750 名与会者和两个可分别容纳 500 人的会议厅。 会上有一场关于 Python 的演讲和一场关于 Ruby 的演讲。 在往届会议中，65% 的与会者更愿意去听关于 Python 的演讲。 假定人群的偏好没有发生改变，那么 Python 演讲的会议厅不超出其容量上限的可能性是多少？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = <span class="number">750</span>             <span class="comment"># Sample size</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = <span class="number">0.65</span>            <span class="comment"># Preference for Python</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q = <span class="number">1.0</span> - p         <span class="comment"># Preference for Ruby</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>k = <span class="number">500</span>             <span class="comment"># Room capacity</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Approximation using the cumulative normal distribution</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>round(NormalDist(mu=n*p, sigma=sqrt(n*p*q)).cdf(k + <span class="number">0.5</span>), <span class="number">4</span>)</span><br><span class="line"><span class="number">0.8402</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Solution using the cumulative binomial distribution</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> math <span class="keyword">import</span> comb, fsum</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>round(fsum(comb(n, r) * p**r * q**(n-r) <span class="keyword">for</span> r <span class="keyword">in</span> range(k+<span class="number">1</span>)), <span class="number">4</span>)</span><br><span class="line"><span class="number">0.8402</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Approximation using a simulation</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> random <span class="keyword">import</span> seed, choices</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>seed(<span class="number">8675309</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">trial</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> choices((<span class="string">'Python'</span>, <span class="string">'Ruby'</span>), (p, q), k=n).count(<span class="string">'Python'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mean(trial() &lt;= k <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>_000))</span><br><span class="line"><span class="number">0.8398</span></span><br></pre></td></tr></table></figure><p>在机器学习问题中也经常会出现正态分布。</p><p>Wikipedia 上有一个 <a href="https://en.wikipedia.org/wiki/Naive_Bayes_classifier#Sex_classification" target="_blank" rel="noopener">朴素贝叶斯分类器的好例子</a>。 挑战的问题是根据对多个正态分布的特征测量值包括身高、体重和足部尺码来预测一个人的性别。</p><p>我们得到了由八个人的测量值组成的训练数据集。 假定这些测量值是正态分布的，因此我们用 <a href="https://docs.python.org/zh-cn/3.8/library/statistics.html#statistics.NormalDist" target="_blank" rel="noopener"><code>NormalDist</code></a> 来总结数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>height_male = NormalDist.from_samples([<span class="number">6</span>, <span class="number">5.92</span>, <span class="number">5.58</span>, <span class="number">5.92</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>height_female = NormalDist.from_samples([<span class="number">5</span>, <span class="number">5.5</span>, <span class="number">5.42</span>, <span class="number">5.75</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>weight_male = NormalDist.from_samples([<span class="number">180</span>, <span class="number">190</span>, <span class="number">170</span>, <span class="number">165</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>weight_female = NormalDist.from_samples([<span class="number">100</span>, <span class="number">150</span>, <span class="number">130</span>, <span class="number">150</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foot_size_male = NormalDist.from_samples([<span class="number">12</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">10</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>foot_size_female = NormalDist.from_samples([<span class="number">6</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">9</span>])</span><br></pre></td></tr></table></figure><p>接下来，我们遇到一个特征测量值已知但性别未知的新人：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ht = <span class="number">6.0</span>        <span class="comment"># height</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wt = <span class="number">130</span>        <span class="comment"># weight</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fs = <span class="number">8</span>          <span class="comment"># foot size</span></span><br></pre></td></tr></table></figure><p>从是男是女各 50% 的 <a href="https://en.wikipedia.org/wiki/Prior_probability" target="_blank" rel="noopener">先验概率</a> 出发，我们通过将该先验概率乘以给定性别的特征度量值的可能性累积值来计算后验概率：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; prior_male = 0.5</span><br><span class="line">&gt;&gt;&gt; prior_female = 0.5</span><br><span class="line">&gt;&gt;&gt; posterior_male = (prior_male * height_male.pdf(ht) *</span><br><span class="line">...                   weight_male.pdf(wt) * foot_size_male.pdf(fs))</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; posterior_female = (prior_female * height_female.pdf(ht) *</span><br><span class="line">...                     weight_female.pdf(wt) * foot_size_female.pdf(fs))</span><br></pre></td></tr></table></figure><p>最终预测值应为最大后验概率值。 这种算法被称为 <a href="https://en.wikipedia.org/wiki/Maximum_a_posteriori_estimation" target="_blank" rel="noopener">maximum a posteriori</a> 或 MAP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'male'</span> <span class="keyword">if</span> posterior_male &gt; posterior_female <span class="keyword">else</span> <span class="string">'female'</span></span><br><span class="line"><span class="string">'female'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库-statistics-数学统计函数&quot;&gt;&lt;a href=&quot;#python-标准库-statistics-数学统计函数&quot; class=&quot;headerlink&quot; title=&quot;python 标准库 statistics 数学统计函数&quot;&gt;&lt;/a&gt;python 标准库 statistics 数学统计函数&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://up.enterdesk.com/edpic_source/f7/89/27/f7892747c14c5f25b62b651023891d86.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="standard_libray" scheme="https://pinghailinfeng.gitee.io/categories/python/standard-libray/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="statistics" scheme="https://pinghailinfeng.gitee.io/tags/statistics/"/>
    
  </entry>
  
  <entry>
    <title>python standard library uuid</title>
    <link href="https://pinghailinfeng.gitee.io/2020/02/05/python-standard-library-uuid/"/>
    <id>https://pinghailinfeng.gitee.io/2020/02/05/python-standard-library-uuid/</id>
    <published>2020-02-05T14:07:38.000Z</published>
    <updated>2020-02-10T02:35:57.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库-之-uuid"><a href="#python-标准库-之-uuid" class="headerlink" title="python 标准库 之 uuid"></a>python 标准库 之 uuid</h1><p><img src="https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/untitled-collage-2-1552890408.jpg?crop=0.502xw:1.00xh;0,0&amp;resize=640:*" alt></p><a id="more"></a><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=413961275&auto=0&height=66"></iframe><h2 id="何谓UUID"><a href="#何谓UUID" class="headerlink" title="何谓UUID"></a>何谓UUID</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">UUID是<span class="number">128</span>位的全局唯一标识符，通常由<span class="number">32</span>字节的字符串表示。</span><br><span class="line">   它可以保证时间和空间的唯一性，也称为GUID，全称为：</span><br><span class="line">           UUID —— Universally Unique IDentifier      Python 中叫 UUID</span><br><span class="line">           UUID -- java.util.UUID                     Java 中也叫 UUID</span><br><span class="line">           GUID —— Globally Unique IDentifier         C<span class="comment">#  中叫 GUID</span></span><br><span class="line">           </span><br><span class="line"></span><br><span class="line">   它通过MAC地址、时间戳、命名空间、随机数、伪随机数来保证生成ID的唯一性。</span><br><span class="line">   UUID主要有五个算法，也就是五种方法来实现：</span><br><span class="line"></span><br><span class="line">      <span class="number">1</span>、uuid1()——基于时间戳</span><br><span class="line"></span><br><span class="line">              由MAC地址、当前时间戳、随机数生成。可以保证全球范围内的唯一性，</span><br><span class="line">              但MAC的使用同时带来安全性问题，局域网中可以使用IP来代替MAC。</span><br><span class="line"></span><br><span class="line">      <span class="number">2</span>、uuid2()——基于分布式计算环境DCE（Python中没有这个函数）</span><br><span class="line"></span><br><span class="line">               算法与uuid1相同，不同的是把时间戳的前<span class="number">4</span>位置换为POSIX的UID。</span><br><span class="line">               实际中很少用到该方法。</span><br><span class="line"></span><br><span class="line">     <span class="number">3</span>、uuid3()——基于名字的MD5散列值</span><br><span class="line"></span><br><span class="line">               通过计算名字和命名空间的MD5散列值得到，保证了同一命名空间中不同名字的唯一性，</span><br><span class="line">               和不同命名空间的唯一性，但同一命名空间的同一名字生成相同的uuid。    </span><br><span class="line"></span><br><span class="line">      <span class="number">4</span>、uuid4()——基于随机数</span><br><span class="line"></span><br><span class="line">               由伪随机数得到，有一定的重复概率，该概率可以计算出来。</span><br><span class="line"></span><br><span class="line">      <span class="number">5</span>、uuid5()——基于名字的SHA<span class="number">-1</span>散列值</span><br><span class="line"></span><br><span class="line">               算法与uuid3相同，不同的是使用 Secure Hash Algorithm <span class="number">1</span> 算法</span><br></pre></td></tr></table></figure><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p> <strong>Source code:</strong> <a href="https://github.com/python/cpython/tree/3.8/Lib/uuid.py" target="_blank" rel="noopener">Lib/uuid.py</a> </p><p>  uuid模块包括：不可变对象UUID（UUID类）和函数uuid1()、uuid3()、uuid4()和uuid5()，后面的四个函数用于生成 <a href="http://tools.ietf.org/html/rfc4122.html" target="_blank" rel="noopener">RFC 4122</a> 规范中指定的第1、3、4、5版UUID。使用uuid1()或uuid4()可以获得一个唯一的ID，uuid1()包含了主机的网络名称，uuid4()不涉及网络主机名，仅生成一个随机UUID，因此从隐私保护角度uuid4()更加安全。 </p><h2 id="枚举类型的SafeUUID-类"><a href="#枚举类型的SafeUUID-类" class="headerlink" title="枚举类型的SafeUUID 类"></a>枚举类型的SafeUUID 类</h2><p> <em>class</em> <code>uuid.SafeUUID</code> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">safe = <span class="number">0</span></span><br><span class="line">unsafe = <span class="number">-1</span></span><br><span class="line">unknown = <span class="literal">None</span></span><br></pre></td></tr></table></figure><h2 id="UUID-类-接口"><a href="#UUID-类-接口" class="headerlink" title="UUID 类(接口)"></a>UUID 类(接口)</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法:"></a>基本语法:</h3><p><em>class</em> <code>uuid.UUID</code>(<em>hex=None</em>, <em>bytes=None</em>, <em>bytes_le=None</em>, <em>fields=None</em>, <em>int=None</em>, <em>version=None</em>, <em>**, </em>is_safe=SafeUUID.unknown*) </p><p>下面的各种方法创建相同的UUID对象，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">UUID(<span class="string">'&#123;12345678-1234-5678-1234-567812345678&#125;'</span>)</span><br><span class="line">UUID(<span class="string">'12345678123456781234567812345678'</span>)</span><br><span class="line">UUID(<span class="string">'urn:uuid:12345678-1234-5678-1234-567812345678'</span>)</span><br><span class="line">UUID(bytes=<span class="string">b'\x12\x34\x56\x78'</span>*<span class="number">4</span>)</span><br><span class="line">UUID(bytes_le=<span class="string">b'\x78\x56\x34\x12\x34\x12\x78\x56'</span> +</span><br><span class="line">              <span class="string">b'\x12\x34\x56\x78\x12\x34\x56\x78'</span>)</span><br><span class="line">UUID(fields=(<span class="number">0x12345678</span>, <span class="number">0x1234</span>, <span class="number">0x5678</span>, <span class="number">0x12</span>, <span class="number">0x34</span>, <span class="number">0x567812345678</span>))</span><br><span class="line">UUID(int=<span class="number">0x12345678123456781234567812345678</span>)</span><br></pre></td></tr></table></figure><p>其中:</p><blockquote><p>如果尝试比较一个非UUID对象会引发<code>TypeError</code><br>使用str()函数强制转换一个uuid对象,将会生成一个从<code>12345678-1234-5678-1234-567812345678.</code>中创建的字符串</p></blockquote><h3 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h3><ul><li><p><code>UUID.bytes</code></p><p>指定一个大端字节序的总长16字节的字节串来创建UUID对象；    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>u = uuid.UUID(<span class="string">'&#123;12345678-1234-5678-1234-567812345678&#125;'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>u.bytes</span><br><span class="line"><span class="string">b'\x124Vx\x124Vx\x124Vx\x124Vx'</span></span><br></pre></td></tr></table></figure></li><li><p><code>UUID.bytes_le</code></p><p>指定一个小端字节序的总长16字节的字节串来创建UUID对象；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>u.bytes_le</span><br><span class="line"><span class="string">b'xV4\x124\x12xV\x124Vx\x124Vx'</span></span><br></pre></td></tr></table></figure></li><li><p><code>UUID.fields</code></p><p>以元组形式存放的UUID的6个整数域，有六个单独的属性和两个派生属性：</p><p>| 域                                                           | 意义                   |<br>| :———————————————————– | :——————— |<br>| <code>time_low</code>                                                   | UUID的前32位           |<br>| <code>time_mid</code>                                                   | 接前一域的16位         |<br>| <code>time_hi_version</code>                                            | 接前一域的16位         |<br>| <code>clock_seq_hi_variant</code>                                       | 接前一域的8位          |<br>| <code>clock_seq_low</code>                                              | 接前一域的8位          |<br>| <code>node</code>                                                       | UUID的最后48位         |<br>| <a href="https://docs.python.org/zh-cn/3.8/library/time.html#module-time" target="_blank" rel="noopener"><code>time</code></a> | UUID的总长60位的时间戳 |<br>| <code>clock_seq</code>                                                  | 14位的序列号           |</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>u.fields</span><br><span class="line">(<span class="number">305419896</span>, <span class="number">4660</span>, <span class="number">22136</span>, <span class="number">18</span>, <span class="number">52</span>, <span class="number">95073701484152</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>UUID.hex</code></p><p> 以32个字符表示的UUID</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>u.hex</span><br><span class="line"><span class="string">'12345678123456781234567812345678'</span></span><br></pre></td></tr></table></figure></li><li><p><code>UUID.int</code></p><p> 以一个长度为128个二进制位的整数表示的UUID；</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>u.int</span><br><span class="line"><span class="number">24197857161011715162171839636988778104</span></span><br></pre></td></tr></table></figure></li><li><p><code>UUID.urn</code></p><p> 以 RFC 4122 中指定的URN形式表示的UUID；</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>u.urn</span><br><span class="line"><span class="string">'urn:uuid:12345678-1234-5678-1234-567812345678'</span></span><br></pre></td></tr></table></figure></li><li><p><code>UUID.variant</code></p><p>　UUID变体（variant），决定UUID内部的布局，已有的值为 RESERVED_NCS、RFC_4122、RESERVED_MICROSOFT 或 RESERVED_FUTURE；</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>u.variant</span><br><span class="line"><span class="string">'reserved for NCS compatibility'</span></span><br></pre></td></tr></table></figure><ul><li><p><code>UUID.version</code></p><p>返回UUID的版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>u.version</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>　这里由于u.variant == ‘reserved for NCS compatibility’，所以此处u.version为空。 </p></li><li><p><code>UUID.is_safe</code></p><p>枚举类型的<code>SafeUUID</code>对象,为了标识创建的UUID是否是线程安全的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>u.is_safe</span><br><span class="line">&lt;SafeUUID.unknown: <span class="literal">None</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3></li></ul><p><strong>关于属性variant，uuid模块定义了如下的常量</strong></p><p> uuid.RESERVED_NCS<br>　　该常量为兼容NCS而保留；<br>　　<br> uuid.RFC_4122<br>　　按照 RFC 4122 的规定来确定UUID的布局；<br>　　<br> uuid.RESERVED_MICROSOFT<br>　　该常量位兼容微软而保留<br> 　　<br> uuid.RESERVED_FUTURE<br>　　该常量为未来可能的定义保留 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">可以在Python中查看这些常量：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>uuid.RESERVED_NCS</span><br><span class="line"><span class="string">'reserved for NCS compatibility'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>uuid.RFC_4122</span><br><span class="line"><span class="string">'specified in RFC 4122'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>uuid.RESERVED_MICROSOFT</span><br><span class="line"><span class="string">'reserved for Microsoft compatibility'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>uuid.RESERVED_FUTURE</span><br><span class="line"><span class="string">'reserved for future definition'</span></span><br></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li><p><code>uuid.getnode</code>() </p><p>  　获取硬件的地址并以48位二进制长度的正整数形式返回，这里所说的硬件地址是指网络接口的MAC地址，如果一个机器有多个网络接口，可能返回其中的任一个。如果获取失败，将按照RFC 4122的规定将随机返回的48位二进制整数的第8位设置成1。 </p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>uuid.getnode()</span><br><span class="line"><span class="number">202960192043486</span></span><br></pre></td></tr></table></figure></li><li><p><code>uuid.uuid1</code>(<em>node=None</em>, <em>clock_seq=None</em>) </p><p>  　利用主机ID、序列号和当前时间生成一个UUID，如果参数 <em>node</em> 没有给定，会调用 getnode() 来获取硬件地址。如果参数中指定了 <em>clock_seq</em> ，使用参数中给定的时钟序列作为序列号，否则使用一个随机的14位长的序列号。 </p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>uuid.uuid1()</span><br><span class="line">UUID(<span class="string">'97344912-4827-11ea-9c91-b8975a2679de'</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>uuid.uuid3</code>(<em>namespace</em>, <em>name</em>) </p><p> 基于命名空间标识符（实质上是一个UUID）和一个名称（实质上是一个字符串）的MD5哈希值生成UUID。 </p></li><li><p><code>uuid.uuid4</code>() </p><p>生成一个随机的UUID。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>uuid.uuid4()</span><br><span class="line">UUID(<span class="string">'ff3c991e-df64-4cfc-900e-ef83c991b513'</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>uuid.uuid5</code>(<em>namespace</em>, <em>name</em>) </p><p>基于命名空间标识符（实质上是一个UUID）和一个名称（实质上是一个字符串）的SHA-1哈希值生成UUID </p></li></ul><p>下面的几个标准uuid在使用<code>uuid3()</code> 或<code>uuid5()</code>的时候使用</p><ul><li><p><code>uuid.NAMESPACE_DNS</code></p><p> 　当指定该命名空间时，参数 <em>name</em> 是一个完全限定的（fully-qualified）域名 </p></li><li><p><code>uuid.NAMESPACE_URL</code> </p><p> 当指定该命名空间时，参数 <em>name</em> 是一个URL </p></li><li><p><code>uuid.NAMESPACE_OID</code> </p><p> 当指定该命名空间时，参数 <em>name</em> 是一个ISO OID </p></li><li><p><code>uuid.NAMESPACE_X500</code> </p><p> 当指定该命名空间时，参数 <em>name</em> 是一个DER格式或文本格式的X.500 DN。 </p></li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># make a UUID based on the host ID and current time</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>uuid.uuid1()</span><br><span class="line">UUID(<span class="string">'a8098c1a-f86e-11da-bd1a-00112444be1e'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># make a UUID using an MD5 hash of a namespace UUID and a name</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>uuid.uuid3(uuid.NAMESPACE_DNS, <span class="string">'python.org'</span>)</span><br><span class="line">UUID(<span class="string">'6fa459ea-ee8a-3ca4-894e-db77e160355e'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># make a random UUID</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>uuid.uuid4()</span><br><span class="line">UUID(<span class="string">'16fd2706-8baf-433b-82eb-8c7fada847da'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># make a UUID using a SHA-1 hash of a namespace UUID and a name</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>uuid.uuid5(uuid.NAMESPACE_DNS, <span class="string">'python.org'</span>)</span><br><span class="line">UUID(<span class="string">'886313e1-3b8a-5372-9b90-0c9aee199e5d'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># make a UUID from a string of hex digits (braces and hyphens ignored)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = uuid.UUID(<span class="string">'&#123;00010203-0405-0607-0809-0a0b0c0d0e0f&#125;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># convert a UUID to a string of hex digits in standard form</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(x)</span><br><span class="line"><span class="string">'00010203-0405-0607-0809-0a0b0c0d0e0f'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># get the raw 16 bytes of the UUID</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.bytes</span><br><span class="line"><span class="string">b'\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># make a UUID from a 16-byte string</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>uuid.UUID(bytes=x.bytes)</span><br><span class="line">UUID(<span class="string">'00010203-0405-0607-0809-0a0b0c0d0e0f'</span>)</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="如何去除UUID字符串中的横杠"><a href="#如何去除UUID字符串中的横杠" class="headerlink" title="如何去除UUID字符串中的横杠"></a>如何去除UUID字符串中的横杠</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">uid = str(uuid.uuid4())</span><br><span class="line">suid = <span class="string">''</span>.join(uid.split(<span class="string">'-'</span>))</span><br><span class="line"><span class="comment">## 等价于</span></span><br><span class="line">print(uuid.uuid1().hex)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库-之-uuid&quot;&gt;&lt;a href=&quot;#python-标准库-之-uuid&quot; class=&quot;headerlink&quot; title=&quot;python 标准库 之 uuid&quot;&gt;&lt;/a&gt;python 标准库 之 uuid&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/untitled-collage-2-1552890408.jpg?crop=0.502xw:1.00xh;0,0&amp;amp;resize=640:*&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/categories/python/standard-library/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="uuid" scheme="https://pinghailinfeng.gitee.io/tags/uuid/"/>
    
  </entry>
  
  <entry>
    <title>python standard library urllib robotparser</title>
    <link href="https://pinghailinfeng.gitee.io/2020/02/04/python-standard-library-urllib-robotparser/"/>
    <id>https://pinghailinfeng.gitee.io/2020/02/04/python-standard-library-urllib-robotparser/</id>
    <published>2020-02-04T03:07:52.000Z</published>
    <updated>2020-02-04T10:54:47.132Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库-urllib-robotparser"><a href="#python-标准库-urllib-robotparser" class="headerlink" title="python 标准库 urllib.robotparser"></a>python 标准库 urllib.robotparser</h1><p><img src="https://pic.superbed.cn/item/5c8e72043a213b0417a25657" alt></p><a id="more"></a><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1334059163&auto=0&height=66"></iframe><blockquote><p>一切终将过去,我们仍旧前行,如同黑暗中的舞者。 </p><p>​                                                              – 临风语录</p></blockquote><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><strong>源代码：</strong> <a href="https://github.com/python/cpython/tree/3.8/Lib/urllib/robotparser.py" target="_blank" rel="noopener">Lib/urllib/robotparser.py</a> </p><p> <code>robotparser</code> 实现了一个用于分析 <code>robots.txt</code> 文件格式的解析器， 它含有一个检查给定用户代理是否可以访问给定资源的函数。它的目的是给那些品行端正的爬虫用的，或用来指导需要节流，否则就会被限制访问的其他抓取器。</p><h2 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h2><p> <code>robots.txt</code> 文件是一个简单的基于文本的访问控制系统，用于控制那些自动访问网络资源的程序（如「爬虫」，「抓取器」，等等）。文件由特定的用户代理程序标识的记录以及代理不允许访问的 URLs （或 URL 前缀） 的一个列表组成。 </p><p>以我的博客为例</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> hexo robots.txt</span></span><br><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /archives/</span><br><span class="line"></span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /fancybox/</span><br><span class="line"></span><br><span class="line">Sitemap: https://pinghailinfeng.gitee.io/sitemap.xml</span><br><span class="line">Sitemap: https://pinghailinfeng.gitee.io/baidusitemap.xml</span><br></pre></td></tr></table></figure><p><em>允许所有爬虫访问内容</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User-Agent:  *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /archives/</span><br></pre></td></tr></table></figure><p>不允许爬虫访问的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /fancybox/</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><em>class</em> <code>urllib.robotparser.RobotFileParser</code>(<em>url=’’</em>)</p><p>核心类通过下面方法读取、解析 通过url访问的<code>robots.txt</code>文件</p><ul><li><p><code>set_url</code>(<em>url</em>)</p><p>设定需要读取 <code>robots.txt</code>文件url路径</p></li><li><p><code>read</code>()</p><p>读取制定URL路径对应的 <code>robots.txt</code> 文件</p></li><li><p><code>parse</code>(<em>lines</em>)</p><p>解析参数指定的行</p></li><li><p><code>can_fetch</code>(<em>useragent</em>, <em>url</em>)</p><p>如果<code>useragent</code>被允许抓取<code>url</code>对应的<code>robots.txt</code>文件中包含了允许的规则,则返回<code>True</code></p></li><li><p><code>mtime</code>()</p><p>返回最后一次抓取<code>robots.txt</code>文件的时间。这是一个对长时间运行的网络爬虫用检查周期性<code>robots.txt</code>文件是否更新的很有用的方法。 </p></li><li><p><code>modified</code>()</p><p>设定最后一次抓取 <code>robots.txt</code> 文件的时间。</p></li><li><p><code>crawl_delay</code>(<em>useragent</em>)</p><p>返回  从<code>robots.txt</code> 中 <code>useragent</code>定义的 <code>Crawl-delay</code>  的值。如果没有这个参数或 在<code>useragent</code>中声明的参数格式不正确,返回<code>None</code>。</p><p><em>3.6 新版功能.</em></p></li><li><p><code>request_rate</code>(<em>useragent</em>)</p><p>返回作为<a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-named-tuple" target="_blank" rel="noopener"><code>命名元组</code></a>类型的从  robots.txt 文件中 定义的 <code>Request-rate</code>参数内容。如果没有这个参数或在 robots.txt 文件中定义的<code>useragent</code>参数格式不正确,则返回<code>None</code>。</p><p><em>3.6 新版功能.</em></p></li><li><p><code>site_maps</code>()</p><p>返回 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#list" target="_blank" rel="noopener"><code>list()</code></a> 类型的<code>Sitemap</code>参数内容。如果参数不存在或参数格式不正确,都返回<code>None</code>。</p></li></ul><h2 id="官方栗子"><a href="#官方栗子" class="headerlink" title="官方栗子"></a>官方栗子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> urllib.robotparser</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rp = urllib.robotparser.RobotFileParser()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rp.set_url(<span class="string">"http://www.musi-cal.com/robots.txt"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rp.read()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rrate = rp.request_rate(<span class="string">"*"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rrate.requests</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rrate.seconds</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rp.crawl_delay(<span class="string">"*"</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rp.can_fetch(<span class="string">"*"</span>, <span class="string">"http://www.musi-cal.com/cgi-bin/search?city=San+Francisco"</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rp.can_fetch(<span class="string">"*"</span>, <span class="string">"http://www.musi-cal.com/"</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="分析知乎"><a href="#分析知乎" class="headerlink" title="分析知乎"></a>分析知乎</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">分析知乎 Robots 协议</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> urllib.robotparser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rp = urllib.robotparser.RobotFileParser()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 robots.txt 文件 URL</span></span><br><span class="line">rp.set_url(<span class="string">'https://www.zhihu.com/robots.txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取操作必须有, 不然后面解析不到</span></span><br><span class="line">rp.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断网址是否运行爬取</span></span><br><span class="line">print(rp.can_fetch(<span class="string">'Googlebot'</span>, <span class="string">'https://www.zhihu.com/question/264161961/answer/278828570'</span>))</span><br><span class="line">print(rp.can_fetch(<span class="string">'*'</span>, <span class="string">'https://www.zhihu.com/question/264161961/answer/278828570'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回上次抓取分析 robots.txt 时间</span></span><br><span class="line">print(rp.mtime())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前时间设置为上次抓取和分析 robots.txt 的时间</span></span><br><span class="line">rp.modified()</span><br><span class="line">print(rp.mtime())  <span class="comment"># 再次打印时间会有变化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回 robots.txt 文件对请求速率限制的值</span></span><br><span class="line">print(rp.request_rate(<span class="string">'*'</span>))</span><br><span class="line">print(rp.request_rate(<span class="string">'MSNBot'</span>).requests)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回 robotx.txt 文件对抓取延迟限制的值</span></span><br><span class="line">print(rp.crawl_delay(<span class="string">'*'</span>))</span><br><span class="line">print(rp.crawl_delay(<span class="string">'MSNBot'</span>))</span><br></pre></td></tr></table></figure><h2 id="分析我自己博客"><a href="#分析我自己博客" class="headerlink" title="分析我自己博客"></a>分析我自己博客</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.robotparser</span><br><span class="line"></span><br><span class="line">blog_url = <span class="string">'https://pinghailinfeng.gitee.io/robots.txt'</span></span><br><span class="line">rp = urllib.robotparser.RobotFileParser()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 robots.txt 文件 URL</span></span><br><span class="line">rp.set_url(blog_url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取操作必须有, 不然后面解析不到</span></span><br><span class="line">rp.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断网址是否运行爬取</span></span><br><span class="line">print(rp.can_fetch(<span class="string">'*'</span>,<span class="string">'https://pinghailinfeng.gitee.io/archives/'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回上次抓取分析 robots.txt 时间</span></span><br><span class="line">print(rp.mtime())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前时间设置为上次抓取和分析 robots.txt 的时间</span></span><br><span class="line">rp.modified()</span><br><span class="line">print(rp.mtime())  <span class="comment"># 再次打印时间会有变化</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(rp.crawl_delay(<span class="string">'*'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(rp.site_maps())</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1580804333.889091</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1580804333.889091</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'https://pinghailinfeng.gitee.io/sitemap.xml'</span>, <span class="string">'https://pinghailinfeng.gitee.io/baidusitemap.xml'</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库-urllib-robotparser&quot;&gt;&lt;a href=&quot;#python-标准库-urllib-robotparser&quot; class=&quot;headerlink&quot; title=&quot;python 标准库 urllib.robotparser&quot;&gt;&lt;/a&gt;python 标准库 urllib.robotparser&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://pic.superbed.cn/item/5c8e72043a213b0417a25657&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/categories/python/standard-library/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="urllib.robotparser" scheme="https://pinghailinfeng.gitee.io/tags/urllib-robotparser/"/>
    
  </entry>
  
  <entry>
    <title>python standard library itertools</title>
    <link href="https://pinghailinfeng.gitee.io/2020/02/03/python-standard-library-itertools/"/>
    <id>https://pinghailinfeng.gitee.io/2020/02/03/python-standard-library-itertools/</id>
    <published>2020-02-03T09:53:35.000Z</published>
    <updated>2020-02-04T10:54:47.127Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库-itertools"><a href="#python-标准库-itertools" class="headerlink" title="python 标准库 itertools"></a>python 标准库 itertools</h1><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200203_Alita-Battle-Angel-2019.png?raw=true" alt></p><a id="more"></a><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1348507017&auto=0&height=66"></iframe><h1 id="为高效循环而创建迭代器的函数"><a href="#为高效循环而创建迭代器的函数" class="headerlink" title="为高效循环而创建迭代器的函数"></a>为高效循环而创建迭代器的函数</h1><p>本模块实现一系列 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-iterator" target="_blank" rel="noopener">iterator</a> ，这些迭代器受到APL，Haskell和SML的启发。为了适用于Python，它们都被重新写过。</p><p>本模块标准化了一个快速、高效利用内存的核心工具集，这些工具本身或组合都很有用。它们一起形成了“迭代器代数”，这使得在纯Python中有可能创建简洁又高效的专用工具。</p><p>例如，SML有一个制表工具： <code>tabulate(f)</code>，它可产生一个序列 <code>f(0), f(1), ...</code>。在Python中可以组合 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#map" target="_blank" rel="noopener"><code>map()</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.count" target="_blank" rel="noopener"><code>count()</code></a> 实现： <code>map(f, count())</code>。</p><p>这些内置工具同时也能很好地与 <a href="https://docs.python.org/zh-cn/3.8/library/operator.html#module-operator" target="_blank" rel="noopener"><code>operator</code></a> 模块中的高效函数配合使用。例如，我们可以将两个向量的点积映射到乘法运算符： <code>sum(map(operator.mul, vector1, vector2))</code> 。</p><p><strong>无穷迭代器：</strong></p><table><thead><tr><th style="text-align:left">迭代器</th><th style="text-align:left">实参</th><th style="text-align:left">结果</th><th style="text-align:left">示例</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.count" target="_blank" rel="noopener"><code>count()</code></a></td><td style="text-align:left">start, [step]</td><td style="text-align:left">start, start+step, start+2*step, …</td><td style="text-align:left"><code>count(10) --&gt; 10 11 12 13 14 ...</code></td></tr><tr><td style="text-align:left"><a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.cycle" target="_blank" rel="noopener"><code>cycle()</code></a></td><td style="text-align:left">p</td><td style="text-align:left">p0, p1, … plast, p0, p1, …</td><td style="text-align:left"><code>cycle(&#39;ABCD&#39;) --&gt; A B C D A B C D ...</code></td></tr><tr><td style="text-align:left"><a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.repeat" target="_blank" rel="noopener"><code>repeat()</code></a></td><td style="text-align:left">elem [,n]</td><td style="text-align:left">elem, elem, elem, … 重复无限次或n次</td><td style="text-align:left"><code>repeat(10, 3) --&gt; 10 10 10</code></td></tr></tbody></table><p><strong>根据最短输入序列长度停止的迭代器：</strong></p><table><thead><tr><th style="text-align:left">迭代器</th><th style="text-align:left">实参</th><th style="text-align:left">结果</th><th style="text-align:left">示例</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.accumulate" target="_blank" rel="noopener"><code>accumulate()</code></a></td><td style="text-align:left">p [,func]</td><td style="text-align:left">p0, p0+p1, p0+p1+p2, …</td><td style="text-align:left"><code>accumulate([1,2,3,4,5]) --&gt; 1 3 6 10 15</code></td></tr><tr><td style="text-align:left"><a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.chain" target="_blank" rel="noopener"><code>chain()</code></a></td><td style="text-align:left">p, q, …</td><td style="text-align:left">p0, p1, … plast, q0, q1, …</td><td style="text-align:left"><code>chain(&#39;ABC&#39;, &#39;DEF&#39;) --&gt; A B C D E F</code></td></tr><tr><td style="text-align:left"><a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.chain.from_iterable" target="_blank" rel="noopener"><code>chain.from_iterable()</code></a></td><td style="text-align:left">iterable</td><td style="text-align:left">p0, p1, … plast, q0, q1, …</td><td style="text-align:left"><code>chain.from_iterable([&#39;ABC&#39;, &#39;DEF&#39;]) --&gt; A B C D E F</code></td></tr><tr><td style="text-align:left"><a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.compress" target="_blank" rel="noopener"><code>compress()</code></a></td><td style="text-align:left">data, selectors</td><td style="text-align:left">(d[0] if s[0]), (d[1] if s[1]), …</td><td style="text-align:left"><code>compress(&#39;ABCDEF&#39;, [1,0,1,0,1,1]) --&gt; A C E F</code></td></tr><tr><td style="text-align:left"><a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.dropwhile" target="_blank" rel="noopener"><code>dropwhile()</code></a></td><td style="text-align:left">pred, seq</td><td style="text-align:left">seq[n], seq[n+1], … 从pred首次真值测试失败开始</td><td style="text-align:left"><code>dropwhile(lambda x: x&lt;5, [1,4,6,4,1]) --&gt; 6 4 1</code></td></tr><tr><td style="text-align:left"><a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.filterfalse" target="_blank" rel="noopener"><code>filterfalse()</code></a></td><td style="text-align:left">pred, seq</td><td style="text-align:left">seq中pred(x)为假值的元素，x是seq中的元素。</td><td style="text-align:left"><code>filterfalse(lambda x: x%2, range(10)) --&gt; 0 2 4 6 8</code></td></tr><tr><td style="text-align:left"><a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.groupby" target="_blank" rel="noopener"><code>groupby()</code></a></td><td style="text-align:left">iterable[, key]</td><td style="text-align:left">根据key(v)值分组的迭代器</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.islice" target="_blank" rel="noopener"><code>islice()</code></a></td><td style="text-align:left">seq, [start,] stop [, step]</td><td style="text-align:left">seq[start:stop:step]中的元素</td><td style="text-align:left"><code>islice(&#39;ABCDEFG&#39;, 2, None) --&gt; C D E F G</code></td></tr><tr><td style="text-align:left"><a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.starmap" target="_blank" rel="noopener"><code>starmap()</code></a></td><td style="text-align:left">func, seq</td><td style="text-align:left">func(<em>seq[0]), func(</em>seq[1]), …</td><td style="text-align:left"><code>starmap(pow, [(2,5), (3,2), (10,3)]) --&gt; 32 9 1000</code></td></tr><tr><td style="text-align:left"><a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.takewhile" target="_blank" rel="noopener"><code>takewhile()</code></a></td><td style="text-align:left">pred, seq</td><td style="text-align:left">seq[0], seq[1], …, 直到pred真值测试失败</td><td style="text-align:left"><code>takewhile(lambda x: x&lt;5, [1,4,6,4,1]) --&gt; 1 4</code></td></tr><tr><td style="text-align:left"><a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.tee" target="_blank" rel="noopener"><code>tee()</code></a></td><td style="text-align:left">it, n</td><td style="text-align:left">it1, it2, … itn 将一个迭代器拆分为n个迭代器</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.zip_longest" target="_blank" rel="noopener"><code>zip_longest()</code></a></td><td style="text-align:left">p, q, …</td><td style="text-align:left">(p[0], q[0]), (p[1], q[1]), …</td><td style="text-align:left"><code>zip_longest(&#39;ABCD&#39;, &#39;xy&#39;, fillvalue=&#39;-&#39;) --&gt; Ax By C- D-</code></td></tr></tbody></table><p><strong>排列组合迭代器：</strong></p><table><thead><tr><th style="text-align:left">迭代器</th><th style="text-align:left">实参</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.product" target="_blank" rel="noopener"><code>product()</code></a></td><td style="text-align:left">p, q, … [repeat=1]</td><td style="text-align:left">笛卡尔积，相当于嵌套的for循环</td></tr><tr><td style="text-align:left"><a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.permutations" target="_blank" rel="noopener"><code>permutations()</code></a></td><td style="text-align:left">p[, r]</td><td style="text-align:left">长度r元组，所有可能的排列，无重复元素</td></tr><tr><td style="text-align:left"><a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.combinations" target="_blank" rel="noopener"><code>combinations()</code></a></td><td style="text-align:left">p, r</td><td style="text-align:left">长度r元组，有序，无重复元素</td></tr><tr><td style="text-align:left"><a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.combinations_with_replacement" target="_blank" rel="noopener"><code>combinations_with_replacement()</code></a></td><td style="text-align:left">p, r</td><td style="text-align:left">长度r元组，有序，元素可重复</td></tr></tbody></table><table><thead><tr><th style="text-align:left">例子</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td style="text-align:left"><code>product(&#39;ABCD&#39;, repeat=2)</code></td><td style="text-align:left"><code>AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD</code></td></tr><tr><td style="text-align:left"><code>permutations(&#39;ABCD&#39;, 2)</code></td><td style="text-align:left"><code>AB AC AD BA BC BD CA CB CD DA DB DC</code></td></tr><tr><td style="text-align:left"><code>combinations(&#39;ABCD&#39;, 2)</code></td><td style="text-align:left"><code>AB AC AD BC BD CD</code></td></tr><tr><td style="text-align:left"><code>combinations_with_replacement(&#39;ABCD&#39;, 2)</code></td><td style="text-align:left"><code>AA AB AC AD BB BC BD CC CD DD</code></td></tr></tbody></table><h2 id="Itertools数"><a href="#Itertools数" class="headerlink" title="Itertools数"></a>Itertools数</h2><p>下列模块函数均创建并返回迭代器。有些迭代器不限制输出流长度，所以它们只应在能截断输出流的函数或循环中使用。</p><ul><li><p><code>itertools.accumulate</code>(<em>iterable</em>[, <em>func</em>, <em>**, </em>initial=None*])</p><p>创建一个迭代器，返回累积汇总值或其他双目运算函数的累积结果值（通过可选的 <em>func</em> 参数指定）。如果提供了 <em>func</em>，它应当为带有两个参数的函数。 输入 <em>iterable</em> 的元素可以是能被 <em>func</em> 接受为参数的任意类型。 （例如，对于默认的加法运算，元素可以是任何可相加的类型包括 <a href="https://docs.python.org/zh-cn/3.8/library/decimal.html#decimal.Decimal" target="_blank" rel="noopener"><code>Decimal</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/fractions.html#fractions.Fraction" target="_blank" rel="noopener"><code>Fraction</code></a>。）通常，输出的元素数量与输入的可迭代对象是一致的。 但是，如果提供了关键字参数 <em>initial</em>，则累加会以 <em>initial</em> 值开始，这样输出就比输入的可迭代对象多一个元素。大致相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accumulate</span><span class="params">(iterable, func=operator.add, *, initial=None)</span>:</span></span><br><span class="line">    <span class="string">'Return running totals'</span></span><br><span class="line">    <span class="comment"># accumulate([1,2,3,4,5]) --&gt; 1 3 6 10 15</span></span><br><span class="line">    <span class="comment"># accumulate([1,2,3,4,5], initial=100) --&gt; 100 101 103 106 110 115</span></span><br><span class="line">    <span class="comment"># accumulate([1,2,3,4,5], operator.mul) --&gt; 1 2 6 24 120</span></span><br><span class="line">    it = iter(iterable)</span><br><span class="line">    total = initial</span><br><span class="line">    <span class="keyword">if</span> initial <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            total = next(it)</span><br><span class="line">        <span class="keyword">except</span> StopIteration:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">yield</span> total</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> it:</span><br><span class="line">        total = func(total, element)</span><br><span class="line">        <span class="keyword">yield</span> total</span><br></pre></td></tr></table></figure><p><em>func</em> 参数有几种用法。它可以被设为 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#min" target="_blank" rel="noopener"><code>min()</code></a> 最终得到一个最小值，或者设为 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#max" target="_blank" rel="noopener"><code>max()</code></a> 最终得到一个最大值，或设为 <a href="https://docs.python.org/zh-cn/3.8/library/operator.html#operator.mul" target="_blank" rel="noopener"><code>operator.mul()</code></a> 最终得到一个乘积。摊销表可通过累加利息和支付款项得到。给iterable设置初始值并只将参数 <em>func</em> 参数有几种用法。它可以被设为 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#min" target="_blank" rel="noopener"><code>min()</code></a> 最终得到一个最小值，或者设为 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#max" target="_blank" rel="noopener"><code>max()</code></a> 最终得到一个最大值，或设为 <a href="https://docs.python.org/zh-cn/3.8/library/operator.html#operator.mul" target="_blank" rel="noopener"><code>operator.mul()</code></a> 最终得到一个乘积。摊销表可通过累加利息和支付款项得到。给iterable设置初始值并只将参数 <em>func</em> 设为累加总数可以对一阶 <a href="https://en.wikipedia.org/wiki/Recurrence_relation" target="_blank" rel="noopener">递归关系</a> 建模。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(accumulate(data, operator.mul))     <span class="comment"># running product</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">12</span>, <span class="number">72</span>, <span class="number">144</span>, <span class="number">144</span>, <span class="number">1296</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(accumulate(data, max))              <span class="comment"># running maximum</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Amortize a 5% loan of 1000 with 4 annual payments of 90</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cashflows = [<span class="number">1000</span>, <span class="number">-90</span>, <span class="number">-90</span>, <span class="number">-90</span>, <span class="number">-90</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(accumulate(cashflows, <span class="keyword">lambda</span> bal, pmt: bal*<span class="number">1.05</span> + pmt))</span><br><span class="line">[<span class="number">1000</span>, <span class="number">960.0</span>, <span class="number">918.0</span>, <span class="number">873.9000000000001</span>, <span class="number">827.5950000000001</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Chaotic recurrence relation https://en.wikipedia.org/wiki/Logistic_map</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>logistic_map = <span class="keyword">lambda</span> x, _:  r * x * (<span class="number">1</span> - x)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = <span class="number">3.8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x0 = <span class="number">0.4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>inputs = repeat(x0, <span class="number">36</span>)     <span class="comment"># only the initial value is used</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[format(x, <span class="string">'.2f'</span>) <span class="keyword">for</span> x <span class="keyword">in</span> accumulate(inputs, logistic_map)]</span><br><span class="line">[<span class="string">'0.40'</span>, <span class="string">'0.91'</span>, <span class="string">'0.30'</span>, <span class="string">'0.81'</span>, <span class="string">'0.60'</span>, <span class="string">'0.92'</span>, <span class="string">'0.29'</span>, <span class="string">'0.79'</span>, <span class="string">'0.63'</span>,</span><br><span class="line"> <span class="string">'0.88'</span>, <span class="string">'0.39'</span>, <span class="string">'0.90'</span>, <span class="string">'0.33'</span>, <span class="string">'0.84'</span>, <span class="string">'0.52'</span>, <span class="string">'0.95'</span>, <span class="string">'0.18'</span>, <span class="string">'0.57'</span>,</span><br><span class="line"> <span class="string">'0.93'</span>, <span class="string">'0.25'</span>, <span class="string">'0.71'</span>, <span class="string">'0.79'</span>, <span class="string">'0.63'</span>, <span class="string">'0.88'</span>, <span class="string">'0.39'</span>, <span class="string">'0.91'</span>, <span class="string">'0.32'</span>,</span><br><span class="line"> <span class="string">'0.83'</span>, <span class="string">'0.54'</span>, <span class="string">'0.95'</span>, <span class="string">'0.20'</span>, <span class="string">'0.60'</span>, <span class="string">'0.91'</span>, <span class="string">'0.30'</span>, <span class="string">'0.80'</span>, <span class="string">'0.60'</span>]</span><br></pre></td></tr></table></figure><p>参考一个类似函数 <a href="https://docs.python.org/zh-cn/3.8/library/functools.html#functools.reduce" target="_blank" rel="noopener"><code>functools.reduce()</code></a> ，它只返回一个最终累积值。</p><p><em>3.2 新版功能.</em></p><p><em>在 3.3 版更改:</em> 增加可选参数 <em>func</em> 。</p><p><em>在 3.8 版更改:</em> 添加了可选的 <em>initial</em> 形参。</p></li><li><p><code>itertools.chain</code>(<em>iterables</em>)</p><p>创建一个迭代器，它首先返回第一个可迭代对象中所有元素，接着返回下一个可迭代对象中所有元素，直到耗尽所有可迭代对象中的元素。可将多个序列处理为单个序列。大致相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chain</span><span class="params">(*iterables)</span>:</span></span><br><span class="line">    <span class="comment"># chain('ABC', 'DEF') --&gt; A B C D E F</span></span><br><span class="line">    <span class="keyword">for</span> it <span class="keyword">in</span> iterables:</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> it:</span><br><span class="line">            <span class="keyword">yield</span> element</span><br></pre></td></tr></table></figure></li><li><p><em>classmethod</em> <code>chain.from_iterable</code>(<em>iterable</em>)</p><p>构建类似 <a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.chain" target="_blank" rel="noopener"><code>chain()</code></a> 迭代器的另一个选择。从一个单独的可迭代参数中得到链式输入，该参数是延迟计算的。大致相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">from_iterable</span><span class="params">(iterables)</span>:</span></span><br><span class="line">    <span class="comment"># chain.from_iterable(['ABC', 'DEF']) --&gt; A B C D E F</span></span><br><span class="line">    <span class="keyword">for</span> it <span class="keyword">in</span> iterables:</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> it:</span><br><span class="line">            <span class="keyword">yield</span> element</span><br></pre></td></tr></table></figure></li><li><p><code>itertools.combinations</code>(<em>iterable</em>, <em>r</em>)</p><p>返回由输入 <em>iterable</em> 中元素组成长度为 <em>r</em> 的子序列。组合按照字典序返回。所以如果输入 <em>iterable</em> 是有序的，生成的组合元组也是有序的。即使元素的值相同，不同位置的元素也被认为是不同的。如果元素各自不同，那么每个组合中没有重复元素。大致相当于:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combinations</span><span class="params">(iterable, r)</span>:</span></span><br><span class="line">    <span class="comment"># combinations('ABCD', 2) --&gt; AB AC AD BC BD CD</span></span><br><span class="line">    <span class="comment"># combinations(range(4), 3) --&gt; 012 013 023 123</span></span><br><span class="line">    pool = tuple(iterable)</span><br><span class="line">    n = len(pool)</span><br><span class="line">    <span class="keyword">if</span> r &gt; n:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">  indices = list(range(r))</span><br><span class="line">    <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(r)):</span><br><span class="line">            <span class="keyword">if</span> indices[i] != i + n - r:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        indices[i] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, r):</span><br><span class="line">            indices[j] = indices[j<span class="number">-1</span>] + <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br></pre></td></tr></table></figure><p><code>combinations()</code> 的代码可被改写为 <a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.permutations" target="_blank" rel="noopener"><code>permutations()</code></a> 过滤后的子序列，（相对于元素在输入中的位置）元素不是有序的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combinations</span><span class="params">(iterable, r)</span>:</span></span><br><span class="line">    pool = tuple(iterable)</span><br><span class="line">    n = len(pool)</span><br><span class="line">    <span class="keyword">for</span> indices <span class="keyword">in</span> permutations(range(n), r):</span><br><span class="line">        <span class="keyword">if</span> sorted(indices) == list(indices):</span><br><span class="line">            <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br></pre></td></tr></table></figure></li></ul><p>当 <code>0 &lt;= r &lt;= n</code> 时，返回项的个数是 <code>n! / r! / (n-r)!</code>；当 <code>r &gt; n</code> 时，返回项个数为0。</p><ul><li><p><code>itertools.combinations_with_replacement</code>(<em>iterable</em>, <em>r</em>)</p><p>返回由输入 <em>iterable</em> 中元素组成的长度为 <em>r</em> 的子序列，允许每个元素可重复出现。组合按照字典序返回。所以如果输入 <em>iterable</em> 是有序的，生成的组合元组也是有序的。不同位置的元素是不同的，即使它们的值相同。因此如果输入中的元素都是不同的话，返回的组合中元素也都会不同。大致相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combinations_with_replacement</span><span class="params">(iterable, r)</span>:</span></span><br><span class="line">    <span class="comment"># combinations_with_replacement('ABC', 2) --&gt; AA AB AC BB BC CC</span></span><br><span class="line">    pool = tuple(iterable)</span><br><span class="line">    n = len(pool)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> n <span class="keyword">and</span> r:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    indices = [<span class="number">0</span>] * r</span><br><span class="line">    <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(r)):</span><br><span class="line">            <span class="keyword">if</span> indices[i] != n - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        indices[i:] = [indices[i] + <span class="number">1</span>] * (r - i)</span><br><span class="line">        <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br></pre></td></tr></table></figure><p> <code>combinations_with_replacement() 的代码可被改写为</code>production()` 过滤后的子序列，（相对于元素在输入中的位置）元素不是有序的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combinations_with_replacement</span><span class="params">(iterable, r)</span>:</span></span><br><span class="line">    pool = tuple(iterable)</span><br><span class="line">    n = len(pool)</span><br><span class="line">    <span class="keyword">for</span> indices <span class="keyword">in</span> product(range(n), repeat=r):</span><br><span class="line">        <span class="keyword">if</span> sorted(indices) == list(indices):</span><br><span class="line">            <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>itertools.compress</code>(<em>data</em>, <em>selectors</em>)</p><p>创建一个迭代器，它返回 <em>data</em> 中经 <em>selectors</em> 真值测试为 <code>True</code> 的元素。迭代器在两者较短的长度处停止。大致相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compress</span><span class="params">(data, selectors)</span>:</span></span><br><span class="line">    <span class="comment"># compress('ABCDEF', [1,0,1,0,1,1]) --&gt; A C E F</span></span><br><span class="line">    <span class="keyword">return</span> (d <span class="keyword">for</span> d, s <span class="keyword">in</span> zip(data, selectors) <span class="keyword">if</span> s)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>itertools.count</code>(<em>start=0</em>, <em>step=1</em>)</p><p>创建一个迭代器，它从 <em>start</em> 值开始，返回均匀间隔的值。常用于 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#map" target="_blank" rel="noopener"><code>map()</code></a> 中的实参来生成连续的数据点。此外，还用于 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#zip" target="_blank" rel="noopener"><code>zip()</code></a> 来添加序列号。大致相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(start=<span class="number">0</span>, step=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="comment"># count(10) --&gt; 10 11 12 13 14 ...</span></span><br><span class="line">    <span class="comment"># count(2.5, 0.5) -&gt; 2.5 3.0 3.5 ...</span></span><br><span class="line">    n = start</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">        n += step</span><br><span class="line">~</span><br></pre></td></tr></table></figure><p>当对浮点数计数时，替换为乘法代码有时精度会更好，例如： <code>(start + step * i for i in count())</code> 。<em>在 3.1 版更改:</em> 增加参数 <em>step</em> ，允许非整型。</p></li><li><p><code>itertools.cycle</code>(<em>iterable</em>)</p><p>创建一个迭代器，返回 <em>iterable</em> 中所有元素并保存一个副本。当取完 <em>iterable</em> 中所有元素，返回副本中的所有元素。无限重复。大致相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cycle</span><span class="params">(iterable)</span>:</span></span><br><span class="line">    <span class="comment"># cycle('ABCD') --&gt; A B C D A B C D A B C D ...</span></span><br><span class="line">    saved = []</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">yield</span> element</span><br><span class="line">        saved.append(element)</span><br><span class="line">    <span class="keyword">while</span> saved:</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> saved:</span><br><span class="line">              <span class="keyword">yield</span> element</span><br></pre></td></tr></table></figure></li></ul><p>   `注意，该函数可能需要相当大的辅助空间（取决于 <em>iterable</em> 的长度）。</p><ul><li><p><code>itertools.dropwhile</code>(<em>predicate</em>, <em>iterable</em>)</p><p>创建一个迭代器，如果 <em>predicate</em> 为true，迭代器丢弃这些元素，然后返回其他元素。注意，迭代器在 <em>predicate</em> 首次为false之前不会产生任何输出，所以可能需要一定长度的启动时间。大致相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dropwhile</span><span class="params">(predicate, iterable)</span>:</span></span><br><span class="line">    <span class="comment"># dropwhile(lambda x: x&lt;5, [1,4,6,4,1]) --&gt; 6 4 1</span></span><br><span class="line">    iterable = iter(iterable)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> predicate(x):</span><br><span class="line">            <span class="keyword">yield</span> x</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">yield</span> x</span><br></pre></td></tr></table></figure></li><li><p><code>itertools.filterfalse</code>(<em>predicate</em>, <em>iterable</em>)</p><p>创建一个迭代器，只返回 <em>iterable</em> 中 <em>predicate</em> 为 <code>False</code> 的元素。如果 <em>predicate</em> 是 <code>None</code>，返回真值测试为false的元素。大致相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filterfalse</span><span class="params">(predicate, iterable)</span>:</span></span><br><span class="line">    <span class="comment"># filterfalse(lambda x: x%2, range(10)) --&gt; 0 2 4 6 8</span></span><br><span class="line">    <span class="keyword">if</span> predicate <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        predicate = bool</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> predicate(x):</span><br><span class="line">            <span class="keyword">yield</span> x</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>itertools.groupby</code>(<em>iterable</em>, <em>key=None</em>)</p><p>创建一个迭代器，返回 <em>iterable</em> 中连续的键和组。<em>key</em> 是一个计算元素键值函数。如果未指定或为 <code>None</code>，<em>key</em> 缺省为恒等函数（identity function），返回元素不变。一般来说，<em>iterable</em> 需用同一个键值函数预先排序。</p><p><a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.groupby" target="_blank" rel="noopener"><code>groupby()</code></a> 操作类似于Unix中的 <code>uniq</code>。当每次 <em>key</em> 函数产生的键值改变时，迭代器会分组或生成一个新组（这就是为什么通常需要使用同一个键值函数先对数据进行排序）。这种行为与SQL的GROUP BY操作不同，SQL的操作会忽略输入的顺序将相同键值的元素分在同组中。</p><p>返回的组本身也是一个迭代器，它与 <a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.groupby" target="_blank" rel="noopener"><code>groupby()</code></a> 共享底层的可迭代对象。因为源是共享的，当 <a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.groupby" target="_blank" rel="noopener"><code>groupby()</code></a> 对象向后迭代时，前一个组将消失。因此如果稍后还需要返回结果，可保存为列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">groups = []</span><br><span class="line">uniquekeys = []</span><br><span class="line">data = sorted(data, key=keyfunc)</span><br><span class="line"><span class="keyword">for</span> k, g <span class="keyword">in</span> groupby(data, keyfunc):</span><br><span class="line">    groups.append(list(g))      <span class="comment"># Store group iterator as a list</span></span><br><span class="line">    uniquekeys.append(k)</span><br></pre></td></tr></table></figure><p><a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.groupby" target="_blank" rel="noopener"><code>groupby()</code></a> 大致相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">groupby</span>:</span></span><br><span class="line">    <span class="comment"># [k for k, g in groupby('AAAABBBCCDAABBB')] --&gt; A B C D A B</span></span><br><span class="line">    <span class="comment"># [list(g) for k, g in groupby('AAAABBBCCD')] --&gt; AAAA BBB CC D</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, iterable, key=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            key = <span class="keyword">lambda</span> x: x</span><br><span class="line">        self.keyfunc = key</span><br><span class="line">        self.it = iter(iterable)</span><br><span class="line">        self.tgtkey = self.currkey = self.currvalue = object()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.id = object()</span><br><span class="line">        <span class="keyword">while</span> self.currkey == self.tgtkey:</span><br><span class="line">            self.currvalue = next(self.it)    <span class="comment"># Exit on StopIteration</span></span><br><span class="line">            self.currkey = self.keyfunc(self.currvalue)</span><br><span class="line">        self.tgtkey = self.currkey</span><br><span class="line">        <span class="keyword">return</span> (self.currkey, self._grouper(self.tgtkey, self.id))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_grouper</span><span class="params">(self, tgtkey, id)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.id <span class="keyword">is</span> id <span class="keyword">and</span> self.currkey == tgtkey:</span><br><span class="line">            <span class="keyword">yield</span> self.currvalue</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.currvalue = next(self.it)</span><br><span class="line">            <span class="keyword">except</span> StopIteration:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            self.currkey = self.keyfunc(self.currvalue)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>itertools.islice</code>(<em>iterable</em>, <em>stop</em>)</p></li><li><p><code>itertools.islice</code>(<em>iterable</em>, <em>start</em>, <em>stop</em>[, <em>step</em>])</p><p>创建一个迭代器，返回从 <em>iterable</em> 里选中的元素。如果 <em>start</em> 不是0，跳过 <em>iterable</em> 中的元素，直到到达 <em>start</em> 这个位置。之后迭代器连续返回元素，除非 <em>step</em> 设置的值很高导致被跳过。如果 <em>stop</em> 为 <code>None</code>，迭代器耗光为止；否则，在指定的位置停止。与普通的切片不同，<a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.islice" target="_blank" rel="noopener"><code>islice()</code></a> 不支持将 <em>start</em> ， <em>stop</em> ，或 <em>step</em> 设为负值。可用来从内部数据结构被压平的数据中提取相关字段（例如一个多行报告，它的名称字段出现在每三行上）。大致相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">islice</span><span class="params">(iterable, *args)</span>:</span></span><br><span class="line">    <span class="comment"># islice('ABCDEFG', 2) --&gt; A B</span></span><br><span class="line">    <span class="comment"># islice('ABCDEFG', 2, 4) --&gt; C D</span></span><br><span class="line">    <span class="comment"># islice('ABCDEFG', 2, None) --&gt; C D E F G</span></span><br><span class="line">    <span class="comment"># islice('ABCDEFG', 0, None, 2) --&gt; A C E G</span></span><br><span class="line">    s = slice(*args)</span><br><span class="line">    start, stop, step = s.start <span class="keyword">or</span> <span class="number">0</span>, s.stop <span class="keyword">or</span> sys.maxsize, s.step <span class="keyword">or</span> <span class="number">1</span></span><br><span class="line">    it = iter(range(start, stop, step))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        nexti = next(it)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="comment"># Consume *iterable* up to the *start* position.</span></span><br><span class="line">        <span class="keyword">for</span> i, element <span class="keyword">in</span> zip(range(start), iterable):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> i, element <span class="keyword">in</span> enumerate(iterable):</span><br><span class="line">            <span class="keyword">if</span> i == nexti:</span><br><span class="line">                <span class="keyword">yield</span> element</span><br><span class="line">                nexti = next(it)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="comment"># Consume to *stop*.</span></span><br><span class="line">        <span class="keyword">for</span> i, element <span class="keyword">in</span> zip(range(i + <span class="number">1</span>, stop), iterable):</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>如果 <em>start</em> 为 <code>None</code>，迭代从0开始。如果 <em>step</em> 为 <code>None</code> ，步长缺省为1。</p></li><li><p><code>itertools.permutations</code>(<em>iterable</em>, <em>r=None</em>)</p><p>连续返回由 <em>iterable</em> 元素生成长度为 <em>r</em> 的排列。如果 <em>r</em> 未指定或为 <code>None</code> ，<em>r</em> 默认设置为 <em>iterable</em> 的长度，这种情况下，生成所有全长排列。排列依字典序发出。因此，如果 <em>iterable</em> 是已排序的，排列元组将有序地产出。即使元素的值相同，不同位置的元素也被认为是不同的。如果元素值都不同，每个排列中的元素值不会重复。大致相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutations</span><span class="params">(iterable, r=None)</span>:</span></span><br><span class="line">    <span class="comment"># permutations('ABCD', 2) --&gt; AB AC AD BA BC BD CA CB CD DA DB DC</span></span><br><span class="line">    <span class="comment"># permutations(range(3)) --&gt; 012 021 102 120 201 210</span></span><br><span class="line">    pool = tuple(iterable)</span><br><span class="line">    n = len(pool)</span><br><span class="line">    r = n <span class="keyword">if</span> r <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> r</span><br><span class="line">    <span class="keyword">if</span> r &gt; n:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    indices = list(range(n))</span><br><span class="line">    cycles = list(range(n, n-r, <span class="number">-1</span>))</span><br><span class="line">    <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices[:r])</span><br><span class="line">    <span class="keyword">while</span> n:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(r)):</span><br><span class="line">            cycles[i] -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> cycles[i] == <span class="number">0</span>:</span><br><span class="line">                indices[i:] = indices[i+<span class="number">1</span>:] + indices[i:i+<span class="number">1</span>]</span><br><span class="line">                cycles[i] = n - i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                j = cycles[i]</span><br><span class="line">                indices[i], indices[-j] = indices[-j], indices[i]</span><br><span class="line">                <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices[:r])</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p><a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.permutations" target="_blank" rel="noopener"><code>permutations()</code></a> 的代码也可被改写为 <a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.product" target="_blank" rel="noopener"><code>product()</code></a> 的子序列，只要将含有重复元素（来自输入中同一位置的）的项排除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutations</span><span class="params">(iterable, r=None)</span>:</span></span><br><span class="line">    pool = tuple(iterable)</span><br><span class="line">    n = len(pool)</span><br><span class="line">    r = n <span class="keyword">if</span> r <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> r</span><br><span class="line">    <span class="keyword">for</span> indices <span class="keyword">in</span> product(range(n), repeat=r):</span><br><span class="line">        <span class="keyword">if</span> len(set(indices)) == r:</span><br><span class="line">            <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br></pre></td></tr></table></figure><p>当 <code>0 &lt;= r &lt;= n</code> ，返回项个数为 <code>n! / (n-r)!</code> ；当 <code>r &gt; n</code> ，返回项个数为0。</p></li><li><p><code>itertools.product</code>(*<em>iterables</em>, <em>repeat=1</em>)</p><p>可迭代对象输入的笛卡儿积。大致相当于生成器表达式中的嵌套循环。例如， <code>product(A, B)</code> 和 <code>((x,y) for x in A for y in B)</code> 返回结果一样。</p><p>嵌套循环像里程表那样循环变动，每次迭代时将最右侧的元素向后迭代。这种模式形成了一种字典序，因此如果输入的可迭代对象是已排序的，笛卡尔积元组依次序发出。</p><p>要计算可迭代对象自身的笛卡尔积，将可选参数 <em>repeat</em> 设定为要重复的次数。例如，<code>product(A, repeat=4)</code> 和 <code>product(A, A, A, A)</code> 是一样的。</p><p>该函数大致相当于下面的代码，只不过实际实现方案不会在内存中创建中间结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">product</span><span class="params">(*args, repeat=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="comment"># product('ABCD', 'xy') --&gt; Ax Ay Bx By Cx Cy Dx Dy</span></span><br><span class="line">    <span class="comment"># product(range(2), repeat=3) --&gt; 000 001 010 011 100 101 110 111</span></span><br><span class="line">    pools = [tuple(pool) <span class="keyword">for</span> pool <span class="keyword">in</span> args] * repeat</span><br><span class="line">    result = [[]]</span><br><span class="line">    <span class="keyword">for</span> pool <span class="keyword">in</span> pools:</span><br><span class="line">        result = [x+[y] <span class="keyword">for</span> x <span class="keyword">in</span> result <span class="keyword">for</span> y <span class="keyword">in</span> pool]</span><br><span class="line">    <span class="keyword">for</span> prod <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">yield</span> tuple(prod)</span><br></pre></td></tr></table></figure></li><li><p><code>itertools.repeat</code>(<em>object</em>[, <em>times</em>])</p><p>创建一个迭代器，不断重复 <em>object</em> 。除非设定参数 <em>times</em> ，否则将无限重复。可用于 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#map" target="_blank" rel="noopener"><code>map()</code></a> 函数中的参数，被调用函数可得到一个不变参数。也可用于 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#zip" target="_blank" rel="noopener"><code>zip()</code></a> 的参数以在元组记录中创建一个不变的部分。大致相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repeat</span><span class="params">(object, times=None)</span>:</span></span><br><span class="line">    <span class="comment"># repeat(10, 3) --&gt; 10 10 10</span></span><br><span class="line">    <span class="keyword">if</span> times <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">yield</span> object</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(times):</span><br><span class="line">            <span class="keyword">yield</span> object</span><br></pre></td></tr></table></figure><p><em>repeat</em> 最常见的用途就是在 <em>map</em> 或 <em>zip</em> 提供一个常量流：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(pow, range(<span class="number">10</span>), repeat(<span class="number">2</span>)))</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>itertools.starmap</code>(<em>function</em>, <em>iterable</em>)</p><p>创建一个迭代器，使用从可迭代对象中获取的参数来计算该函数。当参数对应的形参已从一个单独可迭代对象组合为元组时（数据已被“预组对”）可用此函数代替 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#map" target="_blank" rel="noopener"><code>map()</code></a>。<a href="https://docs.python.org/zh-cn/3.8/library/functions.html#map" target="_blank" rel="noopener"><code>map()</code></a> 与 <a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.starmap" target="_blank" rel="noopener"><code>starmap()</code></a> 之间的区别可以类比 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">starmap</span><span class="params">(function, iterable)</span>:</span></span><br><span class="line">    <span class="comment"># starmap(pow, [(2,5), (3,2), (10,3)]) --&gt; 32 9 1000</span></span><br><span class="line">    <span class="keyword">for</span> args <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">yield</span> function(*args)</span><br></pre></td></tr></table></figure></li><li><p><code>itertools.takewhile</code>(<em>predicate</em>, <em>iterable</em>)</p><p>创建一个迭代器，只要 predicate 为真就从可迭代对象中返回元素。大致相当于:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">takewhile</span><span class="params">(predicate, iterable)</span>:</span></span><br><span class="line">    <span class="comment"># takewhile(lambda x: x&lt;5, [1,4,6,4,1]) --&gt; 1 4</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> predicate(x):</span><br><span class="line">            <span class="keyword">yield</span> x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></li><li><p><code>itertools.tee</code>(<em>iterable</em>, <em>n=2</em>)</p><p>从一个可迭代对象中返回 <em>n</em> 个独立的迭代器。下面的Python代码能帮助解释 <em>tee</em> 做了什么（尽管实际的实现更复杂，而且仅使用了一个底层的 FIFO 队列）。大致相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tee</span><span class="params">(iterable, n=<span class="number">2</span>)</span>:</span></span><br><span class="line">    it = iter(iterable)</span><br><span class="line">    deques = [collections.deque() <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">(mydeque)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> mydeque:             <span class="comment"># when the local deque is empty</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    newval = next(it)   <span class="comment"># fetch a new value and</span></span><br><span class="line">                <span class="keyword">except</span> StopIteration:</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">for</span> d <span class="keyword">in</span> deques:        <span class="comment"># load it to all the deques</span></span><br><span class="line">                    d.append(newval)</span><br><span class="line">            <span class="keyword">yield</span> mydeque.popleft()</span><br><span class="line">    <span class="keyword">return</span> tuple(gen(d) <span class="keyword">for</span> d <span class="keyword">in</span> deques)</span><br></pre></td></tr></table></figure><p>一旦 <a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.tee" target="_blank" rel="noopener"><code>tee()</code></a> 实施了一次分裂，原有的 <em>iterable</em> 不应再被使用；否则tee对象无法得知 <em>iterable</em> 可能已向后迭代。</p><p><code>tee</code> 迭代器不是线程安全的。当同时使用由同一个 <a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.tee" target="_blank" rel="noopener"><code>tee()</code></a> 调用所返回的迭代器时可能引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#RuntimeError" target="_blank" rel="noopener"><code>RuntimeError</code></a>，即使原本的 <em>iterable</em> 是线程安全的。</p><p>该迭代工具可能需要相当大的辅助存储空间（这取决于要保存多少临时数据）。通常，如果一个迭代器在另一个迭代器开始之前就要使用大部份或全部数据，使用 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#list" target="_blank" rel="noopener"><code>list()</code></a> 会比 <a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.tee" target="_blank" rel="noopener"><code>tee()</code></a> 更快。</p></li><li><p><code>itertools.zip_longest</code>(*<em>iterables</em>, <em>fillvalue=None</em>)</p><p>创建一个迭代器，从每个可迭代对象中收集元素。如果可迭代对象的长度未对齐，将根据 <em>fillvalue</em> 填充缺失值。迭代持续到耗光最长的可迭代对象。大致相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zip_longest</span><span class="params">(*args, fillvalue=None)</span>:</span></span><br><span class="line">    <span class="comment"># zip_longest('ABCD', 'xy', fillvalue='-') --&gt; Ax By C- D-</span></span><br><span class="line">    iterators = [iter(it) <span class="keyword">for</span> it <span class="keyword">in</span> args]</span><br><span class="line">    num_active = len(iterators)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> num_active:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        values = []</span><br><span class="line">        <span class="keyword">for</span> i, it <span class="keyword">in</span> enumerate(iterators):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                value = next(it)</span><br><span class="line">            <span class="keyword">except</span> StopIteration:</span><br><span class="line">                num_active -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> num_active:</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                iterators[i] = repeat(fillvalue)</span><br><span class="line">                value = fillvalue</span><br><span class="line">            values.append(value)</span><br><span class="line">        <span class="keyword">yield</span> tuple(values)</span><br></pre></td></tr></table></figure><p>如果其中一个可迭代对象有无限长度，<a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.zip_longest" target="_blank" rel="noopener"><code>zip_longest()</code></a> 函数应封装在限制调用次数的场景中（例如 <a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.islice" target="_blank" rel="noopener"><code>islice()</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.takewhile" target="_blank" rel="noopener"><code>takewhile()</code></a>）。除非指定， <em>fillvalue</em> 默认为 <code>None</code> 。</p></li></ul><h2 id="itertools-扩展"><a href="#itertools-扩展" class="headerlink" title="itertools 扩展"></a>itertools 扩展</h2><p>本节将展示如何使用现有的 itertools 作为基础构件来创建扩展的工具集。</p><p>基本上所有这些西方和许许多多其他的配方都可以通过 Python Package Index 上的 <a href="https://pypi.org/project/more-itertools/" target="_blank" rel="noopener">more-itertools 项目</a> 来安装:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install more-itertools</span><br></pre></td></tr></table></figure><p>扩展的工具提供了与底层工具集相同的高性能。保持了超棒的内存利用率，因为一次只处理一个元素，而不是将整个可迭代对象加载到内存。代码量保持得很小，以函数式风格将这些工具连接在一起，有助于消除临时变量。速度依然很快，因为倾向于使用“矢量化”构件来取代解释器开销大的 for 循环和 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-generator" target="_blank" rel="noopener">generator</a> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">take</span><span class="params">(n, iterable)</span>:</span></span><br><span class="line">    <span class="string">"Return first n items of the iterable as a list"</span></span><br><span class="line">    <span class="keyword">return</span> list(islice(iterable, n))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prepend</span><span class="params">(value, iterator)</span>:</span></span><br><span class="line">    <span class="string">"Prepend a single value in front of an iterator"</span></span><br><span class="line">    <span class="comment"># prepend(1, [2, 3, 4]) -&gt; 1 2 3 4</span></span><br><span class="line">    <span class="keyword">return</span> chain([value], iterator)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tabulate</span><span class="params">(function, start=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">"Return function(0), function(1), ..."</span></span><br><span class="line">    <span class="keyword">return</span> map(function, count(start))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tail</span><span class="params">(n, iterable)</span>:</span></span><br><span class="line">    <span class="string">"Return an iterator over the last n items"</span></span><br><span class="line">    <span class="comment"># tail(3, 'ABCDEFG') --&gt; E F G</span></span><br><span class="line">    <span class="keyword">return</span> iter(collections.deque(iterable, maxlen=n))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consume</span><span class="params">(iterator, n=None)</span>:</span></span><br><span class="line">    <span class="string">"Advance the iterator n-steps ahead. If n is None, consume entirely."</span></span><br><span class="line">    <span class="comment"># Use functions that consume iterators at C speed.</span></span><br><span class="line">    <span class="keyword">if</span> n <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># feed the entire iterator into a zero-length deque</span></span><br><span class="line">        collections.deque(iterator, maxlen=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># advance to the empty slice starting at position n</span></span><br><span class="line">        next(islice(iterator, n, n), <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nth</span><span class="params">(iterable, n, default=None)</span>:</span></span><br><span class="line">    <span class="string">"Returns the nth item or a default value"</span></span><br><span class="line">    <span class="keyword">return</span> next(islice(iterable, n, <span class="literal">None</span>), default)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">all_equal</span><span class="params">(iterable)</span>:</span></span><br><span class="line">    <span class="string">"Returns True if all the elements are equal to each other"</span></span><br><span class="line">    g = groupby(iterable)</span><br><span class="line">    <span class="keyword">return</span> next(g, <span class="literal">True</span>) <span class="keyword">and</span> <span class="keyword">not</span> next(g, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quantify</span><span class="params">(iterable, pred=bool)</span>:</span></span><br><span class="line">    <span class="string">"Count how many times the predicate is true"</span></span><br><span class="line">    <span class="keyword">return</span> sum(map(pred, iterable))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">padnone</span><span class="params">(iterable)</span>:</span></span><br><span class="line">    <span class="string">"""Returns the sequence elements and then returns None indefinitely.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Useful for emulating the behavior of the built-in map() function.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> chain(iterable, repeat(<span class="literal">None</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ncycles</span><span class="params">(iterable, n)</span>:</span></span><br><span class="line">    <span class="string">"Returns the sequence elements n times"</span></span><br><span class="line">    <span class="keyword">return</span> chain.from_iterable(repeat(tuple(iterable), n))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dotproduct</span><span class="params">(vec1, vec2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sum(map(operator.mul, vec1, vec2))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flatten</span><span class="params">(list_of_lists)</span>:</span></span><br><span class="line">    <span class="string">"Flatten one level of nesting"</span></span><br><span class="line">    <span class="keyword">return</span> chain.from_iterable(list_of_lists)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repeatfunc</span><span class="params">(func, times=None, *args)</span>:</span></span><br><span class="line">    <span class="string">"""Repeat calls to func with specified arguments.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Example:  repeatfunc(random.random)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> times <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> starmap(func, repeat(args))</span><br><span class="line">    <span class="keyword">return</span> starmap(func, repeat(args, times))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pairwise</span><span class="params">(iterable)</span>:</span></span><br><span class="line">    <span class="string">"s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."</span></span><br><span class="line">    a, b = tee(iterable)</span><br><span class="line">    next(b, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> zip(a, b)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grouper</span><span class="params">(iterable, n, fillvalue=None)</span>:</span></span><br><span class="line">    <span class="string">"Collect data into fixed-length chunks or blocks"</span></span><br><span class="line">    <span class="comment"># grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx"</span></span><br><span class="line">    args = [iter(iterable)] * n</span><br><span class="line">    <span class="keyword">return</span> zip_longest(*args, fillvalue=fillvalue)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">roundrobin</span><span class="params">(*iterables)</span>:</span></span><br><span class="line">    <span class="string">"roundrobin('ABC', 'D', 'EF') --&gt; A D E B F C"</span></span><br><span class="line">    <span class="comment"># Recipe credited to George Sakkis</span></span><br><span class="line">    num_active = len(iterables)</span><br><span class="line">    nexts = cycle(iter(it).__next__ <span class="keyword">for</span> it <span class="keyword">in</span> iterables)</span><br><span class="line">    <span class="keyword">while</span> num_active:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> next <span class="keyword">in</span> nexts:</span><br><span class="line">                <span class="keyword">yield</span> next()</span><br><span class="line">        <span class="keyword">except</span> StopIteration:</span><br><span class="line">            <span class="comment"># Remove the iterator we just exhausted from the cycle.</span></span><br><span class="line">            num_active -= <span class="number">1</span></span><br><span class="line">            nexts = cycle(islice(nexts, num_active))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(pred, iterable)</span>:</span></span><br><span class="line">    <span class="string">'Use a predicate to partition entries into false entries and true entries'</span></span><br><span class="line">    <span class="comment"># partition(is_odd, range(10)) --&gt; 0 2 4 6 8   and  1 3 5 7 9</span></span><br><span class="line">    t1, t2 = tee(iterable)</span><br><span class="line">    <span class="keyword">return</span> filterfalse(pred, t1), filter(pred, t2)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">powerset</span><span class="params">(iterable)</span>:</span></span><br><span class="line">    <span class="string">"powerset([1,2,3]) --&gt; () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"</span></span><br><span class="line">    s = list(iterable)</span><br><span class="line">    <span class="keyword">return</span> chain.from_iterable(combinations(s, r) <span class="keyword">for</span> r <span class="keyword">in</span> range(len(s)+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unique_everseen</span><span class="params">(iterable, key=None)</span>:</span></span><br><span class="line">    <span class="string">"List unique elements, preserving order. Remember all elements ever seen."</span></span><br><span class="line">    <span class="comment"># unique_everseen('AAAABBBCCDAABBB') --&gt; A B C D</span></span><br><span class="line">    <span class="comment"># unique_everseen('ABBCcAD', str.lower) --&gt; A B C D</span></span><br><span class="line">    seen = set()</span><br><span class="line">    seen_add = seen.add</span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> filterfalse(seen.__contains__, iterable):</span><br><span class="line">            seen_add(element)</span><br><span class="line">            <span class="keyword">yield</span> element</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> iterable:</span><br><span class="line">            k = key(element)</span><br><span class="line">            <span class="keyword">if</span> k <span class="keyword">not</span> <span class="keyword">in</span> seen:</span><br><span class="line">                seen_add(k)</span><br><span class="line">                <span class="keyword">yield</span> element</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unique_justseen</span><span class="params">(iterable, key=None)</span>:</span></span><br><span class="line">    <span class="string">"List unique elements, preserving order. Remember only the element just seen."</span></span><br><span class="line">    <span class="comment"># unique_justseen('AAAABBBCCDAABBB') --&gt; A B C D A B</span></span><br><span class="line">    <span class="comment"># unique_justseen('ABBCcAD', str.lower) --&gt; A B C A D</span></span><br><span class="line">    <span class="keyword">return</span> map(next, map(operator.itemgetter(<span class="number">1</span>), groupby(iterable, key)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">iter_except</span><span class="params">(func, exception, first=None)</span>:</span></span><br><span class="line">    <span class="string">""" Call a function repeatedly until an exception is raised.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Converts a call-until-exception interface to an iterator interface.</span></span><br><span class="line"><span class="string">    Like builtins.iter(func, sentinel) but uses an exception instead</span></span><br><span class="line"><span class="string">    of a sentinel to end the loop.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Examples:</span></span><br><span class="line"><span class="string">        iter_except(functools.partial(heappop, h), IndexError)   # priority queue iterator</span></span><br><span class="line"><span class="string">        iter_except(d.popitem, KeyError)                         # non-blocking dict iterator</span></span><br><span class="line"><span class="string">        iter_except(d.popleft, IndexError)                       # non-blocking deque iterator</span></span><br><span class="line"><span class="string">        iter_except(q.get_nowait, Queue.Empty)                   # loop over a producer Queue</span></span><br><span class="line"><span class="string">        iter_except(s.pop, KeyError)                             # non-blocking set iterator</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> first <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">yield</span> first()            <span class="comment"># For database APIs needing an initial cast to db.first()</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">yield</span> func()</span><br><span class="line">    <span class="keyword">except</span> exception:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first_true</span><span class="params">(iterable, default=False, pred=None)</span>:</span></span><br><span class="line">    <span class="string">"""Returns the first true value in the iterable.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    If no true value is found, returns *default*</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    If *pred* is not None, returns the first item</span></span><br><span class="line"><span class="string">    for which pred(item) is true.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># first_true([a,b,c], x) --&gt; a or b or c or x</span></span><br><span class="line">    <span class="comment"># first_true([a,b], x, f) --&gt; a if f(a) else b if f(b) else x</span></span><br><span class="line">    <span class="keyword">return</span> next(filter(pred, iterable), default)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_product</span><span class="params">(*args, repeat=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="string">"Random selection from itertools.product(*args, **kwds)"</span></span><br><span class="line">    pools = [tuple(pool) <span class="keyword">for</span> pool <span class="keyword">in</span> args] * repeat</span><br><span class="line">    <span class="keyword">return</span> tuple(random.choice(pool) <span class="keyword">for</span> pool <span class="keyword">in</span> pools)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_permutation</span><span class="params">(iterable, r=None)</span>:</span></span><br><span class="line">    <span class="string">"Random selection from itertools.permutations(iterable, r)"</span></span><br><span class="line">    pool = tuple(iterable)</span><br><span class="line">    r = len(pool) <span class="keyword">if</span> r <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> r</span><br><span class="line">    <span class="keyword">return</span> tuple(random.sample(pool, r))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_combination</span><span class="params">(iterable, r)</span>:</span></span><br><span class="line">    <span class="string">"Random selection from itertools.combinations(iterable, r)"</span></span><br><span class="line">    pool = tuple(iterable)</span><br><span class="line">    n = len(pool)</span><br><span class="line">    indices = sorted(random.sample(range(n), r))</span><br><span class="line">    <span class="keyword">return</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_combination_with_replacement</span><span class="params">(iterable, r)</span>:</span></span><br><span class="line">    <span class="string">"Random selection from itertools.combinations_with_replacement(iterable, r)"</span></span><br><span class="line">    pool = tuple(iterable)</span><br><span class="line">    n = len(pool)</span><br><span class="line">    indices = sorted(random.randrange(n) <span class="keyword">for</span> i <span class="keyword">in</span> range(r))</span><br><span class="line">    <span class="keyword">return</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nth_combination</span><span class="params">(iterable, r, index)</span>:</span></span><br><span class="line">    <span class="string">'Equivalent to list(combinations(iterable, r))[index]'</span></span><br><span class="line">    pool = tuple(iterable)</span><br><span class="line">    n = len(pool)</span><br><span class="line">    <span class="keyword">if</span> r &lt; <span class="number">0</span> <span class="keyword">or</span> r &gt; n:</span><br><span class="line">        <span class="keyword">raise</span> ValueError</span><br><span class="line">    c = <span class="number">1</span></span><br><span class="line">    k = min(r, n-r)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, k+<span class="number">1</span>):</span><br><span class="line">        c = c * (n - k + i) // i</span><br><span class="line">    <span class="keyword">if</span> index &lt; <span class="number">0</span>:</span><br><span class="line">        index += c</span><br><span class="line">    <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;= c:</span><br><span class="line">        <span class="keyword">raise</span> IndexError</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> r:</span><br><span class="line">        c, n, r = c*r//n, n<span class="number">-1</span>, r<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> index &gt;= c:</span><br><span class="line">            index -= c</span><br><span class="line">            c, n = c*(n-r)//n, n<span class="number">-1</span></span><br><span class="line">        result.append(pool[<span class="number">-1</span>-n])</span><br><span class="line">    <span class="keyword">return</span> tuple(result)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库-itertools&quot;&gt;&lt;a href=&quot;#python-标准库-itertools&quot; class=&quot;headerlink&quot; title=&quot;python 标准库 itertools&quot;&gt;&lt;/a&gt;python 标准库 itertools&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/jeffsui/app_image_resource/blob/master/20200203_Alita-Battle-Angel-2019.png?raw=true&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/categories/python/standard-library/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="itertools" scheme="https://pinghailinfeng.gitee.io/tags/itertools/"/>
    
  </entry>
  
  <entry>
    <title>python standard library copy</title>
    <link href="https://pinghailinfeng.gitee.io/2020/02/02/python-standard-library-copy/"/>
    <id>https://pinghailinfeng.gitee.io/2020/02/02/python-standard-library-copy/</id>
    <published>2020-02-02T01:04:07.000Z</published>
    <updated>2020-02-04T10:54:47.122Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库-copy"><a href="#python-标准库-copy" class="headerlink" title="python 标准库 copy"></a>python 标准库 copy</h1><p><img src="https://quotescover.com/wp-content/uploads/We-are-suffering-from-too__quotes-by-Marianne-Moore-22-1024x1024.png" alt></p><a id="more"></a><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=562888&auto=0&height=66"></iframe><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p> <strong>源代码:</strong> <a href="https://github.com/python/cpython/tree/3.8/Lib/copy.py" target="_blank" rel="noopener">Lib/copy.py</a> </p><p>类层次结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Interface summary:</span><br><span class="line">        <span class="keyword">import</span> copy</span><br><span class="line">        x = copy.copy(y)        <span class="comment"># make a shallow copy of y</span></span><br><span class="line">        x = copy.deepcopy(y)    <span class="comment"># make a deep copy of y</span></span><br></pre></td></tr></table></figure><p>Python 中赋值语句不复制对象，而是在目标和对象之间创建绑定 (bindings) 关系。对于自身可变或者包含可变项的集合对象，开发者有时会需要生成其副本用于改变操作，进而避免改变原对象。本模块提供了通用的浅层复制和深层复制操作（如下所述）。</p><p>接口摘要：</p><ul><li><p><code>copy.copy</code>(<em>x</em>)</p><p>返回 <em>x</em> 的浅层复制。</p></li><li><p><code>copy.deepcopy</code>(<em>x</em>[, <em>memo</em>])</p><p>返回 <em>x</em> 的深层复制。</p></li><li><p><em>exception</em> <code>copy.error</code></p><p>针对模块特定错误引发。</p></li></ul><p>浅层复制和深层复制之间的区别仅与复合对象 (即包含其他对象的对象，如列表或类的实例) 相关:</p><ul><li>一个 <em>浅层复制</em> 会构造一个新的复合对象，然后（在可能的范围内）将原对象中找到的 <em>引用</em> 插入其中。</li><li>一个 <em>深层复制</em> 会构造一个新的复合对象，然后递归地将原始对象中所找到的对象的 <em>副本</em> 插入。</li></ul><p>深度复制操作通常存在两个问题, 而浅层复制操作并不存在这些问题：</p><ul><li>递归对象 (直接或间接包含对自身引用的复合对象) 可能会导致递归循环。</li><li>由于深层复制会复制所有内容，因此可能会过多复制（例如本应该在副本之间共享的数据）。</li></ul><p>The <a href="https://docs.python.org/zh-cn/3.8/library/copy.html#copy.deepcopy" target="_blank" rel="noopener"><code>deepcopy()</code></a> function avoids these problems by:</p><ul><li>保留在当前复制过程中已复制的对象的 “备忘录” （<code>memo</code>） 字典；以及</li><li>允许用户定义的类重载复制操作或复制的组件集合。</li></ul><p>该模块不复制模块、方法、栈追踪（stack trace）、栈帧（stack frame）、文件、套接字、窗口、数组以及任何类似的类型。它通过不改变地返回原始对象来（浅层或深层地）“复制”函数和类；这与 <a href="https://docs.python.org/zh-cn/3.8/library/pickle.html#module-pickle" target="_blank" rel="noopener"><code>pickle</code></a> 模块处理这类问题的方式是相似的。</p><p>制作字典的浅层复制可以使用 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#dict.copy" target="_blank" rel="noopener"><code>dict.copy()</code></a> 方法，而制作列表的浅层复制可以通过赋值整个列表的切片完成，例如，<code>copied_list = original_list[:]</code>。</p><p>类可以使用与控制序列化（pickling）操作相同的接口来控制复制操作，关于这些方法的描述信息请参考 <a href="https://docs.python.org/zh-cn/3.8/library/pickle.html#module-pickle" target="_blank" rel="noopener"><code>pickle</code></a> 模块。实际上，<a href="https://docs.python.org/zh-cn/3.8/library/copy.html#module-copy" target="_blank" rel="noopener"><code>copy</code></a> 模块使用的正是从 <a href="https://docs.python.org/zh-cn/3.8/library/copyreg.html#module-copyreg" target="_blank" rel="noopener"><code>copyreg</code></a> 模块中注册的 pickle 函数。</p><p>想要给一个类定义它自己的拷贝操作实现，可以通过定义特殊方法 <code>__copy__()</code> 和 <code>__deepcopy__()</code>。 调用前者以实现浅层拷贝操作，该方法不用传入额外参数。 调用后者以实现深层拷贝操作；它应传入一个参数即 <code>memo</code> 字典。 如果 <code>__deepcopy__()</code> 实现需要创建一个组件的深层拷贝，它应当调用 <a href="https://docs.python.org/zh-cn/3.8/library/copy.html#copy.deepcopy" target="_blank" rel="noopener"><code>deepcopy()</code></a> 函数并以该组件作为第一个参数，而将 memo 字典作为第二个参数。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="字典拷贝"><a href="#字典拷贝" class="headerlink" title="字典拷贝"></a>字典拷贝</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">displayList</span><span class="params">(text, dictOfElements)</span> :</span></span><br><span class="line">    print(<span class="string">"--------"</span>)</span><br><span class="line">    print(text)</span><br><span class="line">    <span class="keyword">for</span> key , value <span class="keyword">in</span> dictOfElements.items():</span><br><span class="line">        print(key, <span class="string">" :: "</span>, value)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Dictionary of strings and ints</span></span><br><span class="line">    wordsDict = &#123;</span><br><span class="line">        <span class="string">"Hello"</span>: <span class="number">56</span>,</span><br><span class="line">        <span class="string">"at"</span> : <span class="number">23</span> ,</span><br><span class="line">        <span class="string">"test"</span> : <span class="number">43</span>,</span><br><span class="line">        <span class="string">"this"</span> : <span class="number">43</span>,</span><br><span class="line">        <span class="string">"who"</span> : [<span class="number">56</span>, <span class="number">34</span>, <span class="number">44</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Shallow Copying dictionaries using dict.copy()</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    print(<span class="string">"***** Shallow Copy *********"</span>)</span><br><span class="line">    </span><br><span class="line">    displayList(<span class="string">"Original Dictionary : "</span> , wordsDict)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># create a Shallow copy  the original dictionary</span></span><br><span class="line">    newDict = wordsDict.copy()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Modify the value of key in new dictionary</span></span><br><span class="line">    newDict[<span class="string">"at"</span>] = <span class="number">200</span></span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"Contents of copied dictionary changed"</span>)</span><br><span class="line"> </span><br><span class="line">    displayList(<span class="string">"Modified copied dictionary : "</span> , newDict)</span><br><span class="line">    </span><br><span class="line">    displayList(<span class="string">"Original Dictionary : "</span> , wordsDict)</span><br><span class="line"> </span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Modify the contents of list object in shallow copied dictionary will </span></span><br><span class="line"><span class="string">    modify the contents of original dictionary too because its a shallow copy. </span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    newDict[<span class="string">"who"</span>].append(<span class="number">222</span>)</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"Contents of list in copied dictionary changed"</span>)</span><br><span class="line"> </span><br><span class="line">    displayList(<span class="string">"Modified copied dictionary : "</span> , newDict)</span><br><span class="line">    </span><br><span class="line">    displayList(<span class="string">"Original Dictionary : "</span> , wordsDict)</span><br><span class="line"> </span><br><span class="line">    print(<span class="string">"***** Deep Copy *******"</span>)</span><br><span class="line">    </span><br><span class="line">    displayList(<span class="string">"Original Dictionary : "</span> , wordsDict)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Create a deep copy of the dictionary</span></span><br><span class="line">    otherDict = copy.deepcopy(wordsDict)</span><br><span class="line">    </span><br><span class="line">    displayList(<span class="string">"Deep copy of  Dictionary : "</span> , otherDict)</span><br><span class="line">    </span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Modify the contents of list object in deep copied dictionary will </span></span><br><span class="line"><span class="string">    have no impact on original dictionary because its a deep copy.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    newDict[<span class="string">"who"</span>].append(<span class="number">100</span>)</span><br><span class="line"> </span><br><span class="line">    displayList(<span class="string">"Modified Deep copy of Dictionary : "</span> , otherDict)</span><br><span class="line">    displayList(<span class="string">"Original Dictionary : "</span> , wordsDict)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">--------</span><br><span class="line">Original Dictionary : </span><br><span class="line">at  ::  <span class="number">23</span></span><br><span class="line">this  ::  <span class="number">43</span></span><br><span class="line">Hello  ::  <span class="number">56</span></span><br><span class="line">test  ::  <span class="number">43</span></span><br><span class="line">who  ::  [<span class="number">56</span>, <span class="number">34</span>, <span class="number">44</span>]</span><br><span class="line">Contents of copied dictionary changed</span><br><span class="line">--------</span><br><span class="line">Modified copied dictionary : </span><br><span class="line">at  ::  <span class="number">200</span></span><br><span class="line">this  ::  <span class="number">43</span></span><br><span class="line">Hello  ::  <span class="number">56</span></span><br><span class="line">test  ::  <span class="number">43</span></span><br><span class="line">who  ::  [<span class="number">56</span>, <span class="number">34</span>, <span class="number">44</span>]</span><br><span class="line">--------</span><br><span class="line">Original Dictionary : </span><br><span class="line">at  ::  <span class="number">23</span></span><br><span class="line">this  ::  <span class="number">43</span></span><br><span class="line">Hello  ::  <span class="number">56</span></span><br><span class="line">test  ::  <span class="number">43</span></span><br><span class="line">who  ::  [<span class="number">56</span>, <span class="number">34</span>, <span class="number">44</span>]</span><br><span class="line">Contents of list <span class="keyword">in</span> copied dictionary changed</span><br><span class="line">--------</span><br><span class="line">Modified copied dictionary : </span><br><span class="line">at  ::  <span class="number">200</span></span><br><span class="line">this  ::  <span class="number">43</span></span><br><span class="line">Hello  ::  <span class="number">56</span></span><br><span class="line">test  ::  <span class="number">43</span></span><br><span class="line">who  ::  [<span class="number">56</span>, <span class="number">34</span>, <span class="number">44</span>, <span class="number">222</span>]</span><br><span class="line">--------</span><br><span class="line">Original Dictionary : </span><br><span class="line">at  ::  <span class="number">23</span></span><br><span class="line">this  ::  <span class="number">43</span></span><br><span class="line">Hello  ::  <span class="number">56</span></span><br><span class="line">test  ::  <span class="number">43</span></span><br><span class="line">who  ::  [<span class="number">56</span>, <span class="number">34</span>, <span class="number">44</span>, <span class="number">222</span>]</span><br><span class="line">***** Deep Copy *******</span><br><span class="line">--------</span><br><span class="line">Original Dictionary : </span><br><span class="line">at  ::  <span class="number">23</span></span><br><span class="line">this  ::  <span class="number">43</span></span><br><span class="line">Hello  ::  <span class="number">56</span></span><br><span class="line">test  ::  <span class="number">43</span></span><br><span class="line">who  ::  [<span class="number">56</span>, <span class="number">34</span>, <span class="number">44</span>, <span class="number">222</span>]</span><br><span class="line">--------</span><br><span class="line">Deep copy of  Dictionary : </span><br><span class="line">at  ::  <span class="number">23</span></span><br><span class="line">this  ::  <span class="number">43</span></span><br><span class="line">Hello  ::  <span class="number">56</span></span><br><span class="line">test  ::  <span class="number">43</span></span><br><span class="line">who  ::  [<span class="number">56</span>, <span class="number">34</span>, <span class="number">44</span>, <span class="number">222</span>]</span><br><span class="line">--------</span><br><span class="line">Modified Deep copy of Dictionary : </span><br><span class="line">at  ::  <span class="number">23</span></span><br><span class="line">this  ::  <span class="number">43</span></span><br><span class="line">Hello  ::  <span class="number">56</span></span><br><span class="line">test  ::  <span class="number">43</span></span><br><span class="line">who  ::  [<span class="number">56</span>, <span class="number">34</span>, <span class="number">44</span>, <span class="number">222</span>]</span><br><span class="line">--------</span><br><span class="line">Original Dictionary : </span><br><span class="line">at  ::  <span class="number">23</span></span><br><span class="line">this  ::  <span class="number">43</span></span><br><span class="line">Hello  ::  <span class="number">56</span></span><br><span class="line">test  ::  <span class="number">43</span></span><br><span class="line">who  ::  [<span class="number">56</span>, <span class="number">34</span>, <span class="number">44</span>, <span class="number">222</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure><h3 id="列表拷贝"><a href="#列表拷贝" class="headerlink" title="列表拷贝"></a>列表拷贝</h3><p>浅拷贝</p><p>使用 <code>=</code>赋值运算符 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">old_list = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="string">'a'</span>]]</span><br><span class="line">new_list = old_list</span><br><span class="line"></span><br><span class="line">new_list[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'Old List:'</span>, old_list)</span><br><span class="line">print(<span class="string">'ID of Old List:'</span>, id(old_list))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'New List:'</span>, new_list)</span><br><span class="line">print(<span class="string">'ID of New List:'</span>, id(new_list))</span><br></pre></td></tr></table></figure><p>使用<code>copy</code>浅拷贝</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">old_list = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">new_list = copy.copy(old_list)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Old list:"</span>, old_list)</span><br><span class="line">print(<span class="string">"New list:"</span>, new_list)</span><br></pre></td></tr></table></figure><p>使用<code>deepcopy</code> 深拷贝</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">old_list = [[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>]]</span><br><span class="line">new_list = copy.deepcopy(old_list)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Old list:"</span>, old_list)</span><br><span class="line">print(<span class="string">"New list:"</span>, new_list)</span><br></pre></td></tr></table></figure><h3 id="类拷贝"><a href="#类拷贝" class="headerlink" title="类拷贝"></a>类拷贝</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'Point(<span class="subst">&#123;self.x!r&#125;</span>, <span class="subst">&#123;self.y!r&#125;</span>)'</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = Point(<span class="number">23</span>, <span class="number">42</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = copy.copy(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">Point(<span class="number">23</span>, <span class="number">42</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">Point(<span class="number">23</span>, <span class="number">42</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 使用copy模块的copy方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, topleft, bottomright)</span>:</span></span><br><span class="line">        self.topleft = topleft</span><br><span class="line">        self.bottomright = bottomright</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="string">f'Rectangle(<span class="subst">&#123;self.topleft!r&#125;</span>, '</span></span><br><span class="line">                <span class="string">f'<span class="subst">&#123;self.bottomright!r&#125;</span>)'</span>)</span><br><span class="line">rect = Rectangle(Point(<span class="number">0</span>, <span class="number">1</span>), Point(<span class="number">5</span>, <span class="number">6</span>))</span><br><span class="line">srect = copy.copy(rect)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rect</span><br><span class="line">Rectangle(Point(<span class="number">0</span>, <span class="number">1</span>), Point(<span class="number">5</span>, <span class="number">6</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>srect</span><br><span class="line">Rectangle(Point(<span class="number">0</span>, <span class="number">1</span>), Point(<span class="number">5</span>, <span class="number">6</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rect <span class="keyword">is</span> srect</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rect.topleft.x = <span class="number">999</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rect</span><br><span class="line">Rectangle(Point(<span class="number">999</span>, <span class="number">1</span>), Point(<span class="number">5</span>, <span class="number">6</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>srect</span><br><span class="line">Rectangle(Point(<span class="number">999</span>, <span class="number">1</span>), Point(<span class="number">5</span>, <span class="number">6</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>drect = copy.deepcopy(srect)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>drect.topleft.x = <span class="number">222</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>drect</span><br><span class="line">Rectangle(Point(<span class="number">222</span>, <span class="number">1</span>), Point(<span class="number">5</span>, <span class="number">6</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rect</span><br><span class="line">Rectangle(Point(<span class="number">999</span>, <span class="number">1</span>), Point(<span class="number">5</span>, <span class="number">6</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>srect</span><br><span class="line">Rectangle(Point(<span class="number">999</span>, <span class="number">1</span>), Point(<span class="number">5</span>, <span class="number">6</span>))</span><br><span class="line">    </span><br><span class="line"><span class="comment">## 使用copy方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, topleft, bottomright)</span>:</span></span><br><span class="line">        self.topleft = topleft</span><br><span class="line">        self.bottomright = bottomright</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="string">f'Rectangle(<span class="subst">&#123;self.topleft!r&#125;</span>, '</span></span><br><span class="line">                <span class="string">f'<span class="subst">&#123;self.bottomright!r&#125;</span>)'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">copy</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Rectangle(self.topleft, self.bottomright)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r1  = Rectangle(<span class="number">20</span>,<span class="number">30</span>)</span><br><span class="line">r2  =r1.copy()</span><br><span class="line">print(<span class="string">"r1:"</span>,r1)</span><br><span class="line">print(<span class="string">"r2:"</span>,r2)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r1: Rectangle(<span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r2: Rectangle(<span class="number">20</span>, <span class="number">30</span>)</span><br></pre></td></tr></table></figure><h3 id="一个深入的例子"><a href="#一个深入的例子" class="headerlink" title="一个深入的例子"></a>一个深入的例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(object)</span>:</span></span><br><span class="line">    x = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">CopyOfB = type(<span class="string">'CopyOfB'</span>, B.__bases__, dict(B.__dict__))</span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line">cob = CopyOfB()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> b.x   <span class="comment"># Prints '3'</span></span><br><span class="line"><span class="keyword">print</span> cob.x <span class="comment"># Prints '3'</span></span><br><span class="line"></span><br><span class="line">b.x = <span class="number">2</span></span><br><span class="line">cob.x = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> b.x   <span class="comment"># Prints '2'</span></span><br><span class="line"><span class="keyword">print</span> cob.x <span class="comment"># Prints '4'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(object)</span>:</span></span><br><span class="line">    x = []</span><br><span class="line"></span><br><span class="line">CopyOfC = type(<span class="string">'CopyOfC'</span>, C.__bases__, dict(C.__dict__))</span><br><span class="line"></span><br><span class="line">c = C()</span><br><span class="line">coc = CopyOfC()</span><br><span class="line"></span><br><span class="line">c.x.append(<span class="number">1</span>)</span><br><span class="line">coc.x.append(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> c.x   <span class="comment"># Prints '[1, 2]' (!)</span></span><br><span class="line"><span class="keyword">print</span> coc.x <span class="comment"># Prints '[1, 2]' (!)</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://stackoverflow.com/questions/17873384/how-to-deep-copy-a-list" target="_blank" rel="noopener">how to deep copy a list</a></p><p><a href="https://www.programiz.com/python-programming/shallow-deep-copy" target="_blank" rel="noopener">shallow-deep-copy</a></p><p><a href="https://stackoverflow.com/questions/9541025/how-to-copy-a-python-class" target="_blank" rel="noopener">how-to-copy-a-python-class</a></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>最近学到一个新词:<code>共克时艰</code> 翻译成 英文 <code>We are suffering</code>,希望和朋友们共勉。</p><blockquote><p>我们都是蝴蝶翅膀上的那粒灰尘，被裹挟在龙卷风里，谁都晕头转向</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库-copy&quot;&gt;&lt;a href=&quot;#python-标准库-copy&quot; class=&quot;headerlink&quot; title=&quot;python 标准库 copy&quot;&gt;&lt;/a&gt;python 标准库 copy&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://quotescover.com/wp-content/uploads/We-are-suffering-from-too__quotes-by-Marianne-Moore-22-1024x1024.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/categories/python/standard-library/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="copy" scheme="https://pinghailinfeng.gitee.io/tags/copy/"/>
    
  </entry>
  
  <entry>
    <title>python standard library functools</title>
    <link href="https://pinghailinfeng.gitee.io/2020/02/01/python-standard-library-functools/"/>
    <id>https://pinghailinfeng.gitee.io/2020/02/01/python-standard-library-functools/</id>
    <published>2020-01-31T22:57:22.000Z</published>
    <updated>2020-02-03T10:23:40.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库-functools-高阶函数工具"><a href="#python-标准库-functools-高阶函数工具" class="headerlink" title="python 标准库 functools 高阶函数工具"></a>python 标准库 functools 高阶函数工具</h1><p><img src="http://s3-eu-west-1.amazonaws.com/sup46/wp-content/uploads/2016/06/15100010/Attach-sup46.png" alt></p><a id="more"></a><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=539420&auto=0&height=66"></iframe><br>每日一词:</p><p>这里我们换种记忆方法 ,词根 <code>tach</code>代表 固定</p><blockquote><p>attach </p><p>英 [əˈtætʃ]  美 [əˈtætʃ]  </p><p>vt.&amp; vi. 贴上，系； 附上；</p><p>vt.（有时不受欢迎或未受邀请而）参加； 把…固定； 把…归因于； （使）与…有联系</p><p>vi. 从属； 附着； 伴随而来； 联在一起(to, upon)</p><p>attachment  n 邮件的附件</p><p>de 是反义前缀</p><p>detach v 分离</p><p>detached  adj  冷漠的,离群的</p><p>detachment  n 公平 </p></blockquote><p><a href="https://docs.python.org/zh-cn/3.8/library/functools.html#module-functools" target="_blank" rel="noopener"><code>functools</code></a> 模块应用于高阶函数，即参数或（和）返回值为其他函数的函数。 通常来说，此模块的功能适用于所有可调用对象。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><a href="https://docs.python.org/zh-cn/3.8/library/functools.html#module-functools" target="_blank" rel="noopener"><code>functools</code></a> 模块定义了以下函数:</p><ul><li><p><a href="mailto:`@functools.cache" target="_blank" rel="noopener">`@functools.cache</a>d_property`(<em>func</em>)</p><p>将一个类方法转换为特征属性，一次性计算该特征属性的值，然后将其缓存为实例生命周期内的普通属性。 类似于 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#property" target="_blank" rel="noopener"><code>property()</code></a> 但增加了缓存功能。 对于在其他情况下实际不可变的高计算资源消耗的实例特征属性来说该函数非常有用。</p><p>示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataSet</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sequence_of_numbers)</span>:</span></span><br><span class="line">        self._data = sequence_of_numbers</span><br><span class="line"></span><br><span class="line"><span class="meta">    @cached_property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stdev</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> statistics.stdev(self._data)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @cached_property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">variance</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> statistics.variance(self._data)</span><br></pre></td></tr></table></figure><p><em>3.8 新版功能.</em></p><blockquote><p>此装饰器要求每个实例上的 <code>__dict__</code> 属性是可变的映射。 这意味着它将不适用于某些类型，例如元类（因为类型实例上的 <code>__dict__</code> 属性是类命名空间的只读代理），以及那些指定了 <code>__slots__</code> 但未包含 <code>__dict__</code> 作为所定义的空位之一的类（因为这样的类根本没有提供 <code>__dict__</code> 属性）。</p></blockquote></li><li><p><code>functools.cmp_to_key</code>(<em>func</em>)</p><p>将(旧式的)比较函数转换为新式的 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-key-function" target="_blank" rel="noopener">key function</a> . 在类似于 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#sorted" target="_blank" rel="noopener"><code>sorted()</code></a> ， <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#min" target="_blank" rel="noopener"><code>min()</code></a> ， <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#max" target="_blank" rel="noopener"><code>max()</code></a> ， <a href="https://docs.python.org/zh-cn/3.8/library/heapq.html#heapq.nlargest" target="_blank" rel="noopener"><code>heapq.nlargest()</code></a> ， <a href="https://docs.python.org/zh-cn/3.8/library/heapq.html#heapq.nsmallest" target="_blank" rel="noopener"><code>heapq.nsmallest()</code></a> ， <a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.groupby" target="_blank" rel="noopener"><code>itertools.groupby()</code></a> 等函数的 key 参数中使用。此函数主要用作将 Python 2 程序转换至新版的转换工具，以保持对比较函数的兼容。比较函数意为一个可调用对象，该对象接受两个参数并比较它们，结果为小于则返回一个负数，相等则返回零，大于则返回一个正数。key function则是一个接受一个参数，并返回另一个用以排序的值的可调用对象。</p><p>示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted(iterable, key=cmp_to_key(locale.strcoll))  <span class="comment"># locale-aware sort order</span></span><br></pre></td></tr></table></figure><p>有关排序示例和简要排序教程，请参阅 <a href="https://docs.python.org/zh-cn/3.8/howto/sorting.html#sortinghowto" target="_blank" rel="noopener">排序指南</a> 。<em>3.2 新版功能.</em></p></li><li><p><a href="mailto:`@functools.lr" target="_blank" rel="noopener">`@functools.lr</a>u_cache`(<em>user_function</em>)</p></li><li><p><a href="mailto:`@functools.lr" target="_blank" rel="noopener">`@functools.lr</a>u_cache`(<em>maxsize=128</em>, <em>typed=False</em>)</p><p>一个为函数提供缓存功能的装饰器，缓存 <em>maxsize</em> 组传入参数，在下次以相同参数调用时直接返回上一次的结果。用以节约高开销或I/O函数的调用时间。</p><p>由于使用了字典存储缓存，所以该函数的固定参数和关键字参数必须是可哈希的。</p><p>不同模式的参数可能被视为不同从而产生多个缓存项，例如, f(a=1, b=2) 和 f(b=2, a=1) 因其参数顺序不同，可能会被缓存两次。</p><p>如果指定了 <em>user_function</em>，它必须是一个可调用对象。 这允许 <em>lru_cache</em> 装饰器被直接应用于一个用户自定义函数，让 <em>maxsize</em> 保持其默认值 128:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@lru_cache</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_vowels</span><span class="params">(sentence)</span>:</span></span><br><span class="line">    sentence = sentence.casefold()</span><br><span class="line">    <span class="keyword">return</span> sum(sentence.count(vowel) <span class="keyword">for</span> vowel <span class="keyword">in</span> <span class="string">'aeiou'</span>)</span><br></pre></td></tr></table></figure><p>如果 <em>maxsize</em> 设置为 <code>None</code> ，LRU功能将被禁用且缓存数量无上限。 <em>maxsize</em> 设置为2的幂时可获得最佳性能。</p><p>如果 <em>typed</em> 设置为true，不同类型的函数参数将被分别缓存。例如， <code>f(3)</code> 和 <code>f(3.0)</code> 将被视为不同而分别缓存。</p><p>为了衡量缓存的有效性以便调整 <em>maxsize</em> 形参，被装饰的函数带有一个 <code>cache_info()</code> 函数。当调用 <code>cache_info()</code> 函数时，返回一个具名元组，包含命中次数 <em>hits</em>，未命中次数 <em>misses</em> ，最大缓存数量 <em>maxsize</em> 和 当前缓存大小 <em>currsize</em>。在多线程环境中，命中数与未命中数是不完全准确的。</p><p>该装饰器也提供了一个用于清理/使缓存失效的函数 <code>cache_clear()</code> 。</p><p>原始的未经装饰的函数可以通过 <code>__wrapped__</code> 属性访问。它可以用于检查、绕过缓存，或使用不同的缓存再次装饰原始函数。</p><p><a href="https://en.wikipedia.org/wiki/Cache_algorithms#Examples" target="_blank" rel="noopener">“最久未使用算法”（LRU）缓存</a> 在“最近的调用是即将到来的调用的最佳预测因子”时性能最好（比如，新闻服务器上最受欢迎的文章倾向于每天更改）。 “缓存大小限制”参数保证缓存不会在长时间运行的进程比如说网站服务器上无限制的增加自身的大小。</p><p>一般来说，LRU缓存只在当你想要重用之前计算的结果时使用。因此，用它缓存具有副作用的函数、需要在每次调用时创建不同、易变的对象的函数或者诸如time（）或random（）之类的不纯函数是没有意义的。</p><p>静态 Web 内容的 LRU 缓存示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@lru_cache(maxsize=32)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pep</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="string">'Retrieve text of a Python Enhancement Proposal'</span></span><br><span class="line">    resource = <span class="string">'http://www.python.org/dev/peps/pep-%04d/'</span> % num</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> urllib.request.urlopen(resource) <span class="keyword">as</span> s:</span><br><span class="line">            <span class="keyword">return</span> s.read()</span><br><span class="line">    <span class="keyword">except</span> urllib.error.HTTPError:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Not Found'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> n <span class="keyword">in</span> <span class="number">8</span>, <span class="number">290</span>, <span class="number">308</span>, <span class="number">320</span>, <span class="number">8</span>, <span class="number">218</span>, <span class="number">320</span>, <span class="number">279</span>, <span class="number">289</span>, <span class="number">320</span>, <span class="number">9991</span>:</span><br><span class="line"><span class="meta">... </span>    pep = get_pep(n)</span><br><span class="line"><span class="meta">... </span>    print(n, len(pep))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_pep.cache_info()</span><br><span class="line">CacheInfo(hits=<span class="number">3</span>, misses=<span class="number">8</span>, maxsize=<span class="number">32</span>, currsize=<span class="number">8</span>)</span><br></pre></td></tr></table></figure><p>以下是使用缓存通过 <a href="https://zh.wikipedia.org/wiki/动态规划" target="_blank" rel="noopener">动态规划</a> 计算 <a href="https://zh.wikipedia.org/wiki/斐波那契数列" target="_blank" rel="noopener">斐波那契数列</a> 的例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@lru_cache(maxsize=None)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[fib(n) <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">16</span>)]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>, <span class="number">89</span>, <span class="number">144</span>, <span class="number">233</span>, <span class="number">377</span>, <span class="number">610</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fib.cache_info()</span><br><span class="line">CacheInfo(hits=<span class="number">28</span>, misses=<span class="number">16</span>, maxsize=<span class="literal">None</span>, currsize=<span class="number">16</span>)</span><br></pre></td></tr></table></figure><p><em>在 3.3 版更改:</em> 添加 <em>typed</em> 选项。</p><p><em>在 3.8 版更改:</em> 添加了 <em>user_function</em> 选项。</p></li><li><p><a href="mailto:`@functools.tota" target="_blank" rel="noopener">`@functools.tota</a>l_ordering`</p><p>给定一个声明一个或多个全比较排序方法的类，这个类装饰器实现剩余的方法。这减轻了指定所有可能的全比较操作的工作。</p><p>此类必须包含以下方法之一：<a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__lt__" target="_blank" rel="noopener"><code>__lt__()</code></a> 、<a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__le__" target="_blank" rel="noopener"><code>__le__()</code></a>、<a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__gt__" target="_blank" rel="noopener"><code>__gt__()</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__ge__" target="_blank" rel="noopener"><code>__ge__()</code></a>。另外，此类必须支持 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__eq__" target="_blank" rel="noopener"><code>__eq__()</code></a> 方法。</p><p>例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@total_ordering</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_is_valid_operand</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (hasattr(other, <span class="string">"lastname"</span>) <span class="keyword">and</span></span><br><span class="line">                hasattr(other, <span class="string">"firstname"</span>))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self._is_valid_operand(other):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">NotImplemented</span></span><br><span class="line">        <span class="keyword">return</span> ((self.lastname.lower(), self.firstname.lower()) ==</span><br><span class="line">                (other.lastname.lower(), other.firstname.lower()))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self._is_valid_operand(other):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">NotImplemented</span></span><br><span class="line">        <span class="keyword">return</span> ((self.lastname.lower(), self.firstname.lower()) &lt;</span><br><span class="line">                (other.lastname.lower(), other.firstname.lower()))</span><br></pre></td></tr></table></figure><blockquote><p>虽然此装饰器使得创建具有良好行为的完全有序类型变得非常容易，但它 <em>确实</em> 是以执行速度更缓慢和派生比较方法的堆栈回溯更复杂为代价的。 如果性能基准测试表明这是特定应用的瓶颈所在，则改为实现全部六个富比较方法应该会轻松提升速度。 </p></blockquote><p> <em>在 3.4 版更改:</em> 现在已支持从未识别类型的下层比较函数返回 NotImplemented 异常。 </p></li><li><p><code>functools.partial</code>(<em>func</em>, <em>/</em>, <strong>args<em>, </em></strong>keywords*)</p><p> 返回一个新的 <a href="https://docs.python.org/zh-cn/3.8/library/functools.html#partial-objects" target="_blank" rel="noopener">部分对象</a>，当被调用时其行为类似于 <em>func</em> 附带位置参数 <em>args</em> 和关键字参数 <em>keywords</em> 被调用。 如果为调用提供了更多的参数，它们会被附加到 <em>args</em>。 如果提供了额外的关键字参数，它们会扩展并重载 <em>keywords</em>。 大致等价于: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partial</span><span class="params">(func, /, *args, **keywords)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">newfunc</span><span class="params">(*fargs, **fkeywords)</span>:</span></span><br><span class="line">        newkeywords = &#123;**keywords, **fkeywords&#125;</span><br><span class="line">        <span class="keyword">return</span> func(*args, *fargs, **newkeywords)</span><br><span class="line">    newfunc.func = func</span><br><span class="line">    newfunc.args = args</span><br><span class="line">    newfunc.keywords = keywords</span><br><span class="line">    <span class="keyword">return</span> newfunc</span><br></pre></td></tr></table></figure><p><a href="https://docs.python.org/zh-cn/3.8/library/functools.html#functools.partial" target="_blank" rel="noopener"><code>partial()</code></a> 会被“冻结了”一部分函数参数和/或关键字的部分函数应用所使用，从而得到一个具有简化签名的新对象。 例如，<a href="https://docs.python.org/zh-cn/3.8/library/functools.html#functools.partial" target="_blank" rel="noopener"><code>partial()</code></a> 可用来创建一个行为类似于 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#int" target="_blank" rel="noopener"><code>int()</code></a> 函数的可调用对象，其中 <em>base</em> 参数默认为二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>basetwo = partial(int, base=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>basetwo.__doc__ = <span class="string">'Convert base 2 string to an int.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>basetwo(<span class="string">'10010'</span>)</span><br><span class="line"><span class="number">18</span></span><br></pre></td></tr></table></figure></li><li><p><em>class</em> <code>functools.partialmethod</code>(<em>func</em>, <em>/</em>, <strong>args<em>, </em></strong>keywords*)</p><p>返回一个新的 <a href="https://docs.python.org/zh-cn/3.8/library/functools.html#functools.partialmethod" target="_blank" rel="noopener"><code>partialmethod</code></a> 描述器，其行为类似 <a href="https://docs.python.org/zh-cn/3.8/library/functools.html#functools.partial" target="_blank" rel="noopener"><code>partial</code></a> 但它被设计用作方法定义而非直接用作可调用对象。</p><p><em>func</em> 必须是一个 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-descriptor" target="_blank" rel="noopener">descriptor</a> 或可调用对象（同属两者的对象例如普通函数会被当作描述器来处理）。</p><p>当 <em>func</em> 是一个描述器（例如普通 Python 函数, <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#classmethod" target="_blank" rel="noopener"><code>classmethod()</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#staticmethod" target="_blank" rel="noopener"><code>staticmethod()</code></a>, <code>abstractmethod()</code> 或其他 <a href="https://docs.python.org/zh-cn/3.8/library/functools.html#functools.partialmethod" target="_blank" rel="noopener"><code>partialmethod</code></a> 的实例）时, 对 <code>__get__</code> 的调用会被委托给底层的描述器，并会返回一个适当的 <a href="https://docs.python.org/zh-cn/3.8/library/functools.html#partial-objects" target="_blank" rel="noopener">部分对象</a> 作为结果。</p><p>当 <em>func</em> 是一个非描述器类可调用对象时，则会动态创建一个适当的绑定方法。 当用作方法时其行为类似普通 Python 函数：将会插入 <em>self</em> 参数作为第一个位置参数，其位置甚至会处于提供给 <a href="https://docs.python.org/zh-cn/3.8/library/functools.html#functools.partialmethod" target="_blank" rel="noopener"><code>partialmethod</code></a> 构造器的 <em>args</em> 和 <em>keywords</em> 之前。</p><p>示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Cell</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self._alive = <span class="literal">False</span></span><br><span class="line"><span class="meta">... </span>    @property</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">alive</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self._alive</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">set_state</span><span class="params">(self, state)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self._alive = bool(state)</span><br><span class="line"><span class="meta">... </span>    set_alive = partialmethod(set_state, <span class="literal">True</span>)</span><br><span class="line"><span class="meta">... </span>    set_dead = partialmethod(set_state, <span class="literal">False</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Cell()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.alive</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.set_alive()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.alive</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></li><li><p><code>functools.reduce</code>(<em>function</em>, <em>iterable</em>[, <em>initializer</em>])</p><p>将两个参数的 <em>function</em> 从左至右积累地应用到 <em>iterable</em> 的条目，以便将该可迭代对象缩减为单一的值。 例如，<code>reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])</code> 是计算 <code>((((1+2)+3)+4)+5)</code> 的值。 左边的参数 <em>x</em> 是积累值而右边的参数 <em>y</em> 则是来自 <em>iterable</em> 的更新值。 如果存在可选项 <em>initializer</em>，它会被放在参与计算的可迭代对象的条目之前，并在可迭代对象为空时作为默认值。 如果没有给出 <em>initializer</em> 并且 <em>iterable</em> 仅包含一个条目，则将返回第一项。</p><p>大致相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reduce</span><span class="params">(function, iterable, initializer=None)</span>:</span></span><br><span class="line">    it = iter(iterable)</span><br><span class="line">    <span class="keyword">if</span> initializer <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        value = next(it)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        value = initializer</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> it:</span><br><span class="line">        value = function(value, element)</span><br><span class="line">    <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure><p>请参阅 <a href="https://docs.python.org/zh-cn/3.8/library/itertools.html#itertools.accumulate" target="_blank" rel="noopener"><code>itertools.accumulate()</code></a> 了解有关可产生所有中间值的迭代器。</p></li><li><p><a href="mailto:`@functools.singledispatch" target="_blank" rel="noopener">`@functools.singledispatch</a>`</p><p>将一个函数转换为 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-single-dispatch" target="_blank" rel="noopener">单分派</a> <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-generic-function" target="_blank" rel="noopener">generic function</a>。</p><p>要定义一个泛型函数，应使用 <code>@singledispatch</code> 装饰器进行装饰。 请注意分派是作用于第一个参数的类型，要相应地创建你的函数:</p><p>>&gt;&gt;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> singledispatch</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@singledispatch</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(arg, verbose=False)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> verbose:</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">"Let me just say,"</span>, end=<span class="string">" "</span>)</span><br><span class="line"><span class="meta">... </span>    print(arg)</span><br></pre></td></tr></table></figure><p>要将重载的实现添加到函数中，请使用泛型函数的 <code>register()</code> 属性。 它是一个装饰器。 对于带有类型标注的函数，该装饰器将自动推断第一个参数的类型:</p><p>>&gt;&gt;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>@fun.register</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(arg: int, verbose=False)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> verbose:</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">"Strength in numbers, eh?"</span>, end=<span class="string">" "</span>)</span><br><span class="line"><span class="meta">... </span>    print(arg)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@fun.register</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(arg: list, verbose=False)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> verbose:</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">"Enumerate this:"</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> i, elem <span class="keyword">in</span> enumerate(arg):</span><br><span class="line"><span class="meta">... </span>        print(i, elem)</span><br></pre></td></tr></table></figure><p>对于不使用类型标注的代码，可以将适当的类型参数显式地传给装饰器本身:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>@fun.register(complex)</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(arg, verbose=False)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> verbose:</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">"Better than complicated."</span>, end=<span class="string">" "</span>)</span><br><span class="line"><span class="meta">... </span>    print(arg.real, arg.imag)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>要启用注册 lambda 和现有函数，可以使用函数形式的 <code>register()</code> 属性:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">nothing</span><span class="params">(arg, verbose=False)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"Nothing."</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fun.register(type(<span class="literal">None</span>), nothing)</span><br></pre></td></tr></table></figure><p><code>register()</code> 属性将返回启用了装饰器堆栈、封存的未装饰函数，并会为每个变量单独创建单元测试:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>@fun.register(float)</span><br><span class="line"><span class="meta">... </span>@fun.register(Decimal)</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">fun_num</span><span class="params">(arg, verbose=False)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> verbose:</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">"Half of your number:"</span>, end=<span class="string">" "</span>)</span><br><span class="line"><span class="meta">... </span>    print(arg / <span class="number">2</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fun_num <span class="keyword">is</span> fun</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>在调用时，泛型函数会根据第一个参数的类型进行分派:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fun(<span class="string">"Hello, world."</span>)</span><br><span class="line">Hello, world.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fun(<span class="string">"test."</span>, verbose=<span class="literal">True</span>)</span><br><span class="line">Let me just say, test.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fun(<span class="number">42</span>, verbose=<span class="literal">True</span>)</span><br><span class="line">Strength in numbers, eh? 42</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fun([<span class="string">'spam'</span>, <span class="string">'spam'</span>, <span class="string">'eggs'</span>, <span class="string">'spam'</span>], verbose=<span class="literal">True</span>)</span><br><span class="line">Enumerate this:</span><br><span class="line"><span class="number">0</span> spam</span><br><span class="line"><span class="number">1</span> spam</span><br><span class="line"><span class="number">2</span> eggs</span><br><span class="line"><span class="number">3</span> spam</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fun(<span class="literal">None</span>)</span><br><span class="line">Nothing.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fun(<span class="number">1.23</span>)</span><br><span class="line"><span class="number">0.615</span></span><br></pre></td></tr></table></figure><p>在没有用于特定类型的已注册实现的情况下，则会使用其方法解析顺序来查找更通用的实现。 以 <code>@singledispatch</code> 装饰的原始函数将为最基本的 <code>object</code> 类型进行注册，这意味着它将在找不到更好的实现时被使用。</p><p>要检查泛型函数将为给定类型选择哪个实现，请使用 <code>dispatch()</code> 属性:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fun.dispatch(float)</span><br><span class="line">&lt;function fun_num at <span class="number">0x1035a2840</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fun.dispatch(dict)    <span class="comment"># note: default implementation</span></span><br><span class="line">&lt;function fun at <span class="number">0x103fe0000</span>&gt;</span><br></pre></td></tr></table></figure><p>要访问所有忆注册实现，请使用只读的 <code>registry</code> 属性:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fun.registry.keys()</span><br><span class="line">dict_keys([&lt;class 'NoneType'&gt;, &lt;class 'int'&gt;, &lt;class 'object'&gt;,</span><br><span class="line">          &lt;class 'decimal.Decimal'&gt;, &lt;class 'list'&gt;,</span><br><span class="line">          &lt;<span class="class"><span class="keyword">class</span> '<span class="title">float</span>'&gt;])</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">fun</span>.<span class="title">registry</span>[<span class="title">float</span>]</span></span><br><span class="line"><span class="class">&lt;<span class="title">function</span> <span class="title">fun_num</span> <span class="title">at</span> 0<span class="title">x1035a2840</span>&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">fun</span>.<span class="title">registry</span>[<span class="title">object</span>]</span></span><br><span class="line"><span class="class">&lt;<span class="title">function</span> <span class="title">fun</span> <span class="title">at</span> 0<span class="title">x103fe0000</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <em>在 3.7 版更改:</em> <code>register()</code> 属性支持使用类型标注。 </p></li><li><p><em>class</em> <code>functools.singledispatchmethod</code>(<em>func</em>)</p><p>将一个方法转换为 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-single-dispatch" target="_blank" rel="noopener">单分派</a> <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-generic-function" target="_blank" rel="noopener">generic function</a>。</p><p>要定义一个泛型方法，应使用 <code>@singledispatchmethod</code> 装饰器进行装饰。 请注意分派是作用于第一个非 self 或非 cls 参数的类型，要相应地创建你的函数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Negator</span>:</span></span><br><span class="line"><span class="meta">    @singledispatchmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">neg</span><span class="params">(self, arg)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">"Cannot negate a"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @neg.register</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(self, arg: int)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> -arg</span><br><span class="line"></span><br><span class="line"><span class="meta">    @neg.register</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(self, arg: bool)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> arg</span><br></pre></td></tr></table></figure><p><code>@singledispatchmethod</code> 支持与其他装饰器如 <code>@classmethod</code> 相嵌套。 请注意如果要允许 <code>dispatcher.register</code>，则 <code>singledispatchmethod</code> 必须是 <em>最外层</em> 的装饰器。 下面的示例定义了 <code>Negator</code> 类，其中包含绑定到类的 <code>neg</code> 方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Negator</span>:</span></span><br><span class="line"><span class="meta">    @singledispatchmethod</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">neg</span><span class="params">(cls, arg)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">"Cannot negate a"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @neg.register</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(cls, arg: int)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> -arg</span><br><span class="line"></span><br><span class="line"><span class="meta">    @neg.register</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(cls, arg: bool)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> arg</span><br></pre></td></tr></table></figure><p>同样的模式也被用于其他类似的装饰器: <code>staticmethod</code>, <code>abstractmethod</code> 等等。</p><p> <em>3.8 新版功能.</em> </p></li><li><p><code>functools.update_wrapper</code>(<em>wrapper</em>, <em>wrapped</em>, <em>assigned=WRAPPER_ASSIGNMENTS</em>, <em>updated=WRAPPER_UPDATES</em>)</p><p>更新一个 <em>wrapper</em> 函数以使其类似于 <em>wrapped</em> 函数。 可选参数为指明原函数的哪些属性要直接被赋值给 wrapper 函数的匹配属性的元组，并且这些 wrapper 函数的属性将使用原函数的对应属性来更新。 这些参数的默认值是模块级常量 <code>WRAPPER_ASSIGNMENTS</code> (它将被赋值给 wrapper 函数的 <code>__module__</code>, <code>__name__</code>, <code>__qualname__</code>, <code>__annotations__</code> 和 <code>__doc__</code> 即文档字符串) 以及 <code>WRAPPER_UPDATES</code> (它将更新 wrapper 函数的 <code>__dict__</code> 即实例字典)。</p><p>为了允许出于内省和其他目的访问原始函数（例如绕过 <a href="https://docs.python.org/zh-cn/3.8/library/functools.html#functools.lru_cache" target="_blank" rel="noopener"><code>lru_cache()</code></a> 之类的缓存装饰器），此函数会自动为 wrapper 添加一个指向被包装函数的 <code>__wrapped__</code> 属性。</p><p>此函数的主要目的是在 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-decorator" target="_blank" rel="noopener">decorator</a> 函数中用来包装被装饰的函数并返回包装器。 如果包装器函数未被更新，则被返回函数的元数据将反映包装器定义而不是原始函数定义，这通常没有什么用处。</p><p><a href="https://docs.python.org/zh-cn/3.8/library/functools.html#functools.update_wrapper" target="_blank" rel="noopener"><code>update_wrapper()</code></a> 可以与函数之外的可调用对象一同使用。 在 <em>assigned</em> 或 <em>updated</em> 中命名的任何属性如果不存在于被包装对象则会被忽略（即该函数将不会尝试在包装器函数上设置它们）。 如果包装器函数自身缺少在 <em>updated</em> 中命名的任何属性则仍将引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#AttributeError" target="_blank" rel="noopener"><code>AttributeError</code></a>。</p><p><em>3.2 新版功能:</em> 自动添加 <code>__wrapped__</code> 属性。</p><p><em>3.2 新版功能:</em> 默认拷贝 <code>__annotations__</code> 属性。</p><p><em>在 3.2 版更改:</em> 不存在的属性将不再触发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#AttributeError" target="_blank" rel="noopener"><code>AttributeError</code></a>。</p><p><em>在 3.4 版更改:</em> <code>__wrapped__</code> 属性现在总是指向被包装的函数，即使该函数定义了 <code>__wrapped__</code> 属性。 (参见 <a href="https://bugs.python.org/issue17482" target="_blank" rel="noopener">bpo-17482</a>)</p><blockquote><p><strong>wrapped是被装饰的原函数</strong></p><p><strong>wrapper是被装饰器装饰后的新函数。</strong></p></blockquote><h3 id="补充例子："><a href="#补充例子：" class="headerlink" title="补充例子："></a>补充例子：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @functools.wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">f"before..."</span>)</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">        print(<span class="string">"after..."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"><span class="meta">@outer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    求和运算</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(a + b)</span><br></pre></td></tr></table></figure><blockquote><p>1、原函数为add。</p><p>2、@outer会去执行outer装饰器，传入add函数，返回一个inner函数。</p><p>3、执行outer函数时，加载inner函数，此时会直接执行functools.wraps(func)返回一个可调用对象，即partial对象。</p><p>4、此时inner的装饰器实际上是@partial，partial会被调用，传入inner函数，执行partial内部的update_wrapper函数，将func的相应属性拷贝给inner函数，最后返回inner函数。这一步并没有生成新的函数，仅仅是改变了inner函数的属性。</p><p>5、把add指向inner函数。</p><p>6、调用add实际调用的是inner函数，inner函数内部持有原add函数的引用即func。</p><p><strong>update_wrapper函数参数对应：</strong></p><p><strong>wrapper指的是inner函数</strong></p><p><strong>wrapped指的是func即原始的add函数</strong></p></blockquote></li><li><p><a href="mailto:`@functools.wraps" target="_blank" rel="noopener">`@functools.wraps</a>`(<em>wrapped</em>, <em>assigned=WRAPPER_ASSIGNMENTS</em>, <em>updated=WRAPPER_UPDATES</em>)</p><p>这是一个便捷函数，用于在定义包装器函数时发起调用 <a href="https://docs.python.org/zh-cn/3.8/library/functools.html#functools.update_wrapper" target="_blank" rel="noopener"><code>update_wrapper()</code></a> 作为函数装饰器。 它等价于 <code>partial(update_wrapper, wrapped=wrapped, assigned=assigned, updated=updated)</code>。 例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">my_decorator</span><span class="params">(f)</span>:</span></span><br><span class="line"><span class="meta">... </span>    @wraps(f)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwds)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'Calling decorated function'</span>)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> f(*args, **kwds)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> wrapper</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@my_decorator</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">example</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">"""Docstring"""</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'Called example function'</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>example()</span><br><span class="line">Calling decorated function</span><br><span class="line">Called example function</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>example.__name__</span><br><span class="line"><span class="string">'example'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>example.__doc__</span><br><span class="line"><span class="string">'Docstring'</span></span><br></pre></td></tr></table></figure><p>如果不使用这个装饰器工厂函数，则 example 函数的名称将变为 <code>&#39;wrapper&#39;</code>，并且 <code>example()</code> 原本的文档字符串将会丢失。 </p></li></ul><h2 id="partial-对象"><a href="#partial-对象" class="headerlink" title="partial 对象"></a><a href="https://docs.python.org/zh-cn/3.8/library/functools.html#functools.partial" target="_blank" rel="noopener"><code>partial</code></a> 对象</h2><p><a href="https://docs.python.org/zh-cn/3.8/library/functools.html#functools.partial" target="_blank" rel="noopener"><code>partial</code></a> 对象是由 <a href="https://docs.python.org/zh-cn/3.8/library/functools.html#functools.partial" target="_blank" rel="noopener"><code>partial()</code></a> 创建的可调用对象。 它们具有三个只读属性：</p><ul><li><p><code>partial.func</code></p><p>一个可调用对象或函数。 对 <a href="https://docs.python.org/zh-cn/3.8/library/functools.html#functools.partial" target="_blank" rel="noopener"><code>partial</code></a> 对象的调用将被转发给 <a href="https://docs.python.org/zh-cn/3.8/library/functools.html#functools.partial.func" target="_blank" rel="noopener"><code>func</code></a> 并附带新的参数和关键字。</p></li><li><p><code>partial.args</code></p><p>最左边的位置参数将放置在提供给 <a href="https://docs.python.org/zh-cn/3.8/library/functools.html#functools.partial" target="_blank" rel="noopener"><code>partial</code></a> 对象调用的位置参数之前。</p></li><li><p><code>partial.keywords</code></p><p>当调用 <a href="https://docs.python.org/zh-cn/3.8/library/functools.html#functools.partial" target="_blank" rel="noopener"><code>partial</code></a> 对象时将要提供的关键字参数。</p></li></ul><p><a href="https://docs.python.org/zh-cn/3.8/library/functools.html#functools.partial" target="_blank" rel="noopener"><code>partial</code></a> 对象与 <code>function</code> 对象的类似之处在于它们都是可调用、可弱引用的对象并可拥有属性。 但两者也存在一些重要的区别。 例如前者不会自动创建 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#definition.__name__" target="_blank" rel="noopener"><code>__name__</code></a> 和 <code>__doc__</code> 属性。 而且，在类中定义的 <a href="https://docs.python.org/zh-cn/3.8/library/functools.html#functools.partial" target="_blank" rel="noopener"><code>partial</code></a> 对象的行为类似于静态方法，并且不会在实例属性查找期间转换为绑定方法。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li><code>functools.wraps</code>目的消除装饰器对原函数造成的影响,    通过对原函数相关属性拷贝,已达到装饰器不修改原函数的目的。</li><li><p><strong>wraps内部通过partial对象和update_wrapper函数实现</strong> </p></li><li><p><strong>partial是一个类，通过实现了双下方法new，自定义实例化对象过程，使得对象内部保留原函数和固定参数，通过实现双下方法call，使得对象可以像函数一样被调用，再通过内部保留的原函数和固定参数以及传入的其它参数进行原函数调用。</strong> </p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库-functools-高阶函数工具&quot;&gt;&lt;a href=&quot;#python-标准库-functools-高阶函数工具&quot; class=&quot;headerlink&quot; title=&quot;python 标准库 functools 高阶函数工具&quot;&gt;&lt;/a&gt;python 标准库 functools 高阶函数工具&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://s3-eu-west-1.amazonaws.com/sup46/wp-content/uploads/2016/06/15100010/Attach-sup46.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/categories/python/standard-library/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="functools" scheme="https://pinghailinfeng.gitee.io/tags/functools/"/>
    
  </entry>
  
  <entry>
    <title>python standard library queue</title>
    <link href="https://pinghailinfeng.gitee.io/2020/01/31/python-standard-library-queue/"/>
    <id>https://pinghailinfeng.gitee.io/2020/01/31/python-standard-library-queue/</id>
    <published>2020-01-31T05:04:32.000Z</published>
    <updated>2020-02-03T10:23:40.092Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库-queue"><a href="#python-标准库-queue" class="headerlink" title="python 标准库 queue"></a>python 标准库 queue</h1><p><img src="https://up.enterdesk.com/edpic/02/40/4a/02404af0eafff163c22ce10400cb5be9.jpg" alt></p><a id="more"></a><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=4973554&auto=0&height=66"></iframe><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p> <strong>源代码:</strong> <a href="https://github.com/python/cpython/tree/3.8/Lib/queue.py" target="_blank" rel="noopener">Lib/queue.py</a> </p><p><a href="https://docs.python.org/zh-cn/3.8/library/queue.html#module-queue" target="_blank" rel="noopener"><code>queue</code></a> 模块实现了多生产者、多消费者队列。这特别适用于消息必须安全地在多线程间交换的线程编程。模块中的 <a href="https://docs.python.org/zh-cn/3.8/library/queue.html#queue.Queue" target="_blank" rel="noopener"><code>Queue</code></a> 类实现了所有所需的锁定语义。</p><p>模块实现了三种类型的队列，它们的区别仅仅是条目取回的顺序。在 FIFO 队列中，先添加的任务先取回。在 LIFO 队列中，最近被添加的条目先取回(操作类似一个堆栈)。优先级队列中，条目将保持排序( 使用 <a href="https://docs.python.org/zh-cn/3.8/library/heapq.html#module-heapq" target="_blank" rel="noopener"><code>heapq</code></a> 模块 ) 并且最小值的条目第一个返回。</p><p>在内部，这三个类型的队列使用锁来临时阻塞竞争线程；然而，它们并未被设计用于线程的重入性处理。</p><p>此外，模块实现了一个 “简单的” FIFO 队列类型， <a href="https://docs.python.org/zh-cn/3.8/library/queue.html#queue.SimpleQueue" target="_blank" rel="noopener"><code>SimpleQueue</code></a> ，这个特殊实现为小功能在交换中提供额外的保障。</p><p><a href="https://docs.python.org/zh-cn/3.8/library/queue.html#module-queue" target="_blank" rel="noopener"><code>queue</code></a> 模块定义了下列类和异常：</p><ul><li><p><em>class</em> <code>queue.Queue</code>(<em>maxsize=0</em>)</p><p>Constructor for a FIFO queue. <em>maxsize</em> is an integer that sets the upperbound limit on the number of items that can be placed in the queue. Insertion will block once this size has been reached, until queue items are consumed. If <em>maxsize</em> is less than or equal to zero, the queue size is infinite.</p></li><li><p><em>class</em> <code>queue.LifoQueue</code>(<em>maxsize=0</em>)</p><p>LIFO 队列构造函数。 <em>maxsize</em> 是个整数，用于设置可以放入队列中的项目数的上限。当达到这个大小的时候，插入操作将阻塞至队列中的项目被消费掉。如果 <em>maxsize</em> 小于等于零，队列尺寸为无限大。</p></li><li><p><em>class</em> <code>queue.PriorityQueue</code>(<em>maxsize=0</em>)</p><p>优先级队列构造函数。 <em>maxsize</em> 是个整数，用于设置可以放入队列中的项目数的上限。当达到这个大小的时候，插入操作将阻塞至队列中的项目被消费掉。如果 <em>maxsize</em> 小于等于零，队列尺寸为无限大。最小值先被取出( 最小值条目是由 <code>sorted(list(entries))[0]</code> 返回的条目)。条目的典型模式是一个以下形式的元组： <code>(priority_number, data)</code> 。如果 <em>data</em> 元素没有可比性，数据将被包装在一个类中，忽略数据值，仅仅比较优先级数字 ：<code>from dataclasses import dataclass, field from typing import Any @dataclass(order=True) class PrioritizedItem:    priority: int    item: Any=field(compare=False)</code></p></li><li><p><em>class</em> <code>queue.SimpleQueue</code></p><p>无界的 FIFO 队列构造函数。简单的队列，缺少任务跟踪等高级功能。<em>3.7 新版功能.</em></p></li><li><p><em>exception</em> <code>queue.Empty</code></p><p>对空的 <a href="https://docs.python.org/zh-cn/3.8/library/queue.html#queue.Queue" target="_blank" rel="noopener"><code>Queue</code></a> 对象，调用非阻塞的 <a href="https://docs.python.org/zh-cn/3.8/library/queue.html#queue.Queue.get" target="_blank" rel="noopener"><code>get()</code></a> (or <a href="https://docs.python.org/zh-cn/3.8/library/queue.html#queue.Queue.get_nowait" target="_blank" rel="noopener"><code>get_nowait()</code></a>) 时，引发的异常。</p></li><li><p><em>exception</em> <code>queue.Full</code></p><p>对满的 <a href="https://docs.python.org/zh-cn/3.8/library/queue.html#queue.Queue" target="_blank" rel="noopener"><code>Queue</code></a> 对象，调用非阻塞的 <a href="https://docs.python.org/zh-cn/3.8/library/queue.html#queue.Queue.put" target="_blank" rel="noopener"><code>put()</code></a> (or <a href="https://docs.python.org/zh-cn/3.8/library/queue.html#queue.Queue.put_nowait" target="_blank" rel="noopener"><code>put_nowait()</code></a>) 时，引发的异常。</p></li></ul><h2 id="Queue对象"><a href="#Queue对象" class="headerlink" title="Queue对象"></a>Queue对象</h2><p>队列对象 (<a href="https://docs.python.org/zh-cn/3.8/library/queue.html#queue.Queue" target="_blank" rel="noopener"><code>Queue</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/queue.html#queue.LifoQueue" target="_blank" rel="noopener"><code>LifoQueue</code></a>, 或者 <a href="https://docs.python.org/zh-cn/3.8/library/queue.html#queue.PriorityQueue" target="_blank" rel="noopener"><code>PriorityQueue</code></a>) 提供下列描述的公共方法。</p><ul><li><p><code>Queue.qsize</code>()</p><p>返回队列的大致大小。注意，qsize() &gt; 0 不保证后续的 get() 不被阻塞，qsize() &lt; maxsize 也不保证 put() 不被阻塞。</p></li><li><p><code>Queue.empty</code>()</p><p>如果队列为空，返回 <code>True</code> ，否则返回 <code>False</code> 。如果 empty() 返回 <code>True</code> ，不保证后续调用的 put() 不被阻塞。类似的，如果 empty() 返回 <code>False</code> ，也不保证后续调用的 get() 不被阻塞。</p></li><li><p><code>Queue.full</code>()</p><p>如果队列是满的返回 <code>True</code> ，否则返回 <code>False</code> 。如果 full() 返回 <code>True</code> 不保证后续调用的 get() 不被阻塞。类似的，如果 full() 返回 <code>False</code> 也不保证后续调用的 put() 不被阻塞。</p></li><li><p><code>Queue.put</code>(<em>item</em>, <em>block=True</em>, <em>timeout=None</em>)</p><p>将 <em>item</em> 放入队列。如果可选参数 <em>block</em> 是 true 并且 <em>timeout</em> 是 <code>None</code> (默认)，则在必要时阻塞至有空闲插槽可用。如果 <em>timeout</em> 是个正数，将最多阻塞 <em>timeout</em> 秒，如果在这段时间没有可用的空闲插槽，将引发 <a href="https://docs.python.org/zh-cn/3.8/library/queue.html#queue.Full" target="_blank" rel="noopener"><code>Full</code></a> 异常。反之 (<em>block</em> 是 false)，如果空闲插槽立即可用，则把 <em>item</em> 放入队列，否则引发 <a href="https://docs.python.org/zh-cn/3.8/library/queue.html#queue.Full" target="_blank" rel="noopener"><code>Full</code></a> 异常 ( 在这种情况下，<em>timeout</em> 将被忽略)。</p></li><li><p><code>Queue.put_nowait</code>(<em>item</em>)</p><p>相当于 <code>put(item, False)</code> 。</p></li><li><p><code>Queue.get</code>(<em>block=True</em>, <em>timeout=None</em>)</p><p>从队列中移除并返回一个项目。如果可选参数 <em>block</em> 是 true 并且 <em>timeout</em> 是 <code>None</code> (默认值)，则在必要时阻塞至项目可得到。如果 <em>timeout</em> 是个正数，将最多阻塞 <em>timeout</em> 秒，如果在这段时间内项目不能得到，将引发 <a href="https://docs.python.org/zh-cn/3.8/library/queue.html#queue.Empty" target="_blank" rel="noopener"><code>Empty</code></a> 异常。反之 (<em>block</em> 是 false) , 如果一个项目立即可得到，则返回一个项目，否则引发 <a href="https://docs.python.org/zh-cn/3.8/library/queue.html#queue.Empty" target="_blank" rel="noopener"><code>Empty</code></a> 异常 (这种情况下，<em>timeout</em> 将被忽略)。POSIX系统3.0之前，以及所有版本的Windows系统中，如果 <em>block</em> 是 true 并且 <em>timeout</em> 是 <code>None</code> ， 这个操作将进入基础锁的不间断等待。这意味着，没有异常能发生，尤其是 SIGINT 将不会触发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#KeyboardInterrupt" target="_blank" rel="noopener"><code>KeyboardInterrupt</code></a> 异常。</p></li><li><p><code>Queue.get_nowait</code>()</p><p>相当于 <code>get(False)</code> 。</p></li></ul><p>提供了两个方法，用于支持跟踪 排队的任务 是否 被守护的消费者线程 完整的处理。</p><ul><li><p><code>Queue.task_done</code>()</p><p>表示前面排队的任务已经被完成。被队列的消费者线程使用。每个 <a href="https://docs.python.org/zh-cn/3.8/library/queue.html#queue.Queue.get" target="_blank" rel="noopener"><code>get()</code></a> 被用于获取一个任务， 后续调用 <a href="https://docs.python.org/zh-cn/3.8/library/queue.html#queue.Queue.task_done" target="_blank" rel="noopener"><code>task_done()</code></a> 告诉队列，该任务的处理已经完成。如果 <a href="https://docs.python.org/zh-cn/3.8/library/queue.html#queue.Queue.join" target="_blank" rel="noopener"><code>join()</code></a> 当前正在阻塞，在所有条目都被处理后，将解除阻塞(意味着每个 <a href="https://docs.python.org/zh-cn/3.8/library/queue.html#queue.Queue.put" target="_blank" rel="noopener"><code>put()</code></a> 进队列的条目的 <a href="https://docs.python.org/zh-cn/3.8/library/queue.html#queue.Queue.task_done" target="_blank" rel="noopener"><code>task_done()</code></a> 都被收到)。如果被调用的次数多于放入队列中的项目数量，将引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#ValueError" target="_blank" rel="noopener"><code>ValueError</code></a> 异常 。</p></li><li><p><code>Queue.join</code>()</p><p>阻塞至队列中所有的元素都被接收和处理完毕。当条目添加到队列的时候，未完成任务的计数就会增加。每当消费者线程调用 <a href="https://docs.python.org/zh-cn/3.8/library/queue.html#queue.Queue.task_done" target="_blank" rel="noopener"><code>task_done()</code></a> 表示这个条目已经被回收，该条目所有工作已经完成，未完成计数就会减少。当未完成计数降到零的时候， <a href="https://docs.python.org/zh-cn/3.8/library/queue.html#queue.Queue.join" target="_blank" rel="noopener"><code>join()</code></a> 阻塞被解除。</p></li></ul><p>如何等待排队的任务被完成的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        item = q.get()</span><br><span class="line">        <span class="keyword">if</span> item <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        do_work(item)</span><br><span class="line">        q.task_done()</span><br><span class="line"></span><br><span class="line">q = queue.Queue()</span><br><span class="line">threads = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(num_worker_threads):</span><br><span class="line">    t = threading.Thread(target=worker)</span><br><span class="line">    t.start()</span><br><span class="line">    threads.append(t)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> source():</span><br><span class="line">    q.put(item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># block until all tasks are done</span></span><br><span class="line">q.join()</span><br><span class="line"></span><br><span class="line"><span class="comment"># stop workers</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(num_worker_threads):</span><br><span class="line">    q.put(<span class="literal">None</span>)</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">    t.join()</span><br></pre></td></tr></table></figure><h2 id="SimpleQueue-对象"><a href="#SimpleQueue-对象" class="headerlink" title="SimpleQueue 对象"></a>SimpleQueue 对象</h2><p><a href="https://docs.python.org/zh-cn/3.8/library/queue.html#queue.SimpleQueue" target="_blank" rel="noopener"><code>SimpleQueue</code></a> 对象提供下列描述的公共方法。</p><ul><li><p><code>SimpleQueue.qsize</code>()</p><p>返回队列的大致大小。注意，qsize() &gt; 0 不保证后续的 get() 不被阻塞。</p></li><li><p><code>SimpleQueue.empty</code>()</p><p>如果队列为空，返回 <code>True</code> ，否则返回 <code>False</code> 。如果 empty() 返回 <code>False</code> ，不保证后续调用的 get() 不被阻塞。</p></li><li><p><code>SimpleQueue.put</code>(<em>item</em>, <em>block=True</em>, <em>timeout=None</em>)</p><p>将 <em>item</em> 放入队列。此方法永不阻塞，始终成功（除了潜在的低级错误，例如内存分配失败）。可选参数 <em>block</em> 和 <em>timeout</em> 仅仅是为了保持 <a href="https://docs.python.org/zh-cn/3.8/library/queue.html#queue.Queue.put" target="_blank" rel="noopener"><code>Queue.put()</code></a> 的兼容性而提供，其值被忽略。<strong>CPython implementation detail:</strong> This method has a C implementation which is reentrant. That is, a <code>put()</code> or <code>get()</code> call can be interrupted by another <code>put()</code> call in the same thread without deadlocking or corrupting internal state inside the queue. This makes it appropriate for use in destructors such as <code>__del__</code> methods or <a href="https://docs.python.org/zh-cn/3.8/library/weakref.html#module-weakref" target="_blank" rel="noopener"><code>weakref</code></a> callbacks.</p></li><li><p><code>SimpleQueue.put_nowait</code>(<em>item</em>)</p><p>相当于 <code>put(item)</code> ，仅为保持 <a href="https://docs.python.org/zh-cn/3.8/library/queue.html#queue.Queue.put_nowait" target="_blank" rel="noopener"><code>Queue.put_nowait()</code></a> 兼容性而提供。</p></li><li><p><code>SimpleQueue.get</code>(<em>block=True</em>, <em>timeout=None</em>)</p><p>从队列中移除并返回一个项目。如果可选参数 <em>block</em> 是 true 并且 <em>timeout</em> 是 <code>None</code> (默认值)，则在必要时阻塞至项目可得到。如果 <em>timeout</em> 是个正数，将最多阻塞 <em>timeout</em> 秒，如果在这段时间内项目不能得到，将引发 <a href="https://docs.python.org/zh-cn/3.8/library/queue.html#queue.Empty" target="_blank" rel="noopener"><code>Empty</code></a> 异常。反之 (<em>block</em> 是 false) , 如果一个项目立即可得到，则返回一个项目，否则引发 <a href="https://docs.python.org/zh-cn/3.8/library/queue.html#queue.Empty" target="_blank" rel="noopener"><code>Empty</code></a> 异常 (这种情况下，<em>timeout</em> 将被忽略)。</p></li><li><p><code>SimpleQueue.get_nowait</code>()</p><p>相当于 <code>get(False)</code> 。</p></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h3 id="Queue的种类："><a href="#Queue的种类：" class="headerlink" title="Queue的种类："></a>Queue的种类：</h3><ul><li><p><strong>FIFO</strong>：</p><p><strong>Queue.Queue(maxsize=0)</strong></p></li></ul><p>FIFO即First in First Out,先进先出。Queue提供了一个基本的FIFO容器，使用方法很简单,maxsize是个整数，指明了队列中能存放的数据个数的上限。一旦达到上限，插入会导致阻塞，直到队列中的数据被消费掉。如果maxsize小于或者等于0，队列大小没有限制。</p><ul><li><strong>LIFO</strong></li></ul><p><strong>Queue.LifoQueue(maxsize=0)</strong></p><p>LIFO即Last in First Out,后进先出。与栈的类似，使用也很简单,maxsize用法同上</p><ul><li><strong>priority</strong></li></ul><p><strong>class Queue.PriorityQueue(maxsize=0)</strong></p><p>构造一个优先队列。maxsize用法同上。</p><h3 id="例子1：LifoQueue"><a href="#例子1：LifoQueue" class="headerlink" title="例子1：LifoQueue"></a>例子1：LifoQueue</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 可以设置队列的长度 q=queue.LifoQueue(5)，意味着队列中最多存放5个元素,当队列满的时候自动进入阻塞状态</span></span><br><span class="line">q=queue.LifoQueue()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        q.put(i)</span><br><span class="line">        print(<span class="string">"数据%d被存入到队列中"</span> % i)</span><br><span class="line">    q.join()</span><br><span class="line">    print(<span class="string">'ok'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        value = q.get()</span><br><span class="line">        print(<span class="string">"数据%d从队列中取出"</span> % value)</span><br><span class="line">        q.task_done()</span><br><span class="line"> </span><br><span class="line">t1=threading.Thread(target=put,args=())</span><br><span class="line">t1.start()</span><br><span class="line">t2=threading.Thread(target=get,args=())</span><br><span class="line">t2.start()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>数据<span class="number">0</span>被存入到队列中</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>数据<span class="number">1</span>被存入到数据中</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>数据<span class="number">2</span>被存入到队列中</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>数据<span class="number">3</span>被存入到队列中</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>数据<span class="number">4</span>被存入到队列中</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>数据<span class="number">5</span>被存入到队列中</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>数据<span class="number">6</span>被存入到队列中</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>数据<span class="number">7</span>被存入到队列中</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>数据<span class="number">8</span>被存入到队列中</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>数据<span class="number">9</span>被存入到队列中</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>数据<span class="number">9</span>从队列中取出</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>数据<span class="number">8</span>从队列中取出</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>数据<span class="number">7</span>从队列中取出</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>数据<span class="number">6</span>从队列中取出</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>数据<span class="number">5</span>从队列中取出</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>数据<span class="number">4</span>从队列中取出</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>数据<span class="number">3</span>从队列中取出</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>数据<span class="number">2</span>从队列中取出</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>数据<span class="number">1</span>从队列中取出</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>数据<span class="number">0</span>从队列中取出</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ok</span><br></pre></td></tr></table></figure><h3 id="例子2：Priortity-Queue-in-Python"><a href="#例子2：Priortity-Queue-in-Python" class="headerlink" title="例子2：Priortity Queue in Python"></a>例子2：Priortity Queue in Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A simple implementation of Priority Queue </span></span><br><span class="line"><span class="comment"># using Queue. </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span><span class="params">(object)</span>:</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span> </span><br><span class="line">        self.queue = [] </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="string">' '</span>.join([str(i) <span class="keyword">for</span> i <span class="keyword">in</span> self.queue]) </span><br><span class="line">  </span><br><span class="line">    <span class="comment"># for checking if the queue is empty </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span><span class="params">(self)</span>:</span> </span><br><span class="line">        <span class="keyword">return</span> len(self.queue) == [] </span><br><span class="line">  </span><br><span class="line">    <span class="comment"># for inserting an element in the queue </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, data)</span>:</span> </span><br><span class="line">        self.queue.append(data) </span><br><span class="line">  </span><br><span class="line">    <span class="comment"># for popping an element based on Priority </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self)</span>:</span> </span><br><span class="line">        <span class="keyword">try</span>: </span><br><span class="line">            max = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.queue)): </span><br><span class="line">                <span class="keyword">if</span> self.queue[i] &gt; self.queue[max]: </span><br><span class="line">                    max = i </span><br><span class="line">            item = self.queue[max] </span><br><span class="line">            <span class="keyword">del</span> self.queue[max] </span><br><span class="line">            <span class="keyword">return</span> item </span><br><span class="line">        <span class="keyword">except</span> IndexError: </span><br><span class="line">            print() </span><br><span class="line">            exit() </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>: </span><br><span class="line">    myQueue = PriorityQueue() </span><br><span class="line">    myQueue.insert(<span class="number">12</span>) </span><br><span class="line">    myQueue.insert(<span class="number">1</span>) </span><br><span class="line">    myQueue.insert(<span class="number">14</span>) </span><br><span class="line">    myQueue.insert(<span class="number">7</span>) </span><br><span class="line">    print(myQueue)             </span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> myQueue.isEmpty(): </span><br><span class="line">        print(myQueue.delete())  </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">12</span> <span class="number">1</span> <span class="number">14</span> <span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">14</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>()</span><br></pre></td></tr></table></figure><h2 id="扩展-第三方队列"><a href="#扩展-第三方队列" class="headerlink" title="扩展:第三方队列"></a>扩展:第三方队列</h2><p>下面介绍五个第三方队列框架,看来造轮子也是个好方法，:)</p><ol><li><p><a href="http://www.celeryproject.org/" target="_blank" rel="noopener">Celery</a>  </p><p><a href="http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html" target="_blank" rel="noopener">官方栗子</a></p></li><li><p><a href="http://python-rq.org/" target="_blank" rel="noopener">RQ</a> </p></li></ol><p>   一个栗子</p>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_words_at_url</span><span class="params">(url)</span>:</span></span><br><span class="line">    resp = requests.get(url)</span><br><span class="line">    <span class="keyword">return</span> len(resp.text.split())</span><br></pre></td></tr></table></figure><p>   创建一个RQ queue</p>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"><span class="keyword">from</span> rq <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line">q = Queue(connection=Redis())</span><br></pre></td></tr></table></figure><p>   方法调用</p>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> my_module <span class="keyword">import</span> count_words_at_url</span><br><span class="line">result = q.enqueue(</span><br><span class="line">             count_words_at_url, <span class="string">'http://nvie.com'</span>)</span><br></pre></td></tr></table></figure><p>   Worker实例</p>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ rq worker</span><br><span class="line">*** Listening <span class="keyword">for</span> work on default</span><br><span class="line">Got count_words_at_url(<span class="string">'http://nvie.com'</span>) <span class="keyword">from</span> default</span><br><span class="line">Job result = <span class="number">818</span></span><br><span class="line">*** Listening <span class="keyword">for</span> work on default</span><br></pre></td></tr></table></figure><ol start="3"><li><p><a href="https://huey.readthedocs.io/en/latest/" target="_blank" rel="noopener">huey</a> </p><blockquote><p>一个轻量级队列框架</p></blockquote><p>一个栗子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> huey <span class="keyword">import</span> RedisHuey, crontab</span><br><span class="line"></span><br><span class="line">huey = RedisHuey(<span class="string">'my-app'</span>, host=<span class="string">'redis.myapp.com'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@huey.task()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_numbers</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="meta">@huey.task(retries=2, retry_delay=60)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flaky_task</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment"># This task might fail, in which case it will be retried up to 2 times</span></span><br><span class="line">    <span class="comment"># with a delay of 60s between retries.</span></span><br><span class="line">    <span class="keyword">return</span> this_might_fail(url)</span><br><span class="line"></span><br><span class="line"><span class="meta">@huey.periodic_task(crontab(minute='0', hour='3'))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nightly_backup</span><span class="params">()</span>:</span></span><br><span class="line">    sync_all_data()</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p><a href="https://kuyruk.readthedocs.io/en/latest/" target="_blank" rel="noopener">kuyruk</a></p><p>创建Task</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tasks.py</span></span><br><span class="line"><span class="keyword">from</span> kuyruk <span class="keyword">import</span> Kuyruk</span><br><span class="line"></span><br><span class="line">kuyruk = Kuyruk()</span><br><span class="line"></span><br><span class="line"><span class="meta">@kuyruk.task()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">(message)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> message</span><br></pre></td></tr></table></figure><p>发送Task 去 RabbitMQ</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tasks</span><br><span class="line">tasks.echo(<span class="string">"Hello, World!"</span>)</span><br></pre></td></tr></table></figure><p>运行Worker</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kuyruk --app tasks.kuyruk worker</span><br></pre></td></tr></table></figure></li><li><p><a href="https://dramatiq.io/" target="_blank" rel="noopener"><strong>Dramatiq</strong></a>  </p><p>一个栗子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dramatiq</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dramatiq.actor</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_words</span><span class="params">(url)</span>:</span></span><br><span class="line">     response = requests.get(url)</span><br><span class="line">     count = len(response.text.split(<span class="string">" "</span>))</span><br><span class="line">     print(<span class="string">f"There are <span class="subst">&#123;count&#125;</span> words at <span class="subst">&#123;url!r&#125;</span>."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Synchronously count the words on example.com in the current process</span></span><br><span class="line">count_words(<span class="string">"http://example.com"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># or send the actor a message so that it may perform the count</span></span><br><span class="line"><span class="comment"># later, in a separate process.</span></span><br><span class="line">count_words.send(<span class="string">"http://example.com"</span>)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库-queue&quot;&gt;&lt;a href=&quot;#python-标准库-queue&quot; class=&quot;headerlink&quot; title=&quot;python 标准库 queue&quot;&gt;&lt;/a&gt;python 标准库 queue&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://up.enterdesk.com/edpic/02/40/4a/02404af0eafff163c22ce10400cb5be9.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/categories/python/standard-library/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="queue" scheme="https://pinghailinfeng.gitee.io/tags/queue/"/>
    
  </entry>
  
  <entry>
    <title>python standard library concurrent</title>
    <link href="https://pinghailinfeng.gitee.io/2020/01/30/python-standard-library-concurrent/"/>
    <id>https://pinghailinfeng.gitee.io/2020/01/30/python-standard-library-concurrent/</id>
    <published>2020-01-30T11:09:40.000Z</published>
    <updated>2020-02-10T02:35:57.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库-concurrent"><a href="#python-标准库-concurrent" class="headerlink" title="python  标准库 concurrent"></a>python  标准库 concurrent</h1><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/ezgif-2-131886a37345.png?raw=true" alt></p><a id="more"></a><blockquote><p>what is love？ 也许一千个人有一千个人的说法。也许当你知道什么是爱的时候,我们已经忘记了曾经也爱过。一生都没弄明白什么是爱。学会爱别人,也学着如何去爱一个人,是一辈子的事。</p><p>​                                                                                                                                                     — 临风语录</p></blockquote><p>送给大家一首歌 How Long Will I Love You.在这个寒冷的季节里,唯有爱才是唯一可以温暖人们的东西吧。</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=29596326&auto=1&height=66"></iframe></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><strong>源码:</strong> <a href="https://github.com/python/cpython/tree/3.8/Lib/concurrent/futures/thread.py" target="_blank" rel="noopener">Lib/concurrent/futures/thread.py</a> 和 <a href="https://github.com/python/cpython/tree/3.8/Lib/concurrent/futures/process.py" target="_blank" rel="noopener">Lib/concurrent/futures/process.py</a></p><p>concurrent模块层次结构如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">concurrent</span><br><span class="line">    |-- futures/</span><br><span class="line">    |-----|--__init__.py</span><br><span class="line">    |-----|--_base.py</span><br><span class="line">    |-----|--process.py</span><br><span class="line">    |-----|--thread.py</span><br><span class="line">    |-- __init__.py</span><br></pre></td></tr></table></figure><p><a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#module-concurrent.futures" target="_blank" rel="noopener"><code>concurrent.futures</code></a> 模块提供异步执行回调高层接口。</p><p>异步执行可以由 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor" target="_blank" rel="noopener"><code>ThreadPoolExecutor</code></a> 使用线程或由 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor" target="_blank" rel="noopener"><code>ProcessPoolExecutor</code></a> 使用单独的进程来实现。 两者都是实现抽像类 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Executor" target="_blank" rel="noopener"><code>Executor</code></a> 定义的接口。</p><h2 id="Executor对象"><a href="#Executor对象" class="headerlink" title="Executor对象"></a>Executor对象</h2><p><em>class</em> <code>concurrent.futures.Executor</code></p><p>抽象类提供异步执行调用方法。要通过它的子类调用，而不是直接调用。</p><ul><li><p><code>submit</code>(<em>fn</em>, <strong>args<em>, </em></strong>kwargs*)</p><p>调度可调用对象 <em>fn</em>，以 <code>fn(*args **kwargs)</code> 方式执行并返回 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Future" target="_blank" rel="noopener"><code>Future</code></a> 对像代表可调用对象的执行。:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">1</span>) <span class="keyword">as</span> executor:</span><br><span class="line">    future = executor.submit(pow, <span class="number">323</span>, <span class="number">1235</span>)</span><br><span class="line">    print(future.result())</span><br></pre></td></tr></table></figure></li><li><p><code>map</code>(<em>func</em>, *<em>iterables</em>, <em>timeout=None</em>, <em>chunksize=1</em>)</p><p>类似于 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#map" target="_blank" rel="noopener"><code>map(func, *iterables)</code></a> 除去：</p><ul><li>应立即收集 <em>iterables</em> 不要延迟再收集;</li><li><em>func</em> 是异步执行的且对 <em>func</em> 的调用可以并发执行。</li></ul><p>如果 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#iterator.__next__" target="_blank" rel="noopener"><code>__next__()</code></a> 已被调用且返回的结果在对 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Executor.map" target="_blank" rel="noopener"><code>Executor.map()</code></a> 的原始调用经过 <em>timeout</em> 秒后还不可用，则已返回的迭代器将引发 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.TimeoutError" target="_blank" rel="noopener"><code>concurrent.futures.TimeoutError</code></a>。 <em>timeout</em> 可以为 int 或 float 类型。 如果 <em>timeout</em> 未指定或为 <code>None</code>，则不限制等待时间。</p><p>如果 <em>func</em> 调用引发一个异常，当从迭代器中取回它的值时这个异常将被引发。</p><p>使用 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor" target="_blank" rel="noopener"><code>ProcessPoolExecutor</code></a> 时，这个方法会将 <em>iterables</em> 分割任务块并作为独立的任务并提交到执行池中。这些块的大概数量可以由 <em>chunksize</em> 指定正整数设置。 对很长的迭代器来说，使用大的 <em>chunksize</em> 值比默认值 1 能显著地提高性能。 <em>chunksize</em> 对 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor" target="_blank" rel="noopener"><code>ThreadPoolExecutor</code></a> 没有效果。</p><p><em>在 3.5 版更改:</em> 加入 <em>chunksize</em> 参数。</p></li><li><p><code>shutdown</code>(<em>wait=True</em>)</p><p>当待执行的期程完成执行后向执行者发送信号，它就会释放正在使用的任何资源。调用 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Executor.submit" target="_blank" rel="noopener"><code>Executor.submit()</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Executor.submit" target="_blank" rel="noopener"><code>Executor.submit()</code></a> 会在关闭后触发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#RuntimeError" target="_blank" rel="noopener"><code>RuntimeError</code></a>。</p><p>如果 <em>wait</em> 为 <code>True</code> 则此方法只有在所有待执行的期程完成执行且释放已分配的资源后才会返回。 如果 <em>wait</em> 为 <code>False</code>，方法立即返回，所有待执行的期程完成执行后会释放已分配的资源。 不管 <em>wait</em> 的值是什么，整个 Python 程序将等到所有待执行的期程完成执行后才退出。</p><p>如果使用 <a href="https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#with" target="_blank" rel="noopener"><code>with</code></a> 语句，你就可以避免显式调用这个方法，它将会停止 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Executor" target="_blank" rel="noopener"><code>Executor</code></a> (就好像 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Executor.shutdown" target="_blank" rel="noopener"><code>Executor.shutdown()</code></a> 调用时 <em>wait</em> 设为 <code>True</code> 一样等待):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">4</span>) <span class="keyword">as</span> e:</span><br><span class="line">    e.submit(shutil.copy, <span class="string">'src1.txt'</span>, <span class="string">'dest1.txt'</span>)</span><br><span class="line">    e.submit(shutil.copy, <span class="string">'src2.txt'</span>, <span class="string">'dest2.txt'</span>)</span><br><span class="line">    e.submit(shutil.copy, <span class="string">'src3.txt'</span>, <span class="string">'dest3.txt'</span>)</span><br><span class="line">    e.submit(shutil.copy, <span class="string">'src4.txt'</span>, <span class="string">'dest4.txt'</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h2><p><a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor" target="_blank" rel="noopener"><code>ThreadPoolExecutor</code></a> 是 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Executor" target="_blank" rel="noopener"><code>Executor</code></a> 的子类，它使用线程池来异步执行调用。</p><p>当回调已关联了一个 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Future" target="_blank" rel="noopener"><code>Future</code></a> 然后再等待另一个 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Future" target="_blank" rel="noopener"><code>Future</code></a> 的结果时就会发生死锁情况。 例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wait_on_b</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    print(b.result())  <span class="comment"># b will never complete because it is waiting on a.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wait_on_a</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    print(a.result())  <span class="comment"># a will never complete because it is waiting on b.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">executor = ThreadPoolExecutor(max_workers=<span class="number">2</span>)</span><br><span class="line">a = executor.submit(wait_on_b)</span><br><span class="line">b = executor.submit(wait_on_a)</span><br></pre></td></tr></table></figure><p>和下面的情况:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wait_on_future</span><span class="params">()</span>:</span></span><br><span class="line">    f = executor.submit(pow, <span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="comment"># This will never complete because there is only one worker thread and</span></span><br><span class="line">    <span class="comment"># it is executing this function.</span></span><br><span class="line">    print(f.result())</span><br><span class="line"></span><br><span class="line">executor = ThreadPoolExecutor(max_workers=<span class="number">1</span>)</span><br><span class="line">executor.submit(wait_on_future)</span><br></pre></td></tr></table></figure><p><em>class</em> <code>concurrent.futures.ThreadPoolExecutor</code>(<em>max_workers=None</em>, <em>thread_name_prefix=’’</em>, <em>initializer=None</em>, <em>initargs=()</em>)</p><p><a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Executor" target="_blank" rel="noopener"><code>Executor</code></a> 的一个子类，使用最多 <em>max_workers</em> 个线程的线程池来异步执行调用。</p><p><em>initializer</em> 是在每个工作者线程开始处调用的一个可选可调用对象。 <em>initargs</em> 是传递给初始化器的元组参数。任何向池提交更多工作的尝试， <em>initializer</em> 都将引发一个异常，当前所有等待的工作都会引发一个 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.thread.BrokenThreadPool" target="_blank" rel="noopener"><code>BrokenThreadPool</code></a>。</p><p><em>在 3.5 版更改:</em> 如果 <em>max_workers</em> 为 <code>None</code> 或没有指定，将默认为机器处理器的个数，假如 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor" target="_blank" rel="noopener"><code>ThreadPoolExecutor</code></a> 则重于 I/O 操作而不是 CPU 运算，那么可以乘以 <code>5</code>，同时工作线程的数量可以比 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor" target="_blank" rel="noopener"><code>ProcessPoolExecutor</code></a> 的数量高。</p><p><em>3.6 新版功能:</em> 添加 <em>thread_name_prefix</em> 参数允许用户控制由线程池创建的 <a href="https://docs.python.org/zh-cn/3.8/library/threading.html#threading.Thread" target="_blank" rel="noopener"><code>threading.Thread</code></a> 工作线程名称以方便调试。</p><p><em>在 3.7 版更改:</em> 加入 <em>initializer</em> 和<em>initargs</em> 参数。</p><p><em>在 3.8 版更改:</em> <em>max_workers</em> 的默认值已改为 <code>min(32, os.cpu_count() + 4)</code>。 这个默认值会保留至少 5 个工作线程用于 I/O 密集型任务。 它会使用至多 32 个 CPU 核心用于 CPU 密集型任务并将释放 GIL。 它还会避免在多核机器上隐式地使用非常大量的资源。</p><p>现在 ThreadPoolExecutor 在启动 <em>max_workers</em> 个工作线程之前也会重用空闲的工作线程。</p><h3 id="ThreadPoolExecutor-例子"><a href="#ThreadPoolExecutor-例子" class="headerlink" title="ThreadPoolExecutor 例子"></a>ThreadPoolExecutor 例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">URLS = [<span class="string">'http://www.foxnews.com/'</span>,</span><br><span class="line">        <span class="string">'http://www.cnn.com/'</span>,</span><br><span class="line">        <span class="string">'http://europe.wsj.com/'</span>,</span><br><span class="line">        <span class="string">'http://www.bbc.co.uk/'</span>,</span><br><span class="line">        <span class="string">'http://some-made-up-domain.com/'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Retrieve a single page and report the URL and contents</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_url</span><span class="params">(url, timeout)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> urllib.request.urlopen(url, timeout=timeout) <span class="keyword">as</span> conn:</span><br><span class="line">        <span class="keyword">return</span> conn.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># We can use a with statement to ensure threads are cleaned up promptly</span></span><br><span class="line"><span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor(max_workers=<span class="number">5</span>) <span class="keyword">as</span> executor:</span><br><span class="line">    <span class="comment"># Start the load operations and mark each future with its URL</span></span><br><span class="line">    future_to_url = &#123;executor.submit(load_url, url, <span class="number">60</span>): url <span class="keyword">for</span> url <span class="keyword">in</span> URLS&#125;</span><br><span class="line">    <span class="keyword">for</span> future <span class="keyword">in</span> concurrent.futures.as_completed(future_to_url):</span><br><span class="line">        url = future_to_url[future]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = future.result()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">            print(<span class="string">'%r generated an exception: %s'</span> % (url, exc))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'%r page is %d bytes'</span> % (url, len(data)))</span><br></pre></td></tr></table></figure><h2 id="ProcessPoolExecutor"><a href="#ProcessPoolExecutor" class="headerlink" title="ProcessPoolExecutor"></a>ProcessPoolExecutor</h2><p><a href="https://github.com/python/cpython/blob/3.8/Lib/concurrent/futures/process.py" target="_blank" rel="noopener">源码</a>中的图示:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""Implements ProcessPoolExecutor.</span></span><br><span class="line"><span class="string">The following diagram and text describe the data-flow through the system:</span></span><br><span class="line"><span class="string">|======================= In-process =====================|== Out-of-process ==|</span></span><br><span class="line"><span class="string">+----------+     +----------+       +--------+     +-----------+    +---------+</span></span><br><span class="line"><span class="string">|          |  =&gt; | Work Ids |       |        |     | Call Q    |    | Process |</span></span><br><span class="line"><span class="string">|          |     +----------+       |        |     +-----------+    |  Pool   |</span></span><br><span class="line"><span class="string">|          |     | ...      |       |        |     | ...       |    +---------+</span></span><br><span class="line"><span class="string">|          |     | 6        |    =&gt; |        |  =&gt; | 5, call() | =&gt; |         |</span></span><br><span class="line"><span class="string">|          |     | 7        |       |        |     | ...       |    |         |</span></span><br><span class="line"><span class="string">| Process  |     | ...      |       | Local  |     +-----------+    | Process |</span></span><br><span class="line"><span class="string">|  Pool    |     +----------+       | Worker |                      |  #1..n  |</span></span><br><span class="line"><span class="string">| Executor |                        | Thread |                      |         |</span></span><br><span class="line"><span class="string">|          |     +----------- +     |        |     +-----------+    |         |</span></span><br><span class="line"><span class="string">|          | &lt;=&gt; | Work Items | &lt;=&gt; |        | &lt;=  | Result Q  | &lt;= |         |</span></span><br><span class="line"><span class="string">|          |     +------------+     |        |     +-----------+    |         |</span></span><br><span class="line"><span class="string">|          |     | 6: call()  |     |        |     | ...       |    |         |</span></span><br><span class="line"><span class="string">|          |     |    future  |     |        |     | 4, result |    |         |</span></span><br><span class="line"><span class="string">|          |     | ...        |     |        |     | 3, except |    |         |</span></span><br><span class="line"><span class="string">+----------+     +------------+     +--------+     +-----------+    +---------+</span></span><br></pre></td></tr></table></figure><p><a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor" target="_blank" rel="noopener"><code>ProcessPoolExecutor</code></a> 是 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Executor" target="_blank" rel="noopener"><code>Executor</code></a> 的子类，它使用进程池来实现异步执行调用。 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor" target="_blank" rel="noopener"><code>ProcessPoolExecutor</code></a> 使用 <a href="https://docs.python.org/zh-cn/3.8/library/multiprocessing.html#module-multiprocessing" target="_blank" rel="noopener"><code>multiprocessing</code></a> 回避 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-global-interpreter-lock" target="_blank" rel="noopener">Global Interpreter Lock</a> 但也意味着只可以处理和返回可序列化的对象。</p><p><code>__main__</code> 模块必须可以被工作者子进程导入。这意味着 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor" target="_blank" rel="noopener"><code>ProcessPoolExecutor</code></a> 不可以工作在交互式解释器中。</p><p>从提交给 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor" target="_blank" rel="noopener"><code>ProcessPoolExecutor</code></a> 的回调中调用 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Executor" target="_blank" rel="noopener"><code>Executor</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Future" target="_blank" rel="noopener"><code>Future</code></a> 方法会导致死锁。</p><ul><li><p><em>class</em> <code>concurrent.futures.ProcessPoolExecutor</code>(<em>max_workers=None</em>, <em>mp_context=None</em>, <em>initializer=None</em>, <em>initargs=()</em>)</p><p>异步执行调用的 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Executor" target="_blank" rel="noopener"><code>Executor</code></a> 子类使用一个最多有 <em>max_workers</em> 个进程的进程池。 如果 <em>max_workers</em> 为 <code>None</code> 或未给出，它将默认为机器的处理器个数。 如果 <em>max_workers</em> 小于等于 <code>0</code>，则将引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#ValueError" target="_blank" rel="noopener"><code>ValueError</code></a>。 在 Windows 上，<em>max_workers</em> 必须小于等于 <code>61</code>，否则将引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#ValueError" target="_blank" rel="noopener"><code>ValueError</code></a>。 如果 <em>max_workers</em> 为 <code>None</code>，则所选择的默认最多为 <code>61</code>，即使存在更多处理器。 <em>mp_context</em> 可以是一个多进程上下文或是 None。 它将被用来启动工作者。 如果 <em>mp_context</em> 为 <code>None</code> 或未给出，将使用默认的多进程上下文。</p><p><em>initializer</em> 是在每个工作者进程开始处调用的一个可选可调用对象。 <em>initargs</em> 是传递给初始化器的元组参数。任何向池提交更多工作的尝试， <em>initializer</em> 都将引发一个异常，当前所有等待的工作都会引发一个 <code>BrokenProcessPool</code>。</p><p><em>在 3.3 版更改:</em> 如果其中一个工作进程被突然终止，<code>BrokenProcessPool</code> 就会马上触发。可预计的行为没有定义，但执行器上的操作或它的期程会被冻结或死锁。</p><p><em>在 3.7 版更改:</em> 添加 <em>mp_context</em> 参数允许用户控制由进程池创建给工作者进程的开始方法 。</p><p>加入 <em>initializer</em> 和<em>initargs</em> 参数。</p></li></ul><h3 id="ProcessPoolExecutor-例子"><a href="#ProcessPoolExecutor-例子" class="headerlink" title="ProcessPoolExecutor 例子"></a>ProcessPoolExecutor 例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">PRIMES = [</span><br><span class="line">    <span class="number">112272535095293</span>,</span><br><span class="line">    <span class="number">112582705942171</span>,</span><br><span class="line">    <span class="number">112272535095293</span>,</span><br><span class="line">    <span class="number">115280095190773</span>,</span><br><span class="line">    <span class="number">115797848077099</span>,</span><br><span class="line">    <span class="number">1099726899285419</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    sqrt_n = int(math.floor(math.sqrt(n)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, sqrt_n + <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> concurrent.futures.ProcessPoolExecutor() <span class="keyword">as</span> executor:</span><br><span class="line">        <span class="keyword">for</span> number, prime <span class="keyword">in</span> zip(PRIMES, executor.map(is_prime, PRIMES)):</span><br><span class="line">            print(<span class="string">'%d is prime: %s'</span> % (number, prime))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="Future对象"><a href="#Future对象" class="headerlink" title="Future对象"></a>Future对象</h2><p><a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Future" target="_blank" rel="noopener"><code>Future</code></a> 类将可调用对象封装为异步执行。<a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Future" target="_blank" rel="noopener"><code>Future</code></a> 实例由 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Executor.submit" target="_blank" rel="noopener"><code>Executor.submit()</code></a> 创建。</p><p><em>class</em> <code>concurrent.futures.Future</code></p><p>将可调用对象封装为异步执行。<a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Future" target="_blank" rel="noopener"><code>Future</code></a> 实例由 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Executor.submit" target="_blank" rel="noopener"><code>Executor.submit()</code></a> 创建，除非测试，不应直接创建。</p><blockquote><ul><li><p><code>cancel</code>()</p><p>尝试取消调用。 如果调用正在执行或已结束运行不能被取消则该方法将返回 <code>False</code>，否则调用会被取消并且该方法将返回 <code>True</code>。</p></li><li><p><code>cancelled</code>()</p><p>如果调用成功取消返回 <code>True</code>。</p></li><li><p><code>running</code>()</p><p>如果调用正在执行而且不能被取消那么返回True。</p></li><li><p><code>done</code>()</p><p>如果调用已被取消或正常结束那么返回 <code>True</code>。</p></li><li><p><code>result</code>(<em>timeout=None</em>)</p><p>返回调用返回的值。如果调用还没完成那么这个方法将等待 <em>timeout</em> 秒。如果在 <em>timeout</em> 秒内没有执行完成，<a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.TimeoutError" target="_blank" rel="noopener"><code>concurrent.futures.TimeoutError</code></a> 将会被触发。<em>timeout</em> 可以是整数或浮点数。如果 <em>timeout</em> 没有指定或为 <code>None</code>，那么等待时间就没有限制。如果 futrue 在完成前被取消则 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.CancelledError" target="_blank" rel="noopener"><code>CancelledError</code></a> 将被触发。如果调用引发了一个异常，这个方法也会引发同样的异常。</p></li><li><p><code>exception</code>(<em>timeout=None</em>)</p><p>返回由调用引发的异常。如果调用还没完成那么这个方法将等待 <em>timeout</em> 秒。如果在 <em>timeout</em> 秒内没有执行完成，<a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.TimeoutError" target="_blank" rel="noopener"><code>concurrent.futures.TimeoutError</code></a> 将会被触发。<em>timeout</em> 可以是整数或浮点数。如果 <em>timeout</em> 没有指定或为 <code>None</code>，那么等待时间就没有限制。如果 futrue 在完成前被取消则 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.CancelledError" target="_blank" rel="noopener"><code>CancelledError</code></a> 将被触发。如果调用正常完成那么返回 <code>None</code>。</p></li><li><p><code>add_done_callback</code>(<em>fn</em>)</p><p>附加可调用 <em>fn</em> 到期程。当期程被取消或完成运行时，将会调用 <em>fn</em>，而这个期程将作为它唯一的参数。加入的可调用对象总被属于添加它们的进程中的线程按加入的顺序调用。如果可调用对象引发一个 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#Exception" target="_blank" rel="noopener"><code>Exception</code></a> 子类，它会被记录下来并被忽略掉。如果可调用对象引发一个 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#BaseException" target="_blank" rel="noopener"><code>BaseException</code></a> 子类，这个行为没有定义。如果期程已经完成或已取消，<em>fn</em> 会被立即调用。</p></li></ul></blockquote><p>下面这些 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Future" target="_blank" rel="noopener"><code>Future</code></a> 方法用于单元测试和 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Executor" target="_blank" rel="noopener"><code>Executor</code></a> 实现。</p><blockquote><ul><li><p><code>set_running_or_notify_cancel</code>()</p><p>这个方法只可以在执行关联 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Future" target="_blank" rel="noopener"><code>Future</code></a> 工作之前由 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Executor" target="_blank" rel="noopener"><code>Executor</code></a> 实现调用或由单测试调用。如果这个方法返回 <code>False</code> 那么 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Future" target="_blank" rel="noopener"><code>Future</code></a> 已被取消，即 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Future.cancel" target="_blank" rel="noopener"><code>Future.cancel()</code></a> 已被调用并返回 <code>True</code> 。等待 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Future" target="_blank" rel="noopener"><code>Future</code></a> 完成 (即通过 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.as_completed" target="_blank" rel="noopener"><code>as_completed()</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.wait" target="_blank" rel="noopener"><code>wait()</code></a>) 的线程将被唤醒。如果这个方法返回 <code>True</code> 那么 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Future" target="_blank" rel="noopener"><code>Future</code></a> 不会被取消并已将它变为正在运行状态，也就是说调用 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Future.running" target="_blank" rel="noopener"><code>Future.running()</code></a> 时将返回 True。这个方法只可以被调用一次并且不能在调用 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Future.set_result" target="_blank" rel="noopener"><code>Future.set_result()</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Future.set_exception" target="_blank" rel="noopener"><code>Future.set_exception()</code></a> 之后再调用。</p></li><li><p><code>set_result</code>(<em>result</em>)</p><p>设置将 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Future" target="_blank" rel="noopener"><code>Future</code></a> 关联工作的结果给 <em>result</em> 。这个方法只可以由 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Executor" target="_blank" rel="noopener"><code>Executor</code></a> 实现和单元测试使用。<em>在 3.8 版更改:</em> 如果 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Future" target="_blank" rel="noopener"><code>Future</code></a> 已经完成则此方法会引发 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.InvalidStateError" target="_blank" rel="noopener"><code>concurrent.futures.InvalidStateError</code></a>。</p></li><li><p><code>set_exception</code>(<em>exception</em>)</p><p>设置 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Future" target="_blank" rel="noopener"><code>Future</code></a> 关联工作的结果给 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#Exception" target="_blank" rel="noopener"><code>Exception</code></a> <em>exception</em> 。这个方法只可以由 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Executor" target="_blank" rel="noopener"><code>Executor</code></a> 实现和单元测试使用。<em>在 3.8 版更改:</em> 如果 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Future" target="_blank" rel="noopener"><code>Future</code></a> 已经完成则此方法会引发 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.InvalidStateError" target="_blank" rel="noopener"><code>concurrent.futures.InvalidStateError</code></a>。</p></li></ul></blockquote><h2 id="模块函数"><a href="#模块函数" class="headerlink" title="模块函数"></a>模块函数</h2><p><code>concurrent.futures.wait</code>(<em>fs</em>, <em>timeout=None</em>, <em>return_when=ALL_COMPLETED</em>)</p><p>等待 <em>fs</em> 指定的 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Future" target="_blank" rel="noopener"><code>Future</code></a> 实例（可能由不同的 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Executor" target="_blank" rel="noopener"><code>Executor</code></a> 实例创建）完成。 返回一个由集合构成的具名 2 元组。 第一个集合名称为 <code>done</code>，包含在等待完成之前已完成的期程（包括正常结束或被取消的期程）。 第二个集合名称为 <code>not_done</code>，包含未完成的期程（包括挂起的或正在运行的期程）。</p><p><em>timeout</em> 可以用来控制返回前最大的等待秒数。 <em>timeout</em> 可以为 int 或 float 类型。 如果 <em>timeout</em> 未指定或为 <code>None</code> ，则不限制等待时间。</p><p><em>return_when</em> 指定此函数应在何时返回。它必须为以下常数之一:</p><table><thead><tr><th>常数</th><th>描述</th></tr></thead><tbody><tr><td><code>FIRST_COMPLETED</code></td><td>函数将在任意可等待对象结束或取消时返回。</td></tr><tr><td><code>FIRST_EXCEPTION</code></td><td>函数将在任意可等待对象因引发异常而结束时返回。当没有引发任何异常时它就相当于 <code>ALL_COMPLETED</code>。</td></tr><tr><td><code>ALL_COMPLETED</code></td><td>函数将在所有可等待对象结束或取消时返回。</td></tr></tbody></table><p><code>concurrent.futures.as_completed</code>(<em>fs</em>, <em>timeout=None</em>)</p><p>返回一个包含 <em>fs</em> 所指定的 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Future" target="_blank" rel="noopener"><code>Future</code></a> 实例（可能由不同的 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.Executor" target="_blank" rel="noopener"><code>Executor</code></a> 实例创建）的迭代器，这些实例会在完成时生成期程（包括正常结束或被取消的期程）。 任何由 <em>fs</em> 所指定的重复期程将只被返回一次。 任何在 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.as_completed" target="_blank" rel="noopener"><code>as_completed()</code></a> 被调用之前完成的期程将优先被生成。 如果 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#iterator.__next__" target="_blank" rel="noopener"><code>__next__()</code></a> 被调用并且在对 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.as_completed" target="_blank" rel="noopener"><code>as_completed()</code></a> 的原始调用 <em>timeout</em> 秒之后结果仍不可用，则返回的迭代器将引发 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.TimeoutError" target="_blank" rel="noopener"><code>concurrent.futures.TimeoutError</code></a>。 <em>timeout</em> 可以为整数或浮点数。 如果 <em>timeout</em> 未指定或为 <code>None</code>，则不限制等待时间。</p><blockquote><p><a href="https://www.python.org/dev/peps/pep-3148" target="_blank" rel="noopener"><strong>PEP 3148</strong></a> – futures - 异步执行指令。</p><p>该提案描述了Python标准库中包含的这个特性。</p></blockquote><h2 id="Exception类"><a href="#Exception类" class="headerlink" title="Exception类"></a>Exception类</h2><ul><li><p><em>exception</em> <code>concurrent.futures.CancelledError</code></p><p>future被取消时会触发。</p></li><li><p><em>exception</em> <code>concurrent.futures.TimeoutError</code></p><p>future运算超出给定的超时数值时触发。</p></li><li><p><em>exception</em> <code>concurrent.futures.BrokenExecutor</code></p><p>当执行器被某些原因中断而且不能用来提交或执行新任务时就会被引发派生于 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#RuntimeError" target="_blank" rel="noopener"><code>RuntimeError</code></a> 的异常类。<em>3.7 新版功能.</em></p></li><li><p><em>exception</em> <code>concurrent.futures.InvalidStateError</code></p><p>当某个操作在一个当前状态所不允许的 future 上执行时将被引发。<em>3.8 新版功能.</em></p></li><li><p><em>exception</em> <code>concurrent.futures.thread.BrokenThreadPool</code></p><p>当 <code>ThreadPoolExecutor</code> 中的其中一个工作者初始化失败时会引发派生于 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.BrokenExecutor" target="_blank" rel="noopener"><code>BrokenExecutor</code></a> 的异常类。<em>3.7 新版功能.</em></p></li><li><p><em>exception</em> <code>concurrent.futures.process.BrokenProcessPool</code></p><p>当 <code>ThreadPoolExecutor</code> 中的其中一个工作者不完整终止时(比如，被外部杀死)会引发派生于 <a href="https://docs.python.org/zh-cn/3.8/library/concurrent.futures.html#concurrent.futures.BrokenExecutor" target="_blank" rel="noopener"><code>BrokenExecutor</code></a> ( 原名 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#RuntimeError" target="_blank" rel="noopener"><code>RuntimeError</code></a> ) 的异常类。</p></li></ul><h2 id="补充例子"><a href="#补充例子" class="headerlink" title="补充例子"></a>补充例子</h2><h3 id="submit例子"><a href="#submit例子" class="headerlink" title="submit例子"></a><code>submit</code>例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#线程执行的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(n1,n2)</span>:</span></span><br><span class="line">    v = n1 + n2</span><br><span class="line">    print(<span class="string">'add :'</span>, v , <span class="string">', tid:'</span>,threading.currentThread().ident)</span><br><span class="line">    time.sleep(n1)</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"><span class="comment">#通过submit把需要执行的函数扔进线程池中.</span></span><br><span class="line"><span class="comment">#submit 直接返回一个future对象</span></span><br><span class="line">ex = ThreadPoolExecutor(max_workers=<span class="number">3</span>)      <span class="comment">#制定最多运行N个线程</span></span><br><span class="line">f1 = ex.submit(add,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">f2 = ex.submit(add,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">print(<span class="string">'main thread running'</span>)</span><br><span class="line">print(f1.done())                            <span class="comment">#done 看看任务结束了没</span></span><br><span class="line">print(f1.result())                          <span class="comment">#获取结果 ,阻塞方法</span></span><br></pre></td></tr></table></figure><h3 id="返回-map-例子"><a href="#返回-map-例子" class="headerlink" title="返回 map 例子"></a>返回 <code>map</code> 例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下面是map 方法的简单使用.  注意:map 返回是一个生成器 ,并且是*有序的*</span></span><br><span class="line">URLS = [<span class="string">'http://www.baidu.com'</span>, <span class="string">'http://www.qq.com'</span>, <span class="string">'http://www.sina.com.cn'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">'thread id:'</span>,threading.currentThread().ident,<span class="string">' 访问了:'</span>,url)</span><br><span class="line">    <span class="keyword">return</span> requests.get(url)            <span class="comment">#这里使用了requests 模块</span></span><br><span class="line">ex = ThreadPoolExecutor(max_workers=<span class="number">3</span>)</span><br><span class="line">res_iter = ex.map(get_html,URLS)        <span class="comment">#内部迭代中, 每个url 开启一个线程</span></span><br><span class="line"><span class="keyword">for</span> res <span class="keyword">in</span> res_iter:                    <span class="comment">#此时将阻塞 , 直到线程完成或异常</span></span><br><span class="line">    print(<span class="string">'url:%s ,len: %d'</span>%(res.url,len(res.text)))</span><br></pre></td></tr></table></figure><h3 id="as-complated-例子"><a href="#as-complated-例子" class="headerlink" title="as_complated 例子"></a><code>as_complated</code> 例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">URLS = [<span class="string">'http://www.baidu.com'</span>, <span class="string">'http://www.qq.com'</span>, <span class="string">'http://www.sina.com.cn'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(url)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'thread id:'</span>,threading.currentThread().ident,<span class="string">' 访问了:'</span>,url)</span><br><span class="line">    <span class="keyword">return</span> requests.get(url)            <span class="comment">#这里使用了requests 模块</span></span><br><span class="line">ex = ThreadPoolExecutor(max_workers=<span class="number">3</span>)</span><br><span class="line">f = ex.submit(get_html,URLS[<span class="number">0</span>])          <span class="comment">#提交一个任务,放入线程池中,准备执行</span></span><br><span class="line">print(<span class="string">'main thread running'</span>)</span><br><span class="line"><span class="keyword">for</span> future <span class="keyword">in</span> as_completed([f]):        <span class="comment">#as_completed()接受一个可迭代的Future序列,返回一个生成器,在完成或异常时返回这个Future对象</span></span><br><span class="line">    print(<span class="string">'一个任务完成.'</span>)</span><br><span class="line">    print(future.result())</span><br></pre></td></tr></table></figure><h3 id="as-complated-详细例子"><a href="#as-complated-详细例子" class="headerlink" title="as_complated 详细例子"></a><code>as_complated</code> 详细例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#as_completed 完整的例子</span></span><br><span class="line"><span class="comment">#as_completed 返回一个生成器，用于迭代， 一旦一个线程完成(或失败) 就返回</span></span><br><span class="line">URLS = [<span class="string">'http://www.baidu.com'</span>, <span class="string">'http://www.qq.com'</span>, <span class="string">'http://www.sina.com.cn'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(url)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'thread id:'</span>,threading.currentThread().ident,<span class="string">' 访问了:'</span>,url)</span><br><span class="line">    <span class="keyword">return</span> requests.get(url)            <span class="comment">#这里使用了requests 模块</span></span><br><span class="line">ex = ThreadPoolExecutor(max_workers=<span class="number">3</span>)   <span class="comment">#最多3个线程</span></span><br><span class="line">future_tasks = [ex.submit(get_html,url) <span class="keyword">for</span> url <span class="keyword">in</span> URLS]    <span class="comment">#创建3个future对象</span></span><br><span class="line"><span class="keyword">for</span> future <span class="keyword">in</span> as_completed(future_tasks):       <span class="comment">#迭代生成器</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        resp = future.result()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'%s'</span>%e)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'%s has %d bytes!'</span>%(resp.url, len(resp.text)))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">thread id: 5160  访问了: http://www.baidu.com</span></span><br><span class="line"><span class="string">thread id: 7752  访问了: http://www.sina.com.cn</span></span><br><span class="line"><span class="string">thread id: 5928  访问了: http://www.qq.com</span></span><br><span class="line"><span class="string">http://www.qq.com/ has 240668 bytes!</span></span><br><span class="line"><span class="string">http://www.baidu.com/ has 2381 bytes!</span></span><br><span class="line"><span class="string">https://www.sina.com.cn/ has 577244 bytes!</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><ul><li><code>as_complated</code> 返回的是迭代器,在迭代过程中会阻塞</li><li>直到线程完成或者异常时,返回一个被 <code>set_result</code>的<code>Future</code>对象</li><li>map方法返回的是有序的,<code>as_complated</code> 是哪个线程先完成/失败时就返回</li></ul><h3 id="wait例子（阻塞"><a href="#wait例子（阻塞" class="headerlink" title="wait例子（阻塞)"></a>wait例子（阻塞)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">wait 例子</span></span><br><span class="line"><span class="string">参数:</span></span><br><span class="line"><span class="string">    FIRST_COMPLETED    当任何未来完成或被取消时，该函数将返回。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    FIRST_EXCEPTION    当任何未来通过提出异常完成时，函数将返回。如果没有未来引发异常，那么它等同于 ALL_COMPLETED。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    ALL_COMPLETED(默认)      当所有future完成或被取消时，函数将返回。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">URLS = [<span class="string">'http://www.baidu.com'</span>, <span class="string">'http://www.qq.com'</span>, <span class="string">'http://www.sina.com.cn'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(url)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'thread id:'</span>,threading.currentThread().ident,<span class="string">' 访问了:'</span>,url)</span><br><span class="line">    <span class="keyword">return</span> requests.get(url)            <span class="comment">#这里使用了requests 模块</span></span><br><span class="line">ex = ThreadPoolExecutor(max_workers=<span class="number">3</span>)   <span class="comment">#最多3个线程</span></span><br><span class="line">future_tasks = [ex.submit(get_html,url) <span class="keyword">for</span> url <span class="keyword">in</span> URLS]    <span class="comment">#创建3个future对象</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    result = wait(future_tasks,return_when = fu.FIRST_COMPLETED)</span><br><span class="line">    done_set = result[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> future <span class="keyword">in</span> done_set:</span><br><span class="line">        resp = future.result()</span><br><span class="line">        print(<span class="string">'第一个网页任务完成 url:%s , len:%d bytes! '</span> % (resp.url, len(resp.text)))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'exception :'</span> , e)</span><br></pre></td></tr></table></figure><h3 id="add-done-callback-fn-例子"><a href="#add-done-callback-fn-例子" class="headerlink" title="add_done__callback(fn)例子"></a><code>add_done__callback(fn)</code>例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> os,sys,time,requests,threading</span><br><span class="line"><span class="keyword">from</span> concurrent <span class="keyword">import</span> futures</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">URLS = [</span><br><span class="line">        <span class="string">'http://baidu.com'</span>,</span><br><span class="line">        <span class="string">'http://www.qq.com'</span>,</span><br><span class="line">        <span class="string">'http://www.sina.com.cn'</span></span><br><span class="line">        ]</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_url</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">'tid:'</span>,threading.currentThread().ident,<span class="string">',url:'</span>,url)</span><br><span class="line">    <span class="keyword">with</span> requests.get(url) <span class="keyword">as</span> resp:</span><br><span class="line">        <span class="keyword">return</span> resp.content</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_back</span><span class="params">(obj)</span>:</span></span><br><span class="line">    print(<span class="string">'-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;call_back , tid:'</span>,threading.currentThread().ident, <span class="string">',obj:'</span>,obj)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> futures.ThreadPoolExecutor(max_workers=<span class="number">3</span>) <span class="keyword">as</span> ex:</span><br><span class="line">    <span class="comment"># mp = &#123;ex.submit(load_url,url) : url for url in URLS&#125;</span></span><br><span class="line">    mp = dict()</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> URLS:</span><br><span class="line">        f = ex.submit(load_url,url)</span><br><span class="line">        mp[f] = url</span><br><span class="line">        f.add_done_callback(call_back)</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> futures.as_completed(mp):</span><br><span class="line">        url = mp[f]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = f.result()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">            print(exc, <span class="string">',url:'</span>,url)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'url:'</span>, url, <span class="string">',len:'</span>,len(data),<span class="string">',data[:20]:'</span>,data[:<span class="number">20</span>])</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tid: 7128 ,url: http://baidu.com</span></span><br><span class="line"><span class="string">tid: 7892 ,url: http://www.qq.com</span></span><br><span class="line"><span class="string">tid: 3712 ,url: http://www.sina.com.cn</span></span><br><span class="line"><span class="string">-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;call_back , tid: 7892 ,obj: &lt;Future at 0x2dd64b0 state=finished returned bytes&gt;</span></span><br><span class="line"><span class="string">url: http://www.qq.com ,len: 251215 ,data[:20]: b'&lt;!DOCTYPE html&gt;\n&lt;htm'</span></span><br><span class="line"><span class="string">-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;call_back , tid: 3712 ,obj: &lt;Future at 0x2de07b0 state=finished returned bytes&gt;</span></span><br><span class="line"><span class="string">url: http://www.sina.com.cn ,len: 577333 ,data[:20]: b'&lt;!DOCTYPE html&gt;\n&lt;!--'</span></span><br><span class="line"><span class="string">-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;call_back , tid: 7128 ,obj: &lt;Future at 0x2d533d0 state=finished returned bytes&gt;</span></span><br><span class="line"><span class="string">url: http://baidu.com ,len: 81 ,data[:20]: b'&lt;html&gt;\n&lt;meta http-eq'</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h3 id="futures例子"><a href="#futures例子" class="headerlink" title="futures例子"></a>futures例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> os,sys,time,requests,threading</span><br><span class="line"><span class="keyword">from</span> concurrent <span class="keyword">import</span> futures</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">URLS = [</span><br><span class="line">        <span class="string">'http://baidu.com'</span>,</span><br><span class="line">        <span class="string">'http://www.qq.com'</span>,</span><br><span class="line">        <span class="string">'http://www.sina.com.cn'</span></span><br><span class="line">        ]</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_url</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">'tid:'</span>,threading.currentThread().ident,<span class="string">',url:'</span>,url)</span><br><span class="line">    <span class="keyword">with</span> requests.get(url) <span class="keyword">as</span> resp:</span><br><span class="line">        <span class="keyword">return</span> resp.content</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_back</span><span class="params">(obj)</span>:</span></span><br><span class="line">    print(<span class="string">'-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;call_back , tid:'</span>,threading.currentThread().ident, <span class="string">',obj:'</span>,obj)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> futures.ThreadPoolExecutor(max_workers=<span class="number">3</span>) <span class="keyword">as</span> ex:</span><br><span class="line">    <span class="comment"># mp = &#123;ex.submit(load_url,url) : url for url in URLS&#125;</span></span><br><span class="line">    mp = dict()</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> URLS:</span><br><span class="line">        f = ex.submit(load_url,url)</span><br><span class="line">        mp[f] = url</span><br><span class="line">        f.add_done_callback(call_back)</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> futures.as_completed(mp):</span><br><span class="line">        url = mp[f]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = f.result()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">            print(exc, <span class="string">',url:'</span>,url)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'url:'</span>, url, <span class="string">',len:'</span>,len(data),<span class="string">',data[:20]:'</span>,data[:<span class="number">20</span>])</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">tid: 7128 ,url: http://baidu.com</span></span><br><span class="line"><span class="string">tid: 7892 ,url: http://www.qq.com</span></span><br><span class="line"><span class="string">tid: 3712 ,url: http://www.sina.com.cn</span></span><br><span class="line"><span class="string">-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;call_back , tid: 7892 ,obj: &lt;Future at 0x2dd64b0 state=finished returned bytes&gt;</span></span><br><span class="line"><span class="string">url: http://www.qq.com ,len: 251215 ,data[:20]: b'&lt;!DOCTYPE html&gt;\n&lt;htm'</span></span><br><span class="line"><span class="string">-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;call_back , tid: 3712 ,obj: &lt;Future at 0x2de07b0 state=finished returned bytes&gt;</span></span><br><span class="line"><span class="string">url: http://www.sina.com.cn ,len: 577333 ,data[:20]: b'&lt;!DOCTYPE html&gt;\n&lt;!--'</span></span><br><span class="line"><span class="string">-&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;call_back , tid: 7128 ,obj: &lt;Future at 0x2d533d0 state=finished returned bytes&gt;</span></span><br><span class="line"><span class="string">url: http://baidu.com ,len: 81 ,data[:20]: b'&lt;html&gt;\n&lt;meta http-eq'</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>切记一定要使用with，而不要使用for，如果你一定要用for，那么一定要手动进行executor.shutdown，而你使用了with方法的话，再with方法内部已经实现了wait(),在使用完毕之后可以自行关闭线程池，减少资源浪费。</li><li><code>ProcessPoolExecutor</code>类会利用multiprocessing模块所提供的底层机制，multiprocessing是基于进程的并行。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库-concurrent&quot;&gt;&lt;a href=&quot;#python-标准库-concurrent&quot; class=&quot;headerlink&quot; title=&quot;python  标准库 concurrent&quot;&gt;&lt;/a&gt;python  标准库 concurrent&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/jeffsui/app_image_resource/blob/master/ezgif-2-131886a37345.png?raw=true&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/categories/python/standard-library/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="concurrent" scheme="https://pinghailinfeng.gitee.io/tags/concurrent/"/>
    
  </entry>
  
  <entry>
    <title>python standard library html.parser</title>
    <link href="https://pinghailinfeng.gitee.io/2020/01/29/python-standard-library-html-parser/"/>
    <id>https://pinghailinfeng.gitee.io/2020/01/29/python-standard-library-html-parser/</id>
    <published>2020-01-29T12:24:57.000Z</published>
    <updated>2020-01-30T08:43:58.073Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库-html-parser-简单HTML和XHTML解析器"><a href="#python-标准库-html-parser-简单HTML和XHTML解析器" class="headerlink" title="python 标准库  html.parser 简单HTML和XHTML解析器"></a>python 标准库  html.parser 简单HTML和XHTML解析器</h1><p><img src="https://cn.bing.com/th?id=OIP.cq-61gMRe77h_MW4ca_0egHaFj&amp;pid=Api&amp;rs=1" alt></p><a id="more"></a><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=595024&auto=0&height=66"></iframe><h2 id="源代码：-Lib-html-parser-py"><a href="#源代码：-Lib-html-parser-py" class="headerlink" title="源代码： Lib/html/parser.py"></a><strong>源代码：</strong> <a href="https://github.com/python/cpython/tree/3.8/Lib/html/parser.py" target="_blank" rel="noopener">Lib/html/parser.py</a></h2><p>这个模块定义了一个 <a href="https://docs.python.org/zh-cn/3.8/library/html.parser.html#html.parser.HTMLParser" target="_blank" rel="noopener"><code>HTMLParser</code></a> 类，为 HTML（超文本标记语言）和 XHTML 文本文件解析提供基础。</p><ul><li><p><em>class</em> <code>html.parser.HTMLParser</code>(<em>**, </em>convert_charrefs=True*)</p><p>创建一个能解析无效标记的解析器实例。如果 <em>convert_charrefs</em> 为 <code>True</code> (默认值)，则所有字符引用( <code>script</code>/<code>style</code> 元素中的除外)都会自动转换为相应的 Unicode 字符。一个 <a href="https://docs.python.org/zh-cn/3.8/library/html.parser.html#html.parser.HTMLParser" target="_blank" rel="noopener"><code>HTMLParser</code></a> 类的实例用来接受 HTML 数据，并在标记开始、标记结束、文本、注释和其他元素标记出现的时候调用对应的方法。要实现具体的行为，请使用 <a href="https://docs.python.org/zh-cn/3.8/library/html.parser.html#html.parser.HTMLParser" target="_blank" rel="noopener"><code>HTMLParser</code></a> 的子类并重载其方法。这个解析器不检查结束标记是否与开始标记匹配，也不会因外层元素完毕而隐式关闭了的元素引发结束标记处理。</p></li></ul><h2 id="HTML-解析器的示例程序"><a href="#HTML-解析器的示例程序" class="headerlink" title="HTML 解析器的示例程序"></a>HTML 解析器的示例程序</h2><p>下面是简单的 HTML 解析器的一个基本示例，使用 <a href="https://docs.python.org/zh-cn/3.8/library/html.parser.html#html.parser.HTMLParser" target="_blank" rel="noopener"><code>HTMLParser</code></a> 类，当遇到开始标记、结束标记以及数据的时候将内容打印出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> html.parser <span class="keyword">import</span> HTMLParser</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHTMLParser</span><span class="params">(HTMLParser)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_starttag</span><span class="params">(self, tag, attrs)</span>:</span></span><br><span class="line">        print(<span class="string">"Encountered a start tag:"</span>, tag)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_endtag</span><span class="params">(self, tag)</span>:</span></span><br><span class="line">        print(<span class="string">"Encountered an end tag :"</span>, tag)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_data</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        print(<span class="string">"Encountered some data  :"</span>, data)</span><br><span class="line"></span><br><span class="line">parser = MyHTMLParser()</span><br><span class="line">parser.feed(<span class="string">'&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;&lt;/head&gt;'</span></span><br><span class="line">            <span class="string">'&lt;body&gt;&lt;h1&gt;Parse me!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;'</span>)</span><br></pre></td></tr></table></figure><p> 输出是: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Encountered a start tag: html</span><br><span class="line">Encountered a start tag: head</span><br><span class="line">Encountered a start tag: title</span><br><span class="line">Encountered some data  : Test</span><br><span class="line">Encountered an end tag : title</span><br><span class="line">Encountered an end tag : head</span><br><span class="line">Encountered a start tag: body</span><br><span class="line">Encountered a start tag: h1</span><br><span class="line">Encountered some data  : Parse me!</span><br><span class="line">Encountered an end tag : h1</span><br><span class="line">Encountered an end tag : body</span><br><span class="line">Encountered an end tag : html</span><br></pre></td></tr></table></figure><h2 id="HTMLParser-方法"><a href="#HTMLParser-方法" class="headerlink" title="HTMLParser 方法"></a><code>HTMLParser</code> 方法</h2><p><a href="https://docs.python.org/zh-cn/3.8/library/html.parser.html#html.parser.HTMLParser" target="_blank" rel="noopener"><code>HTMLParser</code></a> 实例有下列方法：</p><ul><li><p><code>HTMLParser.feed</code>(<em>data</em>)</p><p>填充一些文本到解析器中。如果包含完整的元素，则被处理；如果数据不完整，将被缓冲直到更多的数据被填充，或者 <a href="https://docs.python.org/zh-cn/3.8/library/html.parser.html#html.parser.HTMLParser.close" target="_blank" rel="noopener"><code>close()</code></a> 被调用。<em>data</em> 必须为 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str</code></a> 类型。</p></li><li><p><code>HTMLParser.close</code>()</p><p>如同后面跟着一个文件结束标记一样，强制处理所有缓冲数据。这个方法能被派生类重新定义，用于在输入的末尾定义附加处理，但是重定义的版本应当始终调用基类 <a href="https://docs.python.org/zh-cn/3.8/library/html.parser.html#html.parser.HTMLParser" target="_blank" rel="noopener"><code>HTMLParser</code></a> 的 <a href="https://docs.python.org/zh-cn/3.8/library/html.parser.html#html.parser.HTMLParser.close" target="_blank" rel="noopener"><code>close()</code></a> 方法。</p></li><li><p><code>HTMLParser.reset</code>()</p><p>重置实例。丢失所有未处理的数据。在实例化阶段被隐式调用。</p></li><li><p><code>HTMLParser.getpos</code>()</p><p>返回当前行号和偏移值。</p></li><li><p><code>HTMLParser.get_starttag_text</code>()</p><p>返回最近打开的开始标记中的文本。 结构化处理时通常应该不需要这个，但在处理“已部署”的 HTML 或是在以最小改变来重新生成输入时可能会有用处（例如可以保留属性间的空格等）。</p></li></ul><p>下列方法将在遇到数据或者标记元素的时候被调用。他们需要在子类中重载。基类的实现中没有任何实际操作（除了 <a href="https://docs.python.org/zh-cn/3.8/library/html.parser.html#html.parser.HTMLParser.handle_startendtag" target="_blank" rel="noopener"><code>handle_startendtag()</code></a> ）：</p><ul><li><p><code>HTMLParser.handle_starttag</code>(<em>tag</em>, <em>attrs</em>)</p><p>这个方法在标签开始的时候被调用（例如：  ）。<em>tag</em> 参数是小写的标记名。<em>attrs</em> 参数是一个 <code>(name, value)</code> 形式的列表，包含了所有在标记的 <code>&lt;&gt;</code> 括号中找到的属性。<em>name</em> 转换为小写，<em>value</em> 的引号被去除，字符和实体引用都会被替换。实例中，对于标签 ，这个方法将以下列形式被调用 <code>handle_starttag(&#39;a&#39;, [(&#39;href&#39;, &#39;https://www.cwi.nl/&#39;)])</code> 。<a href="https://docs.python.org/zh-cn/3.8/library/html.entities.html#module-html.entities" target="_blank" rel="noopener"><code>html.entities</code></a> 中的所有实体引用，会被替换为属性值。</p></li><li><p><code>HTMLParser.handle_endtag</code>(<em>tag</em>)</p><p>此方法被用来处理元素的结束标记（例如：  ）。<em>tag</em> 参数是小写的标签名。</p></li><li><p><code>HTMLParser.handle_startendtag</code>(<em>tag</em>, <em>attrs</em>)</p><p>类似于 <a href="https://docs.python.org/zh-cn/3.8/library/html.parser.html#html.parser.HTMLParser.handle_starttag" target="_blank" rel="noopener"><code>handle_starttag()</code></a>, 只是在解析器遇到 XHTML 样式的空标记时被调用（ ）。这个方法能被需要这种特殊词法信息的子类重载；默认实现仅简单调用 <a href="https://docs.python.org/zh-cn/3.8/library/html.parser.html#html.parser.HTMLParser.handle_starttag" target="_blank" rel="noopener"><code>handle_starttag()</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/library/html.parser.html#html.parser.HTMLParser.handle_endtag" target="_blank" rel="noopener"><code>handle_endtag()</code></a> 。</p></li><li><p><code>HTMLParser.handle_data</code>(<em>data</em>)</p><p>这个方法被用来处理任意数据（例如：文本节点和 <code>...</code> 以及 <code>...</code> 中的内容）。</p></li><li><p><code>HTMLParser.handle_entityref</code>(<em>name</em>)</p><p>这个方法被用于处理 <code>&amp;name;</code> 形式的命名字符引用（例如 <code>&gt;</code>），其中 <em>name</em> 是通用的实体引用（例如： <code>&#39;gt&#39;</code>）。如果 <em>convert_charrefs</em> 为 <code>True</code>，该方法永远不会被调用。</p></li><li><p><code>HTMLParser.handle_charref</code>(<em>name</em>)</p><p>这个方法被用来处理 <code>&amp;#NNN;</code> 和 <code>&amp;#xNNN;</code> 形式的十进制和十六进制字符引用。例如，<code>&gt;</code> 等效的十进制形式为 <code>&gt;</code> ，而十六进制形式为 <code>&gt;</code> ；在这种情况下，方法将收到 <code>&#39;62&#39;</code> 或 <code>&#39;x3E&#39;</code> 。如果 <em>convert_charrefs</em> 为 <code>True</code> ，则该方法永远不会被调用。</p></li><li><p><code>HTMLParser.handle_comment</code>(<em>data</em>)</p><p>这个方法在遇到注释的时候被调用（例如：  ）。例如，  这个注释会用 <code>&#39; comment &#39;</code> 作为参数调用此方法。Internet Explorer 条件注释（condcoms）的内容也被发送到这个方法，因此，对于  ，这个方法将接收到 `’[if IE 9]&gt;IE9-specific content 。</p></li><li><p><code>HTMLParser.handle_decl</code>(<em>decl</em>)</p><p>这个方法用来处理 HTML doctype 申明（例如  ）。<em>decl</em> 形参为  标记中的所有内容（例如： <code>&#39;DOCTYPE html&#39;</code> ）。</p></li><li><p><code>HTMLParser.handle_pi</code>(<em>data</em>)</p><p>此方法在遇到处理指令的时候被调用。<em>data</em> 形参将包含整个处理指令。例如，对于处理指令  ，这个方法将以 <code>handle_pi(&quot;proc color=&#39;red&#39;&quot;)</code> 形式被调用。它旨在被派生类重载；基类实现中无任何实际操作。注解 <a href="https://docs.python.org/zh-cn/3.8/library/html.parser.html#html.parser.HTMLParser" target="_blank" rel="noopener"><code>HTMLParser</code></a> 类使用 SGML 语法规则处理指令。使用 <code>&#39;?&#39;</code> 结尾的 XHTML 处理指令将导致 <code>&#39;?&#39;</code> 包含在 <em>data</em> 中。</p></li><li><p><code>HTMLParser.unknown_decl</code>(<em>data</em>)</p><p>当解析器读到无法识别的声明时，此方法被调用。<em>data</em> 形参为  标记中的所有内容。某些时候对派生类的重载很有用。基类实现中无任何实际操作。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>下面的类实现了一个解析器，用于更多示例的演示:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> html.parser <span class="keyword">import</span> HTMLParser</span><br><span class="line"><span class="keyword">from</span> html.entities <span class="keyword">import</span> name2codepoint</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHTMLParser</span><span class="params">(HTMLParser)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_starttag</span><span class="params">(self, tag, attrs)</span>:</span></span><br><span class="line">        print(<span class="string">"Start tag:"</span>, tag)</span><br><span class="line">        <span class="keyword">for</span> attr <span class="keyword">in</span> attrs:</span><br><span class="line">            print(<span class="string">"     attr:"</span>, attr)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_endtag</span><span class="params">(self, tag)</span>:</span></span><br><span class="line">        print(<span class="string">"End tag  :"</span>, tag)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_data</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        print(<span class="string">"Data     :"</span>, data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_comment</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        print(<span class="string">"Comment  :"</span>, data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_entityref</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        c = chr(name2codepoint[name])</span><br><span class="line">        print(<span class="string">"Named ent:"</span>, c)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_charref</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> name.startswith(<span class="string">'x'</span>):</span><br><span class="line">            c = chr(int(name[<span class="number">1</span>:], <span class="number">16</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            c = chr(int(name))</span><br><span class="line">        print(<span class="string">"Num ent  :"</span>, c)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_decl</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        print(<span class="string">"Decl     :"</span>, data)</span><br><span class="line"></span><br><span class="line">parser = MyHTMLParser()</span><br></pre></td></tr></table></figure></li></ul><p>解析一个文档类型声明:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.feed(<span class="string">'&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" '</span></span><br><span class="line"><span class="meta">... </span>            <span class="string">'"http://www.w3.org/TR/html4/strict.dtd"&gt;'</span>)</span><br><span class="line">Decl     : DOCTYPE HTML PUBLIC <span class="string">"-//W3C//DTD HTML 4.01//EN"</span> <span class="string">"http://www.w3.org/TR/html4/strict.dtd"</span></span><br></pre></td></tr></table></figure><p>解析一个具有一些属性和标题的元素:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.feed(<span class="string">'&lt;img src="python-logo.png" alt="The Python logo"&gt;'</span>)</span><br><span class="line">Start tag: img</span><br><span class="line">     attr: (<span class="string">'src'</span>, <span class="string">'python-logo.png'</span>)</span><br><span class="line">     attr: (<span class="string">'alt'</span>, <span class="string">'The Python logo'</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.feed(<span class="string">'&lt;h1&gt;Python&lt;/h1&gt;'</span>)</span><br><span class="line">Start tag: h1</span><br><span class="line">Data     : Python</span><br><span class="line">End tag  : h1</span><br></pre></td></tr></table></figure><p><code>script</code> 和 <code>style</code> 元素中的内容原样返回，无需进一步解析:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.feed(<span class="string">'&lt;style type="text/css"&gt;#python &#123; color: green &#125;&lt;/style&gt;'</span>)</span><br><span class="line">Start tag: style</span><br><span class="line">     attr: (<span class="string">'type'</span>, <span class="string">'text/css'</span>)</span><br><span class="line">Data     : <span class="comment">#python &#123; color: green &#125;</span></span><br><span class="line">End tag  : style</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.feed(<span class="string">'&lt;script type="text/javascript"&gt;'</span></span><br><span class="line"><span class="meta">... </span>            <span class="string">'alert("&lt;strong&gt;hello!&lt;/strong&gt;");&lt;/script&gt;'</span>)</span><br><span class="line">Start tag: script</span><br><span class="line">     attr: (<span class="string">'type'</span>, <span class="string">'text/javascript'</span>)</span><br><span class="line">Data     : alert(<span class="string">"&lt;strong&gt;hello!&lt;/strong&gt;"</span>);</span><br><span class="line">End tag  : script</span><br></pre></td></tr></table></figure><p>解析注释:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.feed(<span class="string">'&lt;!-- a comment --&gt;'</span></span><br><span class="line"><span class="meta">... </span>            <span class="string">'&lt;!--[if IE 9]&gt;IE-specific content&lt;![endif]--&gt;'</span>)</span><br><span class="line">Comment  :  a comment</span><br><span class="line">Comment  : [<span class="keyword">if</span> IE <span class="number">9</span>]&gt;IE-specific content&lt;![endif]</span><br></pre></td></tr></table></figure><p>解析命名或数字形式的字符引用，并把他们转换到正确的字符（注意：这 3 种转义都是 <code>&#39;&gt;&#39;</code> ）:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.feed(<span class="string">'&amp;gt;&amp;#62;&amp;#x3E;'</span>)</span><br><span class="line">Named ent: &gt;</span><br><span class="line">Num ent  : &gt;</span><br><span class="line">Num ent  : &gt;</span><br></pre></td></tr></table></figure><p>填充不完整的块给 <a href="https://docs.python.org/zh-cn/3.8/library/html.parser.html#html.parser.HTMLParser.feed" target="_blank" rel="noopener"><code>feed()</code></a> 执行，<a href="https://docs.python.org/zh-cn/3.8/library/html.parser.html#html.parser.HTMLParser.handle_data" target="_blank" rel="noopener"><code>handle_data()</code></a> 可能会多次调用（除非 <em>convert_charrefs</em> 被设置为 <code>True</code> ）:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> chunk <span class="keyword">in</span> [<span class="string">'&lt;sp'</span>, <span class="string">'an&gt;buff'</span>, <span class="string">'ered '</span>, <span class="string">'text&lt;/s'</span>, <span class="string">'pan&gt;'</span>]:</span><br><span class="line"><span class="meta">... </span>    parser.feed(chunk)</span><br><span class="line">...</span><br><span class="line">Start tag: span</span><br><span class="line">Data     : buff</span><br><span class="line">Data     : ered</span><br><span class="line">Data     : text</span><br><span class="line">End tag  : span</span><br></pre></td></tr></table></figure><p>解析无效的 HTML (例如：未引用的属性）也能正常运行:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.feed(<span class="string">'&lt;p&gt;&lt;a class=link href=#main&gt;tag soup&lt;/p &gt;&lt;/a&gt;'</span>)</span><br><span class="line">Start tag: p</span><br><span class="line">Start tag: a</span><br><span class="line">     attr: (<span class="string">'class'</span>, <span class="string">'link'</span>)</span><br><span class="line">     attr: (<span class="string">'href'</span>, <span class="string">'#main'</span>)</span><br><span class="line">Data     : tag soup</span><br><span class="line">End tag  : p</span><br><span class="line">End tag  : a</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库-html-parser-简单HTML和XHTML解析器&quot;&gt;&lt;a href=&quot;#python-标准库-html-parser-简单HTML和XHTML解析器&quot; class=&quot;headerlink&quot; title=&quot;python 标准库  html.parser 简单HTML和XHTML解析器&quot;&gt;&lt;/a&gt;python 标准库  html.parser 简单HTML和XHTML解析器&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://cn.bing.com/th?id=OIP.cq-61gMRe77h_MW4ca_0egHaFj&amp;amp;pid=Api&amp;amp;rs=1&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/categories/python/standard-library/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="html.parser" scheme="https://pinghailinfeng.gitee.io/tags/html-parser/"/>
    
  </entry>
  
  <entry>
    <title>python standard library enum</title>
    <link href="https://pinghailinfeng.gitee.io/2020/01/28/python-standard-library-enum/"/>
    <id>https://pinghailinfeng.gitee.io/2020/01/28/python-standard-library-enum/</id>
    <published>2020-01-27T23:22:58.000Z</published>
    <updated>2020-01-30T08:43:58.069Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库-enum-枚举类型支持"><a href="#python-标准库-enum-枚举类型支持" class="headerlink" title="python 标准库 enum 枚举类型支持"></a>python 标准库 enum 枚举类型支持</h1><p><img src="https://cn.bing.com/th?id=OIP.MVQKeBgQJ2yG2rAwEJ5unQHaEK&amp;pid=Api&amp;rs=1" alt></p><a id="more"></a><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=643982&auto=0&height=66"></iframe><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><strong>源代码：</strong> <a href="https://github.com/python/cpython/tree/3.8/Lib/enum.py" target="_blank" rel="noopener">Lib/enum.py</a></p><hr><p>枚举是一组符号名称（枚举成员）的集合，枚举成员应该是唯一的、不可变的。在枚举中，可以对成员进行恒等比较，并且枚举本身是可迭代的。</p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>此模块定义了四个枚举类，它们可被用来定义名称和值的不重复集合: <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.IntEnum" target="_blank" rel="noopener"><code>IntEnum</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Flag" target="_blank" rel="noopener"><code>Flag</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.IntFlag" target="_blank" rel="noopener"><code>IntFlag</code></a>。 此外还定义了一个装饰器 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.unique" target="_blank" rel="noopener"><code>unique()</code></a> 和一个辅助类 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.auto" target="_blank" rel="noopener"><code>auto</code></a>。</p><ul><li><p><em>class</em> <code>enum.Enum</code></p><p>此基类用于创建枚举常量。 请参阅 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#functional-api" target="_blank" rel="noopener">Functional API</a> 小节了解另一种替代性的构建语法。</p></li><li><p><em>class</em> <code>enum.IntEnum</code></p><p>此基类用于创建属于 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a> 的子类的枚举常量。</p></li><li><p><em>class</em> <code>enum.IntFlag</code></p><p>此基类用于创建可使用按位运算符进行组合而不会丢失其 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.IntFlag" target="_blank" rel="noopener"><code>IntFlag</code></a> 成员资格的枚举常量。 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.IntFlag" target="_blank" rel="noopener"><code>IntFlag</code></a> 成员同样也是 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a> 的子类。</p></li><li><p><em>class</em> <code>enum.Flag</code></p><p>此基类用于创建枚举常量 可使用按位运算符进行组合而不会丢失其 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Flag" target="_blank" rel="noopener"><code>Flag</code></a> 成员资格的枚举常量。</p></li><li><p><code>enum.unique</code>()</p><p>此 Enum 类装饰器可确保只将一个名称绑定到任意一个值。</p></li><li><p><em>class</em> <code>enum.auto</code></p><p>实例会被替换为一个可作为 Enum 成员的适当的值。 初始值从 1 开始。</p></li></ul><h2 id="创建一个-Enum"><a href="#创建一个-Enum" class="headerlink" title="创建一个 Enum"></a>创建一个 Enum</h2><p> 枚举是使用 <a href="https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#class" target="_blank" rel="noopener"><code>class</code></a> 语法来创建的，这使得它们易于读写。 另一种替代创建方法的描述见 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#functional-api" target="_blank" rel="noopener">Functional API</a>。 要定义一个枚举，可以对 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a> 进行如下的子类化: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Color</span><span class="params">(Enum)</span>:</span></span><br><span class="line"><span class="meta">... </span>    RED = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    GREEN = <span class="number">2</span></span><br><span class="line"><span class="meta">... </span>    BLUE = <span class="number">3</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p> 成员值可以为任意类型: <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str</code></a> 等等。 如果具体的值不重要，你可以使用 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.auto" target="_blank" rel="noopener"><code>auto</code></a> 实例，将为你选择适当的值。 但如果你混用 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.auto" target="_blank" rel="noopener"><code>auto</code></a> 与其他值则需要小心谨慎。 </p><p> 虽然我们使用 <a href="https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#class" target="_blank" rel="noopener"><code>class</code></a> 语法来创建 Enum，但 Enum 并不是普通的 Python 类。 更多细节请参阅 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#how-are-enums-different" target="_blank" rel="noopener">How are Enums different</a> </p></blockquote><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><ul><li>类 <code>Color</code> 是一个 <em>枚举</em> (或称 <em>enum</em>)</li><li>属性 <code>Color.RED</code>, <code>Color.GREEN</code> 等等是 <em>枚举成员</em> (或称 <em>enum 成员</em>) 并且被用作常量。</li><li><p>枚举成员具有 <em>名称</em> 和 <em>值</em> (<code>Color.RED</code> 的名称为 <code>RED</code>，<code>Color.BLUE</code> 的值为 <code>3</code> 等等。)</p><p>枚举成员具有适合人类阅读的表示形式: </p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(Color.RED)</span><br><span class="line">Color.RED</span><br></pre></td></tr></table></figure><p> .而它们的 <code>repr</code> 包含更多信息: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(repr(Color.RED))</span><br><span class="line">&lt;Color.RED: <span class="number">1</span>&gt;</span><br></pre></td></tr></table></figure><p> 一个枚举成员的 <em>type</em> 就是它所从属的枚举: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(Color.RED)</span><br><span class="line">&lt;enum <span class="string">'Color'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(Color.GREEN, Color)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p> Enum 的成员还有一个包含其条目名称的特征属性: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(Color.RED.name)</span><br><span class="line">RED</span><br></pre></td></tr></table></figure><p>枚举支持按照定义顺序进行迭代:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Shake</span><span class="params">(Enum)</span>:</span></span><br><span class="line"><span class="meta">... </span>    VANILLA = <span class="number">7</span></span><br><span class="line"><span class="meta">... </span>    CHOCOLATE = <span class="number">4</span></span><br><span class="line"><span class="meta">... </span>    COOKIES = <span class="number">9</span></span><br><span class="line"><span class="meta">... </span>    MINT = <span class="number">3</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> shake <span class="keyword">in</span> Shake:</span><br><span class="line"><span class="meta">... </span>    print(shake)</span><br><span class="line">...</span><br><span class="line">Shake.VANILLA</span><br><span class="line">Shake.CHOCOLATE</span><br><span class="line">Shake.COOKIES</span><br><span class="line">Shake.MINT</span><br></pre></td></tr></table></figure><p> 枚举成员是可哈希的，因此它们可在字典和集合中可用: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>apples = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>apples[Color.RED] = <span class="string">'red delicious'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>apples[Color.GREEN] = <span class="string">'granny smith'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>apples == &#123;Color.RED: <span class="string">'red delicious'</span>, Color.GREEN: <span class="string">'granny smith'</span>&#125;</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="对枚举成员及其属性的程序化访问"><a href="#对枚举成员及其属性的程序化访问" class="headerlink" title="对枚举成员及其属性的程序化访问"></a>对枚举成员及其属性的程序化访问</h2><p> 有时对枚举中的成员进行程序化访问是很有用的（例如在某些场合不能使用 <code>Color.RED</code> 因为在编程时并不知道要指定的确切颜色）。 <code>Enum</code> 允许这样的访问: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Color(<span class="number">1</span>)</span><br><span class="line">&lt;Color.RED: <span class="number">1</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Color(<span class="number">3</span>)</span><br><span class="line">&lt;Color.BLUE: <span class="number">3</span>&gt;</span><br></pre></td></tr></table></figure><p> 如果你希望通过 <em>name</em> 来访问枚举成员，可使用条目访问: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Color[<span class="string">'RED'</span>]</span><br><span class="line">&lt;Color.RED: <span class="number">1</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Color[<span class="string">'GREEN'</span>]</span><br><span class="line">&lt;Color.GREEN: <span class="number">2</span>&gt;</span><br></pre></td></tr></table></figure><p> 如果你有一个枚举成员并且需要它的 <code>name</code> 或 <code>value</code>: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>member = Color.RED</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>member.name</span><br><span class="line"><span class="string">'RED'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>member.value</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="复制枚举成员和值"><a href="#复制枚举成员和值" class="headerlink" title="复制枚举成员和值"></a>复制枚举成员和值</h2><p> 不允许有同名的枚举成员: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Shape</span><span class="params">(Enum)</span>:</span></span><br><span class="line"><span class="meta">... </span>    SQUARE = <span class="number">2</span></span><br><span class="line"><span class="meta">... </span>    SQUARE = <span class="number">3</span></span><br><span class="line">...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">TypeError: Attempted to reuse key: <span class="string">'SQUARE'</span></span><br></pre></td></tr></table></figure><p> 但是，允许两个枚举成员有相同的值。 假定两个成员 A 和 B 有相同的值（且 A 先被定义），则 B 就是 A 的一个别名。 按值查找 A 和 B 的值将返回 A。 按名称查找 B 也将返回 A: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Shape</span><span class="params">(Enum)</span>:</span></span><br><span class="line"><span class="meta">... </span>    SQUARE = <span class="number">2</span></span><br><span class="line"><span class="meta">... </span>    DIAMOND = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    CIRCLE = <span class="number">3</span></span><br><span class="line"><span class="meta">... </span>    ALIAS_FOR_SQUARE = <span class="number">2</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Shape.SQUARE</span><br><span class="line">&lt;Shape.SQUARE: <span class="number">2</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Shape.ALIAS_FOR_SQUARE</span><br><span class="line">&lt;Shape.SQUARE: <span class="number">2</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Shape(<span class="number">2</span>)</span><br><span class="line">&lt;Shape.SQUARE: <span class="number">2</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p> 试图创建具有与某个已定义的属性（另一个成员或方法等）相同名称的成员或者试图创建具有相同名称的属性也是不允许的 </p></blockquote><h2 id="确保唯一的枚举值"><a href="#确保唯一的枚举值" class="headerlink" title="确保唯一的枚举值"></a>确保唯一的枚举值</h2><p> 默认情况下，枚举允许有多个名称作为某个相同值的别名。 如果不想要这样的行为，可以使用以下装饰器来确保每个值在枚举中只被使用一次: </p><p> <a href="mailto:`@enum.unique" target="_blank" rel="noopener">`@enum.unique</a>` </p><p> 专用于枚举的 <a href="https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#class" target="_blank" rel="noopener"><code>class</code></a> 装饰器。 它会搜索一个枚举的 <code>__members__</code> 并收集所找到的任何别名；只要找到任何别名就会引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#ValueError" target="_blank" rel="noopener"><code>ValueError</code></a> 并附带相关细节信息: </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> enum <span class="keyword">import</span> Enum, unique</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@unique</span><br><span class="line"><span class="meta">... </span><span class="class"><span class="keyword">class</span> <span class="title">Mistake</span><span class="params">(Enum)</span>:</span></span><br><span class="line"><span class="meta">... </span>    ONE = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    TWO = <span class="number">2</span></span><br><span class="line"><span class="meta">... </span>    THREE = <span class="number">3</span></span><br><span class="line"><span class="meta">... </span>    FOUR = <span class="number">3</span></span><br><span class="line">...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">ValueError: duplicate values found in &lt;enum 'Mistake'&gt;: FOUR -&gt; THREE</span><br></pre></td></tr></table></figure><h2 id="使用自动设定的值"><a href="#使用自动设定的值" class="headerlink" title="使用自动设定的值"></a>使用自动设定的值</h2><p> 如果确切的值不重要，你可以使用 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.auto" target="_blank" rel="noopener"><code>auto</code></a>: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> enum <span class="keyword">import</span> Enum, auto</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Color</span><span class="params">(Enum)</span>:</span></span><br><span class="line"><span class="meta">... </span>    RED = auto()</span><br><span class="line"><span class="meta">... </span>    BLUE = auto()</span><br><span class="line"><span class="meta">... </span>    GREEN = auto()</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(Color)</span><br><span class="line">[&lt;Color.RED: <span class="number">1</span>&gt;, &lt;Color.BLUE: <span class="number">2</span>&gt;, &lt;Color.GREEN: <span class="number">3</span>&gt;]</span><br></pre></td></tr></table></figure><p> 值将由 <code>_generate_next_value_()</code> 来选择，该函数可以被重载: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">AutoName</span><span class="params">(Enum)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">_generate_next_value_</span><span class="params">(name, start, count, last_values)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> name</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Ordinal</span><span class="params">(AutoName)</span>:</span></span><br><span class="line"><span class="meta">... </span>    NORTH = auto()</span><br><span class="line"><span class="meta">... </span>    SOUTH = auto()</span><br><span class="line"><span class="meta">... </span>    EAST = auto()</span><br><span class="line"><span class="meta">... </span>    WEST = auto()</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(Ordinal)</span><br><span class="line">[&lt;Ordinal.NORTH: <span class="string">'NORTH'</span>&gt;, &lt;Ordinal.SOUTH: <span class="string">'SOUTH'</span>&gt;, &lt;Ordinal.EAST: <span class="string">'EAST'</span>&gt;, &lt;Ordinal.WEST: <span class="string">'WEST'</span>&gt;]</span><br></pre></td></tr></table></figure><blockquote><p> 默认 <code>_generate_next_value_()</code> 方法的目标是提供所给出的最后一个 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a> 所在序列的下一个 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a>，但这种行为方式属于实现细节并且可能发生改变。</p></blockquote><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p> 对枚举成员的迭代不会给出别名: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(Shape)</span><br><span class="line">[&lt;Shape.SQUARE: <span class="number">2</span>&gt;, &lt;Shape.DIAMOND: <span class="number">1</span>&gt;, &lt;Shape.CIRCLE: <span class="number">3</span>&gt;]</span><br></pre></td></tr></table></figure><p> 特殊属性 <code>__members__</code> 是一个从名称到成员的只读有序映射。 它包含枚举中定义的所有名称，包括别名: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> name, member <span class="keyword">in</span> Shape.__members__.items():</span><br><span class="line"><span class="meta">... </span>    name, member</span><br><span class="line">...</span><br><span class="line">(<span class="string">'SQUARE'</span>, &lt;Shape.SQUARE: <span class="number">2</span>&gt;)</span><br><span class="line">(<span class="string">'DIAMOND'</span>, &lt;Shape.DIAMOND: <span class="number">1</span>&gt;)</span><br><span class="line">(<span class="string">'CIRCLE'</span>, &lt;Shape.CIRCLE: <span class="number">3</span>&gt;)</span><br><span class="line">(<span class="string">'ALIAS_FOR_SQUARE'</span>, &lt;Shape.SQUARE: <span class="number">2</span>&gt;)</span><br></pre></td></tr></table></figure><p> <code>__members__</code> 属性可被用于对枚举成员进行详细的程序化访问。 例如，找出所有别名: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[name <span class="keyword">for</span> name, member <span class="keyword">in</span> Shape.__members__.items() <span class="keyword">if</span> member.name != name]</span><br><span class="line">[<span class="string">'ALIAS_FOR_SQUARE'</span>]</span><br></pre></td></tr></table></figure><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p> 枚举成员是按标识号进行比较的: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Color.RED <span class="keyword">is</span> Color.RED</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Color.RED <span class="keyword">is</span> Color.BLUE</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Color.RED <span class="keyword">is</span> <span class="keyword">not</span> Color.BLUE</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p> 枚举值之间的排序比较 <em>不被</em> 支持。 Enum 成员不属于整数 (另请参阅下文的 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#intenum" target="_blank" rel="noopener">IntEnum</a>): </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Color.RED &lt; Color.BLUE</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">'&lt;'</span> <span class="keyword">not</span> supported between instances of <span class="string">'Color'</span> <span class="keyword">and</span> <span class="string">'Color'</span></span><br></pre></td></tr></table></figure><p> 相等比较的定义如下: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Color.BLUE == Color.RED</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Color.BLUE != Color.RED</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Color.BLUE == Color.BLUE</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p> 与非枚举值的比较将总是不相等（同样地，<a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.IntEnum" target="_blank" rel="noopener"><code>IntEnum</code></a> 被显式设计成不同的行为，参见下文）: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Color.BLUE == <span class="number">2</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="允许的枚举成员和属性"><a href="#允许的枚举成员和属性" class="headerlink" title="允许的枚举成员和属性"></a>允许的枚举成员和属性</h2><p>以上示例使用整数作为枚举值。 使用整数相当简洁方便（并由 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#functional-api" target="_blank" rel="noopener">Functional API</a> 默认提供），但并不强制要求使用。 在大部分用例中，开发者都关心枚举的实际值是什么。 但如果值 <em>确实</em> 重要，则枚举可以使用任意的值。</p><p>枚举属于 Python 的类，并可具有普通方法和特殊方法。 如果我们有这样一个枚举:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Mood</span><span class="params">(Enum)</span>:</span></span><br><span class="line"><span class="meta">... </span>    FUNKY = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    HAPPY = <span class="number">3</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">describe</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="comment"># self is the member here</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self.name, self.value</span><br><span class="line">...</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">'my custom str! &#123;0&#125;'</span>.format(self.value)</span><br><span class="line">...</span><br><span class="line"><span class="meta">... </span>    @classmethod</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">favorite_mood</span><span class="params">(cls)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="comment"># cls here is the enumeration</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> cls.HAPPY</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p> 那么: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Mood.favorite_mood()</span><br><span class="line">&lt;Mood.HAPPY: <span class="number">3</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Mood.HAPPY.describe()</span><br><span class="line">(<span class="string">'HAPPY'</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(Mood.FUNKY)</span><br><span class="line"><span class="string">'my custom str! 1'</span></span><br></pre></td></tr></table></figure><p>对于允许内容的规则如下：以单下划线开头和结尾的名称是由枚举保留而不可使用；在枚举中定义的所有其他属性将成为该枚举的成员，例外项则包括特殊方法成员 (<a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__str__" target="_blank" rel="noopener"><code>__str__()</code></a>, <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__add__" target="_blank" rel="noopener"><code>__add__()</code></a> 等)，描述符 (方法也属于描述符) 以及在 <code>_ignore_</code> 中列出的变量名。</p><p>注意：如果你的枚举定义了 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__new__" target="_blank" rel="noopener"><code>__new__()</code></a> 和/或 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__init__" target="_blank" rel="noopener"><code>__init__()</code></a> 那么指定给枚举成员的任何值都会被传入这些方法。 请参阅示例 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#planet" target="_blank" rel="noopener">Planet</a>。</p><h2 id="受限的-Enum-子类化"><a href="#受限的-Enum-子类化" class="headerlink" title="受限的 Enum 子类化"></a>受限的 Enum 子类化</h2><p> 一个新的 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a> 类必须基于一个 Enum 类，至多一个实体数据类型以及出于实际需要的任意多个基于 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#object" target="_blank" rel="noopener"><code>object</code></a> 的 mixin 类。 这些基类的顺序为: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnumName</span><span class="params">([mix-in, ...,] [data-type,] base-enum)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p> 另外，仅当一个枚举未定义任何成员时才允许子类化该枚举。 因此禁止这样的写法: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">MoreColor</span><span class="params">(Color)</span>:</span></span><br><span class="line"><span class="meta">... </span>    PINK = <span class="number">17</span></span><br><span class="line">...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">TypeError: Cannot extend enumerations</span><br></pre></td></tr></table></figure><p> 但是允许这样的写法: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(Enum)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">some_behavior</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Bar</span><span class="params">(Foo)</span>:</span></span><br><span class="line"><span class="meta">... </span>    HAPPY = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    SAD = <span class="number">2</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p> 允许子类化定义了成员的枚举将会导致违反类型与实例的某些重要的不可变规则。 在另一方面，允许在一组枚举之间共享某些通用行为也是有意义的。 （请参阅示例 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#orderedenum" target="_blank" rel="noopener">OrderedEnum</a> 。） </p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p> 枚举可以被封装与解封:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> test.test_enum <span class="keyword">import</span> Fruit</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pickle <span class="keyword">import</span> dumps, loads</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Fruit.TOMATO <span class="keyword">is</span> loads(dumps(Fruit.TOMATO))</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p> 封装的常规限制同样适用：可封存枚举必须在模块的最高层级中定义，因为解封操作要求它们可以从该模块导入。 </p><blockquote><p> 使用 pickle 协议版本 4 可以方便地封存嵌套在其他类中的枚举。 </p></blockquote><p> 通过在枚举类中定义 <a href="https://docs.python.org/zh-cn/3.8/library/pickle.html#object.__reduce_ex__" target="_blank" rel="noopener"><code>__reduce_ex__()</code></a> 可以对 Enum 成员的封存/解封方式进行修改。 </p><h2 id="功能性-API"><a href="#功能性-API" class="headerlink" title="功能性 API"></a>功能性 API</h2><p> <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a> 类属于可调用对象，它提供了以下功能性 API: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Animal = Enum(<span class="string">'Animal'</span>, <span class="string">'ANT BEE CAT DOG'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Animal</span><br><span class="line">&lt;enum <span class="string">'Animal'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Animal.ANT</span><br><span class="line">&lt;Animal.ANT: <span class="number">1</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Animal.ANT.value</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(Animal)</span><br><span class="line">[&lt;Animal.ANT: <span class="number">1</span>&gt;, &lt;Animal.BEE: <span class="number">2</span>&gt;, &lt;Animal.CAT: <span class="number">3</span>&gt;, &lt;Animal.DOG: <span class="number">4</span>&gt;]</span><br></pre></td></tr></table></figure><p>该 API 的主义类似于 <a href="https://docs.python.org/zh-cn/3.8/library/collections.html#collections.namedtuple" target="_blank" rel="noopener"><code>namedtuple</code></a>。 调用 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a> 的第一个参数是枚举的名称。</p><p>第二个参数是枚举成员名称的 <em>来源</em>。 它可以是一个用空格分隔的名称字符串、名称序列、键/值对 2 元组的序列，或者名称到值的映射（例如字典）。 最后两种选项使得可以为枚举任意赋值；其他选项会自动以从 1 开始递增的整数赋值（使用 <code>start</code> 形参可指定不同的起始值）。 返回值是一个派生自 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a> 的新类。 换句话说，以上对 <code>Animal</code> 的赋值就等价于:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(Enum)</span>:</span></span><br><span class="line"><span class="meta">... </span>    ANT = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    BEE = <span class="number">2</span></span><br><span class="line"><span class="meta">... </span>    CAT = <span class="number">3</span></span><br><span class="line"><span class="meta">... </span>    DOG = <span class="number">4</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>默认以 <code>1</code> 而以 <code>0</code> 作为起始数值的原因在于 <code>0</code> 的布尔值为 <code>False</code>，但所有枚举成员都应被求值为 <code>True</code>。</p><p>对使用功能性 API 创建的枚举执行封存可能会很麻烦，因为要使用帧堆栈的实现细节来尝试并找出枚举是在哪个模块中创建的（例如当你使用了另一个模块中的工具函数就可能失败，在 IronPython 或 Jython 上也可能无效）。 解决办法是显式地指定模块名称，如下所示:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Animal = Enum(<span class="string">'Animal'</span>, <span class="string">'ANT BEE CAT DOG'</span>, module=__name__)</span><br></pre></td></tr></table></figure><p> 新的 pickle 协议版本 4 在某些情况下同样依赖于 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#definition.__qualname__" target="_blank" rel="noopener"><code>__qualname__</code></a> 被设为特定位置以便 pickle 能够找到相应的类。 例如，类是否存在于全局作用域的 SomeData 类中: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Animal = Enum(<span class="string">'Animal'</span>, <span class="string">'ANT BEE CAT DOG'</span>, qualname=<span class="string">'SomeData.Animal'</span>)</span><br></pre></td></tr></table></figure><p> 完整的签名为: </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enum(value='NewEnumName', names=&lt;...&gt;, *, module='...', qualname='...', type=&lt;mixed-in class&gt;, start=1)</span><br></pre></td></tr></table></figure><h2 id="派生的枚举"><a href="#派生的枚举" class="headerlink" title="派生的枚举"></a>派生的枚举</h2><h3 id="IntEnum"><a href="#IntEnum" class="headerlink" title="IntEnum"></a>IntEnum</h3><p> 所提供的第一个变种 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a> 同时也是 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a> 的一个子类。 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.IntEnum" target="_blank" rel="noopener"><code>IntEnum</code></a> 的成员可与整数进行比较；通过扩展，不同类型的整数枚举也可以相互进行比较: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> enum <span class="keyword">import</span> IntEnum</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Shape</span><span class="params">(IntEnum)</span>:</span></span><br><span class="line"><span class="meta">... </span>    CIRCLE = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    SQUARE = <span class="number">2</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Request</span><span class="params">(IntEnum)</span>:</span></span><br><span class="line"><span class="meta">... </span>    POST = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    GET = <span class="number">2</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Shape == <span class="number">1</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Shape.CIRCLE == <span class="number">1</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Shape.CIRCLE == Request.POST</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p> 不过，它们仍然不可与标准 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a> 枚举进行比较: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Shape</span><span class="params">(IntEnum)</span>:</span></span><br><span class="line"><span class="meta">... </span>    CIRCLE = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    SQUARE = <span class="number">2</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Color</span><span class="params">(Enum)</span>:</span></span><br><span class="line"><span class="meta">... </span>    RED = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    GREEN = <span class="number">2</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Shape.CIRCLE == Color.RED</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p> <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.IntEnum" target="_blank" rel="noopener"><code>IntEnum</code></a> 值在其他方面的行为都如你预期的一样类似于整数: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(Shape.CIRCLE)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>][Shape.CIRCLE]</span><br><span class="line"><span class="string">'b'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[i <span class="keyword">for</span> i <span class="keyword">in</span> range(Shape.SQUARE)]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="IntFlag"><a href="#IntFlag" class="headerlink" title="IntFlag"></a>IntFlag</h3><p> 所提供的下一个 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a> 的变种 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.IntFlag" target="_blank" rel="noopener"><code>IntFlag</code></a> 同样是基于 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a> 的，不同之处在于 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.IntFlag" target="_blank" rel="noopener"><code>IntFlag</code></a> 成员可使用按位运算符 (&amp;, |, ^, ~) 进行组合且结果仍然为 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.IntFlag" target="_blank" rel="noopener"><code>IntFlag</code></a> 成员。 如果，正如名称所表明的，<a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.IntFlag" target="_blank" rel="noopener"><code>IntFlag</code></a> 成员同时也是 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a> 的子类，并能在任何使用 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a> 的场合被使用。 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.IntFlag" target="_blank" rel="noopener"><code>IntFlag</code></a> 成员进行除按位运算以外的其他运算都将导致失去 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.IntFlag" target="_blank" rel="noopener"><code>IntFlag</code></a> 成员资格。 </p><p> 示例 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.IntFlag" target="_blank" rel="noopener"><code>IntFlag</code></a> 类: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> enum <span class="keyword">import</span> IntFlag</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Perm</span><span class="params">(IntFlag)</span>:</span></span><br><span class="line"><span class="meta">... </span>    R = <span class="number">4</span></span><br><span class="line"><span class="meta">... </span>    W = <span class="number">2</span></span><br><span class="line"><span class="meta">... </span>    X = <span class="number">1</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Perm.R | Perm.W</span><br><span class="line">&lt;Perm.R|W: <span class="number">6</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Perm.R + Perm.W</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>RW = Perm.R | Perm.W</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Perm.R <span class="keyword">in</span> RW</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p> 对于组合同样可以进行命名: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Perm</span><span class="params">(IntFlag)</span>:</span></span><br><span class="line"><span class="meta">... </span>    R = <span class="number">4</span></span><br><span class="line"><span class="meta">... </span>    W = <span class="number">2</span></span><br><span class="line"><span class="meta">... </span>    X = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    RWX = <span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Perm.RWX</span><br><span class="line">&lt;Perm.RWX: <span class="number">7</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>~Perm.RWX</span><br><span class="line">&lt;Perm.<span class="number">-8</span>: <span class="number">-8</span>&gt;</span><br></pre></td></tr></table></figure><p> <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.IntFlag" target="_blank" rel="noopener"><code>IntFlag</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a> 的另一个重要区别在于如果没有设置任何旗标（值为 0），则其布尔值为 <a href="https://docs.python.org/zh-cn/3.8/library/constants.html#False" target="_blank" rel="noopener"><code>False</code></a>: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Perm.R &amp; Perm.X</span><br><span class="line">&lt;Perm<span class="number">.0</span>: <span class="number">0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(Perm.R &amp; Perm.X)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p> 由于 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.IntFlag" target="_blank" rel="noopener"><code>IntFlag</code></a> 成员同时也是 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a> 的子类，因此它们可以相互组合: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Perm.X | <span class="number">8</span></span><br><span class="line">&lt;Perm<span class="number">.8</span>|X: <span class="number">9</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h3><p> 最后一个变种是 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Flag" target="_blank" rel="noopener"><code>Flag</code></a>。 与 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.IntFlag" target="_blank" rel="noopener"><code>IntFlag</code></a> 类似，<a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Flag" target="_blank" rel="noopener"><code>Flag</code></a> 成员可使用按位运算符 (&amp;, |, ^, ~) 进行组合，与 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.IntFlag" target="_blank" rel="noopener"><code>IntFlag</code></a> 不同的是它们不可与任何其它 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Flag" target="_blank" rel="noopener"><code>Flag</code></a> 枚举或 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a> 进行组合或比较。 虽然可以直接指定值，但推荐使用 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.auto" target="_blank" rel="noopener"><code>auto</code></a> 作为值以便让 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Flag" target="_blank" rel="noopener"><code>Flag</code></a> 选择适当的值。 </p><p> 与 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.IntFlag" target="_blank" rel="noopener"><code>IntFlag</code></a> 类似，如果 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Flag" target="_blank" rel="noopener"><code>Flag</code></a> 成员的某种组合导致没有设置任何旗标，则其布尔值为 <a href="https://docs.python.org/zh-cn/3.8/library/constants.html#False" target="_blank" rel="noopener"><code>False</code></a>: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> enum <span class="keyword">import</span> Flag, auto</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Color</span><span class="params">(Flag)</span>:</span></span><br><span class="line"><span class="meta">... </span>    RED = auto()</span><br><span class="line"><span class="meta">... </span>    BLUE = auto()</span><br><span class="line"><span class="meta">... </span>    GREEN = auto()</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Color.RED &amp; Color.GREEN</span><br><span class="line">&lt;Color<span class="number">.0</span>: <span class="number">0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(Color.RED &amp; Color.GREEN)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p> 单个旗标的值应当为二的乘方 (1, 2, 4, 8, …)，旗标的组合则无此限制: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Color</span><span class="params">(Flag)</span>:</span></span><br><span class="line"><span class="meta">... </span>    RED = auto()</span><br><span class="line"><span class="meta">... </span>    BLUE = auto()</span><br><span class="line"><span class="meta">... </span>    GREEN = auto()</span><br><span class="line"><span class="meta">... </span>    WHITE = RED | BLUE | GREEN</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Color.WHITE</span><br><span class="line">&lt;Color.WHITE: <span class="number">7</span>&gt;</span><br></pre></td></tr></table></figure><p> 对 “no flags set” 条件指定一个名称并不会改变其布尔值: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Color</span><span class="params">(Flag)</span>:</span></span><br><span class="line"><span class="meta">... </span>    BLACK = <span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    RED = auto()</span><br><span class="line"><span class="meta">... </span>    BLUE = auto()</span><br><span class="line"><span class="meta">... </span>    GREEN = auto()</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Color.BLACK</span><br><span class="line">&lt;Color.BLACK: <span class="number">0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(Color.BLACK)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><blockquote><p> 对于大多数新代码，强烈推荐使用 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Flag" target="_blank" rel="noopener"><code>Flag</code></a>，因为 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.IntEnum" target="_blank" rel="noopener"><code>IntEnum</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.IntFlag" target="_blank" rel="noopener"><code>IntFlag</code></a> 打破了枚举的某些语义约定（例如可以同整数进行比较，并因而导致此行为被传递给其他无关的枚举）。 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.IntEnum" target="_blank" rel="noopener"><code>IntEnum</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.IntFlag" target="_blank" rel="noopener"><code>IntFlag</code></a> 的使用应当仅限于 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Flag" target="_blank" rel="noopener"><code>Flag</code></a> 无法使用的场合；例如，当使用枚举替代整数常量时，或是与其他系统进行交互操作时。 </p></blockquote><h3 id="其他事项"><a href="#其他事项" class="headerlink" title="其他事项"></a>其他事项</h3><p> 虽然 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.IntEnum" target="_blank" rel="noopener"><code>IntEnum</code></a> 是 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#module-enum" target="_blank" rel="noopener"><code>enum</code></a> 模块的一部分，但要独立实现也应该相当容易: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntEnum</span><span class="params">(int, Enum)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>这里演示了如何定义类似的派生枚举；例如一个混合了 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str</code></a> 而不是 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a> 的 <code>StrEnum</code>。</p><p>几条规则：</p><ol><li>当子类化 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a> 时，在基类序列中的混合类型必须出现于 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a> 本身之前，如以上 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.IntEnum" target="_blank" rel="noopener"><code>IntEnum</code></a> 的例子所示。</li><li>虽然 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a> 可以拥有任意类型的成员，不过一旦你混合了附加类型，则所有成员必须为相应类型的值，如在上面的例子中即为 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a>。 此限制不适用于仅添加方法而未指定另一数据类型如 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str</code></a> 的混合类。</li><li>当混合了另一数据类型时，<code>value</code> 属性会 <em>不同于</em> 枚举成员自身，但它们仍保持等价且比较结果也相等。</li><li>%-style formatting: %s 和 %r 会分别调用 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a> 类的 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__str__" target="_blank" rel="noopener"><code>__str__()</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__repr__" target="_blank" rel="noopener"><code>__repr__()</code></a>；其他代码 (例如表示 IntEnum 的 %i 或 %h) 会将枚举成员视为对应的混合类型。</li><li><a href="https://docs.python.org/zh-cn/3.8/reference/lexical_analysis.html#f-strings" target="_blank" rel="noopener">格式化字符串字面值</a>, <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#str.format" target="_blank" rel="noopener"><code>str.format()</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#format" target="_blank" rel="noopener"><code>format()</code></a> 将使用混合类型的 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__format__" target="_blank" rel="noopener"><code>__format__()</code></a>。 如果需要 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a> 类的 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str()</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#repr" target="_blank" rel="noopener"><code>repr()</code></a>，请使用 !s 或 !r 格式代码。</li></ol><h2 id="何时使用-init-与-new"><a href="#何时使用-init-与-new" class="headerlink" title="何时使用 __init__与__new__"></a>何时使用 <code>__init__</code>与<code>__new__</code></h2><p>当你想要定制 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a> 成员的实际值时必须使用 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__new__" target="_blank" rel="noopener"><code>__new__()</code></a>。 任何其他修改可以用 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__new__" target="_blank" rel="noopener"><code>__new__()</code></a> 也可以用 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__init__" target="_blank" rel="noopener"><code>__init__()</code></a>，应优先使用 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__init__" target="_blank" rel="noopener"><code>__init__()</code></a>。</p><p>举例来说，如果你要向构造器传入多个条目，但只希望将其中一个作为值:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Coordinate</span><span class="params">(bytes, Enum)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">"""</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    Coordinate with binary codes that can be indexed by the int code.</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    """</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, value, label, unit)</span>:</span></span><br><span class="line"><span class="meta">... </span>        obj = bytes.__new__(cls, [value])</span><br><span class="line"><span class="meta">... </span>        obj._value_ = value</span><br><span class="line"><span class="meta">... </span>        obj.label = label</span><br><span class="line"><span class="meta">... </span>        obj.unit = unit</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> obj</span><br><span class="line"><span class="meta">... </span>    PX = (<span class="number">0</span>, <span class="string">'P.X'</span>, <span class="string">'km'</span>)</span><br><span class="line"><span class="meta">... </span>    PY = (<span class="number">1</span>, <span class="string">'P.Y'</span>, <span class="string">'km'</span>)</span><br><span class="line"><span class="meta">... </span>    VX = (<span class="number">2</span>, <span class="string">'V.X'</span>, <span class="string">'km/s'</span>)</span><br><span class="line"><span class="meta">... </span>    VY = (<span class="number">3</span>, <span class="string">'V.Y'</span>, <span class="string">'km/s'</span>)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(Coordinate[<span class="string">'PY'</span>])</span><br><span class="line">Coordinate.PY</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(Coordinate(<span class="number">3</span>))</span><br><span class="line">Coordinate.VY</span><br></pre></td></tr></table></figure><h2 id="有趣的示例"><a href="#有趣的示例" class="headerlink" title="有趣的示例"></a>有趣的示例</h2><p> 虽然 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.IntEnum" target="_blank" rel="noopener"><code>IntEnum</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.IntFlag" target="_blank" rel="noopener"><code>IntFlag</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Flag" target="_blank" rel="noopener"><code>Flag</code></a> 预期可覆盖大多数应用场景，但它们无法覆盖全部。 这里有一些不同类型枚举的方案，它们可以被直接使用，或是作为自行创建的参考示例。 </p><h3 id="省略值"><a href="#省略值" class="headerlink" title="省略值"></a>省略值</h3><p>在许多应用场景中人们都不关心枚举的实际值是什么。 有几个方式可以定义此种类型的简单枚举：</p><ul><li>使用 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.auto" target="_blank" rel="noopener"><code>auto</code></a> 的实例作为值</li><li>使用 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#object" target="_blank" rel="noopener"><code>object</code></a> 的实例作为值</li><li>使用描述性的字符串作为值</li><li>使用元组作为值并用自定义的 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__new__" target="_blank" rel="noopener"><code>__new__()</code></a> 以一个 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a> 值来替代该元组</li></ul><p>使用以上任何一种方法均可向用户指明值并不重要，并且使人能够添加、移除或重排序成员而不必改变其余成员的数值。</p><p>无论你选择何种方法，你都应当提供一个 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#repr" target="_blank" rel="noopener"><code>repr()</code></a> 并且它也需要隐藏（不重要的）值:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">NoValue</span><span class="params">(Enum)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">'&lt;%s.%s&gt;'</span> % (self.__class__.__name__, self.name)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="使用auto"><a href="#使用auto" class="headerlink" title="使用auto"></a>使用<code>auto</code></h4><p>使用 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.auto" target="_blank" rel="noopener"><code>auto</code></a> 的形式如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Color</span><span class="params">(NoValue)</span>:</span></span><br><span class="line"><span class="meta">... </span>    RED = auto()</span><br><span class="line"><span class="meta">... </span>    BLUE = auto()</span><br><span class="line"><span class="meta">... </span>    GREEN = auto()</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Color.GREEN</span><br><span class="line">&lt;Color.GREEN&gt;</span><br></pre></td></tr></table></figure><h4 id="使用-object"><a href="#使用-object" class="headerlink" title="使用 object"></a>使用 <code>object</code></h4><p>使用 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#object" target="_blank" rel="noopener"><code>object</code></a> 的形式如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Color</span><span class="params">(NoValue)</span>:</span></span><br><span class="line"><span class="meta">... </span>    RED = object()</span><br><span class="line"><span class="meta">... </span>    GREEN = object()</span><br><span class="line"><span class="meta">... </span>    BLUE = object()</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Color.GREEN</span><br><span class="line">&lt;Color.GREEN&gt;</span><br></pre></td></tr></table></figure><h4 id="使用描述性字符串"><a href="#使用描述性字符串" class="headerlink" title="使用描述性字符串"></a>使用描述性字符串</h4><p>使用字符串作为值的形式如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Color</span><span class="params">(NoValue)</span>:</span></span><br><span class="line"><span class="meta">... </span>    RED = <span class="string">'stop'</span></span><br><span class="line"><span class="meta">... </span>    GREEN = <span class="string">'go'</span></span><br><span class="line"><span class="meta">... </span>    BLUE = <span class="string">'too fast!'</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Color.GREEN</span><br><span class="line">&lt;Color.GREEN&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Color.GREEN.value</span><br><span class="line"><span class="string">'go'</span></span><br></pre></td></tr></table></figure><h4 id="使用自定义的-new"><a href="#使用自定义的-new" class="headerlink" title="使用自定义的__new__"></a>使用自定义的<code>__new__</code></h4><p>使用自动编号 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__new__" target="_blank" rel="noopener"><code>__new__()</code></a> 的形式如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">AutoNumber</span><span class="params">(NoValue)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls)</span>:</span></span><br><span class="line"><span class="meta">... </span>        value = len(cls.__members__) + <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>        obj = object.__new__(cls)</span><br><span class="line"><span class="meta">... </span>        obj._value_ = value</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> obj</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Color</span><span class="params">(AutoNumber)</span>:</span></span><br><span class="line"><span class="meta">... </span>    RED = ()</span><br><span class="line"><span class="meta">... </span>    GREEN = ()</span><br><span class="line"><span class="meta">... </span>    BLUE = ()</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Color.GREEN</span><br><span class="line">&lt;Color.GREEN&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Color.GREEN.value</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><blockquote><p> 如果定义了 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__new__" target="_blank" rel="noopener"><code>__new__()</code></a> 则它会在创建 Enum 成员期间被使用；随后它将被 Enum 的 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__new__" target="_blank" rel="noopener"><code>__new__()</code></a> 所替换，该方法会在类创建后被用来查找现有成员</p></blockquote><h3 id="OrderedEnum"><a href="#OrderedEnum" class="headerlink" title="OrderedEnum"></a>OrderedEnum</h3><p> 一个有序枚举，它不是基于 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.IntEnum" target="_blank" rel="noopener"><code>IntEnum</code></a>，因此保持了正常的 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a> 不变特性（例如不可与其他枚举进行比较）: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">OrderedEnum</span><span class="params">(Enum)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__ge__</span><span class="params">(self, other)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> self.__class__ <span class="keyword">is</span> other.__class__:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> self.value &gt;= other.value</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="built_in">NotImplemented</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__gt__</span><span class="params">(self, other)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> self.__class__ <span class="keyword">is</span> other.__class__:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> self.value &gt; other.value</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="built_in">NotImplemented</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__le__</span><span class="params">(self, other)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> self.__class__ <span class="keyword">is</span> other.__class__:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> self.value &lt;= other.value</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="built_in">NotImplemented</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, other)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> self.__class__ <span class="keyword">is</span> other.__class__:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> self.value &lt; other.value</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="built_in">NotImplemented</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Grade</span><span class="params">(OrderedEnum)</span>:</span></span><br><span class="line"><span class="meta">... </span>    A = <span class="number">5</span></span><br><span class="line"><span class="meta">... </span>    B = <span class="number">4</span></span><br><span class="line"><span class="meta">... </span>    C = <span class="number">3</span></span><br><span class="line"><span class="meta">... </span>    D = <span class="number">2</span></span><br><span class="line"><span class="meta">... </span>    F = <span class="number">1</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Grade.C &lt; Grade.A</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="DuplicateFreeEnum"><a href="#DuplicateFreeEnum" class="headerlink" title="DuplicateFreeEnum"></a>DuplicateFreeEnum</h3><p> 如果发现重复的成员名称则将引发错误而不是创建别名: </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">DuplicateFreeEnum</span><span class="params">(Enum)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args)</span>:</span></span><br><span class="line"><span class="meta">... </span>        cls = self.__class__</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> any(self.value == e.value <span class="keyword">for</span> e <span class="keyword">in</span> cls):</span><br><span class="line"><span class="meta">... </span>            a = self.name</span><br><span class="line"><span class="meta">... </span>            e = cls(self.value).name</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">raise</span> ValueError(</span><br><span class="line"><span class="meta">... </span>                <span class="string">"aliases not allowed in DuplicateFreeEnum:  %r --&gt; %r"</span></span><br><span class="line"><span class="meta">... </span>                % (a, e))</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Color</span><span class="params">(DuplicateFreeEnum)</span>:</span></span><br><span class="line"><span class="meta">... </span>    RED = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    GREEN = <span class="number">2</span></span><br><span class="line"><span class="meta">... </span>    BLUE = <span class="number">3</span></span><br><span class="line"><span class="meta">... </span>    GRENE = <span class="number">2</span></span><br><span class="line">...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">ValueError: aliases not allowed in DuplicateFreeEnum:  'GRENE' --&gt; 'GREEN'</span><br></pre></td></tr></table></figure><h3 id="Planet"><a href="#Planet" class="headerlink" title="Planet"></a>Planet</h3><p>如果定义了 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__new__" target="_blank" rel="noopener"><code>__new__()</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__init__" target="_blank" rel="noopener"><code>__init__()</code></a> 则枚举成员的值将被传给这些方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Planet</span><span class="params">(Enum)</span>:</span></span><br><span class="line"><span class="meta">... </span>    MERCURY = (<span class="number">3.303e+23</span>, <span class="number">2.4397e6</span>)</span><br><span class="line"><span class="meta">... </span>    VENUS   = (<span class="number">4.869e+24</span>, <span class="number">6.0518e6</span>)</span><br><span class="line"><span class="meta">... </span>    EARTH   = (<span class="number">5.976e+24</span>, <span class="number">6.37814e6</span>)</span><br><span class="line"><span class="meta">... </span>    MARS    = (<span class="number">6.421e+23</span>, <span class="number">3.3972e6</span>)</span><br><span class="line"><span class="meta">... </span>    JUPITER = (<span class="number">1.9e+27</span>,   <span class="number">7.1492e7</span>)</span><br><span class="line"><span class="meta">... </span>    SATURN  = (<span class="number">5.688e+26</span>, <span class="number">6.0268e7</span>)</span><br><span class="line"><span class="meta">... </span>    URANUS  = (<span class="number">8.686e+25</span>, <span class="number">2.5559e7</span>)</span><br><span class="line"><span class="meta">... </span>    NEPTUNE = (<span class="number">1.024e+26</span>, <span class="number">2.4746e7</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, mass, radius)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.mass = mass       <span class="comment"># in kilograms</span></span><br><span class="line"><span class="meta">... </span>        self.radius = radius   <span class="comment"># in meters</span></span><br><span class="line"><span class="meta">... </span>    @property</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">surface_gravity</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="comment"># universal gravitational constant  (m3 kg-1 s-2)</span></span><br><span class="line"><span class="meta">... </span>        G = <span class="number">6.67300E-11</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> G * self.mass / (self.radius * self.radius)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Planet.EARTH.value</span><br><span class="line">(<span class="number">5.976e+24</span>, <span class="number">6378140.0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Planet.EARTH.surface_gravity</span><br><span class="line"><span class="number">9.802652743337129</span></span><br></pre></td></tr></table></figure><h3 id="TimePeriod"><a href="#TimePeriod" class="headerlink" title="TimePeriod"></a>TimePeriod</h3><p> 一个演示如何使用 <code>_ignore_</code> 属性的例子: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Period</span><span class="params">(timedelta, Enum)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">"different lengths of time"</span></span><br><span class="line"><span class="meta">... </span>    _ignore_ = <span class="string">'Period i'</span></span><br><span class="line"><span class="meta">... </span>    Period = vars()</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">367</span>):</span><br><span class="line"><span class="meta">... </span>        Period[<span class="string">'day_%d'</span> % i] = i</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(Period)[:<span class="number">2</span>]</span><br><span class="line">[&lt;Period.day_0: datetime.timedelta(<span class="number">0</span>)&gt;, &lt;Period.day_1: datetime.timedelta(days=<span class="number">1</span>)&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(Period)[<span class="number">-2</span>:]</span><br><span class="line">[&lt;Period.day_365: datetime.timedelta(days=<span class="number">365</span>)&gt;, &lt;Period.day_366: datetime.timedelta(days=<span class="number">366</span>)&gt;]</span><br></pre></td></tr></table></figure><h2 id="各种枚举有何区别？"><a href="#各种枚举有何区别？" class="headerlink" title="各种枚举有何区别？"></a>各种枚举有何区别？</h2><p> 枚举具有自定义的元类，它会影响所派生枚举类及其实例（成员）的各个方面。 </p><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><p> <code>EnumMeta</code> 元类负责提供 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__contains__" target="_blank" rel="noopener"><code>__contains__()</code></a>, <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__dir__" target="_blank" rel="noopener"><code>__dir__()</code></a>, <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__iter__" target="_blank" rel="noopener"><code>__iter__()</code></a> 及其他方法以允许用户通过 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a> 类来完成一般类做不到的事情，例如 list(Color) 或 some_enum_var in Color。 <code>EnumMeta</code> 会负责确保最终 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a> 类中的各种其他方法是正确的 (例如 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__new__" target="_blank" rel="noopener"><code>__new__()</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/pickle.html#object.__getnewargs__" target="_blank" rel="noopener"><code>__getnewargs__()</code></a>, <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__str__" target="_blank" rel="noopener"><code>__str__()</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__repr__" target="_blank" rel="noopener"><code>__repr__()</code></a>)。 </p><h3 id="枚举成员（即实例）"><a href="#枚举成员（即实例）" class="headerlink" title="枚举成员（即实例）"></a>枚举成员（即实例）</h3><p> 有关枚举成员最有趣的特点是它们都是单例对象。 <code>EnumMeta</code> 会在创建 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a> 类本身时将它们全部创建完成，然后准备好一个自定义的 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__new__" target="_blank" rel="noopener"><code>__new__()</code></a>，通过只返回现有的成员实例来确保不会再实例化新的对象。 </p><h3 id="细节要点"><a href="#细节要点" class="headerlink" title="细节要点"></a>细节要点</h3><h4 id="支持的-dunder-名称"><a href="#支持的-dunder-名称" class="headerlink" title="支持的 __dunder__ 名称"></a>支持的 <code>__dunder__</code> 名称</h4><p><code>__members__</code> 是一个 <code>member_name</code>:<code>member</code> 条目的只读有序映射。 它只在类上可用。</p><p>如果指定了 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__new__" target="_blank" rel="noopener"><code>__new__()</code></a>，它必须创建并返回枚举成员；相应地设定成员的 <code>_value_</code> 也是一个很好的主意。 一旦所有成员都创建完成它就不会再被使用。</p><h4 id="支持的-sunder-名称"><a href="#支持的-sunder-名称" class="headerlink" title="支持的 _sunder_ 名称"></a>支持的 <code>_sunder_</code> 名称</h4><ul><li><code>_name_</code> – 成员的名称</li><li><code>_value_</code> – 成员的值；可以在 <code>__new__</code> 中设置 / 修改</li><li><code>_missing_</code> – 当未发现某个值时所使用的查找函数；可被重载</li><li><code>_ignore_</code> – 一个名称列表，可以为 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#list" target="_blank" rel="noopener"><code>list()</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str()</code></a>，它将不会被转化为成员，并会从最终类中被移除</li><li><code>_order_</code> – 用于 Python 2/3 代码以确保成员顺序一致（类属性，在类创建期间会被移除）</li><li><code>_generate_next_value_</code> – 用于 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#functional-api" target="_blank" rel="noopener">Functional API</a> 并通过 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.auto" target="_blank" rel="noopener"><code>auto</code></a> 为枚举成员获取适当的值；可被重载</li></ul><h3 id><a href="#" class="headerlink" title=" "></a> </h3><p> 用来帮助 Python 2 / Python 3 代码保持同步提供 <code>_order_</code> 属性。 它将与枚举的实际顺序进行对照检查，如果两者不匹配则会引发错误: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Color</span><span class="params">(Enum)</span>:</span></span><br><span class="line"><span class="meta">... </span>    _order_ = <span class="string">'RED GREEN BLUE'</span></span><br><span class="line"><span class="meta">... </span>    RED = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    BLUE = <span class="number">3</span></span><br><span class="line"><span class="meta">... </span>    GREEN = <span class="number">2</span></span><br><span class="line">...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">TypeError: member order does <span class="keyword">not</span> match _order_</span><br></pre></td></tr></table></figure><h4 id="Enum-成员类型"><a href="#Enum-成员类型" class="headerlink" title="Enum 成员类型"></a><code>Enum</code> 成员类型</h4><p> <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a> 成员是其 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a> 类的实例，一般通过 <code>EnumClass.member</code> 的形式来访问。 在特定情况下它们也可通过 <code>EnumClass.member.member</code> 的形式来访问，但你绝对不应这样做，因为查找可能失败，或者更糟糕地返回你所查找的 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a> 成员以外的对象（这也是成员应使用全大写名称的另一个好理由）: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">FieldTypes</span><span class="params">(Enum)</span>:</span></span><br><span class="line"><span class="meta">... </span>    name = <span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    value = <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    size = <span class="number">2</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>FieldTypes.value.size</span><br><span class="line">&lt;FieldTypes.size: <span class="number">2</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>FieldTypes.size.value</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="Enum-类和成员的布尔值"><a href="#Enum-类和成员的布尔值" class="headerlink" title="Enum 类和成员的布尔值"></a><code>Enum</code> 类和成员的布尔值</h4><p>混合了非 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a> 类型（例如 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str</code></a> 等）的 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a> 成员会按所混合类型的规则被求值；在其他情况下，所有成员都将被求值为 <a href="https://docs.python.org/zh-cn/3.8/library/constants.html#True" target="_blank" rel="noopener"><code>True</code></a>。 要使你的自定义 Enum 的布尔值取决于成员的值，请在你的类中添加以下代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__bool__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> bool(self.value)</span><br></pre></td></tr></table></figure><p> <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a> 类总是会被求值为 <a href="https://docs.python.org/zh-cn/3.8/library/constants.html#True" target="_blank" rel="noopener"><code>True</code></a>。 </p><h4 id="带有方法的-Enum-类"><a href="#带有方法的-Enum-类" class="headerlink" title="带有方法的 Enum 类"></a>带有方法的 <code>Enum</code> 类</h4><p>如果你为你的 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#enum.Enum" target="_blank" rel="noopener"><code>Enum</code></a> 子类添加了额外的方法，如同上述的 <a href="https://docs.python.org/zh-cn/3.8/library/enum.html#planet" target="_blank" rel="noopener">Planet</a> 类一样，这些方法将在对成员执行 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#dir" target="_blank" rel="noopener"><code>dir()</code></a> 时显示出来，但对类执行时则不会显示:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(Planet)</span><br><span class="line">[<span class="string">'EARTH'</span>, <span class="string">'JUPITER'</span>, <span class="string">'MARS'</span>, <span class="string">'MERCURY'</span>, <span class="string">'NEPTUNE'</span>, <span class="string">'SATURN'</span>, <span class="string">'URANUS'</span>, <span class="string">'VENUS'</span>, <span class="string">'__class__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__members__'</span>, <span class="string">'__module__'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(Planet.EARTH)</span><br><span class="line">[<span class="string">'__class__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__module__'</span>, <span class="string">'name'</span>, <span class="string">'surface_gravity'</span>, <span class="string">'value'</span>]</span><br></pre></td></tr></table></figure><h4 id="组合-Flag-的成员"><a href="#组合-Flag-的成员" class="headerlink" title="组合 Flag 的成员"></a>组合 <code>Flag</code> 的成员</h4><p> 如果 Flag 成员的某种组合未被命名，则 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#repr" target="_blank" rel="noopener"><code>repr()</code></a> 将包含所有已命名的旗标和值中所有已命名的旗标组合: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Color</span><span class="params">(Flag)</span>:</span></span><br><span class="line"><span class="meta">... </span>    RED = auto()</span><br><span class="line"><span class="meta">... </span>    GREEN = auto()</span><br><span class="line"><span class="meta">... </span>    BLUE = auto()</span><br><span class="line"><span class="meta">... </span>    MAGENTA = RED | BLUE</span><br><span class="line"><span class="meta">... </span>    YELLOW = RED | GREEN</span><br><span class="line"><span class="meta">... </span>    CYAN = GREEN | BLUE</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Color(<span class="number">3</span>)  <span class="comment"># named combination</span></span><br><span class="line">&lt;Color.YELLOW: <span class="number">3</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Color(<span class="number">7</span>)      <span class="comment"># not named combination</span></span><br><span class="line">&lt;Color.CYAN|MAGENTA|BLUE|YELLOW|GREEN|RED: <span class="number">7</span>&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库-enum-枚举类型支持&quot;&gt;&lt;a href=&quot;#python-标准库-enum-枚举类型支持&quot; class=&quot;headerlink&quot; title=&quot;python 标准库 enum 枚举类型支持&quot;&gt;&lt;/a&gt;python 标准库 enum 枚举类型支持&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://cn.bing.com/th?id=OIP.MVQKeBgQJ2yG2rAwEJ5unQHaEK&amp;amp;pid=Api&amp;amp;rs=1&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/categories/python/standard-library/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="enum" scheme="https://pinghailinfeng.gitee.io/tags/enum/"/>
    
  </entry>
  
  <entry>
    <title>python standard library pprint</title>
    <link href="https://pinghailinfeng.gitee.io/2020/01/27/python-standard-library-pprint/"/>
    <id>https://pinghailinfeng.gitee.io/2020/01/27/python-standard-library-pprint/</id>
    <published>2020-01-26T21:56:11.000Z</published>
    <updated>2020-01-30T08:43:58.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库-pprint"><a href="#python-标准库-pprint" class="headerlink" title="python 标准库 pprint"></a>python 标准库 pprint</h1><p><img src="https://s.yimg.com/ny/api/res/1.2/U9YwDsQH7.4w06Tgw2pHJg--~A/YXBwaWQ9aGlnaGxhbmRlcjtzbT0xO3c9MTI4MDtoPTk2MA--/https://media.zenfs.com/zh-tw/nownews.com/e25e4ab4f7a980ccfcaca403eafb3a15" alt></p><a id="more"></a><p><img src="http://i3.sinaimg.cn/ty/nba/2014-12-17/U4933P6T12D7449800F44DT20141217031102.jpg" alt></p><p><img src="https://p9.pstatp.com/large/2a3500018a7a07e8a548" alt></p><p>今天凌晨,突闻噩耗, 「黑曼巴」 Kobe Bryant（科比） 永远离开了我们,永远的24号,最伟大的nba球员,没有之一,R.I.P。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=31719570&auto=1&height=66"></iframe><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p> <strong>源代码：</strong> <a href="https://github.com/python/cpython/tree/3.8/Lib/pprint.py" target="_blank" rel="noopener">Lib/pprint.py</a> </p><p>主要类和函数,节选自<a href="https://github.com/python/cpython/tree/3.8/Lib/pprint.py" target="_blank" rel="noopener">源码</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__all__ = [<span class="string">"pprint"</span>,<span class="string">"pformat"</span>,<span class="string">"isreadable"</span>,<span class="string">"isrecursive"</span>,<span class="string">"saferepr"</span>,</span><br><span class="line">           <span class="string">"PrettyPrinter"</span>, <span class="string">"pp"</span>]</span><br></pre></td></tr></table></figure><p><a href="https://docs.python.org/zh-cn/3.8/library/pprint.html#module-pprint" target="_blank" rel="noopener"><code>pprint</code></a> 模块提供了“美化打印”任意 Python 数据结构的功能，这种美化形式可用作对解释器的输入。 如果经格式化的结构包含非基本 Python 类型的对象，则其美化形式可能无法被加载。 包含文件、套接字或类对象，以及许多其他不能用 Python 字面值来表示的对象都有可能导致这样的结果。</p><p>格式化后的形式会在可能的情况下以单行来表示对象，并在无法在允许宽度内容纳对象的情况下将其分为多行。 如果你需要调整宽度限制则应显式地构造 <a href="https://docs.python.org/zh-cn/3.8/library/pprint.html#pprint.PrettyPrinter" target="_blank" rel="noopener"><code>PrettyPrinter</code></a> 对象。</p><p>字典在计算其显示形式前会先根据键来排序。</p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p> <a href="https://docs.python.org/zh-cn/3.8/library/pprint.html#module-pprint" target="_blank" rel="noopener"><code>pprint</code></a> 模块定义了一个类： </p><ul><li><p><em>class</em> <code>pprint.PrettyPrinter</code>(<em>indent=1</em>, <em>width=80</em>, <em>depth=None</em>, <em>stream=None</em>, <em>**, </em>compact=False<em>, </em>sort_dicts=True*) </p><p> 构造一个 <a href="https://docs.python.org/zh-cn/3.8/library/pprint.html#pprint.PrettyPrinter" target="_blank" rel="noopener"><code>PrettyPrinter</code></a> 实例。 此构造器接受几个关键字形参。 使用 <em>stream</em> 关键字可设置输出流；流对象使用的唯一方法是文件协议的 <code>write()</code> 方法。 如果未指定此关键字，则 <a href="https://docs.python.org/zh-cn/3.8/library/pprint.html#pprint.PrettyPrinter" target="_blank" rel="noopener"><code>PrettyPrinter</code></a> 会选择 <code>sys.stdout</code>。 每个递归层次的缩进量由 <em>indent</em> 指定；默认值为一。 其他值可导致输出看起来有些怪异，，但可使得嵌套结构更易区分。 可被打印的层级数量由 <em>depth</em> 控制；如果数据结构的层级被打印得过深，其所包含的下一层级会被替换为 <code>...</code>。 在默认情况下，对被格式化对象的层级深度没有限制。 希望的输出宽度可使用 <em>width</em> 形参来限制；默认值为 80 个字符。 如果一个结构无法在限定宽度内被格式化，则将做到尽可能接近。 如果 <em>compact</em> 为假值（默认）则长序列的每一项将被格式化为单独的行。 如果 <em>compact</em> 为真值，则将在 <em>width</em> 可容纳的的情况下把尽可能多的项放入每个输出行。 如果 <em>sort_dicts</em> 为真值（默认），字典将被格式化为按键排序，否则将按插入顺序显示。 </p><p><em>在 3.8 版更改:</em> 增加了 <em>sort_dicts</em> 形参。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pprint</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stuff = [<span class="string">'spam'</span>, <span class="string">'eggs'</span>, <span class="string">'lumberjack'</span>, <span class="string">'knights'</span>, <span class="string">'ni'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stuff.insert(<span class="number">0</span>, stuff[:])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pp = pprint.PrettyPrinter(indent=<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pp.pprint(stuff)</span><br><span class="line">[   [<span class="string">'spam'</span>, <span class="string">'eggs'</span>, <span class="string">'lumberjack'</span>, <span class="string">'knights'</span>, <span class="string">'ni'</span>],</span><br><span class="line">    <span class="string">'spam'</span>,</span><br><span class="line">    <span class="string">'eggs'</span>,</span><br><span class="line">    <span class="string">'lumberjack'</span>,</span><br><span class="line">    <span class="string">'knights'</span>,</span><br><span class="line">    <span class="string">'ni'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pp = pprint.PrettyPrinter(width=<span class="number">41</span>, compact=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pp.pprint(stuff)</span><br><span class="line">[[<span class="string">'spam'</span>, <span class="string">'eggs'</span>, <span class="string">'lumberjack'</span>,</span><br><span class="line">  <span class="string">'knights'</span>, <span class="string">'ni'</span>],</span><br><span class="line"> <span class="string">'spam'</span>, <span class="string">'eggs'</span>, <span class="string">'lumberjack'</span>, <span class="string">'knights'</span>,</span><br><span class="line"> <span class="string">'ni'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup = (<span class="string">'spam'</span>, (<span class="string">'eggs'</span>, (<span class="string">'lumberjack'</span>, (<span class="string">'knights'</span>, (<span class="string">'ni'</span>, (<span class="string">'dead'</span>,</span><br><span class="line"><span class="meta">... </span>(<span class="string">'parrot'</span>, (<span class="string">'fresh fruit'</span>,))))))))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pp = pprint.PrettyPrinter(depth=<span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pp.pprint(tup)</span><br><span class="line">(<span class="string">'spam'</span>, (<span class="string">'eggs'</span>, (<span class="string">'lumberjack'</span>, (<span class="string">'knights'</span>, (<span class="string">'ni'</span>, (<span class="string">'dead'</span>, (...)))))))</span><br></pre></td></tr></table></figure></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p> <a href="https://docs.python.org/zh-cn/3.8/library/pprint.html#module-pprint" target="_blank" rel="noopener"><code>pprint</code></a> 模块还提供了一些快捷函数： </p><ul><li><p><code>pprint.pformat</code>(<em>object</em>, <em>indent=1</em>, <em>width=80</em>, <em>depth=None</em>, <em>**, </em>compact=False<em>, </em>sort_dicts=True*)</p><p><em>object</em> 的格式化表示作为字符串返回。 <em>indent</em>, <em>width</em>, <em>depth</em>, <em>compact</em> 和 <em>sort_dicts</em> 将作为格式化形参被传入 <a href="https://docs.python.org/zh-cn/3.8/library/pprint.html#pprint.PrettyPrinter" target="_blank" rel="noopener"><code>PrettyPrinter</code></a> 构造器。<em>在 3.4 版更改:</em> 增加了 <em>compact</em> 形参。<em>在 3.8 版更改:</em> 增加了 <em>sort_dicts</em> 形参。</p></li><li><p><code>pprint.pp</code>(<em>object</em>, <strong>args<em>, </em>sort_dicts=False<em>, </em></strong>kwargs*)</p><p>打印 <em>object</em> 的格式化表示并附带一个换行符。 如果 <em>sort_dicts</em> 为假值（默认），字典将按键的插入顺序显示，否则将按字典键排序。 <em>args</em> 和 <em>kwargs</em> 将作为格式化形参被传给 <a href="https://docs.python.org/zh-cn/3.8/library/pprint.html#module-pprint" target="_blank" rel="noopener"><code>pprint()</code></a>。<em>3.8 新版功能.</em></p></li><li><p><code>pprint.pprint</code>(<em>object</em>, <em>stream=None</em>, <em>indent=1</em>, <em>width=80</em>, <em>depth=None</em>, <em>**, </em>compact=False<em>, </em>sort_dicts=True*)</p><p>在 <em>stream</em> 上打打印 <em>object</em> 的格式化表示，并附带一个换行符。 如果 <em>stream</em> 为 <code>None</code>，则使用 <code>sys.stdout</code>。 这可以替代 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#print" target="_blank" rel="noopener"><code>print()</code></a> 函数在交互式解释器中使用以查看值（你甚至可以执行重新赋值 <code>print = pprint.pprint</code> 以在特定作用域中使用）。 <em>indent</em>, <em>width</em>, <em>depth</em>, <em>compact</em> 和 <em>sort_dicts</em> 将作为格式化形参被传给 <a href="https://docs.python.org/zh-cn/3.8/library/pprint.html#pprint.PrettyPrinter" target="_blank" rel="noopener"><code>PrettyPrinter</code></a> 构造器。</p><p><em>在 3.8 版更改:</em> 增加了 <em>sort_dicts</em> 形参。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pprint</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stuff = [<span class="string">'spam'</span>, <span class="string">'eggs'</span>, <span class="string">'lumberjack'</span>, <span class="string">'knights'</span>, <span class="string">'ni'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stuff.insert(<span class="number">0</span>, stuff)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pprint.pprint(stuff)</span><br><span class="line">[&lt;Recursion on list <span class="keyword">with</span> id=...&gt;,</span><br><span class="line"> <span class="string">'spam'</span>,</span><br><span class="line"> <span class="string">'eggs'</span>,</span><br><span class="line"> <span class="string">'lumberjack'</span>,</span><br><span class="line"> <span class="string">'knights'</span>,</span><br><span class="line"> <span class="string">'ni'</span>]</span><br></pre></td></tr></table></figure></li></ul><h2 id="PrettyPrinter-对象"><a href="#PrettyPrinter-对象" class="headerlink" title="PrettyPrinter 对象"></a>PrettyPrinter 对象</h2><p><a href="https://docs.python.org/zh-cn/3.8/library/pprint.html#pprint.PrettyPrinter" target="_blank" rel="noopener"><code>PrettyPrinter</code></a> 的实例具有下列方法：</p><ul><li><p><code>PrettyPrinter.pformat</code>(<em>object</em>)</p><p>返回 <em>object</em> 格式化表示。 这会将传给 <a href="https://docs.python.org/zh-cn/3.8/library/pprint.html#pprint.PrettyPrinter" target="_blank" rel="noopener"><code>PrettyPrinter</code></a> 构造器的选项纳入考虑。</p></li><li><p><code>PrettyPrinter.pprint</code>(<em>object</em>)</p><p>在所配置的流上打印 <em>object</em> 的格式化表示，并附加一个换行符。</p></li></ul><p>下列方法提供了与同名函数相对应的实现。 在实例上使用这些方法效率会更高一些，因为不需要创建新的 <a href="https://docs.python.org/zh-cn/3.8/library/pprint.html#pprint.PrettyPrinter" target="_blank" rel="noopener"><code>PrettyPrinter</code></a> 对象。</p><ul><li><p><code>PrettyPrinter.isreadable</code>(<em>object</em>)</p><p>确定对象的格式化表示是否“可读”，或者是否可使用 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#eval" target="_blank" rel="noopener"><code>eval()</code></a> 重建对象值。 请注意此方法对于递归对象将返回 <code>False</code>。 如果设置了 <a href="https://docs.python.org/zh-cn/3.8/library/pprint.html#pprint.PrettyPrinter" target="_blank" rel="noopener"><code>PrettyPrinter</code></a> 的 <em>depth</em> 形参并且对象深度超出允许范围，此方法将返回 <code>False</code>。</p></li><li><p><code>PrettyPrinter.isrecursive</code>(<em>object</em>)</p><p>确定对象是否需要递归表示。</p></li></ul><p>此方法作为一个钩子提供，允许子类修改将对象转换为字符串的方式。 默认实现使用 <a href="https://docs.python.org/zh-cn/3.8/library/pprint.html#pprint.saferepr" target="_blank" rel="noopener"><code>saferepr()</code></a> 实现的内部方式。</p><ul><li><p><code>PrettyPrinter.format</code>(<em>object</em>, <em>context</em>, <em>maxlevels</em>, <em>level</em>)</p><p>返回三个值：字符串形式的 <em>object</em> 已格式化版本，指明结果是否可读的旗标，以及指明是否检测到递归的旗标。 第一个参数是要表示的对象。 第二个是以对象 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#id" target="_blank" rel="noopener"><code>id()</code></a> 为键的字典，这些对象是当前表示上下文的一部分（影响 <em>object</em> 表示的直接和间接容器）；如果需要呈现一个已经在 <em>context</em> 中表示的对象，则第三个返回值应当为 <code>True</code>。 对 <a href="https://docs.python.org/zh-cn/3.8/library/pprint.html#pprint.PrettyPrinter.format" target="_blank" rel="noopener"><code>format()</code></a> 方法的递归调用应当将容器的附加条目添加到此字典中。 第三个参数 <em>maxlevels</em> 给出了对递归的请求限制；如果没有请求限制则其值将为 <code>0</code>。 此参数应当不加修改地传给递归调用。 第四个参数 <em>level</em> 给出于当前层级；传给递归调用的参数值应当小于当前调用的值。</p></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>为了演示 <a href="https://docs.python.org/zh-cn/3.8/library/pprint.html#module-pprint" target="_blank" rel="noopener"><code>pprint()</code></a> 函数及其形参的几种用法，让我们从 <a href="https://pypi.org/" target="_blank" rel="noopener">PyPI</a> 获取关于某个项目的信息:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pprint</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> urlopen(<span class="string">'https://pypi.org/pypi/sampleproject/json'</span>) <span class="keyword">as</span> resp:</span><br><span class="line"><span class="meta">... </span>    project_info = json.load(resp)[<span class="string">'info'</span>]</span><br></pre></td></tr></table></figure><p> <a href="https://docs.python.org/zh-cn/3.8/library/pprint.html#module-pprint" target="_blank" rel="noopener"><code>pprint()</code></a> 以其基本形式显示了整个对象: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pprint.pprint(project_info)</span><br><span class="line">&#123;<span class="string">'author'</span>: <span class="string">'The Python Packaging Authority'</span>,</span><br><span class="line"> <span class="string">'author_email'</span>: <span class="string">'pypa-dev@googlegroups.com'</span>,</span><br><span class="line"> <span class="string">'bugtrack_url'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'classifiers'</span>: [<span class="string">'Development Status :: 3 - Alpha'</span>,</span><br><span class="line">                 <span class="string">'Intended Audience :: Developers'</span>,</span><br><span class="line">                 <span class="string">'License :: OSI Approved :: MIT License'</span>,</span><br><span class="line">                 <span class="string">'Programming Language :: Python :: 2'</span>,</span><br><span class="line">                 <span class="string">'Programming Language :: Python :: 2.6'</span>,</span><br><span class="line">                 <span class="string">'Programming Language :: Python :: 2.7'</span>,</span><br><span class="line">                 <span class="string">'Programming Language :: Python :: 3'</span>,</span><br><span class="line">                 <span class="string">'Programming Language :: Python :: 3.2'</span>,</span><br><span class="line">                 <span class="string">'Programming Language :: Python :: 3.3'</span>,</span><br><span class="line">                 <span class="string">'Programming Language :: Python :: 3.4'</span>,</span><br><span class="line">                 <span class="string">'Topic :: Software Development :: Build Tools'</span>],</span><br><span class="line"> <span class="string">'description'</span>: <span class="string">'A sample Python project\n'</span></span><br><span class="line">                <span class="string">'=======================\n'</span></span><br><span class="line">                <span class="string">'\n'</span></span><br><span class="line">                <span class="string">'This is the description file for the project.\n'</span></span><br><span class="line">                <span class="string">'\n'</span></span><br><span class="line">                <span class="string">'The file should use UTF-8 encoding and be written using '</span></span><br><span class="line">                <span class="string">'ReStructured Text. It\n'</span></span><br><span class="line">                <span class="string">'will be used to generate the project webpage on PyPI, and '</span></span><br><span class="line">                <span class="string">'should be written for\n'</span></span><br><span class="line">                <span class="string">'that purpose.\n'</span></span><br><span class="line">                <span class="string">'\n'</span></span><br><span class="line">                <span class="string">'Typical contents for this file would include an overview of '</span></span><br><span class="line">                <span class="string">'the project, basic\n'</span></span><br><span class="line">                <span class="string">'usage examples, etc. Generally, including the project '</span></span><br><span class="line">                <span class="string">'changelog in here is not\n'</span></span><br><span class="line">                <span class="string">'a good idea, although a simple "What\'s New" section for the '</span></span><br><span class="line">                <span class="string">'most recent version\n'</span></span><br><span class="line">                <span class="string">'may be appropriate.'</span>,</span><br><span class="line"> <span class="string">'description_content_type'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'docs_url'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'download_url'</span>: <span class="string">'UNKNOWN'</span>,</span><br><span class="line"> <span class="string">'downloads'</span>: &#123;<span class="string">'last_day'</span>: <span class="number">-1</span>, <span class="string">'last_month'</span>: <span class="number">-1</span>, <span class="string">'last_week'</span>: <span class="number">-1</span>&#125;,</span><br><span class="line"> <span class="string">'home_page'</span>: <span class="string">'https://github.com/pypa/sampleproject'</span>,</span><br><span class="line"> <span class="string">'keywords'</span>: <span class="string">'sample setuptools development'</span>,</span><br><span class="line"> <span class="string">'license'</span>: <span class="string">'MIT'</span>,</span><br><span class="line"> <span class="string">'maintainer'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'maintainer_email'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'name'</span>: <span class="string">'sampleproject'</span>,</span><br><span class="line"> <span class="string">'package_url'</span>: <span class="string">'https://pypi.org/project/sampleproject/'</span>,</span><br><span class="line"> <span class="string">'platform'</span>: <span class="string">'UNKNOWN'</span>,</span><br><span class="line"> <span class="string">'project_url'</span>: <span class="string">'https://pypi.org/project/sampleproject/'</span>,</span><br><span class="line"> <span class="string">'project_urls'</span>: &#123;<span class="string">'Download'</span>: <span class="string">'UNKNOWN'</span>,</span><br><span class="line">                  <span class="string">'Homepage'</span>: <span class="string">'https://github.com/pypa/sampleproject'</span>&#125;,</span><br><span class="line"> <span class="string">'release_url'</span>: <span class="string">'https://pypi.org/project/sampleproject/1.2.0/'</span>,</span><br><span class="line"> <span class="string">'requires_dist'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'requires_python'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'summary'</span>: <span class="string">'A sample Python project'</span>,</span><br><span class="line"> <span class="string">'version'</span>: <span class="string">'1.2.0'</span>&#125;</span><br></pre></td></tr></table></figure><p> 结果可以被限制到特定的 <em>depth</em> (更深层的内容将使用省略号): </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pprint.pprint(project_info, depth=<span class="number">1</span>)</span><br><span class="line">&#123;<span class="string">'author'</span>: <span class="string">'The Python Packaging Authority'</span>,</span><br><span class="line"> <span class="string">'author_email'</span>: <span class="string">'pypa-dev@googlegroups.com'</span>,</span><br><span class="line"> <span class="string">'bugtrack_url'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'classifiers'</span>: [...],</span><br><span class="line"> <span class="string">'description'</span>: <span class="string">'A sample Python project\n'</span></span><br><span class="line">                <span class="string">'=======================\n'</span></span><br><span class="line">                <span class="string">'\n'</span></span><br><span class="line">                <span class="string">'This is the description file for the project.\n'</span></span><br><span class="line">                <span class="string">'\n'</span></span><br><span class="line">                <span class="string">'The file should use UTF-8 encoding and be written using '</span></span><br><span class="line">                <span class="string">'ReStructured Text. It\n'</span></span><br><span class="line">                <span class="string">'will be used to generate the project webpage on PyPI, and '</span></span><br><span class="line">                <span class="string">'should be written for\n'</span></span><br><span class="line">                <span class="string">'that purpose.\n'</span></span><br><span class="line">                <span class="string">'\n'</span></span><br><span class="line">                <span class="string">'Typical contents for this file would include an overview of '</span></span><br><span class="line">                <span class="string">'the project, basic\n'</span></span><br><span class="line">                <span class="string">'usage examples, etc. Generally, including the project '</span></span><br><span class="line">                <span class="string">'changelog in here is not\n'</span></span><br><span class="line">                <span class="string">'a good idea, although a simple "What\'s New" section for the '</span></span><br><span class="line">                <span class="string">'most recent version\n'</span></span><br><span class="line">                <span class="string">'may be appropriate.'</span>,</span><br><span class="line"> <span class="string">'description_content_type'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'docs_url'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'download_url'</span>: <span class="string">'UNKNOWN'</span>,</span><br><span class="line"> <span class="string">'downloads'</span>: &#123;...&#125;,</span><br><span class="line"> <span class="string">'home_page'</span>: <span class="string">'https://github.com/pypa/sampleproject'</span>,</span><br><span class="line"> <span class="string">'keywords'</span>: <span class="string">'sample setuptools development'</span>,</span><br><span class="line"> <span class="string">'license'</span>: <span class="string">'MIT'</span>,</span><br><span class="line"> <span class="string">'maintainer'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'maintainer_email'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'name'</span>: <span class="string">'sampleproject'</span>,</span><br><span class="line"> <span class="string">'package_url'</span>: <span class="string">'https://pypi.org/project/sampleproject/'</span>,</span><br><span class="line"> <span class="string">'platform'</span>: <span class="string">'UNKNOWN'</span>,</span><br><span class="line"> <span class="string">'project_url'</span>: <span class="string">'https://pypi.org/project/sampleproject/'</span>,</span><br><span class="line"> <span class="string">'project_urls'</span>: &#123;...&#125;,</span><br><span class="line"> <span class="string">'release_url'</span>: <span class="string">'https://pypi.org/project/sampleproject/1.2.0/'</span>,</span><br><span class="line"> <span class="string">'requires_dist'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'requires_python'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'summary'</span>: <span class="string">'A sample Python project'</span>,</span><br><span class="line"> <span class="string">'version'</span>: <span class="string">'1.2.0'</span>&#125;</span><br></pre></td></tr></table></figure><p> 此外，还可以设置建议的最大字符 <em>width</em>。 如果一个对象无法被拆分，则将超出指定宽度: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pprint.pprint(project_info, depth=<span class="number">1</span>, width=<span class="number">60</span>)</span><br><span class="line">&#123;<span class="string">'author'</span>: <span class="string">'The Python Packaging Authority'</span>,</span><br><span class="line"> <span class="string">'author_email'</span>: <span class="string">'pypa-dev@googlegroups.com'</span>,</span><br><span class="line"> <span class="string">'bugtrack_url'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'classifiers'</span>: [...],</span><br><span class="line"> <span class="string">'description'</span>: <span class="string">'A sample Python project\n'</span></span><br><span class="line">                <span class="string">'=======================\n'</span></span><br><span class="line">                <span class="string">'\n'</span></span><br><span class="line">                <span class="string">'This is the description file for the '</span></span><br><span class="line">                <span class="string">'project.\n'</span></span><br><span class="line">                <span class="string">'\n'</span></span><br><span class="line">                <span class="string">'The file should use UTF-8 encoding and be '</span></span><br><span class="line">                <span class="string">'written using ReStructured Text. It\n'</span></span><br><span class="line">                <span class="string">'will be used to generate the project '</span></span><br><span class="line">                <span class="string">'webpage on PyPI, and should be written '</span></span><br><span class="line">                <span class="string">'for\n'</span></span><br><span class="line">                <span class="string">'that purpose.\n'</span></span><br><span class="line">                <span class="string">'\n'</span></span><br><span class="line">                <span class="string">'Typical contents for this file would '</span></span><br><span class="line">                <span class="string">'include an overview of the project, '</span></span><br><span class="line">                <span class="string">'basic\n'</span></span><br><span class="line">                <span class="string">'usage examples, etc. Generally, including '</span></span><br><span class="line">                <span class="string">'the project changelog in here is not\n'</span></span><br><span class="line">                <span class="string">'a good idea, although a simple "What\'s '</span></span><br><span class="line">                <span class="string">'New" section for the most recent version\n'</span></span><br><span class="line">                <span class="string">'may be appropriate.'</span>,</span><br><span class="line"> <span class="string">'description_content_type'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'docs_url'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'download_url'</span>: <span class="string">'UNKNOWN'</span>,</span><br><span class="line"> <span class="string">'downloads'</span>: &#123;...&#125;,</span><br><span class="line"> <span class="string">'home_page'</span>: <span class="string">'https://github.com/pypa/sampleproject'</span>,</span><br><span class="line"> <span class="string">'keywords'</span>: <span class="string">'sample setuptools development'</span>,</span><br><span class="line"> <span class="string">'license'</span>: <span class="string">'MIT'</span>,</span><br><span class="line"> <span class="string">'maintainer'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'maintainer_email'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'name'</span>: <span class="string">'sampleproject'</span>,</span><br><span class="line"> <span class="string">'package_url'</span>: <span class="string">'https://pypi.org/project/sampleproject/'</span>,</span><br><span class="line"> <span class="string">'platform'</span>: <span class="string">'UNKNOWN'</span>,</span><br><span class="line"> <span class="string">'project_url'</span>: <span class="string">'https://pypi.org/project/sampleproject/'</span>,</span><br><span class="line"> <span class="string">'project_urls'</span>: &#123;...&#125;,</span><br><span class="line"> <span class="string">'release_url'</span>: <span class="string">'https://pypi.org/project/sampleproject/1.2.0/'</span>,</span><br><span class="line"> <span class="string">'requires_dist'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'requires_python'</span>: <span class="literal">None</span>,</span><br><span class="line"> <span class="string">'summary'</span>: <span class="string">'A sample Python project'</span>,</span><br><span class="line"> <span class="string">'version'</span>: <span class="string">'1.2.0'</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h3 id="1-常用格式化"><a href="#1-常用格式化" class="headerlink" title="1. 常用格式化"></a>1. 常用格式化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pprint</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = [(<span class="number">1</span>,&#123;<span class="string">'a'</span>:<span class="string">'A'</span>,<span class="string">'b'</span>:<span class="string">'B'</span>,<span class="string">'c'</span>:<span class="string">'C'</span>,<span class="string">'d'</span>:<span class="string">'D'</span>&#125;),(<span class="number">2</span>,&#123;<span class="string">'e'</span>:<span class="string">'E'</span>,<span class="string">'f'</span>:<span class="string">'F'</span>,<span class="string">'g'</span>:<span class="string">'G'</span>,<span class="string">'h'</span>:<span class="string">'H'</span>,<span class="string">'i'</span>:<span class="string">'I'</span>,<span class="string">'j'</span>:<span class="string">'J'</span>,<span class="string">'k'</span>:<span class="string">'K'</span>,<span class="string">'l'</span>:<span class="string">'L'</span>&#125;),]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pprint.pprint(data)</span><br><span class="line">[(<span class="number">1</span>, &#123;<span class="string">'a'</span>: <span class="string">'A'</span>, <span class="string">'b'</span>: <span class="string">'B'</span>, <span class="string">'c'</span>: <span class="string">'C'</span>, <span class="string">'d'</span>: <span class="string">'D'</span>&#125;),</span><br><span class="line"> (<span class="number">2</span>,</span><br><span class="line">  &#123;<span class="string">'e'</span>: <span class="string">'E'</span>,</span><br><span class="line">   <span class="string">'f'</span>: <span class="string">'F'</span>,</span><br><span class="line">   <span class="string">'g'</span>: <span class="string">'G'</span>,</span><br><span class="line">   <span class="string">'h'</span>: <span class="string">'H'</span>,</span><br><span class="line">   <span class="string">'i'</span>: <span class="string">'I'</span>,</span><br><span class="line">   <span class="string">'j'</span>: <span class="string">'J'</span>,</span><br><span class="line">   <span class="string">'k'</span>: <span class="string">'K'</span>,</span><br><span class="line">   <span class="string">'l'</span>: <span class="string">'L'</span>&#125;)]</span><br></pre></td></tr></table></figure><h3 id="2-格式化序列"><a href="#2-格式化序列" class="headerlink" title="2. 格式化序列"></a>2. 格式化序列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = [(<span class="number">1</span>,&#123;<span class="string">'a'</span>:<span class="string">'A'</span>,<span class="string">'b'</span>:<span class="string">'B'</span>,<span class="string">'c'</span>:<span class="string">'C'</span>,<span class="string">'d'</span>:<span class="string">'D'</span>&#125;),(<span class="number">2</span>,&#123;<span class="string">'e'</span>:<span class="string">'E'</span>,<span class="string">'f'</span>:<span class="string">'F'</span>,<span class="string">'g'</span>:<span class="string">'G'</span>,<span class="string">'h'</span>:<span class="string">'H'</span>,<span class="string">'i'</span>:<span class="string">'I'</span>,<span class="string">'j'</span>:<span class="string">'J'</span>,<span class="string">'k'</span>:<span class="string">'K'</span>,<span class="string">'l'</span>:<span class="string">'L'</span>&#125;),]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result=pprint.pformat(data)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key <span class="keyword">in</span> result.splitlines():</span><br><span class="line">print(key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[(<span class="number">1</span>, &#123;<span class="string">'a'</span>: <span class="string">'A'</span>, <span class="string">'b'</span>: <span class="string">'B'</span>, <span class="string">'c'</span>: <span class="string">'C'</span>, <span class="string">'d'</span>: <span class="string">'D'</span>&#125;),</span><br><span class="line"> (<span class="number">2</span>,</span><br><span class="line">  &#123;<span class="string">'e'</span>: <span class="string">'E'</span>,</span><br><span class="line">   <span class="string">'f'</span>: <span class="string">'F'</span>,</span><br><span class="line">   <span class="string">'g'</span>: <span class="string">'G'</span>,</span><br><span class="line">   <span class="string">'h'</span>: <span class="string">'H'</span>,</span><br><span class="line">   <span class="string">'i'</span>: <span class="string">'I'</span>,</span><br><span class="line">   <span class="string">'j'</span>: <span class="string">'J'</span>,</span><br><span class="line">   <span class="string">'k'</span>: <span class="string">'K'</span>,</span><br><span class="line">   <span class="string">'l'</span>: <span class="string">'L'</span>&#125;)]</span><br></pre></td></tr></table></figure><h3 id="3-复杂的格式化-用于调试代码"><a href="#3-复杂的格式化-用于调试代码" class="headerlink" title="3. 复杂的格式化,用于调试代码"></a>3. 复杂的格式化,用于调试代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pprint;</span><br><span class="line"><span class="keyword">import</span> re;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pprintDemo</span><span class="params">()</span>:</span></span><br><span class="line">    varsList = [</span><br><span class="line">        [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">        [<span class="string">"ab"</span>, <span class="string">"c"</span>, <span class="string">"def"</span>],</span><br><span class="line">        re.compile(<span class="string">"\w+"</span>),</span><br><span class="line">        (<span class="string">"123"</span>, <span class="string">"abc"</span>),</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"key1"</span>:<span class="string">"value1"</span>,</span><br><span class="line">            <span class="string">"key2"</span>:<span class="string">"value2"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    ];</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> varsList:</span><br><span class="line">        print(value);</span><br><span class="line"> </span><br><span class="line">    print(<span class="string">"-"</span>*<span class="number">80</span>)</span><br><span class="line"> </span><br><span class="line">    pp = pprint.PrettyPrinter(indent=<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> varsList:</span><br><span class="line">        pp.pprint(value);</span><br><span class="line"> </span><br><span class="line">    print(<span class="string">"-"</span>*<span class="number">80</span>)</span><br><span class="line">    stuff = [<span class="string">'spam'</span>, <span class="string">'eggs'</span>, <span class="string">'lumberjack'</span>, <span class="string">'knights'</span>, <span class="string">'ni'</span>];</span><br><span class="line">    stuff.insert(<span class="number">0</span>, stuff[:])</span><br><span class="line">    <span class="keyword">print</span> stuff;</span><br><span class="line">    print(<span class="string">"-"</span>*<span class="number">80</span>)</span><br><span class="line">    pp.pprint(stuff)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pprintDemo();</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="string">'ab'</span>, <span class="string">'c'</span>, <span class="string">'def'</span>]</span><br><span class="line">&lt;_sre.SRE_Pattern object at <span class="number">0x00000000030DD378</span>&gt;</span><br><span class="line">(<span class="string">'123'</span>, <span class="string">'abc'</span>)</span><br><span class="line">&#123;<span class="string">'key2'</span>: <span class="string">'value2'</span>, <span class="string">'key1'</span>: <span class="string">'value1'</span>&#125;</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="string">'ab'</span>, <span class="string">'c'</span>, <span class="string">'def'</span>]</span><br><span class="line">&lt;_sre.SRE_Pattern object at <span class="number">0x00000000030DD378</span>&gt;</span><br><span class="line">(<span class="string">'123'</span>, <span class="string">'abc'</span>)</span><br><span class="line">&#123;   <span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: <span class="string">'value2'</span>&#125;</span><br><span class="line">================================================================================</span><br><span class="line">[[<span class="string">'spam'</span>, <span class="string">'eggs'</span>, <span class="string">'lumberjack'</span>, <span class="string">'knights'</span>, <span class="string">'ni'</span>], <span class="string">'spam'</span>, <span class="string">'eggs'</span>, <span class="string">'lumberjack'</span>, <span class="string">'knights'</span>, <span class="string">'ni'</span>]</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">[   [<span class="string">'spam'</span>, <span class="string">'eggs'</span>, <span class="string">'lumberjack'</span>, <span class="string">'knights'</span>, <span class="string">'ni'</span>],</span><br><span class="line">    <span class="string">'spam'</span>,</span><br><span class="line">    <span class="string">'eggs'</span>,</span><br><span class="line">    <span class="string">'lumberjack'</span>,</span><br><span class="line">    <span class="string">'knights'</span>,</span><br><span class="line">    <span class="string">'ni'</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库-pprint&quot;&gt;&lt;a href=&quot;#python-标准库-pprint&quot; class=&quot;headerlink&quot; title=&quot;python 标准库 pprint&quot;&gt;&lt;/a&gt;python 标准库 pprint&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://s.yimg.com/ny/api/res/1.2/U9YwDsQH7.4w06Tgw2pHJg--~A/YXBwaWQ9aGlnaGxhbmRlcjtzbT0xO3c9MTI4MDtoPTk2MA--/https://media.zenfs.com/zh-tw/nownews.com/e25e4ab4f7a980ccfcaca403eafb3a15&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/categories/python/standard-library/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="pprint" scheme="https://pinghailinfeng.gitee.io/tags/pprint/"/>
    
  </entry>
  
  <entry>
    <title>python standard library reprlib</title>
    <link href="https://pinghailinfeng.gitee.io/2020/01/26/python-standard-library-reprlib/"/>
    <id>https://pinghailinfeng.gitee.io/2020/01/26/python-standard-library-reprlib/</id>
    <published>2020-01-26T00:52:32.000Z</published>
    <updated>2020-01-30T08:43:58.060Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库-reprlib"><a href="#python-标准库-reprlib" class="headerlink" title="python 标准库 reprlib"></a>python 标准库 reprlib</h1><p><img src="https://n.sinaimg.cn/news/719/w600h919/20200126/eb39-innckcf7806867.png" alt></p><a id="more"></a><p><strong>武汉挺住！！！</strong></p><p><a href="https://docs.python.org/zh-cn/3.8/library/reprlib.html#module-reprlib" target="_blank" rel="noopener"><code>reprlib</code></a> 模块提供了一种对象表示的产生方式，它会对结果字符串的大小进行限制。 该方式被用于 Python 调试器，也适用于某些其他场景。</p><p>此模块提供了一个类、一个实例和一个函数：</p><ul><li><p><em>class</em> <code>reprlib.Repr</code> </p><p>该类提供了格式化服务 适用于实现与内置 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#repr" target="_blank" rel="noopener"><code>repr()</code></a> 相似的方法；其中附加了针对不同对象类型的大小限制，以避免生成超长的表示。 </p></li><li><p><code>reprlib.aRepr</code> </p><p>这是 <a href="https://docs.python.org/zh-cn/3.8/library/reprlib.html#reprlib.Repr" target="_blank" rel="noopener"><code>Repr</code></a> 的一个实例，用于提供如下所述的 <a href="https://docs.python.org/zh-cn/3.8/library/reprlib.html#reprlib.repr" target="_blank" rel="noopener"><code>repr()</code></a> 函数。 改变此对象的属性将会影响 <a href="https://docs.python.org/zh-cn/3.8/library/reprlib.html#reprlib.repr" target="_blank" rel="noopener"><code>repr()</code></a> 和 Python 调试器所使用的大小限制。 </p></li><li><p><code>reprlib.repr</code>(<em>obj</em>) </p><p>这是 <code>aRepr</code> 的 <a href="https://docs.python.org/zh-cn/3.8/library/reprlib.html#reprlib.Repr.repr" target="_blank" rel="noopener"><code>repr()</code></a> 方法。 它会返回与同名内置函数所返回字符串相似的字符串，区别在于附带了对多数类型的大小限制。 </p><p>在大小限制工具以外，此模块还提供了一个装饰器，用于检测对 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__repr__" target="_blank" rel="noopener"><code>__repr__()</code></a> 的递归调用并改用一个占位符来替换。 </p></li><li><p><a href="mailto:`@reprlib.recursiv" target="_blank" rel="noopener">`@reprlib.recursiv</a>e_repr`(<em>fillvalue=”…”</em>) </p><p>用于为 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__repr__" target="_blank" rel="noopener"><code>__repr__()</code></a> 方法检测同一线程内部递归调用的装饰器。 如果执行了递归调用，则会返回 <em>fillvalue</em>，否则执行正常的 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__repr__" target="_blank" rel="noopener"><code>__repr__()</code></a> 调用。 例如： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> reprlib <span class="keyword">import</span> recursive_repr</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">MyList</span><span class="params">(list)</span>:</span></span><br><span class="line">---   @recursive_repr()</span><br><span class="line">---   <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">---        <span class="keyword">return</span> <span class="string">'&lt;'</span> + <span class="string">'|'</span>.join(map(repr, self)) + <span class="string">'&gt;'</span></span><br><span class="line">---</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = MyList(<span class="string">'abc'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.append(m)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.append(<span class="string">'x'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m)</span><br><span class="line">&lt;<span class="string">'a'</span>|<span class="string">'b'</span>|<span class="string">'c'</span>|...|<span class="string">'x'</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Repr-对象"><a href="#Repr-对象" class="headerlink" title="Repr 对象"></a>Repr 对象</h2><p> <a href="https://docs.python.org/zh-cn/3.8/library/reprlib.html#reprlib.Repr" target="_blank" rel="noopener"><code>Repr</code></a> 实例对象包含一些属性可以用于为不同对象类型的表示提供大小限制，还包含一些方法可以格式化特定的对象类型。 </p><ul><li><p><code>Repr.maxlevel</code></p><p>创建递归表示形式的深度限制。 默认为 <code>6</code>。</p></li><li><p><code>Repr.maxdict</code></p></li><li><p><code>Repr.maxlist</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> reprlib  </span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>],<span class="number">6</span>,<span class="number">7</span>]  </span><br><span class="line">reprlib.aRepr.maxlist = <span class="number">2</span>  </span><br><span class="line">print(reprlib.repr(a))  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">2</span>, ...]</span><br></pre></td></tr></table></figure></li><li><p><code>Repr.maxtuple</code></p></li><li><p><code>Repr.maxset</code></p></li><li><p><code>Repr.maxfrozenset</code></p></li><li><p><code>Repr.maxdeque</code></p></li><li><p><code>Repr.maxarray</code></p><p>代表命名对象类型的条目数量限制。 对于 <a href="https://docs.python.org/zh-cn/3.8/library/reprlib.html#reprlib.Repr.maxdict" target="_blank" rel="noopener"><code>maxdict</code></a> 的默认值为 <code>4</code>，对于 <a href="https://docs.python.org/zh-cn/3.8/library/reprlib.html#reprlib.Repr.maxarray" target="_blank" rel="noopener"><code>maxarray</code></a> 为 <code>5</code>，对于其他则为 <code>6</code>。</p></li><li><p><code>Repr.maxlong</code></p><p>表示整数的最大字符数量。 数码会从中间被丢弃。 默认值为 <code>40</code>。</p></li><li><p><code>Repr.maxstring</code></p><p>表示字符串的字符数量限制。 请注意字符源会使用字符串的“正常”表示形式：如果表示中需要用到转义序列，在缩短表示时它们可能会被破坏。 默认值为 <code>30</code>。</p></li><li><p><code>Repr.maxother</code></p><p>此限制用于控制在 <a href="https://docs.python.org/zh-cn/3.8/library/reprlib.html#reprlib.Repr" target="_blank" rel="noopener"><code>Repr</code></a> 对象上没有特定的格式化方法可用的对象类型的大小。 它会以类似 <a href="https://docs.python.org/zh-cn/3.8/library/reprlib.html#reprlib.Repr.maxstring" target="_blank" rel="noopener"><code>maxstring</code></a> 的方式被应用。 默认值为 <code>20</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> reprlib</span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>],<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">reprlib.aRepr.maxlevel = <span class="number">1</span></span><br><span class="line">print(reprlib.repr(a))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[...],<span class="number">6</span>,<span class="number">7</span>]</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>Repr.repr</code>(<em>obj</em>)</p><p>内置 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#repr" target="_blank" rel="noopener"><code>repr()</code></a> 的等价形式，它使用实例专属的格式化。</p></li><li><p><code>Repr.repr1</code>(<em>obj</em>, <em>level</em>)</p><p>供 <a href="https://docs.python.org/zh-cn/3.8/library/reprlib.html#reprlib.Repr.repr" target="_blank" rel="noopener"><code>repr()</code></a> 使用的递归实现。 此方法使用 <em>obj</em> 的类型来确定要调用哪个格式化方法，并传入 <em>obj</em> 和 <em>level</em>。 类型专属的方法应当调用 <a href="https://docs.python.org/zh-cn/3.8/library/reprlib.html#reprlib.Repr.repr1" target="_blank" rel="noopener"><code>repr1()</code></a> 来执行递归格式化，在递归调用中使用 <code>level - 1</code> 作为 <em>level</em> 的值。</p></li><li><p><code>Repr.repr_TYPE</code>(<em>obj</em>, <em>level</em>)</p><p>特定类型的格式化方法会被实现为基于类型名称来命名的方法。 在方法名称中，<strong>TYPE</strong> 会被替换为 <code>&#39;_&#39;.join(type(obj).__name__.split())</code>。 对这些方法的分派会由 <a href="https://docs.python.org/zh-cn/3.8/library/reprlib.html#reprlib.Repr.repr1" target="_blank" rel="noopener"><code>repr1()</code></a> 来处理。 需要对值进行递归格式化的类型专属方法应当调用 <code>self.repr1(subobj, level - 1)</code>。</p></li></ul><h2 id="子类化-Repr-对象"><a href="#子类化-Repr-对象" class="headerlink" title="子类化 Repr 对象"></a>子类化 Repr 对象</h2><p> 通过 <a href="https://docs.python.org/zh-cn/3.8/library/reprlib.html#reprlib.Repr.repr1" target="_blank" rel="noopener"><code>Repr.repr1()</code></a> 使用动态分派允许 <a href="https://docs.python.org/zh-cn/3.8/library/reprlib.html#reprlib.Repr" target="_blank" rel="noopener"><code>Repr</code></a> 的子类添加对额外内置对象类型的支持，或是修改对已支持类型的处理。 这个例子演示了如何添加对文件对象的特殊支持: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> reprlib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRepr</span><span class="params">(reprlib.Repr)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">repr_TextIOWrapper</span><span class="params">(self, obj, level)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> obj.name <span class="keyword">in</span> &#123;<span class="string">'&lt;stdin&gt;'</span>, <span class="string">'&lt;stdout&gt;'</span>, <span class="string">'&lt;stderr&gt;'</span>&#125;:</span><br><span class="line">            <span class="keyword">return</span> obj.name</span><br><span class="line">        <span class="keyword">return</span> repr(obj)</span><br><span class="line"></span><br><span class="line">aRepr = MyRepr()</span><br><span class="line">print(aRepr.repr(sys.stdin))         <span class="comment"># prints '&lt;stdin&gt;'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库-reprlib&quot;&gt;&lt;a href=&quot;#python-标准库-reprlib&quot; class=&quot;headerlink&quot; title=&quot;python 标准库 reprlib&quot;&gt;&lt;/a&gt;python 标准库 reprlib&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://n.sinaimg.cn/news/719/w600h919/20200126/eb39-innckcf7806867.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/categories/python/standard-library/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="reprlib" scheme="https://pinghailinfeng.gitee.io/tags/reprlib/"/>
    
  </entry>
  
  <entry>
    <title>python standard library dataclasses</title>
    <link href="https://pinghailinfeng.gitee.io/2020/01/25/python-standard-library-dataclasses/"/>
    <id>https://pinghailinfeng.gitee.io/2020/01/25/python-standard-library-dataclasses/</id>
    <published>2020-01-24T17:28:38.000Z</published>
    <updated>2020-01-30T08:43:58.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库-dataclasses"><a href="#python-标准库-dataclasses" class="headerlink" title="python 标准库 dataclasses"></a>python 标准库 dataclasses</h1><p><img src="https://img.zcool.cn/community/01b9205e2af974a8012165188cc6ad.jpg@1280w_1l_2o_100sh.jpg" alt></p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p> <strong>源码：</strong> <a href="https://github.com/python/cpython/tree/3.8/Lib/dataclasses.py" target="_blank" rel="noopener">Lib/dataclasses.py</a> </p><p>主要类结构层次,节选自<a href="[Lib/dataclasses.py](https://github.com/python/cpython/tree/3.8/Lib/dataclasses.py">源码</a> )</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">__all__ = [<span class="string">'dataclass'</span>,</span><br><span class="line">           <span class="string">'field'</span>,</span><br><span class="line">           <span class="string">'Field'</span>,</span><br><span class="line">           <span class="string">'FrozenInstanceError'</span>,</span><br><span class="line">           <span class="string">'InitVar'</span>,</span><br><span class="line">           <span class="string">'MISSING'</span>,</span><br><span class="line"></span><br><span class="line">           <span class="comment"># Helper functions.</span></span><br><span class="line">           <span class="string">'fields'</span>,</span><br><span class="line">           <span class="string">'asdict'</span>,</span><br><span class="line">           <span class="string">'astuple'</span>,</span><br><span class="line">           <span class="string">'make_dataclass'</span>,</span><br><span class="line">           <span class="string">'replace'</span>,</span><br><span class="line">           <span class="string">'is_dataclass'</span>,</span><br><span class="line">           ]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_DataclassParams</span>:</span></span><br><span class="line">    __slots__ = (<span class="string">'init'</span>,</span><br><span class="line">                 <span class="string">'repr'</span>,</span><br><span class="line">                 <span class="string">'eq'</span>,</span><br><span class="line">                 <span class="string">'order'</span>,</span><br><span class="line">                 <span class="string">'unsafe_hash'</span>,</span><br><span class="line">                 <span class="string">'frozen'</span>,</span><br><span class="line">                 )</span><br></pre></td></tr></table></figure><p> 这个模块提供了一个装饰器和一些函数，用于自动添加生成的 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-special-method" target="_blank" rel="noopener">special method</a>s ，例如 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__init__" target="_blank" rel="noopener"><code>__init__()</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__repr__" target="_blank" rel="noopener"><code>__repr__()</code></a> 到用户定义的类。 它最初描述于 <a href="https://www.python.org/dev/peps/pep-0557" target="_blank" rel="noopener"><strong>PEP 557</strong></a> 。 </p><p> 在这些生成的方法中使用的成员变量使用 <a href="https://www.python.org/dev/peps/pep-0526" target="_blank" rel="noopener"><strong>PEP 526</strong></a> 类型注释定义。例如这段代码: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InventoryItem</span>:</span></span><br><span class="line">    <span class="string">'''Class for keeping track of an item in inventory.'''</span></span><br><span class="line">    name: str</span><br><span class="line">    unit_price: float</span><br><span class="line">    quantity_on_hand: int = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">total_cost</span><span class="params">(self)</span> -&gt; float:</span></span><br><span class="line">        <span class="keyword">return</span> self.unit_price * self.quantity_on_hand</span><br></pre></td></tr></table></figure><p> 除其他事情外，将添加 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__init__" target="_blank" rel="noopener"><code>__init__()</code></a> ，其看起来像: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name: str, unit_price: float, quantity_on_hand: int=<span class="number">0</span>)</span>:</span></span><br><span class="line">    self.name = name</span><br><span class="line">    self.unit_price = unit_price</span><br><span class="line">    self.quantity_on_hand = quantity_on_hand</span><br></pre></td></tr></table></figure><p> 请注意，此方法会自动添加到类中：它不会在上面显示的 <code>InventoryItem</code> 定义中直接指定。 </p><h2 id="模块级装饰器、类和函数"><a href="#模块级装饰器、类和函数" class="headerlink" title="模块级装饰器、类和函数"></a>模块级装饰器、类和函数</h2><ul><li><p><a href="mailto:`@dataclasses.dataclass" target="_blank" rel="noopener">`@dataclasses.dataclass</a>`(<em>**, </em>init=True<em>, </em>repr=True<em>, </em>eq=True<em>, </em>order=False<em>, </em>unsafe_hash=False<em>, </em>frozen=False*) </p><p>这个函数是 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-decorator" target="_blank" rel="noopener">decorator</a> ，用于将生成的 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-special-method" target="_blank" rel="noopener">special method</a> 添加到类中，如下所述。</p><p><a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.dataclass" target="_blank" rel="noopener"><code>dataclass()</code></a> 装饰器检查类以找到 <code>field</code>。 <code>field</code> 被定义为具有 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-variable-annotation" target="_blank" rel="noopener">类型标注</a> 的类变量。除了下面描述的两个例外，在 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.dataclass" target="_blank" rel="noopener"><code>dataclass()</code></a> 中没有任何内容检查变量标注中指定的类型。</p><p>所有生成的方法中的字段顺序是它们在类定义中出现的顺序。</p><p><a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.dataclass" target="_blank" rel="noopener"><code>dataclass()</code></a> 装饰器将向类中添加各种“dunder”方法，如下所述。如果类中已存在任何添加的方法，则行为取决于参数，如下所述。装饰器返回被调用的同一个类；没有创建新类。</p><p>如果 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.dataclass" target="_blank" rel="noopener"><code>dataclass()</code></a> 仅用作没有参数的简单装饰器，它就像它具有此签名中记录的默认值一样。也就是说，这三种 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.dataclass" target="_blank" rel="noopener"><code>dataclass()</code></a> 用法是等价的:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass(init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">   ...</span><br></pre></td></tr></table></figure><p><a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.dataclass" target="_blank" rel="noopener"><code>dataclass()</code></a> 的参数有： </p><ul><li><p><code>init</code>: 如果为真值（默认），将生成一个 <code>__ init__()</code> 方法。 </p><p>如果类已定义 <code>__ init__()</code> ，则忽略此参数。 </p></li><li><p><code>repr</code> ：如果为真值（默认），将生成一个 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__repr__" target="_blank" rel="noopener"><code>__repr__()</code></a> 方法。 生成的 repr 字符串将具有类名以及每个字段的名称和 repr ，按照它们在类中定义的顺序。不包括标记为从 repr 中排除的字段。 例如：<code>InventoryItem(name=&#39;widget&#39;, unit_price=3.0, quantity_on_hand=10)</code>。 </p><p>如果类已定义 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__repr__" target="_blank" rel="noopener"><code>__repr__()</code></a> ，则忽略此参数。 </p></li><li><p><code>eq</code> ：如果为true（默认值），将生成 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__eq__" target="_blank" rel="noopener"><code>__eq__()</code></a> 方法。此方法将类作为其字段的元组按顺序比较。比较中的两个实例必须是相同的类型。 </p><p>如果类已定义 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__eq__" target="_blank" rel="noopener"><code>__eq__()</code></a> ，则忽略此参数。 </p></li><li><p><code>order</code> ：如果为真值（默认为 <code>False</code> ），则 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__lt__" target="_blank" rel="noopener"><code>__lt__()</code></a> 、 <code>__ le__()</code> 、 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__gt__" target="_blank" rel="noopener"><code>__gt__()</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__ge__" target="_blank" rel="noopener"><code>__ge__()</code></a> 方法将生成。 这将类作为其字段的元组按顺序比较。比较中的两个实例必须是相同的类型。如果 <code>order</code> 为真值并且 <code>eq</code> 为假值 ，则引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#ValueError" target="_blank" rel="noopener"><code>ValueError</code></a> 。</p><p>如果类已经定义了 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__lt__" target="_blank" rel="noopener"><code>__lt__()</code></a> 、 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__le__" target="_blank" rel="noopener"><code>__le__()</code></a> 、 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__gt__" target="_blank" rel="noopener"><code>__gt__()</code></a> 或者 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__ge__" target="_blank" rel="noopener"><code>__ge__()</code></a> 中的任意一个，将引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a> 。 </p></li><li><p><code>unsafe_hash</code> ：如果为 <code>False</code> （默认值），则根据 <code>eq</code> 和 <code>frozen</code> 的设置方式生成 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__hash__" target="_blank" rel="noopener"><code>__hash__()</code></a> 方法。 </p><p><a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__hash__" target="_blank" rel="noopener"><code>__hash__()</code></a> 由内置的 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#hash" target="_blank" rel="noopener"><code>hash()</code></a> 使用，当对象被添加到散列集合（如字典和集合）时。有一个 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__hash__" target="_blank" rel="noopener"><code>__hash__()</code></a> 意味着类的实例是不可变的。可变性是一个复杂的属性，取决于程序员的意图， <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__eq__" target="_blank" rel="noopener"><code>__eq__()</code></a> 的存在性和行为，以及 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.dataclass" target="_blank" rel="noopener"><code>dataclass()</code></a> 装饰器中 <code>eq</code> 和 <code>frozen</code> 标志的值。</p><p>默认情况下， <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.dataclass" target="_blank" rel="noopener"><code>dataclass()</code></a> 不会隐式添加 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__hash__" target="_blank" rel="noopener"><code>__hash__()</code></a> 方法，除非这样做是安全的。 它也不会添加或更改现有的明确定义的 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__hash__" target="_blank" rel="noopener"><code>__hash__()</code></a> 方法。 设置类属性 <code>__hash__ = None</code> 对 Python 具有特定含义，如 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__hash__" target="_blank" rel="noopener"><code>__hash__()</code></a> 文档中所述。</p><p>如果 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__hash__" target="_blank" rel="noopener"><code>__hash__()</code></a> 没有显式定义，或者它被设置为 <code>None</code> ，那么 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.dataclass" target="_blank" rel="noopener"><code>dataclass()</code></a> <em>可以</em> 添加一个隐式 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__hash__" target="_blank" rel="noopener"><code>__hash__()</code></a> 方法。虽然不推荐，但你可以强制 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.dataclass" target="_blank" rel="noopener"><code>dataclass()</code></a> 用 <code>unsafe_hash=True</code> 创建一个 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__hash__" target="_blank" rel="noopener"><code>__hash__()</code></a> 方法。 如果你的类在逻辑上是不可变的但实际仍然可变，则可能就是这种情况。这是一个特殊的用例，应该仔细考虑。</p><p>以下是隐式创建 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__hash__" target="_blank" rel="noopener"><code>__hash__()</code></a> 方法的规则。请注意，你不能在数据类中都使用显式的 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__hash__" target="_blank" rel="noopener"><code>__hash__()</code></a> 方法并设置 <code>unsafe_hash=True</code> ；这将导致 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a> 。</p><p>如果 <code>eq</code> 和 <code>frozen</code> 都是 true，默认情况下 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.dataclass" target="_blank" rel="noopener"><code>dataclass()</code></a> 将为你生成一个 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__hash__" target="_blank" rel="noopener"><code>__hash__()</code></a> 方法。如果 <code>eq</code> 为 true 且 <code>frozen</code> 为 false ，则 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__hash__" target="_blank" rel="noopener"><code>__hash__()</code></a> 将被设置为 <code>None</code> ，标记它不可用（因为它是可变的）。如果 <code>eq</code> 为 false ，则 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__hash__" target="_blank" rel="noopener"><code>__hash__()</code></a> 将保持不变，这意味着将使用超类的 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__hash__" target="_blank" rel="noopener"><code>__hash__()</code></a> 方法（如果超类是 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#object" target="_blank" rel="noopener"><code>object</code></a> ，这意味着它将回到基于id的hash）。</p></li><li><p><code>frozen</code>: 如为真值 (默认值为 <code>False</code>)，则对字段赋值将会产生异常。 这模拟了只读的冻结实例。 如果在类中定义了 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__setattr__" target="_blank" rel="noopener"><code>__setattr__()</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__delattr__" target="_blank" rel="noopener"><code>__delattr__()</code></a> 则将会引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a>。 参见下文的讨论。 </p></li></ul><p><code>field</code>s 可以选择使用普通的 Python 语法指定默认值: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    a: int       <span class="comment"># 'a' has no default value</span></span><br><span class="line">    b: int = <span class="number">0</span>   <span class="comment"># assign a default value for 'b'</span></span><br></pre></td></tr></table></figure><p>在这个例子中， <code>a</code> 和 <code>b</code> 都将包含在添加的 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__init__" target="_blank" rel="noopener"><code>__init__()</code></a> 方法中，它们将被定义为: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a: int, b: int = <span class="number">0</span>)</span>:</span></span><br></pre></td></tr></table></figure><p>如果没有默认值的字段跟在具有默认值的字段后，将引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a> 。当这发生在单个类中时，或者作为类继承的结果时，都是如此。 </p></li><li><p><code>dataclasses.field</code>(<em>**, </em>default=MISSING<em>, </em>default_factory=MISSING<em>, </em>repr=True<em>, </em>hash=None<em>, </em>init=True<em>, </em>compare=True<em>, </em>metadata=None*) </p><p>对于常见和简单的用例，不需要其他功能。但是，有些数据类功能需要额外的每字段信息。为了满足这种对附加信息的需求，你可以通过调用提供的 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.field" target="_blank" rel="noopener"><code>field()</code></a> 函数来替换默认字段值。例如: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    mylist: List[int] = field(default_factory=list)</span><br><span class="line"></span><br><span class="line">c = C()</span><br><span class="line">c.mylist += [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>如上所示， <code>MISSING</code> 值是一个 sentinel 对象，用于检测是否提供了 <code>default</code> 和 <code>default_factory</code> 参数。 使用此 sentinel 是因为 <code>None</code> 是 <code>default</code> 的有效值。没有代码应该直接使用 <code>MISSING</code> 值。 </p><p><a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.field" target="_blank" rel="noopener"><code>field()</code></a> 参数有： </p><ul><li><p><code>default</code> ：如果提供，这将是该字段的默认值。这是必需的，因为 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.field" target="_blank" rel="noopener"><code>field()</code></a> 调用本身会替换一般的默认值。 </p></li><li><p><code>default_factory</code> ：如果提供，它必须是一个零参数可调用对象，当该字段需要一个默认值时，它将被调用。除了其他目的之外，这可以用于指定具有可变默认值的字段，如下所述。 同时指定 <code>default</code> 和 <code>default_factory</code> 将产生错误。</p></li><li><p><code>init</code> ：如果为true（默认值），则该字段作为参数包含在生成的 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__init__" target="_blank" rel="noopener"><code>__init__()</code></a> 方法中。</p></li><li><p><code>repr</code> ：如果为true（默认值），则该字段包含在生成的 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__repr__" target="_blank" rel="noopener"><code>__repr__()</code></a> 方法返回的字符串中。</p></li><li><p><code>compare</code> ：如果为true（默认值），则该字段包含在生成的相等性和比较方法中（ <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__eq__" target="_blank" rel="noopener"><code>__eq__()</code></a> ， <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__gt__" target="_blank" rel="noopener"><code>__gt__()</code></a> 等等）。</p></li><li><p><code>hash</code> ：这可以是布尔值或 <code>None</code> 。如果为true，则此字段包含在生成的 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__hash__" target="_blank" rel="noopener"><code>__hash__()</code></a> 方法中。如果为 <code>None</code> （默认值），请使用 <code>compare</code> 的值，这通常是预期的行为。如果字段用于比较，则应在 hash 中考虑该字段。不鼓励将此值设置为 <code>None</code> 以外的任何值。</p><p>设置 <code>hash=False</code> 但 <code>compare=True</code> 的一个可能原因是，如果一个计算 hash 的代价很高的字段是检验等价性需要的，但还有其他字段可以计算类型的 hash 。 即使从 hash 中排除某个字段，它仍将用于比较。</p></li><li><p><code>metadata</code> ：这可以是映射或 None 。 None 被视为一个空的字典。这个值包含在 <code>MappingProxyType()</code> 中，使其成为只读，并暴露在 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.Field" target="_blank" rel="noopener"><code>Field</code></a> 对象上。数据类根本不使用它，它是作为第三方扩展机制提供的。多个第三方可以各自拥有自己的键值，以用作元数据中的命名空间。</p></li></ul><p>如果通过调用 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.field" target="_blank" rel="noopener"><code>field()</code></a> 指定字段的默认值，则该字段的类属性将替换为指定的 <code>default</code> 值。如果没有提供 <code>default</code> ，那么将删除类属性。目的是在 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.dataclass" target="_blank" rel="noopener"><code>dataclass()</code></a> 装饰器运行之后，类属性将包含字段的默认值，就像指定了默认值一样。例如，之后: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    x: int</span><br><span class="line">    y: int = field(repr=<span class="literal">False</span>)</span><br><span class="line">    z: int = field(repr=<span class="literal">False</span>, default=<span class="number">10</span>)</span><br><span class="line">    t: int = <span class="number">20</span></span><br></pre></td></tr></table></figure><p>类属性 <code>C.z</code> 将是 <code>10</code> ，类属性 <code>C.t</code> 将是 <code>20</code>，类属性 <code>C.x</code> 和 <code>C.y</code> 将不设置。 </p></li><li><p><em>class</em> <code>dataclasses.Field</code> </p><p><a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.Field" target="_blank" rel="noopener"><code>Field</code></a> 对象描述每个定义的字段。这些对象在内部创建，并由 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.fields" target="_blank" rel="noopener"><code>fields()</code></a> 模块级方法返回（见下文）。用户永远不应该直接实例化 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.Field" target="_blank" rel="noopener"><code>Field</code></a> 对象。 其有文档的属性是： </p><ul><li><code>name</code> ：字段的名字。</li><li><code>type</code> ：字段的类型。</li><li><code>default</code> 、 <code>default_factory</code> 、 <code>init</code> 、 <code>repr</code> 、 <code>hash</code> 、 <code>compare</code> 以及 <code>metadata</code> 与具有和 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.field" target="_blank" rel="noopener"><code>field()</code></a> 声明中相同的意义和值。</li></ul><p>可能存在其他属性，但它们是私有的，不能被审查或依赖。 </p></li><li><p><code>dataclasses.fields</code>(<em>class_or_instance</em>) </p><p>返回 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.Field" target="_blank" rel="noopener"><code>Field</code></a> 对象的元组，用于定义此数据类的字段。 接受数据类或数据类的实例。如果没有传递一个数据类或实例将引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a> 。 不返回 <code>ClassVar</code> 或 <code>InitVar</code> 的伪字段。 </p></li><li><p><code>dataclasses.asdict</code>(<em>instance</em>, <em>**, </em>dict_factory=dict*) </p><p>将数据类 <code>instance</code> 转换为字典（使用工厂函数 <code>dict_factory</code> ）。每个数据类都转换为其字段的字典，如 <code>name: value</code> 对。数据类、字典、列表和元组被递归。例如: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>:</span></span><br><span class="line">     x: int</span><br><span class="line">     y: int</span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">     mylist: List[Point]</span><br><span class="line"></span><br><span class="line">p = Point(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="keyword">assert</span> asdict(p) == &#123;<span class="string">'x'</span>: <span class="number">10</span>, <span class="string">'y'</span>: <span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line">c = C([Point(<span class="number">0</span>, <span class="number">0</span>), Point(<span class="number">10</span>, <span class="number">4</span>)])</span><br><span class="line"><span class="keyword">assert</span> asdict(c) == &#123;<span class="string">'mylist'</span>: [&#123;<span class="string">'x'</span>: <span class="number">0</span>, <span class="string">'y'</span>: <span class="number">0</span>&#125;, &#123;<span class="string">'x'</span>: <span class="number">10</span>, <span class="string">'y'</span>: <span class="number">4</span>&#125;]&#125;</span><br></pre></td></tr></table></figure><p>引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a> 如果 <code>instance</code> 不是数据类实例。 </p></li><li><p><code>dataclasses.astuple</code>(<em>instance</em>, <em>**, </em>tuple_factory=tuple*) </p><p>将数据类 <code>instance</code> 转换为元组（通过使用工厂函数 <code>tuple_factory</code> ）。每个数据类都转换为其字段值的元组。数据类、字典、列表和元组被递归。</p><p>继续前一个例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> astuple(p) == (<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="keyword">assert</span> astuple(c) == ([(<span class="number">0</span>, <span class="number">0</span>), (<span class="number">10</span>, <span class="number">4</span>)],)</span><br></pre></td></tr></table></figure><p>引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a> 如果 <code>instance</code> 不是数据类实例。 </p></li><li><p><code>dataclasses.make_dataclass</code>(<em>cls_name</em>, <em>fields</em>, <em>**, </em>bases=()<em>, </em>namespace=None<em>, </em>init=True<em>, </em>repr=True<em>, </em>eq=True<em>, </em>order=False<em>, </em>unsafe_hash=False<em>, </em>frozen=False*) </p><p>创建一个名为 <code>cls_name</code> 的新数据类，字段为 <code>fields</code> 中定义的字段，基类为 <code>bases</code> 中给出的基类，并使用 <code>namespace</code> 中给出的命名空间进行初始化。 <code>fields</code> 是一个可迭代的元素，每个元素都是 <code>name</code> 、 <code>(name, type)</code> 或 <code>(name, type, Field)</code> 。 如果只提供name ， <code>type</code> 为 <code>typing.Any</code> 。 <code>init</code> 、 <code>repr</code> 、 <code>eq</code> 、 <code>order</code> 、 <code>unsafe_hash</code> 和 <code>frozen</code> 的值与它们在 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.dataclass" target="_blank" rel="noopener"><code>dataclass()</code></a> 中的含义相同。</p><p>此函数不是严格要求的，因为用于任何创建带有 <code>__annotations__</code> 的新类的 Python 机制都可以应用 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.dataclass" target="_blank" rel="noopener"><code>dataclass()</code></a> 函数将该类转换为数据类。提供此功能是为了方便。例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C = make_dataclass(<span class="string">'C'</span>,</span><br><span class="line">                   [(<span class="string">'x'</span>, int),</span><br><span class="line">                     <span class="string">'y'</span>,</span><br><span class="line">                    (<span class="string">'z'</span>, int, field(default=<span class="number">5</span>))],</span><br><span class="line">                   namespace=&#123;<span class="string">'add_one'</span>: <span class="keyword">lambda</span> self: self.x + <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><p>等价于 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    x: int</span><br><span class="line">    y: <span class="string">'typing.Any'</span></span><br><span class="line">    z: int = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_one</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.x + <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>dataclasses.replace</code>(<em>instance</em>, <em>**changes</em>) </p><p>创建一个 <code>instance</code> 相同类型的新对象，用 <code>changes</code> 中的值替换字段。如果 <code>instance</code> 不是数据类，则引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a> 。如果 <code>changes</code> 中的值没有指定字段，则引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a> 。</p><p>新返回的对象通过调用数据类的 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__init__" target="_blank" rel="noopener"><code>__init__()</code></a> 方法创建。这确保了如果存在 <code>__post_init__()</code> ，其也被调用。</p><p>如果存在没有默认值的仅初始化变量，必须在调用 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.replace" target="_blank" rel="noopener"><code>replace()</code></a> 时指定，以便它们可以传递给 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__init__" target="_blank" rel="noopener"><code>__init__()</code></a> 和 <code>__post_init__()</code> 。</p><p><code>changes</code> 包含任何定义为 <code>init=False</code> 的字段是错误的。在这种情况下会引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#ValueError" target="_blank" rel="noopener"><code>ValueError</code></a> 。</p><p>提前提醒 <code>init=False</code> 字段在调用 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.replace" target="_blank" rel="noopener"><code>replace()</code></a> 时的工作方式。如果它们完全被初始化的话，它们不是从源对象复制的，而是在 <code>__post_init__()</code> 中初始化。估计 <code>init=False</code> 字段很少能被正确地使用。如果使用它们，那么使用备用类构造函数或者可能是处理实例复制的自定义 <code>replace()</code> （或类似命名的）方法可能是明智的。</p></li><li><p><code>dataclasses.is_dataclass</code>(<em>class_or_instance</em>) </p><p>如果其形参为 dataclass 或其实例则返回 <code>True</code>，否则返回 <code>False</code>。</p><p>如果你需要知道一个类是否是一个数据类的实例（而不是一个数据类本身），那么再添加一个 <code>not isinstance(obj, type)</code> 检查:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_dataclass_instance</span><span class="params">(obj)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> is_dataclass(obj) <span class="keyword">and</span> <span class="keyword">not</span> isinstance(obj, type)</span><br></pre></td></tr></table></figure></li></ul><h2 id="初始化后处理"><a href="#初始化后处理" class="headerlink" title="初始化后处理"></a>初始化后处理</h2><p>生成的 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__init__" target="_blank" rel="noopener"><code>__init__()</code></a> 代码将调用一个名为 <code>__post_init__()</code> 的方法，如果在类上已经定义了 <code>__post_init__()</code> 。它通常被称为 <code>self.__post_init__()</code> 。但是，如果定义了任何 <code>InitVar</code> 字段，它们也将按照它们在类中定义的顺序传递给 <code>__post_init__()</code> 。 如果没有 <code>__ init__()</code> 方法生成，那么 <code>__post_init__()</code> 将不会被自动调用。</p><p>在其他用途中，这允许初始化依赖于一个或多个其他字段的字段值。例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    a: float</span><br><span class="line">    b: float</span><br><span class="line">    c: float = field(init=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__post_init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.c = self.a + self.b</span><br></pre></td></tr></table></figure><p> 有关将参数传递给 <code>__post_init__()</code> 的方法，请参阅下面有关仅初始化变量的段落。另请参阅关于 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.replace" target="_blank" rel="noopener"><code>replace()</code></a> 处理 <code>init=False</code> 字段的警告。 </p><h2 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h2><p> 两个地方 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.dataclass" target="_blank" rel="noopener"><code>dataclass()</code></a> 实际检查字段类型的之一是确定字段是否是如 <a href="https://www.python.org/dev/peps/pep-0526" target="_blank" rel="noopener"><strong>PEP 526</strong></a> 所定义的类变量。它通过检查字段的类型是否为 <code>typing.ClassVar</code> 来完成此操作。如果一个字段是一个 <code>ClassVar</code> ，它将被排除在考虑范围之外，并被数据类机制忽略。这样的 <code>ClassVar</code> 伪字段不会由模块级的 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.fields" target="_blank" rel="noopener"><code>fields()</code></a> 函数返回。 </p><h2 id="仅初始化变量"><a href="#仅初始化变量" class="headerlink" title="仅初始化变量"></a>仅初始化变量</h2><p>另一个 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.dataclass" target="_blank" rel="noopener"><code>dataclass()</code></a> 检查类型注解地方是为了确定一个字段是否是一个仅初始化变量。它通过查看字段的类型是否为 <code>dataclasses.InitVar</code> 类型来实现。如果一个字段是一个 <code>InitVar</code> ，它被认为是一个称为仅初始化字段的伪字段。因为它不是一个真正的字段，所以它不会被模块级的 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.fields" target="_blank" rel="noopener"><code>fields()</code></a> 函数返回。仅初始化字段作为参数添加到生成的 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__init__" target="_blank" rel="noopener"><code>__init__()</code></a> 方法中，并传递给可选的 <code>__post_init__()</code> 方法。数据类不会使用它们。</p><p>例如，假设一个字段将从数据库初始化，如果在创建类时未提供其值:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    i: int</span><br><span class="line">    j: int = <span class="literal">None</span></span><br><span class="line">    database: InitVar[DatabaseType] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__post_init__</span><span class="params">(self, database)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.j <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> database <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.j = database.lookup(<span class="string">'j'</span>)</span><br><span class="line"></span><br><span class="line">c = C(<span class="number">10</span>, database=my_database)</span><br></pre></td></tr></table></figure><p> 在这种情况下， <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.fields" target="_blank" rel="noopener"><code>fields()</code></a> 将返回 <code>i</code> 和 <code>j</code> 的 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.Field" target="_blank" rel="noopener"><code>Field</code></a> 对象，但不包括 <code>database</code>  。</p><h2 id="冻结的实例"><a href="#冻结的实例" class="headerlink" title="冻结的实例"></a>冻结的实例</h2><p>无法创建真正不可变的 Python 对象。但是，通过将 <code>frozen=True</code> 传递给 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.dataclass" target="_blank" rel="noopener"><code>dataclass()</code></a> 装饰器，你可以模拟不变性。在这种情况下，数据类将向类添加 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__setattr__" target="_blank" rel="noopener"><code>__setattr__()</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__delattr__" target="_blank" rel="noopener"><code>__delattr__()</code></a> 方法。 些方法在调用时会引发 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.FrozenInstanceError" target="_blank" rel="noopener"><code>FrozenInstanceError</code></a> 。</p><p>使用 <code>frozen=True</code> 时会有很小的性能损失： <code>__ init__()</code> 不能使用简单的赋值来初始化字段，并必须使用 <code>object.__ setattr__()</code> 。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p> 当数组由 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.dataclass" target="_blank" rel="noopener"><code>dataclass()</code></a> 装饰器创建时，它会查看反向 MRO 中的所有类的基类（即从 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#object" target="_blank" rel="noopener"><code>object</code></a> 开始 ），并且对于它找到的每个数据类， 将该基类中的字段添加到字段的有序映射中。添加完所有基类字段后，它会将自己的字段添加到有序映射中。所有生成的方法都将使用这种组合的，计算的有序字段映射。由于字段是按插入顺序排列的，因此派生类会重载基类。一个例子: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@dataclass</span><br><span class="line">class Base:</span><br><span class="line">    x: Any = 15.0</span><br><span class="line">    y: int = 0</span><br><span class="line"></span><br><span class="line">@dataclass</span><br><span class="line">class C(Base):</span><br><span class="line">    z: int = 10</span><br><span class="line">    x: int = 15</span><br></pre></td></tr></table></figure><p>最后的字段列表依次是 <code>x</code> 、 <code>y</code> 、 <code>z</code> 。 <code>x</code> 的最终类型是 <code>int</code> ，如类 <code>C</code> 中所指定的那样。</p><p>为 <code>C</code> 生成的 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__init__" target="_blank" rel="noopener"><code>__init__()</code></a> 方法看起来像:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x: int = <span class="number">15</span>, y: int = <span class="number">0</span>, z: int = <span class="number">10</span>)</span>:</span></span><br></pre></td></tr></table></figure><h2 id="默认工厂函数"><a href="#默认工厂函数" class="headerlink" title="默认工厂函数"></a>默认工厂函数</h2><p> 如果一个 <a href="https://docs.python.org/zh-cn/3.8/library/dataclasses.html#dataclasses.field" target="_blank" rel="noopener"><code>field()</code></a> 指定了一个 <code>default_factory</code> ，当需要该字段的默认值时，将使用零参数调用它。例如，要创建列表的新实例，请使用: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mylist: list = field(default_factory=list)</span><br></pre></td></tr></table></figure><p> 如果一个字段被排除在 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__init__" target="_blank" rel="noopener"><code>__init__()</code></a> 之外（使用 <code>init=False</code> ）并且字段也指定 <code>default_factory</code> ，则默认的工厂函数将始终从生成的 <code>__ init__()</code> 函数调用。发生这种情况是因为没有其他方法可以为字段提供初始值。 </p><h2 id="可变的默认值"><a href="#可变的默认值" class="headerlink" title="可变的默认值"></a>可变的默认值</h2><p> Python 在类属性中存储默认成员变量值。思考这个例子，不使用数据类: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    x = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, element)</span>:</span></span><br><span class="line">        self.x.append(element)</span><br><span class="line"></span><br><span class="line">o1 = C()</span><br><span class="line">o2 = C()</span><br><span class="line">o1.add(<span class="number">1</span>)</span><br><span class="line">o2.add(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">assert</span> o1.x == [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">assert</span> o1.x <span class="keyword">is</span> o2.x</span><br></pre></td></tr></table></figure><p>请注意，类 <code>C</code> 的两个实例共享相同的类变量 <code>x</code> ，如预期的那样。</p><p>使用数据类， <em>如果</em> 此代码有效:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span></span><br><span class="line">    x: List = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, element)</span>:</span></span><br><span class="line">        self.x += element</span><br></pre></td></tr></table></figure><p> 它生成的代码类似于: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span></span><br><span class="line">    x = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x=x)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, element)</span>:</span></span><br><span class="line">        self.x += element</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> D().x <span class="keyword">is</span> D().x</span><br></pre></td></tr></table></figure><p>这与使用类 <code>C</code> 的原始示例具有相同的问题。也就是说，在创建类实例时没有为 <code>x</code> 指定值的类 <code>D</code> 的两个实例将共享相同的 <code>x</code> 副本。由于数据类只使用普通的 Python 类创建，因此它们也会共享此行为。数据类没有通用的方法来检测这种情况。相反，如果数据类检测到类型为 <code>list</code> 、 <code>dict</code> 或 <code>set</code> 的默认参数，则会引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a> 。这是一个部分解决方案，但它可以防止许多常见错误。</p><p>使用默认工厂函数是一种创建可变类型新实例的方法，并将其作为字段的默认值:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span></span><br><span class="line">    x: list = field(default_factory=list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> D().x <span class="keyword">is</span> <span class="keyword">not</span> D().x</span><br></pre></td></tr></table></figure><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul><li><p><em>exception</em> <code>dataclasses.FrozenInstanceError</code> </p><p>在使用 <code>frozen=True</code> 定义的数据类上调用隐式定义的 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__setattr__" target="_blank" rel="noopener"><code>__setattr__()</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__delattr__" target="_blank" rel="noopener"><code>__delattr__()</code></a> 时引发。 </p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们经常会遇到这样的情况:</p><p>比如我们设计一个商品类:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, id=None, author_id=None, category_id=None, brand_id=None, spu_id=None, </span></span></span><br><span class="line"><span class="function"><span class="params">                 title=None, item_id=None, n_comments=None, creation_time=None, update_time=None, </span></span></span><br><span class="line"><span class="function"><span class="params">                 source=<span class="string">''</span>, parent_id=<span class="number">0</span>, ancestor_id=<span class="number">0</span>)</span>:</span> </span><br><span class="line">        self.id = id</span><br><span class="line">        self.author_id = author_id</span><br><span class="line">        self.category_id = category_id</span><br><span class="line">        self.brand_id = brand_id</span><br><span class="line">        self.spu_id = spu_id</span><br><span class="line">        self.title = title</span><br><span class="line">        self.item_id = item_id</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p><code>__init__</code>方法包含了众多参数,</p><h3 id="应用一"><a href="#应用一" class="headerlink" title="应用一"></a>应用一</h3><p><strong>我们在打印的时候不希望打印所有的参数</strong></p><p>通常的做法是,重写<code>__repr__</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;&#125;(id=&#123;&#125;, author_id=&#123;&#125;, category_id=&#123;&#125;, brand_id=&#123;&#125;)'</span>.format(</span><br><span class="line">        self.__class__.__name__, self.id, self.author_id, self.category_id, </span><br><span class="line">        self.brand_id)</span><br><span class="line"><span class="comment">#对象打印</span></span><br><span class="line">p = Product()</span><br><span class="line">print(p)   </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Product(id=<span class="number">1</span>, author_id=<span class="number">100001</span>, category_id=<span class="number">2003</span>, brand_id=<span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>问题来了,我需要在每个类里重写这个方法,那该怎么处理？</p><h3 id="应用二"><a href="#应用二" class="headerlink" title="应用二"></a>应用二</h3><p> <strong>对象比较</strong>，有时候需要判断2个对象是否相等甚至大小（例如用于展示顺序） </p><p>通常的做法是 重写对应的<code>__eq__</code>,<code>__lt__</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(other, self.__class__):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">NotImplemented</span></span><br><span class="line">    <span class="keyword">return</span> (self.id, self.author_id, self.category_id, self.brand_id) == (</span><br><span class="line">        other.id, other.author_id, other.category_id, other.brand_id)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(other, self.__class__):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">NotImplemented</span></span><br><span class="line">    <span class="keyword">return</span> (self.id, self.author_id, self.category_id, self.brand_id) &lt; (</span><br><span class="line">        other.id, other.author_id, other.category_id, other.brand_id)</span><br></pre></td></tr></table></figure><h3 id="应用三"><a href="#应用三" class="headerlink" title="应用三"></a>应用三</h3><p><strong>对象去重</strong>,重写<code>__hash__</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__hash__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> hash((self.id, self.author_id, self.category_id, self.brand_id))</span><br></pre></td></tr></table></figure><h3 id="应用四"><a href="#应用四" class="headerlink" title="应用四"></a>应用四</h3><p><strong>导出字典格式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_dict</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'id'</span>: self.id,</span><br><span class="line">        <span class="string">'author_id'</span>: self.author_id,</span><br><span class="line">        <span class="string">'category_id'</span>: self.category_id,</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>但是我并不想打印所有的属性,于是有下面的做法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_dict</span><span class="params">(self)</span>:</span></span><br><span class="line">    self._a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> vars(self)</span><br></pre></td></tr></table></figure><p>等等,python难道没有解决方案。</p><p>答案是肯定的,当然有,那就是<code>dataclasses</code></p><h3 id="用dataclasses解决上面的问题"><a href="#用dataclasses解决上面的问题" class="headerlink" title="用dataclasses解决上面的问题"></a>用<code>dataclasses</code>解决上面的问题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass, field</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass(unsafe_hash=True, order=True)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span><span class="params">(object)</span>:</span></span><br><span class="line">    id: int</span><br><span class="line">    author_id: int</span><br><span class="line">    brand_id: int</span><br><span class="line">    spu_id: int</span><br><span class="line">    title: str = field(hash=<span class="literal">False</span>, repr=<span class="literal">False</span>, compare=<span class="literal">False</span>)</span><br><span class="line">    item_id: int = field(hash=<span class="literal">False</span>, repr=<span class="literal">False</span>, compare=<span class="literal">False</span>)</span><br><span class="line">    n_comments: int = field(hash=<span class="literal">False</span>, repr=<span class="literal">False</span>, compare=<span class="literal">False</span>)</span><br><span class="line">    creation_time: datetime = field(default=<span class="literal">None</span>, repr=<span class="literal">False</span>, compare=<span class="literal">False</span>,hash=<span class="literal">False</span>)</span><br><span class="line">    update_time: datetime = field(default=<span class="literal">None</span>, repr=<span class="literal">False</span>, compare=<span class="literal">False</span>, hash=<span class="literal">False</span>)</span><br><span class="line">    source: str = field(default=<span class="string">''</span>, repr=<span class="literal">False</span>, compare=<span class="literal">False</span>, hash=<span class="literal">False</span>)</span><br><span class="line">    parent_id: int = field(default=<span class="number">0</span>, repr=<span class="literal">False</span>, compare=<span class="literal">False</span>, hash=<span class="literal">False</span>)</span><br><span class="line">    ancestor_id: int = field(default=<span class="number">0</span>, repr=<span class="literal">False</span>, compare=<span class="literal">False</span>, hash=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1 = Product(<span class="number">1</span>, <span class="number">100001</span>, <span class="number">2003</span>, <span class="number">20</span>, <span class="number">1002393002</span>, <span class="string">'这是一个测试商品1'</span>, <span class="number">2000001</span>, <span class="number">100</span>, <span class="literal">None</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p2 = Product(<span class="number">1</span>, <span class="number">100001</span>, <span class="number">2003</span>, <span class="number">20</span>, <span class="number">1002393002</span>, <span class="string">'这是一个测试商品2'</span>, <span class="number">2000001</span>, <span class="number">100</span>, <span class="literal">None</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p3 = Product(<span class="number">3</span>, <span class="number">100001</span>, <span class="number">2003</span>, <span class="number">20</span>, <span class="number">1002393002</span>, <span class="string">'这是一个测试商品3'</span>, <span class="number">2000001</span>, <span class="number">100</span>, <span class="literal">None</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">print(p1)</span><br><span class="line"></span><br><span class="line">print(p1 == p2)</span><br><span class="line"></span><br><span class="line">print(p1 &gt; p2)</span><br><span class="line"></span><br><span class="line">print(&#123;p1, p2, p3&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> asdict</span><br><span class="line">asdict(p1)</span><br></pre></td></tr></table></figure><p>想了解更多的使用方法,强烈建议阅读源码。</p><p>最后,希望武汉的兄弟们能保护好自己,健康才是最重要的。加油!!!</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库-dataclasses&quot;&gt;&lt;a href=&quot;#python-标准库-dataclasses&quot; class=&quot;headerlink&quot; title=&quot;python 标准库 dataclasses&quot;&gt;&lt;/a&gt;python 标准库 dataclasses&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/01b9205e2af974a8012165188cc6ad.jpg@1280w_1l_2o_100sh.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/categories/python/standard-library/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="dataclasses" scheme="https://pinghailinfeng.gitee.io/tags/dataclasses/"/>
    
  </entry>
  
  <entry>
    <title>python standard library bisect</title>
    <link href="https://pinghailinfeng.gitee.io/2020/01/24/python-standard-library-bisect/"/>
    <id>https://pinghailinfeng.gitee.io/2020/01/24/python-standard-library-bisect/</id>
    <published>2020-01-24T01:48:18.000Z</published>
    <updated>2020-01-30T08:43:58.051Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库-bisect-二分查找"><a href="#python-标准库-bisect-二分查找" class="headerlink" title="python 标准库 bisect 二分查找"></a>python 标准库 bisect 二分查找</h1><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20200122/b1c38585d3a8429eaf0fee473dbcae7e.jpeg" alt></p><a id="more"></a><h2 id="何谓二分查找"><a href="#何谓二分查找" class="headerlink" title="何谓二分查找"></a>何谓二分查找</h2><p><img src="https://img-blog.csdn.net/20150821221951219" alt></p><h2 id="对比顺序查找"><a href="#对比顺序查找" class="headerlink" title="对比顺序查找"></a>对比顺序查找</h2><p><img src="http://www.chenyoude.com/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/53%E9%80%92%E5%BD%92-%E4%BA%8C%E5%88%8623.gif" alt></p><p>通常我们实现二分查找是酱紫的:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(li,find)</span>:</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = len(li)<span class="number">-1</span> <span class="comment">## 需要减一否则会下标越界</span></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        middle = (low + high) /<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> li[middle] ==  find :</span><br><span class="line">            <span class="keyword">return</span> middle</span><br><span class="line">        <span class="keyword">elif</span> li[middle] &gt; find:</span><br><span class="line">            high = middle - <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> li[middle] &lt; find:</span><br><span class="line">            low = middle + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    li = [x <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">101</span>)]</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">102</span>):</span><br><span class="line">        <span class="keyword">print</span> binary_search(li,x)</span><br></pre></td></tr></table></figure><p>python标准库中已经实现了二分查找。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p> <strong>源代码：</strong> <a href="https://github.com/python/cpython/tree/3.8/Lib/bisect.py" target="_blank" rel="noopener">Lib/bisect.py</a> </p><p> 这个模块对有序列表提供了支持，使得他们可以在插入新数据仍然保持有序。对于长列表，如果其包含元素的比较操作十分昂贵的话，这可以是对更常见方法的改进。这个模块叫做 <a href="https://docs.python.org/zh-cn/3.8/library/bisect.html#module-bisect" target="_blank" rel="noopener"><code>bisect</code></a> 因为其使用了基本的二分（bisection）算法。源代码也可以作为很棒的算法示例（边界判断也做好啦！） </p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li><code>bisect.bisect_left</code>(<em>a</em>, <em>x</em>, <em>lo=0</em>, <em>hi=len(a)</em>) </li></ul><p>在 <em>a</em> 中找到 <em>x</em> 合适的插入点以维持有序。参数 <em>lo</em> 和 <em>hi</em> 可以被用于确定需要考虑的子集；默认情况下整个列表都会被使用。如果 <em>x</em> 已经在 <em>a</em> 里存在，那么插入点会在已存在元素之前（也就是左边）。如果 <em>a</em> 是列表（list）的话，返回值是可以被放在 <code>list.insert()</code> 的第一个参数的。</p><p>返回的插入点 <em>i</em> 可以将数组 <em>a</em> 分成两部分。左侧是 <code>all(val &lt; x for val in a[lo:i])</code> ，右侧是 <code>all(val &gt;= x for val in a[i:hi])</code> 。</p><ul><li><p><code>bisect.bisect_right</code>(<em>a</em>, <em>x</em>, <em>lo=0</em>, <em>hi=len(a)</em>) </p></li><li><p><code>bisect.bisect</code>(<em>a</em>, <em>x</em>, <em>lo=0</em>, <em>hi=len(a)</em>) </p><p>类似于 <a href="https://docs.python.org/zh-cn/3.8/library/bisect.html#bisect.bisect_left" target="_blank" rel="noopener"><code>bisect_left()</code></a>，但是返回的插入点是 <em>a</em> 中已存在元素 <em>x</em> 的右侧。</p><p>返回的插入点 <em>i</em> 可以将数组 <em>a</em> 分成两部分。左侧是 <code>all(val &lt;= x for val in a[lo:i])</code>，右侧是 <code>all(val &gt; x for val in a[i:hi])</code> for the right side。</p></li><li><p><code>bisect.insort_left</code>(<em>a</em>, <em>x</em>, <em>lo=0</em>, <em>hi=len(a)</em>) </p><p>将 <em>x</em> 插入到一个有序序列 <em>a</em> 里，并维持其有序。如果 <em>a</em> 有序的话，这相当于 <code>a.insert(bisect.bisect_left(a, x, lo, hi), x)</code>。要注意搜索是 O(log n) 的，插入却是 O(n) 的。 </p></li><li><p><code>bisect.insort_right</code>(<em>a</em>, <em>x</em>, <em>lo=0</em>, <em>hi=len(a)</em>) </p></li><li><p><code>bisect.insort</code>(<em>a</em>, <em>x</em>, <em>lo=0</em>, <em>hi=len(a)</em>) </p><p>类似于 <a href="https://docs.python.org/zh-cn/3.8/library/bisect.html#bisect.insort_left" target="_blank" rel="noopener"><code>insort_left()</code></a>，但是把 <em>x</em> 插入到 <em>a</em> 中已存在元素 <em>x</em> 的右侧。 </p><blockquote><p> <a href="https://code.activestate.com/recipes/577197-sortedcollection/" target="_blank" rel="noopener">SortedCollection recipe</a> 使用 bisect 构造了一个功能完整的集合类，提供了直接的搜索方法和对用于搜索的 key 方法的支持。所有用于搜索的键都是预先计算的，以避免在搜索时对 key 方法的不必要调用。</p></blockquote></li></ul><h2 id="搜索有序列表"><a href="#搜索有序列表" class="headerlink" title="搜索有序列表"></a>搜索有序列表</h2><p> 上面的 <a href="https://docs.python.org/zh-cn/3.8/library/bisect.html#module-bisect" target="_blank" rel="noopener"><code>bisect()</code></a> 函数对于找到插入点是有用的，但在一般的搜索任务中可能会有点尴尬。下面 5 个函数展示了如何将其转变成有序列表中的标准查找函数 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(a, x)</span>:</span></span><br><span class="line">    <span class="string">'Locate the leftmost value exactly equal to x'</span></span><br><span class="line">    i = bisect_left(a, x)</span><br><span class="line">    <span class="keyword">if</span> i != len(a) <span class="keyword">and</span> a[i] == x:</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">raise</span> ValueError</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_lt</span><span class="params">(a, x)</span>:</span></span><br><span class="line">    <span class="string">'Find rightmost value less than x'</span></span><br><span class="line">    i = bisect_left(a, x)</span><br><span class="line">    <span class="keyword">if</span> i:</span><br><span class="line">        <span class="keyword">return</span> a[i<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">raise</span> ValueError</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_le</span><span class="params">(a, x)</span>:</span></span><br><span class="line">    <span class="string">'Find rightmost value less than or equal to x'</span></span><br><span class="line">    i = bisect_right(a, x)</span><br><span class="line">    <span class="keyword">if</span> i:</span><br><span class="line">        <span class="keyword">return</span> a[i<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">raise</span> ValueError</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_gt</span><span class="params">(a, x)</span>:</span></span><br><span class="line">    <span class="string">'Find leftmost value greater than x'</span></span><br><span class="line">    i = bisect_right(a, x)</span><br><span class="line">    <span class="keyword">if</span> i != len(a):</span><br><span class="line">        <span class="keyword">return</span> a[i]</span><br><span class="line">    <span class="keyword">raise</span> ValueError</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_ge</span><span class="params">(a, x)</span>:</span></span><br><span class="line">    <span class="string">'Find leftmost item greater than or equal to x'</span></span><br><span class="line">    i = bisect_left(a, x)</span><br><span class="line">    <span class="keyword">if</span> i != len(a):</span><br><span class="line">        <span class="keyword">return</span> a[i]</span><br><span class="line">    <span class="keyword">raise</span> ValueError</span><br></pre></td></tr></table></figure><h2 id="其他示例"><a href="#其他示例" class="headerlink" title="其他示例"></a>其他示例</h2><p> 函数 <a href="https://docs.python.org/zh-cn/3.8/library/bisect.html#module-bisect" target="_blank" rel="noopener"><code>bisect()</code></a> 还可以用于数字表查询。这个例子是使用 <a href="https://docs.python.org/zh-cn/3.8/library/bisect.html#module-bisect" target="_blank" rel="noopener"><code>bisect()</code></a> 从一个给定的考试成绩集合里，通过一个有序数字表，查出其对应的字母等级：90 分及以上是 ‘A’，80 到 89 是 ‘B’，以此类推 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">grade</span><span class="params">(score, breakpoints=[<span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">90</span>], grades=<span class="string">'FDCBA'</span>)</span>:</span></span><br><span class="line"><span class="meta">... </span>    i = bisect(breakpoints, score)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> grades[i]</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[grade(score) <span class="keyword">for</span> score <span class="keyword">in</span> [<span class="number">33</span>, <span class="number">99</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">100</span>]]</span><br><span class="line">[<span class="string">'F'</span>, <span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'C'</span>, <span class="string">'B'</span>, <span class="string">'A'</span>, <span class="string">'A'</span>]</span><br></pre></td></tr></table></figure><p>与 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#sorted" target="_blank" rel="noopener"><code>sorted()</code></a> 函数不同，对于 <a href="https://docs.python.org/zh-cn/3.8/library/bisect.html#module-bisect" target="_blank" rel="noopener"><code>bisect()</code></a> 函数来说，<em>key</em> 或者 <em>reversed</em> 参数并没有什么意义。因为这会导致设计效率低下（连续调用 bisect 函数时，是不会 “记住” 过去查找过的键的）。</p><p>正相反，最好去搜索预先计算好的键列表，来查找相关记录的索引。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = [(<span class="string">'red'</span>, <span class="number">5</span>), (<span class="string">'blue'</span>, <span class="number">1</span>), (<span class="string">'yellow'</span>, <span class="number">8</span>), (<span class="string">'black'</span>, <span class="number">0</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data.sort(key=<span class="keyword">lambda</span> r: r[<span class="number">1</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>keys = [r[<span class="number">1</span>] <span class="keyword">for</span> r <span class="keyword">in</span> data]         <span class="comment"># precomputed list of keys</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data[bisect_left(keys, <span class="number">0</span>)]</span><br><span class="line">(<span class="string">'black'</span>, <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data[bisect_left(keys, <span class="number">1</span>)]</span><br><span class="line">(<span class="string">'blue'</span>, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data[bisect_left(keys, <span class="number">5</span>)]</span><br><span class="line">(<span class="string">'red'</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data[bisect_left(keys, <span class="number">8</span>)]</span><br><span class="line">(<span class="string">'yellow'</span>, <span class="number">8</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库-bisect-二分查找&quot;&gt;&lt;a href=&quot;#python-标准库-bisect-二分查找&quot; class=&quot;headerlink&quot; title=&quot;python 标准库 bisect 二分查找&quot;&gt;&lt;/a&gt;python 标准库 bisect 二分查找&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://5b0988e595225.cdn.sohucs.com/images/20200122/b1c38585d3a8429eaf0fee473dbcae7e.jpeg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/categories/python/standard-library/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="bisect" scheme="https://pinghailinfeng.gitee.io/tags/bisect/"/>
    
  </entry>
  
  <entry>
    <title>python standard library timeit</title>
    <link href="https://pinghailinfeng.gitee.io/2020/01/23/python-standard-library-timeit/"/>
    <id>https://pinghailinfeng.gitee.io/2020/01/23/python-standard-library-timeit/</id>
    <published>2020-01-23T00:55:19.000Z</published>
    <updated>2020-02-10T02:35:57.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库-timeit"><a href="#python-标准库-timeit" class="headerlink" title="python 标准库 timeit"></a>python 标准库 timeit</h1><p>每日一词:</p><blockquote><p>Pneumonia </p><p>n 肺炎</p><p> 2019 Novel coronavirus    (2019-nCoV)，<br>  世界卫生组织定义, 又名<strong>武汉冠状病毒</strong>（Wuhan coronavirus）、<strong>武汉肺炎</strong>（Wuhan pneumonia） </p><p> <strong>冠状病毒属</strong>的病毒是具外套膜（envelope） </p><p>例句:</p><p> The doctor diagnosed the illness as pneumonia .<br>医生诊断这病为肺炎。 </p><p> The doctor has cured her of pneumonia .<br>大夫把她的肺炎看好了。 </p><p> Fatalities usually come from pneumonia .<br>通常肺炎可引起死亡。 </p></blockquote><p><img src="https://img5.miaoshoucdn.com/2020/01/10/093040d3c8f09c598309db3381177ea2b2ec476497.jpg" alt></p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p> <strong>源码：</strong> <a href="https://github.com/python/cpython/tree/3.8/Lib/timeit.py" target="_blank" rel="noopener">Lib/timeit.py</a> </p><p> 该模块提供了一种简单的方法来计算一小段 Python 代码的耗时。它有 <a href="https://docs.python.org/zh-cn/3.8/library/timeit.html#timeit-command-line-interface" target="_blank" rel="noopener">命令行界面</a> 以及一个 <a href="https://docs.python.org/zh-cn/3.8/library/timeit.html#python-interface" target="_blank" rel="noopener">可调用</a> 方法。它避免了许多用于测量执行时间的常见陷阱。另见 Tim Peters 对 O’Reilly 出版的 <em>Python Cookbook</em> 中“算法”章节的介绍。 </p><h2 id="基本实例"><a href="#基本实例" class="headerlink" title="基本实例"></a>基本实例</h2><p> 以下示例显示了如何使用 <a href="https://docs.python.org/zh-cn/3.8/library/timeit.html#timeit-command-line-interface" target="_blank" rel="noopener">命令行界面</a> 来比较三个不同的表达式： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python3 -m timeit <span class="string">'"-".join(str(n) for n in range(100))'</span></span><br><span class="line"><span class="number">10000</span> loops, best of <span class="number">5</span>: <span class="number">30.2</span> usec per loop</span><br><span class="line">$ python3 -m timeit <span class="string">'"-".join([str(n) for n in range(100)])'</span></span><br><span class="line"><span class="number">10000</span> loops, best of <span class="number">5</span>: <span class="number">27.5</span> usec per loop</span><br><span class="line">$ python3 -m timeit <span class="string">'"-".join(map(str, range(100)))'</span></span><br><span class="line"><span class="number">10000</span> loops, best of <span class="number">5</span>: <span class="number">23.2</span> usec per loop</span><br></pre></td></tr></table></figure><p> 这可以通过 <a href="https://docs.python.org/zh-cn/3.8/library/timeit.html#python-interface" target="_blank" rel="noopener">Python 接口</a> 实现 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> timeit</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timeit.timeit(<span class="string">'"-".join(str(n) for n in range(100))'</span>, number=<span class="number">10000</span>)</span><br><span class="line"><span class="number">0.3018611848820001</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timeit.timeit(<span class="string">'"-".join([str(n) for n in range(100)])'</span>, number=<span class="number">10000</span>)</span><br><span class="line"><span class="number">0.2727368790656328</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timeit.timeit(<span class="string">'"-".join(map(str, range(100)))'</span>, number=<span class="number">10000</span>)</span><br><span class="line"><span class="number">0.23702679807320237</span></span><br></pre></td></tr></table></figure><p> 从 <a href="https://docs.python.org/zh-cn/3.8/library/timeit.html#python-interface" target="_blank" rel="noopener">Python 接口</a> 还可以传出一个可调用对象: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>timeit.timeit(<span class="keyword">lambda</span>: <span class="string">"-"</span>.join(map(str, range(<span class="number">100</span>))), number=<span class="number">10000</span>)</span><br><span class="line"><span class="number">0.19665591977536678</span></span><br></pre></td></tr></table></figure><p> 但请注意 <a href="https://docs.python.org/zh-cn/3.8/library/timeit.html#timeit.timeit" target="_blank" rel="noopener"><code>timeit()</code></a> 仅在使用命令行界面时会自动确定重复次数。 在 <a href="https://docs.python.org/zh-cn/3.8/library/timeit.html#timeit-examples" target="_blank" rel="noopener">示例</a> 一节你可以找到更多的进阶示例。 </p><h2 id="python接口"><a href="#python接口" class="headerlink" title="python接口"></a>python接口</h2><p> 该模块定义了三个便利函数和一个公共类： </p><ul><li><code>timeit.timeit</code>(<em>stmt=’pass’</em>, <em>setup=’pass’</em>, <em>timer=</em>, <em>number=1000000</em>, <em>globals=None</em>) </li><li><code>timeit.repeat</code>(<em>stmt=’pass’</em>, <em>setup=’pass’</em>, <em>timer=</em>, <em>repeat=5</em>, <em>number=1000000</em>, <em>globals=None</em>) </li><li><code>timeit.default_timer</code>() </li><li><em>class</em> <code>timeit.Timer</code>(<em>stmt=’pass’</em>, <em>setup=’pass’</em>, <em>timer=</em>, <em>globals=None</em>) <ul><li><code>timeit</code>(<em>number=1000000</em>) </li><li><code>autorange</code>(<em>callback=None</em>) </li><li><code>repeat</code>(<em>repeat=5</em>, <em>number=1000000</em>) </li><li><code>print_exc</code>(<em>file=None</em>) </li></ul></li></ul><h2 id="命令行界面"><a href="#命令行界面" class="headerlink" title="命令行界面"></a>命令行界面</h2><p> 从命令行调用程序时，使用以下表单: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m timeit [-n N] [-r N] [-u U] [-s S] [-h] [statement ...]</span><br></pre></td></tr></table></figure><p>如果了解以下选项：</p><ul><li><p><code>-n N, --number=N</code></p><p>执行 ‘语句’ 多少次</p></li><li><p><code>-r N, --repeat=N</code></p><p>重复计时器的次数（默认为5）</p></li><li><p><code>-s S, --setup=S</code></p><p>最初要执行一次的语句（默认为 <code>pass</code> ）</p></li><li><p>`-p, –process<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  测量进程时间，而不是 wallclock 时间，使用 [`time.process_time()`](https://docs.python.org/zh-cn/3.8/library/time.html#time.process_time) 而不是 [`time.perf_counter()`](https://docs.python.org/zh-cn/3.8/library/time.html#time.perf_counter) ，这是默认值*3.3 新版功能.*</span><br><span class="line"></span><br><span class="line">- `-u````, ``--unit``=U`</span><br><span class="line"></span><br><span class="line">  指定定时器输出的时间单位；可以选择 nsec，usec，msec或sec*3.5 新版功能.*</span><br><span class="line"></span><br><span class="line">- `-v````, ``--verbose</span><br></pre></td></tr></table></figure></p><p>打印原始计时结果；重复更多位数精度</p></li><li><p><code>-h```</code>, <code>--help`</code></p><p>打印一条简短的使用信息并退出</p></li></ul><p>可以通过将每一行指定为单独的语句参数来给出多行语句；通过在引号中包含参数并使用前导空格可以缩进行。多个 <a href="https://docs.python.org/zh-cn/3.8/library/timeit.html#cmdoption-timeit-s" target="_blank" rel="noopener"><code>-s</code></a> 选项的处理方式相似。</p><p>如果 <a href="https://docs.python.org/zh-cn/3.8/library/timeit.html#cmdoption-timeit-n" target="_blank" rel="noopener"><code>-n</code></a> 未给出，则通过尝试10的连续幂次来计算合适数量的循环，直到总时间至少为 0.2 秒。</p><p><a href="https://docs.python.org/zh-cn/3.8/library/timeit.html#timeit.default_timer" target="_blank" rel="noopener"><code>default_timer()</code></a> 测量可能受到在同一台机器上运行的其他程序的影响，因此在需要精确计时时最好的做法是重复几次计时并使用最佳时间。 <a href="https://docs.python.org/zh-cn/3.8/library/timeit.html#cmdoption-timeit-r" target="_blank" rel="noopener"><code>-r</code></a> 选项对此有利；在大多数情况下，默认的 5 次重复可能就足够了。 你可以使用 <a href="https://docs.python.org/zh-cn/3.8/library/time.html#time.process_time" target="_blank" rel="noopener"><code>time.process_time()</code></a> 来测量CPU时间。</p><blockquote><p>执行 pass 语句会产生一定的基线开销。这里的代码不会试图隐藏它，但你应该知道它。可以通过不带参数调用程序来测量基线开销，并且Python版本之间可能会有所不同。</p></blockquote><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p> 可以提供一个在开头只执行一次的 setup 语句： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ python -m timeit -s <span class="string">'text = "sample string"; char = "g"'</span>  <span class="string">'char in text'</span></span><br><span class="line"><span class="number">5000000</span> loops, best of <span class="number">5</span>: <span class="number">0.0877</span> usec per loop</span><br><span class="line">$ python -m timeit -s <span class="string">'text = "sample string"; char = "g"'</span>  <span class="string">'text.find(char)'</span></span><br><span class="line"><span class="number">1000000</span> loops, best of <span class="number">5</span>: <span class="number">0.342</span> usec per loop</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> timeit</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timeit.timeit(<span class="string">'char in text'</span>, setup=<span class="string">'text = "sample string"; char = "g"'</span>)</span><br><span class="line"><span class="number">0.41440500499993504</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timeit.timeit(<span class="string">'text.find(char)'</span>, setup=<span class="string">'text = "sample string"; char = "g"'</span>)</span><br><span class="line"><span class="number">1.7246671520006203</span></span><br></pre></td></tr></table></figure><p> 使用 <a href="https://docs.python.org/zh-cn/3.8/library/timeit.html#timeit.Timer" target="_blank" rel="noopener"><code>Timer</code></a> 类及其方法可以完成同样的操作: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> timeit</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = timeit.Timer(<span class="string">'char in text'</span>, setup=<span class="string">'text = "sample string"; char = "g"'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.timeit()</span><br><span class="line"><span class="number">0.3955516149999312</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.repeat()</span><br><span class="line">[<span class="number">0.40183617287970225</span>, <span class="number">0.37027556854118704</span>, <span class="number">0.38344867356679524</span>, <span class="number">0.3712595970846668</span>, <span class="number">0.37866875250654886</span>]</span><br></pre></td></tr></table></figure><p> 以下示例显示如何计算包含多行的表达式。 在这里我们对比使用 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#hasattr" target="_blank" rel="noopener"><code>hasattr()</code></a> 与 <a href="https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a>/<a href="https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#except" target="_blank" rel="noopener"><code>except</code></a> 的开销来测试缺失与提供对象属性: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ python -m timeit <span class="string">'try:'</span> <span class="string">'  str.__bool__'</span> <span class="string">'except AttributeError:'</span> <span class="string">'  pass'</span></span><br><span class="line"><span class="number">20000</span> loops, best of <span class="number">5</span>: <span class="number">15.7</span> usec per loop</span><br><span class="line">$ python -m timeit <span class="string">'if hasattr(str, "__bool__"): pass'</span></span><br><span class="line"><span class="number">50000</span> loops, best of <span class="number">5</span>: <span class="number">4.26</span> usec per loop</span><br><span class="line"></span><br><span class="line">$ python -m timeit <span class="string">'try:'</span> <span class="string">'  int.__bool__'</span> <span class="string">'except AttributeError:'</span> <span class="string">'  pass'</span></span><br><span class="line"><span class="number">200000</span> loops, best of <span class="number">5</span>: <span class="number">1.43</span> usec per loop</span><br><span class="line">$ python -m timeit <span class="string">'if hasattr(int, "__bool__"): pass'</span></span><br><span class="line"><span class="number">100000</span> loops, best of <span class="number">5</span>: <span class="number">2.23</span> usec per loop</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> timeit</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># attribute is missing</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"""\</span></span><br><span class="line"><span class="string"><span class="meta">... </span>try:</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    str.__bool__</span></span><br><span class="line"><span class="string"><span class="meta">... </span>except AttributeError:</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    pass</span></span><br><span class="line"><span class="string"><span class="meta">... </span>"""</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timeit.timeit(stmt=s, number=<span class="number">100000</span>)</span><br><span class="line"><span class="number">0.9138244460009446</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"if hasattr(str, '__bool__'): pass"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timeit.timeit(stmt=s, number=<span class="number">100000</span>)</span><br><span class="line"><span class="number">0.5829014980008651</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># attribute is present</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"""\</span></span><br><span class="line"><span class="string"><span class="meta">... </span>try:</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    int.__bool__</span></span><br><span class="line"><span class="string"><span class="meta">... </span>except AttributeError:</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    pass</span></span><br><span class="line"><span class="string"><span class="meta">... </span>"""</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timeit.timeit(stmt=s, number=<span class="number">100000</span>)</span><br><span class="line"><span class="number">0.04215312199994514</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"if hasattr(int, '__bool__'): pass"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>timeit.timeit(stmt=s, number=<span class="number">100000</span>)</span><br><span class="line"><span class="number">0.08588060699912603</span></span><br></pre></td></tr></table></figure><p> 要让 <a href="https://docs.python.org/zh-cn/3.8/library/timeit.html#module-timeit" target="_blank" rel="noopener"><code>timeit</code></a> 模块访问你定义的函数，你可以传递一个包含 import 语句的 <em>setup</em> 参数: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Stupid test function"""</span></span><br><span class="line">    L = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">import</span> timeit</span><br><span class="line">    print(timeit.timeit(<span class="string">"test()"</span>, setup=<span class="string">"from __main__ import test"</span>))</span><br></pre></td></tr></table></figure><p> 另一种选择是将 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#globals" target="_blank" rel="noopener"><code>globals()</code></a> 传递给 <em>globals</em> 参数，这将导致代码在当前的全局命名空间中执行。这比单独指定 import 更方便 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">4</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">h</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line">print(timeit.timeit(<span class="string">'[func(42) for func in (f,g,h)]'</span>, globals=globals()))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库-timeit&quot;&gt;&lt;a href=&quot;#python-标准库-timeit&quot; class=&quot;headerlink&quot; title=&quot;python 标准库 timeit&quot;&gt;&lt;/a&gt;python 标准库 timeit&lt;/h1&gt;&lt;p&gt;每日一词:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pneumonia &lt;/p&gt;
&lt;p&gt;n 肺炎&lt;/p&gt;
&lt;p&gt; 2019 Novel coronavirus    (2019-nCoV)，&lt;br&gt;  世界卫生组织定义, 又名&lt;strong&gt;武汉冠状病毒&lt;/strong&gt;（Wuhan coronavirus）、&lt;strong&gt;武汉肺炎&lt;/strong&gt;（Wuhan pneumonia） &lt;/p&gt;
&lt;p&gt; &lt;strong&gt;冠状病毒属&lt;/strong&gt;的病毒是具外套膜（envelope） &lt;/p&gt;
&lt;p&gt;例句:&lt;/p&gt;
&lt;p&gt; The doctor diagnosed the illness as pneumonia .&lt;br&gt;医生诊断这病为肺炎。 &lt;/p&gt;
&lt;p&gt; The doctor has cured her of pneumonia .&lt;br&gt;大夫把她的肺炎看好了。 &lt;/p&gt;
&lt;p&gt; Fatalities usually come from pneumonia .&lt;br&gt;通常肺炎可引起死亡。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img5.miaoshoucdn.com/2020/01/10/093040d3c8f09c598309db3381177ea2b2ec476497.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/categories/python/standard-library/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="timeit" scheme="https://pinghailinfeng.gitee.io/tags/timeit/"/>
    
  </entry>
  
  <entry>
    <title>python standard library filecmp</title>
    <link href="https://pinghailinfeng.gitee.io/2020/01/22/python-standard-library-filecmp/"/>
    <id>https://pinghailinfeng.gitee.io/2020/01/22/python-standard-library-filecmp/</id>
    <published>2020-01-22T00:07:01.000Z</published>
    <updated>2020-01-30T08:43:58.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库-filecmp"><a href="#python-标准库-filecmp" class="headerlink" title="python 标准库 filecmp"></a>python 标准库 filecmp</h1><p>每日一词:</p><blockquote><p>病毒</p><p> germs、bacteria 還是 viruses </p><h3 id="Germ-微生物"><a href="#Germ-微生物" class="headerlink" title="Germ: 微生物"></a><strong>Germ</strong>: 微生物</h3><h3 id="Bacterium-這是「細菌」的意思，它是微小且單細胞的有機體。注意喔這個字的單數是-bacterium，複數要寫作-bacteria"><a href="#Bacterium-這是「細菌」的意思，它是微小且單細胞的有機體。注意喔這個字的單數是-bacterium，複數要寫作-bacteria" class="headerlink" title="Bacterium: 這是「細菌」的意思，它是微小且單細胞的有機體。注意喔這個字的單數是 bacterium，複數要寫作 bacteria"></a><strong>Bacterium</strong>: 這是「細菌」的意思，它是微小且單細胞的有機體。注意喔這個字的單數是 bacterium，複數要寫作 bacteria</h3><h3 id="Virus-病菌"><a href="#Virus-病菌" class="headerlink" title="Virus:病菌"></a><strong>Virus</strong>:病菌</h3><p> 茲卡病毒（Zika virus）、諾羅病毒（Norovirus）、愛滋病毒（Human Immunodeficiency Virus，縮寫即是 HIV）、輪狀病毒（Rotavirus）等。 </p></blockquote><p><img src="http://a1.att.hudong.com/20/29/01300000333999124281293520625.jpg" alt></p><a id="more"></a><p>继续学习关于文件操作的模块 filecmp</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p> <strong>源代码:</strong> <a href="https://github.com/python/cpython/tree/3.8/Lib/filecmp.py" target="_blank" rel="noopener">Lib/filecmp.py</a> </p><p> <a href="https://docs.python.org/zh-cn/3.8/library/filecmp.html#module-filecmp" target="_blank" rel="noopener"><code>filecmp</code></a> 模块定义了用于比较文件及目录的函数，并且可以选取多种关于时间和准确性的折衷方案。对于文件的比较，另见 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#module-difflib" target="_blank" rel="noopener"><code>difflib</code></a> 模块。 </p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p> <a href="https://docs.python.org/zh-cn/3.8/library/filecmp.html#module-filecmp" target="_blank" rel="noopener"><code>filecmp</code></a> 模块定义了如下函数： </p><ul><li><code>filecmp.`</code>cmp`(<em>f1</em>, <em>f2</em>, <em>shallow=True</em>) </li><li><code>filecmp.`</code>cmpfiles`(<em>dir1</em>, <em>dir2</em>, <em>common</em>, <em>shallow=True</em>) </li><li><code>filecmp.`</code>clear_cache`() </li></ul><h2 id="dircmp-类"><a href="#dircmp-类" class="headerlink" title="dircmp 类"></a><a href="https://docs.python.org/zh-cn/3.8/library/filecmp.html#filecmp.dircmp" target="_blank" rel="noopener"><code>dircmp</code></a> 类</h2><p> <em>class</em> <code>filecmp.`</code>dircmp`(<em>a</em>, <em>b</em>, <em>ignore=None</em>, <em>hide=None</em>) </p><p>创建一个用于比较目录 <em>a</em> 和 <em>b</em> 的新的目录比较对象。 <em>ignore</em> 是需要忽略的文件名列表，且默认为 <a href="https://docs.python.org/zh-cn/3.8/library/filecmp.html#filecmp.DEFAULT_IGNORES" target="_blank" rel="noopener"><code>filecmp.DEFAULT_IGNORES</code></a> 。 <em>hide</em> 是需要隐藏的文件名列表，且默认为 <code>[os.curdir, os.pardir]</code> 。</p><p><a href="https://docs.python.org/zh-cn/3.8/library/filecmp.html#filecmp.dircmp" target="_blank" rel="noopener"><code>dircmp</code></a> 类如 <a href="https://docs.python.org/zh-cn/3.8/library/filecmp.html#filecmp.cmp" target="_blank" rel="noopener"><code>filecmp.cmp()</code></a> 中所描述的那样对文件进行 <em>shallow</em> 比较。</p><p><a href="https://docs.python.org/zh-cn/3.8/library/filecmp.html#filecmp.dircmp" target="_blank" rel="noopener"><code>dircmp</code></a> 类提供以下方法：</p><ul><li><p><code>report</code>()</p><p>将 <em>a</em> 与 <em>b</em> 之间的比较打印（到 <a href="https://docs.python.org/zh-cn/3.8/library/sys.html#sys.stdout" target="_blank" rel="noopener"><code>sys.stdout</code></a> ）。</p></li><li><p><code>report_partial_closure</code>()</p><p>打印 <em>a</em> 与 <em>b</em> 及共同直接子目录的比较结果。</p></li><li><p><code>report_full_closure</code>()</p><p>打印 <em>a</em> 与 <em>b</em> 及共同子目录比较结果（递归地）。</p></li></ul><p><a href="https://docs.python.org/zh-cn/3.8/library/filecmp.html#filecmp.dircmp" target="_blank" rel="noopener"><code>dircmp</code></a> 类提供了一些有趣的属性，用以得到关于参与比较的目录树的各种信息。</p><p>需要注意，通过 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__getattr__" target="_blank" rel="noopener"><code>__getattr__()</code></a> 钩子，所有的属性将会惰性求值，因此如果只使用那些计算简便的属性，将不会有速度损失。</p><ul><li><p><code>left</code></p><p>目录 <em>a</em> 。</p></li><li><p><code>right</code></p><p>目录 <em>b</em> 。</p></li><li><p><code>left_list</code></p><p>经 <em>hide</em> 和 <em>ignore</em> 过滤，目录 <em>a</em> 中的文件与子目录。</p></li><li><p><code>right_list</code></p><p>经 <em>hide</em> 和 <em>ignore</em> 过滤，目录 <em>b</em> 中的文件与子目录。</p></li><li><p><code>common</code></p><p>同时存在于目录 <em>a</em> 和 <em>b</em> 中的文件和子目录。</p></li><li><p><code>left_only</code></p><p>仅在目录 <em>a</em> 中的文件和子目录。</p></li><li><p><code>right_only</code></p><p>仅在目录 <em>b</em> 中的文件和子目录。</p></li><li><p><code>common_dirs</code></p><p>同时存在于目录 <em>a</em> 和 <em>b</em> 中的子目录。</p></li><li><p><code>common_files</code></p><p>同时存在于目录 <em>a</em> 和 <em>b</em> 中的文件。</p></li><li><p><code>common_funny</code></p><p>在目录 <em>a</em> 和 <em>b</em> 中类型不同的名字，或者那些 <a href="https://docs.python.org/zh-cn/3.8/library/os.html#os.stat" target="_blank" rel="noopener"><code>os.stat()</code></a> 报告错误的名字。</p></li><li><p><code>same_files</code></p><p>在目录 <em>a</em> 和 <em>b</em> 中使用类的文件比较操作符相等的文件。</p></li><li><p><code>diff_files</code></p><p>在目录 <em>a</em> 和 <em>b</em> 中，根据类的文件比较操作符判定内容不等的文件。</p></li><li><p><code>funny_files</code></p><p>在目录 <em>a</em> 和 <em>b</em> 中无法比较的文件。</p></li><li><p><code>subdirs</code></p><p>一个将 <a href="https://docs.python.org/zh-cn/3.8/library/filecmp.html#filecmp.dircmp.common_dirs" target="_blank" rel="noopener"><code>common_dirs</code></a> 中名称映射为 <a href="https://docs.python.org/zh-cn/3.8/library/filecmp.html#filecmp.dircmp" target="_blank" rel="noopener"><code>dircmp</code></a> 对象的字典。</p></li></ul><p><code>filecmp.`</code>DEFAULT_IGNORES` </p><p>下面是一个简单的例子，使用 <code>subdirs</code> 属性递归搜索两个目录以显示公共差异文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> filecmp <span class="keyword">import</span> dircmp</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">print_diff_files</span><span class="params">(dcmp)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> name <span class="keyword">in</span> dcmp.diff_files:</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">"diff_file %s found in %s and %s"</span> % (name, dcmp.left,</span><br><span class="line"><span class="meta">... </span>              dcmp.right))</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> sub_dcmp <span class="keyword">in</span> dcmp.subdirs.values():</span><br><span class="line"><span class="meta">... </span>        print_diff_files(sub_dcmp)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dcmp = dircmp(<span class="string">'dir1'</span>, <span class="string">'dir2'</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print_diff_files(dcmp)</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> os,sys</span><br><span class="line"><span class="keyword">import</span> filecmp</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    校验源与备份目录的差异</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"> </span><br><span class="line">holderlist = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compareme</span><span class="params">(dir1,dir2)</span>:</span>    <span class="comment">#递归获取更新项函数</span></span><br><span class="line">    dircomp = filecmp.dircmp(dir1,dir2)</span><br><span class="line">    only_in_one = dircomp.left_only      <span class="comment">#源目录新文件或目录 </span></span><br><span class="line">    diff_in_one = dircomp.diff_files     <span class="comment">#不匹配文件，源目录文件已发生变化</span></span><br><span class="line">    dirpath = os.path.abspath(dir1)      <span class="comment">#定义源目录绝对路径</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#将更新文件或目录追加到holderlist</span></span><br><span class="line">    [ holderlist.append(os.path.abspath(os.path.join(dir1,x))) <span class="keyword">for</span> x <span class="keyword">in</span> only_in_one ]</span><br><span class="line">    [ holderlist.append(os.path.abspath(os.path.join(dir1,x))) <span class="keyword">for</span> x <span class="keyword">in</span> diff_in_one ]</span><br><span class="line">    <span class="keyword">if</span> len(dircomp.common_dirs) &gt; <span class="number">0</span>:  <span class="comment">#判断是否存在相同子目录，以便递归</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> dircomp.common_dirs:   <span class="comment">#递归子目录</span></span><br><span class="line">            compareme(os.path.abspath(os.path.join(dir1,item)),os.path.abspath(os.path.join(dir2,item)))</span><br><span class="line">    <span class="keyword">return</span> holderlist</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">2</span>:    <span class="comment">#输入源目录与备份目录</span></span><br><span class="line">        dir1 = sys.argv[<span class="number">1</span>]</span><br><span class="line">        dir2 = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        print(<span class="string">'Usage:'</span>,sys.argv[<span class="number">0</span>],<span class="string">'datadir backdir'</span>)</span><br><span class="line">        sys.exit()</span><br><span class="line">    source_files = compareme(dir1,dir2)    <span class="comment">#对比源目录与备份目录</span></span><br><span class="line">    dir1 = os.path.abspath(dir1)    <span class="comment">#取绝对路径后，后面不会自动加上'/'</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> dir2.endswith(<span class="string">'/'</span>):</span><br><span class="line">        dir2 = dir2+<span class="string">'/'</span>            <span class="comment">#备份目录路径加'/'</span></span><br><span class="line">    </span><br><span class="line">    dir2 = os.path.abspath(dir2)</span><br><span class="line">    destination_files = []</span><br><span class="line">    createdir_bool = <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> source_files:     <span class="comment">#遍历返回的差异文件或目录清单</span></span><br><span class="line">        destination_dir = re.sub(dir1,dir2,item)    <span class="comment">#将源目录差异路径清单对应替换成备份目录,即需要在dir2中创建的差异目录和文件</span></span><br><span class="line">        destination_files.append(destination_dir)</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(item):      <span class="comment">#如果差异路径为目录且不存在，则在备份目录中创建</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(destination_dir):</span><br><span class="line">                os.makedirs(destination_dir)</span><br><span class="line">                createdir_bool = <span class="literal">True</span>   <span class="comment">#再次调用copareme函数标记</span></span><br><span class="line">    <span class="keyword">if</span> createdir_bool :       <span class="comment">#重新调用compareme函数，重新遍历新创建目录的内容</span></span><br><span class="line">        destination_files = []</span><br><span class="line">        source_files = []</span><br><span class="line">        source_files = compareme(dir1,dir2)    <span class="comment">#调用compareme函数</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> source_files:           <span class="comment">#获取源目录差异路径清单，对应替换成备份目录</span></span><br><span class="line">            destination_dir = re.sub(dir1,dir2,item)</span><br><span class="line">            destination_files.append(destination_dir)</span><br><span class="line">            </span><br><span class="line">    print(<span class="string">'update item:'</span>)</span><br><span class="line">    print(source_files)     <span class="comment">#输出更新项列表清单</span></span><br><span class="line">    copy_pair = zip(source_files,destination_files)  <span class="comment">#将源目录与备份目录文件清单拆分成元组</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> copy_pair:</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(item[<span class="number">0</span>]):        <span class="comment">#判断是否为文件，是则进行复制操作</span></span><br><span class="line">            shutil.copyfile(item[<span class="number">0</span>],item[<span class="number">1</span>])</span><br><span class="line">            </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span> :</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库-filecmp&quot;&gt;&lt;a href=&quot;#python-标准库-filecmp&quot; class=&quot;headerlink&quot; title=&quot;python 标准库 filecmp&quot;&gt;&lt;/a&gt;python 标准库 filecmp&lt;/h1&gt;&lt;p&gt;每日一词:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;病毒&lt;/p&gt;
&lt;p&gt; germs、bacteria 還是 viruses &lt;/p&gt;
&lt;h3 id=&quot;Germ-微生物&quot;&gt;&lt;a href=&quot;#Germ-微生物&quot; class=&quot;headerlink&quot; title=&quot;Germ: 微生物&quot;&gt;&lt;/a&gt;&lt;strong&gt;Germ&lt;/strong&gt;: 微生物&lt;/h3&gt;&lt;h3 id=&quot;Bacterium-這是「細菌」的意思，它是微小且單細胞的有機體。注意喔這個字的單數是-bacterium，複數要寫作-bacteria&quot;&gt;&lt;a href=&quot;#Bacterium-這是「細菌」的意思，它是微小且單細胞的有機體。注意喔這個字的單數是-bacterium，複數要寫作-bacteria&quot; class=&quot;headerlink&quot; title=&quot;Bacterium: 這是「細菌」的意思，它是微小且單細胞的有機體。注意喔這個字的單數是 bacterium，複數要寫作 bacteria&quot;&gt;&lt;/a&gt;&lt;strong&gt;Bacterium&lt;/strong&gt;: 這是「細菌」的意思，它是微小且單細胞的有機體。注意喔這個字的單數是 bacterium，複數要寫作 bacteria&lt;/h3&gt;&lt;h3 id=&quot;Virus-病菌&quot;&gt;&lt;a href=&quot;#Virus-病菌&quot; class=&quot;headerlink&quot; title=&quot;Virus:病菌&quot;&gt;&lt;/a&gt;&lt;strong&gt;Virus&lt;/strong&gt;:病菌&lt;/h3&gt;&lt;p&gt; 茲卡病毒（Zika virus）、諾羅病毒（Norovirus）、愛滋病毒（Human Immunodeficiency Virus，縮寫即是 HIV）、輪狀病毒（Rotavirus）等。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://a1.att.hudong.com/20/29/01300000333999124281293520625.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/categories/python/standard-library/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="filecmp" scheme="https://pinghailinfeng.gitee.io/tags/filecmp/"/>
    
  </entry>
  
  <entry>
    <title>python standard library difflib</title>
    <link href="https://pinghailinfeng.gitee.io/2020/01/21/python-standard-library-difflib/"/>
    <id>https://pinghailinfeng.gitee.io/2020/01/21/python-standard-library-difflib/</id>
    <published>2020-01-21T01:17:59.000Z</published>
    <updated>2020-01-21T02:10:05.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库学习-difflib"><a href="#python-标准库学习-difflib" class="headerlink" title="python 标准库学习  difflib"></a>python 标准库学习  difflib</h1><p>每日一词:</p><blockquote><p>wink </p><p>US[wɪŋk]  UK[wɪŋk]</p><p>n.眼色；眨一只眼；眨眼示意</p><p>v.闪烁；眨眼示意（尤指使眼色或表示开玩笑）；明灭</p><p>网络瞬间；眨眼睛；你眨了眨眼</p><p>推荐一个电影：</p><p>记忆碎片👴</p><p>又是诺兰的大作,强烈推荐</p><p>推荐指数： 🌟🌟🌟🌟🌟</p></blockquote><p><img src="https://pic2.zhimg.com/2af9e3d253beebcab32903659da092d7_r.jpg" alt></p><a id="more"></a><p>马上就要过年了,尽量少去人流密集场所吧。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p><strong>源代码:</strong> <a href="https://github.com/python/cpython/tree/3.8/Lib/difflib.py" target="_blank" rel="noopener">Lib/difflib.py</a></p><p>此模块提供用于比较序列的类和函数。 例如，它可以用于比较文件，并可以产生各种格式的不同信息，包括 HTML 和上下文以及统一格式的差异点。 有关目录和文件的比较，请参见 <a href="https://docs.python.org/zh-cn/3.8/library/filecmp.html#module-filecmp" target="_blank" rel="noopener"><code>filecmp</code></a> 模块。</p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p><em>class</em> <code>difflib.SequenceMatcher</code></p><p>这是一个灵活的类，可用于比较任何类型的序列对，只要序列元素为 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-hashable" target="_blank" rel="noopener">hashable</a> 对象。 其基本算法要早于由 Ratcliff 和 Obershelp 于 1980 年代末期发表并以“格式塔模式匹配”的夸张名称命名的算法，并且更加有趣一些。 其思路是找到不包含“垃圾”元素的最长连续匹配子序列；所谓“垃圾”元素是指其在某种意义上没有价值，例如空白行或空白符。 （处理垃圾元素是对 Ratcliff 和 Obershelp 算法的一个扩展。） 然后同样的思路将递归地应用于匹配序列的左右序列片段。 这并不能产生最小编辑序列，但确实能产生在人们看来“正确”的匹配。</p><p><strong>耗时:</strong> 基本 Ratcliff-Obershelp 算法在最坏情况下为立方时间而在一般情况下为平方时间。 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.SequenceMatcher" target="_blank" rel="noopener"><code>SequenceMatcher</code></a> 在最坏情况下为平方时间而在一般情况下的行为受到序列中有多少相同元素这一因素的微妙影响；在最佳情况下则为线性时间。</p><p><strong>自动垃圾启发式计算:</strong> <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.SequenceMatcher" target="_blank" rel="noopener"><code>SequenceMatcher</code></a> 支持使用启发式计算来自动将特定序列项视为垃圾。 这种启发式计算会统计每个单独项在序列中出现的次数。 如果某一项（在第一项之后）的重复次数超过序列长度的 1% 并且序列长度至少有 200 项，该项会被标记为“热门”并被视为序列匹配中的垃圾。 这种启发式计算可以通过在创建 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.SequenceMatcher" target="_blank" rel="noopener"><code>SequenceMatcher</code></a> 时将 <code>autojunk</code> 参数设为 <code>False</code> 来关闭。</p><p><em>class</em> <code>difflib.Differ</code></p><p>这个类的作用是比较由文本行组成的序列，并产生可供人阅读的差异或增量信息。 Differ 统一使用 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.SequenceMatcher" target="_blank" rel="noopener"><code>SequenceMatcher</code></a> 来完成行序列的比较以及相似（接近匹配）行内部字符序列的比较。</p><p><a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.Differ" target="_blank" rel="noopener"><code>Differ</code></a> 增量的每一行均以双字母代码打头：</p><table><thead><tr><th>双字母代码</th><th>意义</th></tr></thead><tbody><tr><td><code>&#39;- &#39;</code></td><td>行为序列 1 所独有</td></tr><tr><td><code>&#39;+ &#39;</code></td><td>行为序列 2 所独有</td></tr><tr><td><code>&#39;  &#39;</code></td><td>行在两序列中相同</td></tr><tr><td><code>&#39;? &#39;</code></td><td>行不存在于任一输入序列</td></tr></tbody></table><p>以 ‘<code>?</code>‘ 打头的行尝试将视线引至行以外而不存在于任一输入序列的差异。 如果序列包含制表符则这些行可能会令人感到迷惑。</p><p><em>class</em> <code>difflib.HtmlDiff</code></p><p>这个类可用于创建 HTML 表格（或包含表格的完整 HTML 文件）以并排地逐行显示文本比较，行间与行外的更改将突出显示。 此表格可以基于完全或上下文差异模式来生成。</p><p>这个类的构造函数：</p><ul><li><p><code>__init__</code>(<em>tabsize=8</em>, <em>wrapcolumn=None</em>, <em>linejunk=None</em>, <em>charjunk=IS_CHARACTER_JUNK</em>)</p><p>初始化 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.HtmlDiff" target="_blank" rel="noopener"><code>HtmlDiff</code></a> 的实例。</p><p><em>tabsize</em> 是一个可选关键字参数，指定制表位的间隔，默认值为 <code>8</code>。</p><p><em>wrapcolumn</em> 是一个可选关键字参数，指定行文本自动打断并换行的列位置，默认值为 <code>None</code> 表示不自动换行。</p><p><em>linejunk</em> 和 <em>charjunk</em> 均是可选关键字参数，会传入 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.ndiff" target="_blank" rel="noopener"><code>ndiff()</code></a> (被 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.HtmlDiff" target="_blank" rel="noopener"><code>HtmlDiff</code></a> 用来生成并排显示的 HTML 差异)。 请参阅 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.ndiff" target="_blank" rel="noopener"><code>ndiff()</code></a> 文档了解参数默认值及其说明。</p></li><li><p><code>make_file</code>(<em>fromlines</em>, <em>tolines</em>, <em>fromdesc=’’</em>, <em>todesc=’’</em>, <em>context=False</em>, <em>numlines=5</em>, <em>**, </em>charset=’utf-8’*)</p><p>比较 <em>fromlines</em> 和 <em>tolines</em> (字符串列表) 并返回一个字符串，表示一个完整 HTML 文件，其中包含各行差异的表格，行间与行外的更改将突出显示。</p><p><em>fromdesc</em> 和 <em>todesc</em> 均是可选关键字参数，指定来源/目标文件的列标题字符串（默认均为空白字符串）。</p><p><em>context</em> 和 <em>numlines</em> 均是可选关键字参数。 当只要显示上下文差异时就将 <em>context</em> 设为 <code>True</code>，否则默认值 <code>False</code> 为显示完整文件。 <em>numlines</em> 默认为 <code>5</code>。 当 <em>context</em> 为 <code>True</code> 时 <em>numlines</em> 将控制围绕突出显示差异部分的上下文行数。 当 <em>context</em> 为 <code>False</code> 时 <em>numlines</em> 将控制在使用 “next” 超链接时突出显示差异部分之前所显示的行数（设为零则会导致 “next” 超链接将下一个突出显示差异部分放在浏览器顶端，不添加任何前导上下文）。</p><blockquote><p><em>fromdesc</em> 和 <em>todesc</em> 会被当作未转义的 HTML 来解读，当接收不可信来源的输入时应该适当地进行转义。</p></blockquote></li><li><p><code>make_table</code>(<em>fromlines</em>, <em>tolines</em>, <em>fromdesc=’’</em>, <em>todesc=’’</em>, <em>context=False</em>, <em>numlines=5</em>)</p><p>比较 <em>fromlines</em> 和 <em>tolines</em> (字符串列表) 并返回一个字符串，表示一个包含各行差异的完整 HTML 表格，行间与行外的更改将突出显示。</p><p>此方法的参数与 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.HtmlDiff.make_file" target="_blank" rel="noopener"><code>make_file()</code></a> 方法的相同。</p><p><code>Tools/scripts/diff.py</code> 是这个类的命令行前端，其中包含一个很好的使用示例。</p></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><code>difflib.context_diff</code>(<em>a</em>, <em>b</em>, <em>fromfile=’’</em>, <em>tofile=’’</em>, <em>fromfiledate=’’</em>, <em>tofiledate=’’</em>, <em>n=3</em>, <em>lineterm=’\n’</em>)</p><p>比较 <em>a</em> 和 <em>b</em> (字符串列表)；返回上下文差异格式的增量信息 (一个产生增量行的 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-generator" target="_blank" rel="noopener">generator</a>)。</p><p>所谓上下文差异是一种只显示有更改的行再加几个上下文行的紧凑形式。 更改被显示为之前/之后的样式。 上下文行数由 <em>n</em> 设定，默认为三行。</p><p>默认情况下，差异控制行（以 <code>***</code> or <code>---</code> 表示）是通过末尾换行符来创建的。 这样做的好处是从 <a href="https://docs.python.org/zh-cn/3.8/library/io.html#io.IOBase.readlines" target="_blank" rel="noopener"><code>io.IOBase.readlines()</code></a> 创建的输入将得到适用于 <a href="https://docs.python.org/zh-cn/3.8/library/io.html#io.IOBase.writelines" target="_blank" rel="noopener"><code>io.IOBase.writelines()</code></a> 的差异信息，因为输入和输出都带有末尾换行符。</p><p>对于没有末尾换行符的输入，应将 <em>lineterm</em> 参数设为 <code>&quot;&quot;</code>，这样输出内容将统一不带换行符。</p><p>上下文差异格式通常带有一个记录文件名和修改时间的标头。 这些信息的部分或全部可以使用字符串 <em>fromfile</em>, <em>tofile</em>, <em>fromfiledate</em> 和 <em>tofiledate</em> 来指定。 修改时间通常以 ISO 8601 格式表示。 如果未指定，这些字符串默认为空。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = [<span class="string">'bacon\n'</span>, <span class="string">'eggs\n'</span>, <span class="string">'ham\n'</span>, <span class="string">'guido\n'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = [<span class="string">'python\n'</span>, <span class="string">'eggy\n'</span>, <span class="string">'hamster\n'</span>, <span class="string">'guido\n'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.stdout.writelines(context_diff(s1, s2, fromfile=<span class="string">'before.py'</span>,tofile=<span class="string">'after.py'</span>))</span><br><span class="line">*** before.py</span><br><span class="line">--- after.py</span><br><span class="line">***************</span><br><span class="line">*** <span class="number">1</span>,<span class="number">4</span> ****</span><br><span class="line">! bacon</span><br><span class="line">! eggs</span><br><span class="line">! ham</span><br><span class="line">  guido</span><br><span class="line">--- <span class="number">1</span>,<span class="number">4</span> ----</span><br><span class="line">! python</span><br><span class="line">! eggy</span><br><span class="line">! hamster</span><br><span class="line">  guido</span><br></pre></td></tr></table></figure><p><code>difflib.get_close_matches</code>(<em>word</em>, <em>possibilities</em>, <em>n=3</em>, <em>cutoff=0.6</em>)</p><p>返回由最佳“近似”匹配构成的列表。 <em>word</em> 为一个指定目标近似匹配的序列（通常为字符串），<em>possibilities</em> 为一个由用于匹配 <em>word</em> 的序列构成的列表（通常为字符串列表）。</p><p>可选参数 <em>n</em> (默认为 <code>3</code>) 指定最多返回多少个近似匹配； <em>n</em> 必须大于 <code>0</code>.</p><p>可选参数 <em>cutoff</em> (默认为 <code>0.6</code>) 是一个 [0, 1] 范围内的浮点数。 与 <em>word</em> 相似度得分未达到该值的候选匹配将被忽略。</p><p>候选匹配中（不超过 <em>n</em> 个）的最佳匹配将以列表形式返回，按相似度得分排序，最相似的排在最前面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_close_matches(<span class="string">'appel'</span>, [<span class="string">'ape'</span>, <span class="string">'apple'</span>, <span class="string">'peach'</span>, <span class="string">'puppy'</span>])</span><br><span class="line">[<span class="string">'apple'</span>, <span class="string">'ape'</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> keyword</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_close_matches(<span class="string">'wheel'</span>, keyword.kwlist)</span><br><span class="line">[<span class="string">'while'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_close_matches(<span class="string">'pineapple'</span>, keyword.kwlist)</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_close_matches(<span class="string">'accept'</span>, keyword.kwlist)</span><br><span class="line">[<span class="string">'except'</span>]</span><br></pre></td></tr></table></figure><p><code>difflib.ndiff</code>(<em>a</em>, <em>b</em>, <em>linejunk=None</em>, <em>charjunk=IS_CHARACTER_JUNK</em>)</p><p>比较 <em>a</em> 和 <em>b</em> (字符串列表)；返回 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.Differ" target="_blank" rel="noopener"><code>Differ</code></a> 形式的增量信息 (一个产生增量行的 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-generator" target="_blank" rel="noopener">generator</a>)。</p><p>可选关键字形参 <em>linejunk</em> 和 <em>charjunk</em> 均为过滤函数 (或为 <code>None</code>)：</p><p><em>linejunk</em>: 此函数接受单个字符串参数，如果其为垃圾字符串则返回真值，否则返回假值。 默认为 <code>None</code>。 此外还有一个模块层级的函数 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.IS_LINE_JUNK" target="_blank" rel="noopener"><code>IS_LINE_JUNK()</code></a>，它会过滤掉没有可见字符的行，除非该行添加了至多一个井号符 (<code>&#39;#&#39;</code>) – 但是下层的 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.SequenceMatcher" target="_blank" rel="noopener"><code>SequenceMatcher</code></a> 类会动态分析哪些行的重复频繁到足以形成噪音，这通常会比使用此函数的效果更好。</p><p><em>charjunk</em>: 此函数接受一个字符（长度为 1 的字符串)，如果其为垃圾字符则返回真值，否则返回假值。 默认为模块层级的函数 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.IS_CHARACTER_JUNK" target="_blank" rel="noopener"><code>IS_CHARACTER_JUNK()</code></a>，它会过滤掉空白字符（空格符或制表符；但包含换行符可不是个好主意！）。</p><p><code>Tools/scripts/ndiff.py</code> 是这个函数的命令行前端。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>diff = ndiff(<span class="string">'one\ntwo\nthree\n'</span>.splitlines(keepends=<span class="literal">True</span>),</span><br><span class="line"><span class="meta">... </span>            <span class="string">'ore\ntree\nemu\n'</span>.splitlines(keepends=<span class="literal">True</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">''</span>.join(diff), end=<span class="string">""</span>)</span><br><span class="line">- one</span><br><span class="line">?  ^</span><br><span class="line">+ ore</span><br><span class="line">?  ^</span><br><span class="line">- two</span><br><span class="line">- three</span><br><span class="line">?  -</span><br><span class="line">+ tree</span><br><span class="line">+ emu</span><br></pre></td></tr></table></figure><p><code>difflib.restore</code>(<em>sequence</em>, <em>which</em>)</p><p>返回两个序列中产生增量的那一个。</p><p>给出一个由 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.Differ.compare" target="_blank" rel="noopener"><code>Differ.compare()</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.ndiff" target="_blank" rel="noopener"><code>ndiff()</code></a> 产生的 <em>序列</em>，提取出来自文件 1 或 2 (<em>which</em> 形参) 的行，去除行前缀。</p><p>示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>diff = ndiff(<span class="string">'one\ntwo\nthree\n'</span>.splitlines(keepends=<span class="literal">True</span>),</span><br><span class="line"><span class="meta">... </span>            <span class="string">'ore\ntree\nemu\n'</span>.splitlines(keepends=<span class="literal">True</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>diff = list(diff) <span class="comment"># materialize the generated delta into a list</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">''</span>.join(restore(diff, <span class="number">1</span>)), end=<span class="string">""</span>)</span><br><span class="line">one</span><br><span class="line">two</span><br><span class="line">three</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">''</span>.join(restore(diff, <span class="number">2</span>)), end=<span class="string">""</span>)</span><br><span class="line">ore</span><br><span class="line">tree</span><br><span class="line">emu</span><br></pre></td></tr></table></figure><p><code>difflib.unified_diff</code>(<em>a</em>, <em>b</em>, <em>fromfile=’’</em>, <em>tofile=’’</em>, <em>fromfiledate=’’</em>, <em>tofiledate=’’</em>, <em>n=3</em>, <em>lineterm=’\n’</em>)</p><p>比较 <em>a</em> 和 <em>b</em> (字符串列表)；返回统一差异格式的增量信息 (一个产生增量行的 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-generator" target="_blank" rel="noopener">generator</a>)。</p><p>所以统一差异是一种只显示有更改的行再加几个上下文行的紧凑形式。 更改被显示为内联的样式（而不是分开的之前/之后文本块）。 上下文行数由 <em>n</em> 设定，默认为三行。</p><p>默认情况下，差异控制行 (以 <code>---</code>, <code>+++</code> 或 <code>@@</code> 表示) 是通过末尾换行符来创建的。 这样做的好处是从 <a href="https://docs.python.org/zh-cn/3.8/library/io.html#io.IOBase.readlines" target="_blank" rel="noopener"><code>io.IOBase.readlines()</code></a> 创建的输入将得到适用于 <a href="https://docs.python.org/zh-cn/3.8/library/io.html#io.IOBase.writelines" target="_blank" rel="noopener"><code>io.IOBase.writelines()</code></a> 的差异信息，因为输入和输出都带有末尾换行符。</p><p>对于没有末尾换行符的输入，应将 <em>lineterm</em> 参数设为 <code>&quot;&quot;</code>，这样输出内容将统一不带换行符。</p><p>上下文差异格式通常带有一个记录文件名和修改时间的标头。 这些信息的部分或全部可以使用字符串 <em>fromfile</em>, <em>tofile</em>, <em>fromfiledate</em> 和 <em>tofiledate</em> 来指定。 修改时间通常以 ISO 8601 格式表示。 如果未指定，这些字符串默认为空。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = [<span class="string">'bacon\n'</span>, <span class="string">'eggs\n'</span>, <span class="string">'ham\n'</span>, <span class="string">'guido\n'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = [<span class="string">'python\n'</span>, <span class="string">'eggy\n'</span>, <span class="string">'hamster\n'</span>, <span class="string">'guido\n'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.stdout.writelines(unified_diff(s1, s2, fromfile=<span class="string">'before.py'</span>,tofile=<span class="string">'after.py'</span>))</span><br><span class="line">--- before.py</span><br><span class="line">+++ after.py</span><br><span class="line"><span class="meta">@@ -1,4 +1,4 @@</span></span><br><span class="line">-bacon</span><br><span class="line">-eggs</span><br><span class="line">-ham</span><br><span class="line">+python</span><br><span class="line">+eggy</span><br><span class="line">+hamster</span><br><span class="line"> guido</span><br></pre></td></tr></table></figure><p><code>difflib.diff_bytes</code>(<em>dfunc</em>, <em>a</em>, <em>b</em>, <em>fromfile=b’’</em>, <em>tofile=b’’</em>, <em>fromfiledate=b’’</em>, <em>tofiledate=b’’</em>, <em>n=3</em>, <em>lineterm=b’\n’</em>)</p><p>使用 <em>dfunc</em> 比较 <em>a</em> 和 <em>b</em> (字节串对象列表)；产生以 <em>dfunc</em> 所返回格式表示的差异行列表（也是字节串）。 <em>dfunc</em> 必须是可调用对象，通常为 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.unified_diff" target="_blank" rel="noopener"><code>unified_diff()</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.context_diff" target="_blank" rel="noopener"><code>context_diff()</code></a>。</p><p>允许你比较编码未知或不一致的数据。 除 <em>n</em> 之外的所有输入都必须为字节串对象而非字符串。 作用方式为无损地将所有输入 (除 <em>n</em> 之外) 转换为字符串，并调用 <code>dfunc(a, b, fromfile, tofile, fromfiledate, tofiledate, n, lineterm)</code>。 <em>dfunc</em> 的输出会被随即转换回字节串，这样你所得到的增量行将具有与 <em>a</em> 和 <em>b</em> 相同的未知/不一致编码。</p><p><code>difflib.IS_LINE_JUNK</code>(<em>line</em>)</p><p>对于可忽略的行返回 <code>True</code>。 如果 <em>line</em> 为空行或只包含单个 <code>&#39;#&#39;</code> 则 <em>line</em> 行就是可忽略的，否则就是不可忽略的。 此函数被用作较旧版本 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.ndiff" target="_blank" rel="noopener"><code>ndiff()</code></a> 中 <em>linejunk</em> 形参的默认值。    </p><p><code>difflib.IS_CHARACTER_JUNK</code></p><p>对于可忽略的字符返回 <code>True</code>。 字符 <em>ch</em> 如果为空格符或制表符则 <em>ch</em> 就是可忽略的，否则就是不可忽略的。 此函数被用作 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.ndiff" target="_blank" rel="noopener"><code>ndiff()</code></a> 中 <em>charjunk</em> 形参的默认值。</p><h2 id="SequenceMatcher-对象"><a href="#SequenceMatcher-对象" class="headerlink" title="SequenceMatcher 对象"></a>SequenceMatcher 对象</h2><p><a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.SequenceMatcher" target="_blank" rel="noopener"><code>SequenceMatcher</code></a> 类具有这样的构造器：</p><p><em>class</em> <code>difflib.SequenceMatcher</code>(<em>isjunk=None</em>, <em>a=’’</em>, <em>b=’’</em>, <em>autojunk=True</em>)</p><p>可选参数 <em>isjunk</em> 必须为 <code>None</code> (默认值) 或为接受一个序列元素并当且仅当其为应忽略的“垃圾”元素时返回真值的单参数函数。 传入 <code>None</code> 作为 <em>isjunk</em> 的值就相当于传入 <code>lambda x: False</code>；也就是说不忽略任何值。 例如，传入:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> x: x <span class="keyword">in</span> <span class="string">" \t"</span></span><br></pre></td></tr></table></figure><p>如果你以字符序列的形式对行进行比较，并且不希望区分空格符或硬制表符。</p><p>可选参数 <em>a</em> 和 <em>b</em> 为要比较的序列；两者默认为空字符串。 两个序列的元素都必须为 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-hashable" target="_blank" rel="noopener">hashable</a>。</p><p>可选参数 <em>autojunk</em> 可用于启用自动垃圾启发式计算。</p><p>SequenceMatcher 对象接受三个数据属性: <em>bjunk</em> 是 <em>b</em> 当中 <em>isjunk</em> 为 <code>True</code> 的元素集合；<em>bpopular</em> 是被启发式计算（如果其未被禁用）视为热门候选的非垃圾元素集合；<em>b2j</em> 是将 <em>b</em> 当中剩余元素映射到一个它们出现位置列表的字典。 所有三个数据属性将在 <em>b</em> 通过 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.SequenceMatcher.set_seqs" target="_blank" rel="noopener"><code>set_seqs()</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.SequenceMatcher.set_seq2" target="_blank" rel="noopener"><code>set_seq2()</code></a> 重置时被重置。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li><code>set_seqs</code>(<em>a</em>, <em>b</em>)</li></ul><p>设置要比较的两个序列。</p><p><a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.SequenceMatcher" target="_blank" rel="noopener"><code>SequenceMatcher</code></a> 计算并缓存有关第二个序列的详细信息，这样如果你想要将一个序列与多个序列进行比较，可使用 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.SequenceMatcher.set_seq2" target="_blank" rel="noopener"><code>set_seq2()</code></a> 一次性地设置该常用序列并重复地对每个其他序列各调用一次 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.SequenceMatcher.set_seq1" target="_blank" rel="noopener"><code>set_seq1()</code></a>。</p><ul><li><p><code>set_seq1</code>(<em>a</em>)</p><p>设置要比较的第一个序列。 要比较的第二个序列不会改变。</p></li><li><p><code>set_seq2</code>(<em>b</em>)</p><p>设置要比较的第二个序列。 要比较的第一个序列不会改变。</p></li><li><p><code>find_longest_match</code>(<em>alo</em>, <em>ahi</em>, <em>blo</em>, <em>bhi</em>)</p><p>找出 <code>a[alo:ahi]</code> 和 <code>b[blo:bhi]</code> 中的最长匹配块。</p><p>如果 <em>isjunk</em> 被省略或为 <code>None</code>，<a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.SequenceMatcher.find_longest_match" target="_blank" rel="noopener"><code>find_longest_match()</code></a> 将返回 <code>(i, j, k)</code> 使得 <code>a[i:i+k]</code> 等于 <code>b[j:j+k]</code>，其中 <code>alo &lt;= i &lt;= i+k &lt;= ahi</code> 并且 <code>blo &lt;= j &lt;= j+k &lt;= bhi</code>。 对于所有满足这些条件的 <code>(i&#39;, j&#39;, k&#39;)</code>，如果 <code>i == i&#39;</code>, <code>j &lt;= j&#39;</code> 也被满足，则附加条件 <code>k &gt;= k&#39;</code>, <code>i &lt;= i&#39;</code>。 换句话说，对于所有最长匹配块，返回在 <em>a</em> 当中最先出现的一个，而对于在 <em>a</em> 当中最先出现的所有最长匹配块，则返回在 <em>b</em> 当中最先出现的一个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = SequenceMatcher(<span class="literal">None</span>, <span class="string">" abcd"</span>, <span class="string">"abcd abcd"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.find_longest_match(<span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">9</span>)</span><br><span class="line">Match(a=<span class="number">0</span>, b=<span class="number">4</span>, size=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>如果提供了 <em>isjunk</em>，将按上述规则确定第一个最长匹配块，但额外附加不允许块内出现垃圾元素的限制。 然后将通过（仅）匹配两边的垃圾元素来尽可能地扩展该块。 这样结果块绝对不会匹配垃圾元素，除非同样的垃圾元素正好与有意义的匹配相邻。</p><p>这是与之前相同的例子，但是将空格符视为垃圾。 这将防止 <code>&#39; abcd&#39;</code> 直接与第二个序列末尾的 <code>&#39; abcd&#39;</code> 相匹配。 而只可以匹配 <code>&#39;abcd&#39;</code>，并且是匹配第二个序列最左边的 <code>&#39;abcd&#39;</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = SequenceMatcher(<span class="keyword">lambda</span> x: x==<span class="string">" "</span>, <span class="string">" abcd"</span>, <span class="string">"abcd abcd"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.find_longest_match(<span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">9</span>)</span><br><span class="line">Match(a=<span class="number">1</span>, b=<span class="number">0</span>, size=<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>如果未找到匹配块，此方法将返回 <code>(alo, blo, 0)</code>。</p><p>此方法将返回一个 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-named-tuple" target="_blank" rel="noopener">named tuple</a> <code>Match(a, b, size)</code>。</p></li><li><p><code>get_matching_blocks</code>()</p></li></ul><p>返回描述非重叠匹配子序列的三元组列表。 每个三元组的形式为 <code>(i, j, n)</code>，其含义为 <code>a[i:i+n] == b[j:j+n]</code>。 这些三元组按 <em>i</em> 和 <em>j</em> 单调递增排列。</p><p>最后一个三元组用于占位，其值为 <code>(len(a), len(b), 0)</code>。 它是唯一 <code>n == 0</code> 的三元组。 如果 <code>(i, j, n)</code> 和 <code>(i&#39;, j&#39;, n&#39;)</code> 是在列表中相邻的三元组，且后者不是列表中的最后一个三元组，则 <code>i+n &lt; i&#39;</code> 或 <code>j+n &lt; j&#39;</code>；换句话说，相邻的三元组总是描述非相邻的相等块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = SequenceMatcher(<span class="literal">None</span>, <span class="string">"abxcd"</span>, <span class="string">"abcd"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.get_matching_blocks()</span><br><span class="line">[Match(a=<span class="number">0</span>, b=<span class="number">0</span>, size=<span class="number">2</span>), Match(a=<span class="number">3</span>, b=<span class="number">2</span>, size=<span class="number">2</span>), Match(a=<span class="number">5</span>, b=<span class="number">4</span>, size=<span class="number">0</span>)]</span><br></pre></td></tr></table></figure><ul><li><code>get_opcodes</code>()</li></ul><p>返回描述如何将 <em>a</em> 变为 <em>b</em> 的 5 元组列表，每个元组的形式为 <code>(tag, i1, i2, j1, j2)</code>。 在第一个元组中 <code>i1 == j1 == 0</code>，而在其余的元组中 <em>i1</em> 等于前一个元组的 <em>i2</em>，并且 <em>j1</em> 也等于前一个元组的 <em>j2</em>。</p><p><em>tag</em> 值为字符串，其含义如下：</p><table><thead><tr><th>值</th><th>意义</th></tr></thead><tbody><tr><td><code>&#39;replace&#39;</code></td><td><code>a[i1:i2]</code> 应由 <code>b[j1:j2]</code> 替换。</td></tr><tr><td><code>&#39;delete&#39;</code></td><td><code>a[i1:i2]</code> 应被删除。 请注意在此情况下 <code>j1 == j2</code>。</td></tr><tr><td><code>&#39;insert&#39;</code></td><td><code>b[j1:j2]</code> 应插入到 <code>a[i1:i1]</code>。 请注意在此情况下 <code>i1 == i2</code>。</td></tr><tr><td><code>&#39;equal&#39;</code></td><td><code>a[i1:i2] == b[j1:j2]</code> (两个子序列相同)。</td></tr></tbody></table><p>例如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"qabxcd"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">"abycdf"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = SequenceMatcher(<span class="literal">None</span>, a, b)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> tag, i1, i2, j1, j2 <span class="keyword">in</span> s.get_opcodes():</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'&#123;:7&#125;   a[&#123;&#125;:&#123;&#125;] --&gt; b[&#123;&#125;:&#123;&#125;] &#123;!r:&gt;8&#125; --&gt; &#123;!r&#125;'</span>.format(</span><br><span class="line"><span class="meta">... </span>        tag, i1, i2, j1, j2, a[i1:i2], b[j1:j2]))</span><br><span class="line">delete    a[0:1] --&gt; b[0:0]      'q' --&gt; ''</span><br><span class="line">equal     a[1:3] --&gt; b[0:2]     'ab' --&gt; 'ab'</span><br><span class="line">replace   a[3:4] --&gt; b[2:3]      'x' --&gt; 'y'</span><br><span class="line">equal     a[4:6] --&gt; b[3:5]     'cd' --&gt; 'cd'</span><br><span class="line">insert    a[6:6] --&gt; b[5:6]       '' --&gt; 'f'</span><br></pre></td></tr></table></figure><ul><li><p><code>get_grouped_opcodes</code>(<em>n=3</em>)</p><p>返回一个带有最多 <em>n</em> 行上下文的分组的 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-generator" target="_blank" rel="noopener">generator</a>。从 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.SequenceMatcher.get_opcodes" target="_blank" rel="noopener"><code>get_opcodes()</code></a> 所返回的组开始，此方法会拆分出较小的更改簇并消除没有更改的间隔区域。这些分组以与 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.SequenceMatcher.get_opcodes" target="_blank" rel="noopener"><code>get_opcodes()</code></a> 相同的格式返回。</p></li><li><p><code>ratio</code>()</p><p>返回一个取值范围 [0, 1] 的浮点数作为序列相似性度量。其中 T 是两个序列中元素的总数量，M 是匹配的数量，即 2.0*M / T。 请注意如果两个序列完全相同则该值为 <code>1.0</code>，如果两者完全不同则为 <code>0.0</code>。如果 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.SequenceMatcher.get_matching_blocks" target="_blank" rel="noopener"><code>get_matching_blocks()</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.SequenceMatcher.get_opcodes" target="_blank" rel="noopener"><code>get_opcodes()</code></a> 尚未被调用则此方法运算消耗较大，在此情况下你可能需要先调用 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.SequenceMatcher.quick_ratio" target="_blank" rel="noopener"><code>quick_ratio()</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.SequenceMatcher.real_quick_ratio" target="_blank" rel="noopener"><code>real_quick_ratio()</code></a> 来获取一个上界。</p></li></ul><blockquote><p>注意: <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.SequenceMatcher.ratio" target="_blank" rel="noopener"><code>ratio()</code></a> 调用的结果可能会取决于参数的顺序。 例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; &gt;&gt;&gt; SequenceMatcher(<span class="literal">None</span>, <span class="string">'tide'</span>, <span class="string">'diet'</span>).ratio()</span><br><span class="line">&gt; <span class="number">0.25</span></span><br><span class="line">&gt; &gt;&gt;&gt; SequenceMatcher(<span class="literal">None</span>, <span class="string">'diet'</span>, <span class="string">'tide'</span>).ratio()</span><br><span class="line">&gt; <span class="number">0.5</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ul><li><p><code>quick_ratio</code>()</p><p>相对快速地返回一个 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.SequenceMatcher.ratio" target="_blank" rel="noopener"><code>ratio()</code></a> 的上界。</p></li><li><p><code>real_quick_ratio</code>()</p><p>非常快速地返回一个 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.SequenceMatcher.ratio" target="_blank" rel="noopener"><code>ratio()</code></a> 的上界。</p><p>这三个返回匹配部分占字符总数的比率的方法可能由于不同的近似级别而给出不一样的结果，但是 <code>quick_ratio()</code> 和 <code>real_quick_ratio()</code> 总是会至少与 <code>ratio()</code> 一样大：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = SequenceMatcher(<span class="literal">None</span>, <span class="string">"abcd"</span>, <span class="string">"bcde"</span>)</span><br><span class="line">s.ratio()</span><br><span class="line"><span class="number">0.75</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.quick_ratio()</span><br><span class="line"><span class="number">0.75</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.real_quick_ratio()</span><br><span class="line"><span class="number">1.0</span></span><br></pre></td></tr></table></figure><h2 id="SequenceMatcher-的示例"><a href="#SequenceMatcher-的示例" class="headerlink" title="SequenceMatcher 的示例"></a>SequenceMatcher 的示例</h2><p>以下示例比较两个字符串，并将空格视为“垃圾”：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = SequenceMatcher(<span class="keyword">lambda</span> x: x == <span class="string">" "</span>,</span><br><span class="line"><span class="meta">... </span>                   <span class="string">"private Thread currentThread;"</span>,</span><br><span class="line"><span class="meta">... </span>                   <span class="string">"private volatile Thread currentThread;"</span>)</span><br></pre></td></tr></table></figure><p><code>ratio()</code> 返回一个 [0, 1] 范围内的整数作为两个序列相似性的度量。 根据经验，<code>ratio()</code> 值超过 0.6 就意味着两个序列是近似匹配的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(round(s.ratio(), <span class="number">3</span>))</span><br><span class="line"><span class="number">0.866</span></span><br></pre></td></tr></table></figure><p>如果你只对两个序列相匹配的位置感兴趣，则 <code>get_matching_blocks()</code> 就很方便：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> block <span class="keyword">in</span> s.get_matching_blocks():</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"a[%d] and b[%d] match for %d elements"</span> % block)</span><br><span class="line">a[<span class="number">0</span>] <span class="keyword">and</span> b[<span class="number">0</span>] match <span class="keyword">for</span> <span class="number">8</span> elements</span><br><span class="line">a[<span class="number">8</span>] <span class="keyword">and</span> b[<span class="number">17</span>] match <span class="keyword">for</span> <span class="number">21</span> elements</span><br><span class="line">a[<span class="number">29</span>] <span class="keyword">and</span> b[<span class="number">38</span>] match <span class="keyword">for</span> <span class="number">0</span> elements</span><br></pre></td></tr></table></figure><p>请注意 <code>get_matching_blocks()</code> 返回的最后一个元组总是只用于占位的 <code>(len(a), len(b), 0)</code>，这也是元组末尾元素（匹配的元素数量）为 <code>0</code> 的唯一情况。</p><p>如果你想要知道如何将第一个序列转成第二个序列，可以使用 <code>get_opcodes()</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">for</span> opcode <span class="keyword">in</span> s.get_opcodes():</span><br><span class="line"><span class="meta">... </span>   print(<span class="string">"%6s a[%d:%d] b[%d:%d]"</span> % opcode)</span><br><span class="line"> equal a[<span class="number">0</span>:<span class="number">8</span>] b[<span class="number">0</span>:<span class="number">8</span>]</span><br><span class="line">insert a[<span class="number">8</span>:<span class="number">8</span>] b[<span class="number">8</span>:<span class="number">17</span>]</span><br><span class="line"> equal a[<span class="number">8</span>:<span class="number">29</span>] b[<span class="number">17</span>:<span class="number">38</span>]</span><br></pre></td></tr></table></figure><h2 id="Differ-对象"><a href="#Differ-对象" class="headerlink" title="Differ 对象"></a>Differ 对象</h2><p>请注意 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.Differ" target="_blank" rel="noopener"><code>Differ</code></a> 所生成的增量并不保证是 <strong>最小</strong> 差异。 相反，最小差异往往是违反直觉的，因为它们会同步任何可能的地方，有时甚至意外产生相距 100 页的匹配。 将同步点限制为连续匹配保留了一些局部性概念，这偶尔会带来产生更长差异的代价。</p><p><a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.Differ" target="_blank" rel="noopener"><code>Differ</code></a> 类具有这样的构造器：</p><p><em>class</em> <code>difflib.Differ</code>(<em>linejunk=None</em>, <em>charjunk=None</em>)</p><p>可选关键字形参 <em>linejunk</em> 和 <em>charjunk</em> 均为过滤函数 (或为 <code>None</code>)：</p><p><em>linejunk</em>: 接受单个字符串作为参数的函数，如果其为垃圾字符串则返回真值。 默认值为 <code>None</code>，意味着没有任何行会被视为垃圾行。</p><p><em>charjunk</em>: 接受单个字符（长度为 1 的字符串）作为参数的函数，如果其为垃圾字符则返回真值。 默认值为 <code>None</code>，意味着没有任何字符会被视为垃圾字符。</p><p>这些垃圾过滤函数可加快查找差异的匹配速度，并且不会导致任何差异行或字符被忽略。 请阅读 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.SequenceMatcher.find_longest_match" target="_blank" rel="noopener"><code>find_longest_match()</code></a> 方法的 <em>isjunk</em> 形参的描述了解详情。</p><p><a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.Differ" target="_blank" rel="noopener"><code>Differ</code></a> 对象是通过一个单独方法来使用（生成增量）的：</p><ul><li><p><code>compare</code>(<em>a</em>, <em>b</em>)</p><p>比较两个由行组成的序列，并生成增量（一个由行组成的序列）。每个序列必须包含一个以换行符结尾的单行字符串。 这样的序列可以通过文件类对象的 <a href="https://docs.python.org/zh-cn/3.8/library/io.html#io.IOBase.readlines" target="_blank" rel="noopener"><code>readlines()</code></a> 方法来获取。 所生成的增量同样由以换行符结尾的字符串构成，可以通过文件类对象的 <a href="https://docs.python.org/zh-cn/3.8/library/io.html#io.IOBase.writelines" target="_blank" rel="noopener"><code>writelines()</code></a> 方法原样打印出来。</p></li></ul><h2 id="Differ-示例"><a href="#Differ-示例" class="headerlink" title="Differ 示例"></a>Differ 示例</h2><p>此示例比较两段文本。 首先我们设置文本为以换行符结尾的单行字符串构成的序列（这样的序列也可以通过文件类对象的 <code>readlines()</code> 方法来获取）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>text1 = <span class="string">'''  1. Beautiful is better than ugly.</span></span><br><span class="line"><span class="string"><span class="meta">... </span>  2. Explicit is better than implicit.</span></span><br><span class="line"><span class="string"><span class="meta">... </span>  3. Simple is better than complex.</span></span><br><span class="line"><span class="string"><span class="meta">... </span>  4. Complex is better than complicated.</span></span><br><span class="line"><span class="string"><span class="meta">... </span>'''</span>.splitlines(keepends=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(text1)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text1[<span class="number">0</span>][<span class="number">-1</span>]</span><br><span class="line"><span class="string">'\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text2 = <span class="string">'''  1. Beautiful is better than ugly.</span></span><br><span class="line"><span class="string"><span class="meta">... </span>  3.   Simple is better than complex.</span></span><br><span class="line"><span class="string"><span class="meta">... </span>  4. Complicated is better than complex.</span></span><br><span class="line"><span class="string"><span class="meta">... </span>  5. Flat is better than nested.</span></span><br><span class="line"><span class="string"><span class="meta">... </span>'''</span>.splitlines(keepends=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>接下来我们实例化一个 Differ 对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = Differ()</span><br></pre></td></tr></table></figure><p>请注意在实例化 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.Differ" target="_blank" rel="noopener"><code>Differ</code></a> 对象时我们可以传入函数来过滤掉“垃圾”行和字符。 详情参见 <a href="https://docs.python.org/zh-cn/3.8/library/difflib.html#difflib.Differ" target="_blank" rel="noopener"><code>Differ()</code></a> 构造器说明。</p><p>最后，我们比较两个序列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>result = list(d.compare</span><br></pre></td></tr></table></figure><p><code>result</code> 是一个字符串列表，让我们将其美化打印出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pprint(result)</span><br><span class="line">[<span class="string">'    1. Beautiful is better than ugly.\n'</span>,</span><br><span class="line"> <span class="string">'-   2. Explicit is better than implicit.\n'</span>,</span><br><span class="line"> <span class="string">'-   3. Simple is better than complex.\n'</span>,</span><br><span class="line"> <span class="string">'+   3.   Simple is better than complex.\n'</span>,</span><br><span class="line"> <span class="string">'?     ++\n'</span>,</span><br><span class="line"> <span class="string">'-   4. Complex is better than complicated.\n'</span>,</span><br><span class="line"> <span class="string">'?            ^                     ---- ^\n'</span>,</span><br><span class="line"> <span class="string">'+   4. Complicated is better than complex.\n'</span>,</span><br><span class="line"> <span class="string">'?           ++++ ^                      ^\n'</span>,</span><br><span class="line"> <span class="string">'+   5. Flat is better than nested.\n'</span>]</span><br></pre></td></tr></table></figure><p>作为单独的多行字符串显示出来则是这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.stdout.writelines(result)</span><br><span class="line">    <span class="number">1.</span> Beautiful <span class="keyword">is</span> better than ugly.</span><br><span class="line">-   <span class="number">2.</span> Explicit <span class="keyword">is</span> better than implicit.</span><br><span class="line">-   <span class="number">3.</span> Simple <span class="keyword">is</span> better than complex.</span><br><span class="line">+   <span class="number">3.</span>   Simple <span class="keyword">is</span> better than complex.</span><br><span class="line">?     ++</span><br><span class="line">-   <span class="number">4.</span> Complex <span class="keyword">is</span> better than complicated.</span><br><span class="line">?            ^                     ---- ^</span><br><span class="line">+   <span class="number">4.</span> Complicated <span class="keyword">is</span> better than complex.</span><br><span class="line">?           ++++ ^                      ^</span><br><span class="line">+   <span class="number">5.</span> Flat <span class="keyword">is</span> better than nested.</span><br></pre></td></tr></table></figure><h2 id="difflib-的命令行接口"><a href="#difflib-的命令行接口" class="headerlink" title="difflib 的命令行接口"></a>difflib 的命令行接口</h2><p>这个实例演示了如何使用 difflib 来创建一个类似于 <code>diff</code> 的工具。 它同样包含在 Python 源码发布包中，文件名为 <code>Tools/scripts/diff.py</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="string">""" Command line interface to difflib.py providing diffs in four formats:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">* ndiff:    lists every line and highlights interline changes.</span></span><br><span class="line"><span class="string">* context:  highlights clusters of changes in a before/after format.</span></span><br><span class="line"><span class="string">* unified:  highlights clusters of changes in an inline format.</span></span><br><span class="line"><span class="string">* html:     generates side by side comparison with change highlights.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys, os, difflib, argparse</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timezone</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_mtime</span><span class="params">(path)</span>:</span></span><br><span class="line">    t = datetime.fromtimestamp(os.stat(path).st_mtime,</span><br><span class="line">                               timezone.utc)</span><br><span class="line">    <span class="keyword">return</span> t.astimezone().isoformat()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">'-c'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                        help=<span class="string">'Produce a context format diff (default)'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-u'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                        help=<span class="string">'Produce a unified format diff'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-m'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                        help=<span class="string">'Produce HTML side by side diff '</span></span><br><span class="line">                             <span class="string">'(can use -c and -l in conjunction)'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-n'</span>, action=<span class="string">'store_true'</span>, default=<span class="literal">False</span>,</span><br><span class="line">                        help=<span class="string">'Produce a ndiff format diff'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-l'</span>, <span class="string">'--lines'</span>, type=int, default=<span class="number">3</span>,</span><br><span class="line">                        help=<span class="string">'Set number of context lines (default 3)'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'fromfile'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'tofile'</span>)</span><br><span class="line">    options = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    n = options.lines</span><br><span class="line">    fromfile = options.fromfile</span><br><span class="line">    tofile = options.tofile</span><br><span class="line"></span><br><span class="line">    fromdate = file_mtime(fromfile)</span><br><span class="line">    todate = file_mtime(tofile)</span><br><span class="line">    <span class="keyword">with</span> open(fromfile) <span class="keyword">as</span> ff:</span><br><span class="line">        fromlines = ff.readlines()</span><br><span class="line">    <span class="keyword">with</span> open(tofile) <span class="keyword">as</span> tf:</span><br><span class="line">        tolines = tf.readlines()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> options.u:</span><br><span class="line">        diff = difflib.unified_diff(fromlines, tolines, fromfile, tofile, fromdate, todate, n=n)</span><br><span class="line">    <span class="keyword">elif</span> options.n:</span><br><span class="line">        diff = difflib.ndiff(fromlines, tolines)</span><br><span class="line">    <span class="keyword">elif</span> options.m:</span><br><span class="line">        diff = difflib.HtmlDiff().make_file(fromlines,tolines,fromfile,tofile,context=options.c,numlines=n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        diff = difflib.context_diff(fromlines, tolines, fromfile, tofile, fromdate, todate, n=n)</span><br><span class="line"></span><br><span class="line">    sys.stdout.writelines(diff)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="补充关于HtmlDiff类用法"><a href="#补充关于HtmlDiff类用法" class="headerlink" title="补充关于HtmlDiff类用法"></a>补充关于<code>HtmlDiff</code>类用法</h2><p>结合webbrowser创建差异比较页面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> difflib</span><br><span class="line"><span class="keyword">import</span> webbrowser</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_diff</span><span class="params">(self, index, wrapcolumn)</span>:</span></span><br><span class="line">       file1, file2 = self.differing[index]</span><br><span class="line">       <span class="keyword">with</span> open(file1, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">           content1 = f.read().splitlines()</span><br><span class="line">       <span class="keyword">with</span> open(file2, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">           content2 = f.read().splitlines()</span><br><span class="line">       htmlDiff = HtmlDiff(tabsize=<span class="number">2</span>,wrapcolumn=wrapcolumn)</span><br><span class="line">       <span class="keyword">with</span> open(<span class="string">'tmp.html'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">           f.write(htmlDiff.make_file(content1, content2, fromdesc=self.dir1, todesc=self.dir2))</span><br><span class="line">       webbrowser.open(<span class="string">'tmp.html'</span>)</span><br></pre></td></tr></table></figure><p>对比Nginx配置文件差异脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> difflib</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    textfile1 = sys.argv[<span class="number">1</span>]</span><br><span class="line">    textfile2 = sys.argv[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    print(<span class="string">"Error:"</span> + str(e))</span><br><span class="line">    print(<span class="string">"Usage: xxxx.py filename1 filename2"</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readfile</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        fileHandle = open(filename,<span class="string">'r'</span>)</span><br><span class="line">        text = fileHandle.read().splitlines()</span><br><span class="line">        fileHandle.close()</span><br><span class="line">        <span class="keyword">return</span> text</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> error:</span><br><span class="line">        print(<span class="string">'Read file Error:'</span> + str(error))</span><br><span class="line">        sys.exit()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> textfile1 == <span class="string">""</span> <span class="keyword">or</span> textfile2 == <span class="string">""</span>:</span><br><span class="line">    print(<span class="string">"Usage:test.py filename1 filename2"</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"> </span><br><span class="line">text1_lines = readfile(textfile1)</span><br><span class="line">text2_lines = readfile(textfile2)</span><br><span class="line"> </span><br><span class="line">d = difflib.HtmlDiff()</span><br><span class="line">print(d.make_file(text1_lines,text2_lines))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库学习-difflib&quot;&gt;&lt;a href=&quot;#python-标准库学习-difflib&quot; class=&quot;headerlink&quot; title=&quot;python 标准库学习  difflib&quot;&gt;&lt;/a&gt;python 标准库学习  difflib&lt;/h1&gt;&lt;p&gt;每日一词:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;wink &lt;/p&gt;
&lt;p&gt;US[wɪŋk]  UK[wɪŋk]&lt;/p&gt;
&lt;p&gt;n.眼色；眨一只眼；眨眼示意&lt;/p&gt;
&lt;p&gt;v.闪烁；眨眼示意（尤指使眼色或表示开玩笑）；明灭&lt;/p&gt;
&lt;p&gt;网络瞬间；眨眼睛；你眨了眨眼&lt;/p&gt;
&lt;p&gt;推荐一个电影：&lt;/p&gt;
&lt;p&gt;记忆碎片👴&lt;/p&gt;
&lt;p&gt;又是诺兰的大作,强烈推荐&lt;/p&gt;
&lt;p&gt;推荐指数： 🌟🌟🌟🌟🌟&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/2af9e3d253beebcab32903659da092d7_r.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/categories/python/standard-library/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="difflib" scheme="https://pinghailinfeng.gitee.io/tags/difflib/"/>
    
  </entry>
  
</feed>
