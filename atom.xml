<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>凭海临风的IT江湖</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pinghailinfeng.gitee.io/"/>
  <updated>2020-01-08T03:49:24.667Z</updated>
  <id>https://pinghailinfeng.gitee.io/</id>
  
  <author>
    <name>Jeff Sui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python standard library http</title>
    <link href="https://pinghailinfeng.gitee.io/2020/01/08/python-standard-library-http/"/>
    <id>https://pinghailinfeng.gitee.io/2020/01/08/python-standard-library-http/</id>
    <published>2020-01-08T02:57:24.000Z</published>
    <updated>2020-01-08T03:49:24.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库之-http"><a href="#python-标准库之-http" class="headerlink" title="python 标准库之 http"></a>python 标准库之 http</h1><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20191223_blog_2.jpg?raw=true" alt></p><p>山雨欲来风满楼,最近不是很太平,希望世界和平吧。</p><h2 id="python-标准库学习-之-http"><a href="#python-标准库学习-之-http" class="headerlink" title="python 标准库学习 之  http"></a>python 标准库学习 之  http</h2><p><a href="https://docs.python.org/zh-cn/3.8/library/http.html#module-http" target="_blank" rel="noopener"><code>http</code></a> 是一个包，它收集了多个用于处理超文本传输协议的模块:</p><p><a href="https://docs.python.org/zh-cn/3.8/library/http.html" target="_blank" rel="noopener">参考文档</a></p><ul><li><a href="https://docs.python.org/zh-cn/3.8/library/http.client.html#module-http.client" target="_blank" rel="noopener"><code>http.client</code></a> 是一个低层级的 HTTP 协议客户端；对于高层级的 URL 访问请使用 <a href="https://docs.python.org/zh-cn/3.8/library/urllib.request.html#module-urllib.request" target="_blank" rel="noopener"><code>urllib.request</code></a></li><li><a href="https://docs.python.org/zh-cn/3.8/library/http.server.html#module-http.server" target="_blank" rel="noopener"><code>http.server</code></a> 包含基于 <a href="https://docs.python.org/zh-cn/3.8/library/socketserver.html#module-socketserver" target="_blank" rel="noopener"><code>socketserver</code></a> 的基本 HTTP 服务类</li><li><a href="https://docs.python.org/zh-cn/3.8/library/http.cookies.html#module-http.cookies" target="_blank" rel="noopener"><code>http.cookies</code></a> 包含一些有用来实现通过 cookies 进行状态管理的工具</li><li><a href="https://docs.python.org/zh-cn/3.8/library/http.cookiejar.html#module-http.cookiejar" target="_blank" rel="noopener"><code>http.cookiejar</code></a> 提供了 cookies 的持久化</li></ul><p>本次只整理 http.client的内容,后面持续更新。</p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p><code>class http.HTTPStatus</code></p><p>使用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> http <span class="keyword">import</span> HTTPStatus</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>HTTPStatus.OK</span><br><span class="line">&lt;HTTPStatus.OK: <span class="number">200</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>HTTPStatus.OK == <span class="number">200</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>HTTPStatus.OK.value</span><br><span class="line"><span class="number">200</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>HTTPStatus.OK.phrase</span><br><span class="line"><span class="string">'OK'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>HTTPStatus.OK.description</span><br><span class="line"><span class="string">'Request fulfilled, document follows'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(HTTPStatus)</span><br><span class="line">[&lt;HTTPStatus.CONTINUE: <span class="number">100</span>&gt;, &lt;HTTPStatus.SWITCHING_PROTOCOLS: <span class="number">101</span>&gt;, ...]</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h3><table><thead><tr><th>状态码</th><th>映射名</th><th>详情</th></tr></thead><tbody><tr><td><code>100</code></td><td><code>CONTINUE</code></td><td>HTTP/1.1 <a href="https://tools.ietf.org/html/rfc7231.html" target="_blank" rel="noopener"><strong>RFC 7231</strong></a>, 6.2.1 节</td></tr><tr><td><code>101</code></td><td><code>SWITCHING_PROTOCOLS</code></td><td>HTTP/1.1 RFC 7231, 6.2.2 节</td></tr><tr><td><code>102</code></td><td><code>PROCESSING</code></td><td>WebDAV RFC 2518, 10.1 节</td></tr><tr><td><code>200</code></td><td><code>OK</code></td><td>HTTP/1.1 RFC 7231, 6.3.1 节</td></tr><tr><td><code>201</code></td><td><code>CREATED</code></td><td>HTTP/1.1 RFC 7231, 6.3.2 节</td></tr><tr><td><code>202</code></td><td><code>ACCEPTED</code></td><td>HTTP/1.1 RFC 7231, 6.3.3 节</td></tr><tr><td><code>203</code></td><td><code>NON_AUTHORITATIVE_INFORMATION</code></td><td>HTTP/1.1 RFC 7231, 6.3.4 节</td></tr><tr><td><code>204</code></td><td><code>NO_CONTENT</code></td><td>HTTP/1.1 RFC 7231, 6.3.5 节</td></tr><tr><td><code>205</code></td><td><code>RESET_CONTENT</code></td><td>HTTP/1.1 RFC 7231, 6.3.6 节</td></tr><tr><td><code>206</code></td><td><code>PARTIAL_CONTENT</code></td><td>HTTP/1.1 RFC 7233, 4.1 节</td></tr><tr><td><code>207</code></td><td><code>MULTI_STATUS</code></td><td>WebDAV RFC 4918, 11.1 节</td></tr><tr><td><code>208</code></td><td><code>ALREADY_REPORTED</code></td><td>WebDAV Binding Extensions RFC 5842, 7.1 节（实验性）</td></tr><tr><td><code>226</code></td><td><code>IM_USED</code></td><td>Delta Encoding in HTTP RFC 3229, 10.4.1 节</td></tr><tr><td><code>300</code></td><td><code>MULTIPLE_CHOICES</code>：有多种资源可选择</td><td>HTTP/1.1 RFC 7231, 6.4.1 节</td></tr><tr><td><code>301</code></td><td><code>MOVED_PERMANENTLY</code>：永久移动</td><td>HTTP/1.1 RFC 7231, 6.4.2 节</td></tr><tr><td><code>302</code></td><td><code>FOUND</code>：临时移动</td><td>HTTP/1.1 RFC 7231, 6.4.3 节</td></tr><tr><td><code>303</code></td><td><code>SEE_OTHER</code>：已经移动</td><td>HTTP/1.1 RFC 7231, 6.4.4 节</td></tr><tr><td><code>304</code></td><td><code>NOT_MODIFIED</code>：没有修改</td><td>HTTP/1.1 RFC 7232, 4.1 节</td></tr><tr><td><code>305</code></td><td><code>USE_PROXY</code>：使用代理</td><td>HTTP/1.1 RFC 7231, 6.4.5 节</td></tr><tr><td><code>307</code></td><td><code>TEMPORARY_REDIRECT</code>：临时重定向</td><td>HTTP/1.1 <a href="https://tools.ietf.org/html/rfc7231.html" target="_blank" rel="noopener"><strong>RFC 7231</strong></a>, 6.4.7 节</td></tr><tr><td><code>308</code></td><td><code>PERMANENT_REDIRECT</code>：永久重定向</td><td>Permanent Redirect <a href="https://tools.ietf.org/html/rfc7238.html" target="_blank" rel="noopener"><strong>RFC 7238</strong></a>, Section 3 (Experimental)</td></tr><tr><td><code>400</code></td><td><code>BAD_REQUEST</code>：错误请求</td><td>HTTP/1.1 RFC 7231, 6.5.1 节</td></tr><tr><td><code>401</code></td><td><code>UNAUTHORIZED</code>：未授权</td><td>HTTP/1.1 Authentication RFC 7235, 3.1 节</td></tr><tr><td><code>402</code></td><td><code>PAYMENT_REQUIRED</code>：保留，将来使用</td><td>HTTP/1.1 RFC 7231, 6.5.2 节</td></tr><tr><td><code>403</code></td><td><code>FORBIDDEN</code>：禁止</td><td>HTTP/1.1 RFC 7231, 6.5.3 节</td></tr><tr><td><code>404</code></td><td><code>NOT_FOUND</code>：没有找到</td><td>HTTP/1.1 RFC 7231, 6.5.4 节</td></tr><tr><td><code>405</code></td><td><code>METHOD_NOT_ALLOWED</code>：该请求方法不允许</td><td>HTTP/1.1 RFC 7231, 6.5.5 节</td></tr><tr><td><code>406</code></td><td><code>NOT_ACCEPTABLE</code>：不可接受</td><td>HTTP/1.1 RFC 7231, 6.5.6 节</td></tr><tr><td><code>407</code></td><td><code>PROXY_AUTHENTICATION_REQUIRED</code>：要求使用代理验证身份</td><td>HTTP/1.1 Authentication RFC 7235, 3.1 节</td></tr><tr><td><code>408</code></td><td><code>REQUEST_TIMEOUT</code>：请求超时</td><td>HTTP/1.1 <a href="https://tools.ietf.org/html/rfc7231.html" target="_blank" rel="noopener"><strong>RFC 7231</strong></a>, 6.5.7 节</td></tr><tr><td><code>409</code></td><td><code>CONFLICT</code>：冲突</td><td>HTTP/1.1 RFC 7231, 6.5.8 节</td></tr><tr><td><code>410</code></td><td><code>GONE</code>：已经不在了</td><td>HTTP/1.1 RFC 7231, 6.5.9 节</td></tr><tr><td><code>411</code></td><td><code>LENGTH_REQUIRED</code>：长度要求</td><td>HTTP/1.1 RFC 7231, 6.5.10 节</td></tr><tr><td><code>412</code></td><td><code>PRECONDITION_FAILED</code>：前提条件错误</td><td>HTTP/1.1 RFC 7232, 4.2 节</td></tr><tr><td><code>413</code></td><td><code>REQUEST_ENTITY_TOO_LARGE</code>：请求体太大了</td><td>HTTP/1.1 RFC 7231, 6.5.11 节</td></tr><tr><td><code>414</code></td><td><code>REQUEST_URI_TOO_LONG</code>：请求URI太长了</td><td>HTTP/1.1 RFC 7231, 6.5.12 节</td></tr><tr><td><code>415</code></td><td><code>UNSUPPORTED_MEDIA_TYPE</code>：不支持的媒体格式</td><td>HTTP/1.1 RFC 7231, 6.5.13 节</td></tr><tr><td><code>416</code></td><td><code>REQUESTED_RANGE_NOT_SATISFIABLE</code></td><td>HTTP/1.1 Range Requests RFC 7233, 4.4 节</td></tr><tr><td><code>417</code></td><td><code>EXPECTATION_FAILED</code>：期望失败</td><td>HTTP/1.1 RFC 7231, 6.5.14 节</td></tr><tr><td><code>421</code></td><td><code>MISDIRECTED_REQUEST</code></td><td>HTTP/2 <a href="https://tools.ietf.org/html/rfc7540.html" target="_blank" rel="noopener"><strong>RFC 7540</strong></a>, 9.1.2 节</td></tr><tr><td><code>422</code></td><td><code>UNPROCESSABLE_ENTITY</code>：可加工实体</td><td>WebDAV RFC 4918, 11.2 节</td></tr><tr><td><code>423</code></td><td><code>LOCKED</code>：锁着</td><td>WebDAV RFC 4918, 11.3 节</td></tr><tr><td><code>424</code></td><td><code>FAILED_DEPENDENCY</code>：失败的依赖</td><td>WebDAV RFC 4918, 11.4 节</td></tr><tr><td><code>426</code></td><td><code>UPGRADE_REQUIRED</code>：升级需要</td><td>HTTP/1.1 RFC 7231, 6.5.15 节</td></tr><tr><td><code>428</code></td><td><code>PRECONDITION_REQUIRED</code>：先决条件要求</td><td>Additional HTTP Status Codes RFC 6585</td></tr><tr><td><code>429</code></td><td><code>TOO_MANY_REQUESTS</code>：太多的请求</td><td>Additional HTTP Status Codes RFC 6585</td></tr><tr><td><code>431</code></td><td><code>REQUEST_HEADER_FIELDS_TOO_LARGE</code>：请求头太大</td><td>Additional HTTP Status Codes RFC 6585</td></tr><tr><td><code>451</code></td><td><code>UNAVAILABLE_FOR_LEGAL_REASONS</code></td><td>HTTP 状态码用于报告法律障碍 <a href="https://tools.ietf.org/html/rfc7725.html" target="_blank" rel="noopener"><strong>RFC 7725</strong></a></td></tr><tr><td><code>500</code></td><td><code>INTERNAL_SERVER_ERROR</code>：内部服务错误</td><td>HTTP/1.1 RFC 7231, 6.6.1 节</td></tr><tr><td><code>501</code></td><td><code>NOT_IMPLEMENTED</code>：不可执行</td><td>HTTP/1.1 RFC 7231, 6.6.2 节</td></tr><tr><td><code>502</code></td><td><code>BAD_GATEWAY</code>：无效网关</td><td>HTTP/1.1 RFC 7231, 6.6.3 节</td></tr><tr><td><code>503</code></td><td><code>SERVICE_UNAVAILABLE</code>：服务不可用</td><td>HTTP/1.1 RFC 7231, 6.6.4 节</td></tr><tr><td><code>504</code></td><td><code>GATEWAY_TIMEOUT</code>：网关超时</td><td>HTTP/1.1 RFC 7231, 6.6.5 节</td></tr><tr><td><code>505</code></td><td><code>HTTP_VERSION_NOT_SUPPORTED</code>：HTTP版本不支持</td><td>HTTP/1.1 RFC 7231, 6.6.6 节</td></tr><tr><td><code>506</code></td><td><code>VARIANT_ALSO_NEGOTIATES</code>：服务器存在内部配置错误</td><td>透明内容协商在： HTTP <a href="https://tools.ietf.org/html/rfc2295.html" target="_blank" rel="noopener"><strong>RFC 2295</strong></a>, 8.1 节（实验性）</td></tr><tr><td><code>507</code></td><td><code>INSUFFICIENT_STORAGE</code>：存储不足</td><td>WebDAV RFC 4918, 11.5 节</td></tr><tr><td><code>508</code></td><td><code>LOOP_DETECTED</code>：循环检测</td><td>WebDAV Binding Extensions RFC 5842, 7.2 节（实验性）</td></tr><tr><td><code>510</code></td><td><code>NOT_EXTENDED</code>：不扩展</td><td>WebDAV Binding Extensions RFC 5842, 7.2 节（实验性）</td></tr><tr><td><code>511</code></td><td><code>NETWORK_AUTHENTICATION_REQUIRED</code>：要求网络身份验证</td><td>Additional HTTP Status Codes <a href="https://tools.ietf.org/html/rfc6585.html" target="_blank" rel="noopener"><strong>RFC 6585</strong></a>, 6 节</td></tr></tbody></table><p>为了保持向后兼容性，枚举值也以常量形式出现在 <a href="https://docs.python.org/zh-cn/3.8/library/http.client.html#module-http.client" target="_blank" rel="noopener"><code>http.client</code></a> 模块中，。 枚举名等于常量名 (例如 <code>http.HTTPStatus.OK</code> 也可以是 <code>http.client.OK</code>)。</p><h2 id="http-client-对象"><a href="#http-client-对象" class="headerlink" title="http.client 对象"></a>http.client 对象</h2><p>这个模块定义了实现 HTTP 和 HTTPS 协议客户端的类。 它通常不直接使用 — 模块 <a href="https://docs.python.org/zh-cn/3.8/library/urllib.request.html#module-urllib.request" target="_blank" rel="noopener"><code>urllib.request</code></a> 用它来处理使用 HTTP 和 HTTPS 的 URL。</p><p>参见 The <a href="https://requests.readthedocs.io/en/master/" target="_blank" rel="noopener">Requests</a> 是一个高级的实现http协议的http客户端接口库.</p><p><strong>注意</strong>: HTTPS 支持仅在编译 Python 时启用了 SSL 支持的情况下（通过 <a href="https://docs.python.org/zh-cn/3.8/library/ssl.html#module-ssl" target="_blank" rel="noopener"><code>ssl</code></a> 模块）可用。</p><p>强烈建议看源代码 <a href="https://github.com/python/cpython/tree/3.8/Lib/http/client.py" target="_blank" rel="noopener">Lib/http/client.py</a></p><p>我摘取其中关于http请求状态的描述</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> (null)</span><br><span class="line">   |</span><br><span class="line">   | HTTPConnection()</span><br><span class="line">   v</span><br><span class="line"> Idle</span><br><span class="line">   |</span><br><span class="line">   | putrequest()</span><br><span class="line">   v</span><br><span class="line"> Request-started</span><br><span class="line">   |</span><br><span class="line">   | ( putheader() )*  endheaders()</span><br><span class="line">   v</span><br><span class="line"> Request-sent</span><br><span class="line">   |\_____________________________</span><br><span class="line">   |                              | getresponse() raises</span><br><span class="line">   | response = getresponse()     | ConnectionError</span><br><span class="line">   v                              v</span><br><span class="line"> Unread-response                Idle</span><br><span class="line"> [Response-headers-read]</span><br><span class="line">   |\____________________</span><br><span class="line">   |                     |</span><br><span class="line">   | response.read()     | putrequest()</span><br><span class="line">   v                     v</span><br><span class="line"> Idle                  Req-started-unread-response</span><br><span class="line">                  ______/|</span><br><span class="line">                /        |</span><br><span class="line">response.read() |        | ( putheader() )*  endheaders()</span><br><span class="line">                v        v</span><br><span class="line">    Request-started    Req-sent-unread-response</span><br><span class="line">                         |</span><br><span class="line">                         | response.read()</span><br><span class="line">                         v</span><br><span class="line">                       Request-sent</span><br></pre></td></tr></table></figure><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><ul><li><code>class http.client.HTTPConnection(*host*, *port=None*, [*timeout*, ]*source_address=None*, *blocksize=8192*)</code></li></ul><p><a href="https://docs.python.org/zh-cn/3.8/library/http.client.html#http.client.HTTPConnection" target="_blank" rel="noopener"><code>HTTPConnection</code></a> 的实例代表与 HTTP 的一个连接事务。 它的实例化应当传入一个主机和可选的端口号。 如果没有传入端口号，如果主机字符串的形式为 <code>主机:端口</code> 则会从中提取端口，否则将使用默认的 HTTP 端口（80）。 如果给出了可选的 <em>timeout</em> 参数，则阻塞操作（例如连接尝试）将在指定的秒数之后超时（如果未给出，则使用全局默认超时设置）。 可选的 <em>source_address</em> 参数可以为一个 (主机, 端口) 元组，用作进行 HTTP 连接的源地址。 可选的 <em>blocksize</em> 参数可以字节为单位设置缓冲区的大小，用来发送文件类消息体。</p><p>举个例子，以下调用都是创建连接到同一主机和端口的服务器的实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>h1 = http.client.HTTPConnection(<span class="string">'www.python.org'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h2 = http.client.HTTPConnection(<span class="string">'www.python.org:80'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h3 = http.client.HTTPConnection(<span class="string">'www.python.org'</span>, <span class="number">80</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h4 = http.client.HTTPConnection(<span class="string">'www.python.org'</span>, <span class="number">80</span>, timeout=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><ul><li><p>`<em>class</em> http.client.HTTPSConnection(<em>host</em>, <em>port=None</em>, <em>key_file=None</em>, <em>cert_file=None</em>, [<em>timeout</em>, ]<em>source_address=None</em>, <em>**, </em>context=None<em>, </em>check_hostname=None<em>, </em>blocksize=8192*)<a href="https://docs.python.org/zh-cn/3.8/library/http.client.html#http.client.HTTPSConnection" target="_blank" rel="noopener">¶</a></p><p><a href="https://docs.python.org/zh-cn/3.8/library/http.client.html#http.client.HTTPConnection" target="_blank" rel="noopener"><code>HTTPConnection</code></a> 的子类，使用 SSL 与安全服务器进行通信。 默认端口为 <code>443</code>。 如果指定了 <em>context</em>，它必须为一个描述 SSL 各选项的 <a href="https://docs.python.org/zh-cn/3.8/library/ssl.html#ssl.SSLContext" target="_blank" rel="noopener"><code>ssl.SSLContext</code></a> 实例。</p></li><li><p><code>class http.client.`</code>HTTPResponse`(<em>sock</em>, <em>debuglevel=0</em>, <em>method=None</em>, <em>url=None</em>)</p></li></ul><p>在成功连接后返回类的实例，而不是由用户直接实例化。</p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><ul><li><p><em>exception</em> <code>http.client.`</code>HTTPException`</p><p>此模块中其他异常的基类。 它是 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#Exception" target="_blank" rel="noopener"><code>Exception</code></a> 的一个子类。</p></li><li><p><em>exception</em> <code>http.client.`</code>NotConnected`</p><p><a href="https://docs.python.org/zh-cn/3.8/library/http.client.html#http.client.HTTPException" target="_blank" rel="noopener"><code>HTTPException</code></a> 的一个子类。</p></li><li><p><em>exception</em> <code>http.client.`</code>InvalidURL`</p><p><a href="https://docs.python.org/zh-cn/3.8/library/http.client.html#http.client.HTTPException" target="_blank" rel="noopener"><code>HTTPException</code></a> 的一个子类，如果给出了一个非数字或为空值的端口就会被引发。</p></li><li><p><em>exception</em> <code>http.client.`</code>UnknownProtocol`</p><p><a href="https://docs.python.org/zh-cn/3.8/library/http.client.html#http.client.HTTPException" target="_blank" rel="noopener"><code>HTTPException</code></a> 的一个子类。</p></li><li><p><em>exception</em> <code>http.client.`</code>UnknownTransferEncoding`</p><p><a href="https://docs.python.org/zh-cn/3.8/library/http.client.html#http.client.HTTPException" target="_blank" rel="noopener"><code>HTTPException</code></a> 的一个子类。</p></li><li><p><em>exception</em> <code>http.client.`</code>UnimplementedFileMode`</p><p><a href="https://docs.python.org/zh-cn/3.8/library/http.client.html#http.client.HTTPException" target="_blank" rel="noopener"><code>HTTPException</code></a> 的一个子类。</p></li><li><p><em>exception</em> <code>http.client.`</code>IncompleteRead`</p><p><a href="https://docs.python.org/zh-cn/3.8/library/http.client.html#http.client.HTTPException" target="_blank" rel="noopener"><code>HTTPException</code></a> 的一个子类。</p></li><li><p><em>exception</em> <code>http.client.`</code>ImproperConnectionState`</p><p><a href="https://docs.python.org/zh-cn/3.8/library/http.client.html#http.client.HTTPException" target="_blank" rel="noopener"><code>HTTPException</code></a> 的一个子类。</p></li><li><p><em>exception</em> <code>http.client.`</code>CannotSendRequest`</p><p><a href="https://docs.python.org/zh-cn/3.8/library/http.client.html#http.client.ImproperConnectionState" target="_blank" rel="noopener"><code>ImproperConnectionState</code></a> 的一个子类。</p></li><li><p><em>exception</em> <code>http.client.`</code>CannotSendHeader`</p><p><a href="https://docs.python.org/zh-cn/3.8/library/http.client.html#http.client.ImproperConnectionState" target="_blank" rel="noopener"><code>ImproperConnectionState</code></a> 的一个子类。</p></li><li><p><em>exception</em> <code>http.client.`</code>ResponseNotReady`</p><p><a href="https://docs.python.org/zh-cn/3.8/library/http.client.html#http.client.ImproperConnectionState" target="_blank" rel="noopener"><code>ImproperConnectionState</code></a> 的一个子类。</p></li><li><p><em>exception</em> <code>http.client.`</code>BadStatusLine`</p><p><a href="https://docs.python.org/zh-cn/3.8/library/http.client.html#http.client.HTTPException" target="_blank" rel="noopener"><code>HTTPException</code></a> 的一个子类。 如果服务器反馈了一个我们不理解的 HTTP 状态码就会被引发。</p></li><li><p><em>exception</em> <code>http.client.`</code>LineTooLong`</p><p><a href="https://docs.python.org/zh-cn/3.8/library/http.client.html#http.client.HTTPException" target="_blank" rel="noopener"><code>HTTPException</code></a> 的一个子类。 如果在 HTTP 协议中从服务器接收到过长的行就会被引发。</p></li><li><p><em>exception</em> <code>http.client.`</code>RemoteDisconnected`</p><p><a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#ConnectionResetError" target="_blank" rel="noopener"><code>ConnectionResetError</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/library/http.client.html#http.client.BadStatusLine" target="_blank" rel="noopener"><code>BadStatusLine</code></a> 的一个子类。 当尝试读取响应时的结果是未从连接读取到数据时由 <a href="https://docs.python.org/zh-cn/3.8/library/http.client.html#http.client.HTTPConnection.getresponse" target="_blank" rel="noopener"><code>HTTPConnection.getresponse()</code></a> 引发，表明远端已关闭连接。</p></li></ul><h3 id="常量-1"><a href="#常量-1" class="headerlink" title="常量"></a>常量</h3><ul><li><p><code>http.client.`</code>HTTP_PORT`</p><p>HTTP 协议默认的端口号 (总是 <code>80</code>)。</p></li><li><p><code>http.client.`</code>HTTPS_PORT`</p><p>HTTPS 协议默认的端口号 (总是 <code>443</code>)。</p></li><li><p><code>http.client.`</code>responses`</p><p>这个字典把 HTTP 1.1 状态码映射到 W3C 名称。例如：<code>http.client.responses[http.client.NOT_FOUND]</code> 是 <code>&#39;NOT FOUND</code> （未发现）。</p></li></ul><h2 id="HTTPConnection-对象"><a href="#HTTPConnection-对象" class="headerlink" title="HTTPConnection 对象"></a>HTTPConnection 对象</h2><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li><code>HTTPConnection.request</code>(<em>method</em>, <em>url</em>, <em>body=None</em>, <em>headers={}</em>, <em>, </em>encode_chunked=False*)</li></ul><p>这会使用 HTTP 请求方法 <em>method</em> 和选择器 <em>url</em> 向服务器发送请求。</p><p>如果给定 <em>body</em>，那么给定的数据会在信息头完成之后发送。它可能是一个 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str</code></a> 、一个 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-bytes-like-object" target="_blank" rel="noopener">bytes-like object</a> 、一个打开的 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-file-object" target="_blank" rel="noopener">file object</a>，或者 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#bytes" target="_blank" rel="noopener"><code>bytes</code></a> 迭代器。如果 <em>body</em> 是字符串，它会按 HTTP 默认的 ISO-8859-1 编码；如果是一个字节类对象，它会按原样发送；如果是 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-file-object" target="_blank" rel="noopener">file object</a> ，文件的内容会被发送，这个文件对象应该支持 <code>read()</code> 方法。如果这个文件对象是一个 <a href="https://docs.python.org/zh-cn/3.8/library/io.html#io.TextIOBase" target="_blank" rel="noopener"><code>io.TextIOBase</code></a> 实例， <code>read()</code> 方法返回的数据会按 ISO-8859-1 编码，否则 <code>read()</code> 方法返回的数据会按原样发送；如果 <em>body</em> 是一个迭代器，迭代器中的元素会被发送，直到迭代器耗尽。</p><p><em>headers</em> 参数应是额外的随请求发送的 HTTP 信息头的字典。</p><p>如果 <em>headers</em> 既不包含 Content-Length 也没有 Transfer-Encoding，但存在请求正文，那么这些头字段中的一个会自动设定。如果 <em>body</em> 是 <code>None</code>，那么对于要求正文的方法 (<code>PUT</code>，<code>POST</code>，和 <code>PATCH</code>)，Content-Length 头会被设为 <code>0</code>。如果 <em>body</em> 是字符串或者类似字节的对象，并且也不是 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-file-object" target="_blank" rel="noopener">文件</a>，Content-Length 头会设为正文的长度。任何其他类型的 <em>body</em> （一般是文件或迭代器）会按块编码，这时会自动设定 Transfer-Encoding 头以代替 Content-Length。</p><p>在 <em>headers</em> 中指定 Transfer-Encoding 时， <em>encode_chunked</em> 是唯一相关的参数。如果 <em>encode_chunked</em> 为 <code>False</code>，HTTPConnection 对象会假定所有的编码都由调用代码处理。如果为 <code>True</code>，正文会按块编码。</p><ul><li><p><code>HTTPConnection.`</code>set_debuglevel`(<em>level</em>)</p><p>设置调试等级。 默认的调试等级为 <code>0</code>，意味着不会打印调试输出。 任何大于 <code>0</code> 的值将使得所有当前定义的调试输出被打印到 stdout。 <code>debuglevel</code> 会被传给任何新创建的 <a href="https://docs.python.org/zh-cn/3.8/library/http.client.html#http.client.HTTPResponse" target="_blank" rel="noopener"><code>HTTPResponse</code></a> 对象。</p></li><li><p><code>HTTPConnection.`</code>set_tunnel`(<em>host</em>, <em>port=None</em>, <em>headers=None</em>)</p><p>为 HTTP 连接隧道设置主机和端口。 这将允许通过代理服务器运行连接。</p><p>host 和 port 参数指明隧道连接的位置（即 CONNECT 请求所包含的地址，而 <em>不是</em> 代理服务器的地址）。</p><p>headers 参数应为一个随 CONNECT 请求发送的额外 HTTP 标头的映射。</p><p>例如，要通过一个运行于本机 8080 端口的 HTTPS 代理服务器隧道，我们应当向 <a href="https://docs.python.org/zh-cn/3.8/library/http.client.html#http.client.HTTPSConnection" target="_blank" rel="noopener"><code>HTTPSConnection</code></a> 构造器传入代理的地址，并将我们最终想要访问的主机地址传给 <a href="https://docs.python.org/zh-cn/3.8/library/http.client.html#http.client.HTTPConnection.set_tunnel" target="_blank" rel="noopener"><code>set_tunnel()</code></a> 方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> http.client</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conn = http.client.HTTPSConnection(<span class="string">"localhost"</span>, <span class="number">8080</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conn.set_tunnel(<span class="string">"www.python.org"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conn.request(<span class="string">"HEAD"</span>,<span class="string">"/index.html"</span>)</span><br></pre></td></tr></table></figure></li><li><p>HTTPConnection.connect()</p><p>当对象被创建后连接到指定的服务器。 默认情况下，如果客户端还未建立连接，此函数会在发送请求时自动被调用。</p></li><li><p><code>HTTPConnection.close()</code></p><p>关闭到服务器的连接。</p></li><li><p><code>HTTPConnection.blocksize</code></p><p>用于发送文件类消息体的缓冲区大小。</p></li><li><p><code>HTTPConnection.send(data)</code></p><p>发送数据到服务器 。这个方法直接使用将会在<a href="https://docs.python.org/zh-cn/3.8/library/http.client.html#http.client.HTTPConnection.endheaders" target="_blank" rel="noopener">endheaders()</a>方法后和   <a href="https://docs.python.org/zh-cn/3.8/library/http.client.html#http.client.HTTPConnection.getresponse" target="_blank" rel="noopener"><code>getresponse()</code></a> 方法调用之前被调用</p></li></ul><h2 id="HTTPResponse-对象"><a href="#HTTPResponse-对象" class="headerlink" title="HTTPResponse 对象"></a>HTTPResponse 对象</h2><p><a href="https://docs.python.org/zh-cn/3.8/library/http.client.html#http.client.HTTPResponse" target="_blank" rel="noopener"><code>HTTPResponse</code></a> 对象实例绑定从服务器返回的 Http response 内容。 response是一个可迭代对象,可以使用with上下文语句来管理。</p><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><ul><li><p><code>HTTPResponse.read</code>([<em>amt</em>])</p><p>读取并返回response body</p></li><li><p><code>HTTPResponse.`</code>readinto`(<em>b</em>)</p><p>读取从 response body 的b长度的字节放到 buffer b中，并返回这个字节b。</p></li><li><p><code>HTTPResponse.getheader</code>(<em>name</em>, <em>default=None</em>)</p><p>如果有匹配的header name,则返回 header name的值。如果不止一个header name的名字，则返回所有的值的字符串,通过逗号连接。</p></li><li><p><code>HTTPResponse.getheaders()</code></p><p>返回一个包含header和value的元组元素的列表</p></li><li><p><code>HTTPResponse.fileno()</code></p><p>Return the <code>fileno</code> of the underlying socket.</p><p>返回底层套接字的fileno</p></li><li><p><code>HTTPResponse.msg</code></p><p>一个<code>http.client.HTTPMessage</code> 消息的实例,包含response header。 <code>http.client.HTTPMessage</code> 是 <a href="https://docs.python.org/zh-cn/3.8/library/email.compat32-message.html#email.message.Message" target="_blank" rel="noopener"><code>email.message.Message</code></a>的子类</p></li><li><p><code>HTTPResponse.version</code></p><p>Http response版本号,例如  HTTP/1.0, 11 for HTTP/1.1.</p></li><li><p><code>HTTPResponse.`</code>status`</p><p>由服务器返回的状态码。</p></li><li><p><code>HTTPResponse.reason</code></p><p>从服务器返回的状态码</p></li><li><p><code>HTTPResponse.debuglevel</code></p><p>一个 debugging hook. 如果 <a href="https://docs.python.org/zh-cn/3.8/library/http.client.html#http.client.HTTPResponse.debuglevel" target="_blank" rel="noopener"><code>debuglevel</code></a> 大于0, 消息将会被打印到控制台。</p></li><li><p><code>HTTPResponse.closed</code></p><p>如果stream关闭,返回true</p></li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例:"></a>实例:</h3><p>一个使用get请求的实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> http.client</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conn = http.client.HTTPSConnection(<span class="string">"www.python.org"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conn.request(<span class="string">"GET"</span>, <span class="string">"/"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r1 = conn.getresponse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(r1.status, r1.reason)</span><br><span class="line"><span class="number">200</span> OK</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data1 = r1.read()  <span class="comment"># This will return entire content.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># The following example demonstrates reading data in chunks.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conn.request(<span class="string">"GET"</span>, <span class="string">"/"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r1 = conn.getresponse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> chunk := r1.read(<span class="number">200</span>):</span><br><span class="line"><span class="meta">... </span>    print(repr(chunk))</span><br><span class="line"><span class="string">b'&lt;!doctype html&gt;\n&lt;!--[if"...</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; # Example of an invalid request</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; conn = http.client.HTTPSConnection("docs.python.org")</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; conn.request("GET", "/parrot.spam")</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; r2 = conn.getresponse()</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print(r2.status, r2.reason)</span></span><br><span class="line"><span class="string">404 Not Found</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; data2 = r2.read()</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; conn.close()</span></span><br></pre></td></tr></table></figure><p>一个是用<code>head</code>方法的实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> http.client</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conn = http.client.HTTPSConnection(<span class="string">"www.python.org"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conn.request(<span class="string">"HEAD"</span>, <span class="string">"/"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res = conn.getresponse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(res.status, res.reason)</span><br><span class="line"><span class="number">200</span> OK</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = res.read()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(len(data))</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data == <span class="string">b''</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>一个使用<code>post</code>提交请求的实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> http.client, urllib.parse</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>params = urllib.parse.urlencode(&#123;<span class="string">'@number'</span>: <span class="number">12524</span>, <span class="string">'@type'</span>: <span class="string">'issue'</span>, <span class="string">'@action'</span>: <span class="string">'show'</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>headers = &#123;<span class="string">"Content-type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>,</span><br><span class="line"><span class="meta">... </span>           <span class="string">"Accept"</span>: <span class="string">"text/plain"</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conn = http.client.HTTPConnection(<span class="string">"bugs.python.org"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conn.request(<span class="string">"POST"</span>, <span class="string">""</span>, params, headers)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response = conn.getresponse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(response.status, response.reason)</span><br><span class="line"><span class="number">302</span> Found</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = response.read()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data</span><br><span class="line"><span class="string">b'Redirecting to &lt;a href="http://bugs.python.org/issue12524"&gt;http://bugs.python.org/issue12524&lt;/a&gt;'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conn.close()</span><br></pre></td></tr></table></figure><p>一个使用<code>HTTP PUT</code>请求的实例 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># This creates an HTTP message</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># with the content of BODY as the enclosed representation</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># for the resource http://localhost:8080/file</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> http.client</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>BODY = <span class="string">"***filecontents***"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conn = http.client.HTTPConnection(<span class="string">"localhost"</span>, <span class="number">8080</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>conn.request(<span class="string">"PUT"</span>, <span class="string">"/file"</span>, BODY)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response = conn.getresponse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(response.status, response.reason)</span><br><span class="line"><span class="number">200</span>, OK</span><br></pre></td></tr></table></figure><h2 id="HTTPMessage-对象"><a href="#HTTPMessage-对象" class="headerlink" title="HTTPMessage 对象"></a>HTTPMessage 对象</h2><p>一个 <code>http.client.HTTPMessage</code>的实例包含了http response 请求头. 是 <a href="https://docs.python.org/zh-cn/3.8/library/email.compat32-message.html#email.message.Message" target="_blank" rel="noopener"><code>email.message.Message</code></a>类的具体实现.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过阅读源码加深了对http协议的理解,看python实现的方式受益良多。继续加油!</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库之-http&quot;&gt;&lt;a href=&quot;#python-标准库之-http&quot; class=&quot;headerlink&quot; title=&quot;python 标准库之 http&quot;&gt;&lt;/a&gt;python 标准库之 http&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/jeffsui/app_image_resource/blob/master/20191223_blog_2.jpg?raw=true&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;山雨欲来风满楼,最近不是很太平,希望世界和平吧。&lt;/p&gt;
&lt;h2 id=&quot;python-标准库学习-之-http&quot;&gt;&lt;a href=&quot;#python-标准库学习-之-http&quot; class=&quot;headerlink&quot; title=&quot;python 标准库学习 之  http&quot;&gt;&lt;/a&gt;python 标准库学习 之  http&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/http.html#module-http&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;http&lt;/code&gt;&lt;/a&gt; 是一个包，它收集了多个用于处理超文本传输协议的模块:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/http.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考文档&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/http.client.html#module-http.client&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;http.client&lt;/code&gt;&lt;/a&gt; 是一个低层级的 HTTP 协议客户端；对于高层级的 URL 访问请使用 &lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/urllib.request.html#module-urllib.request&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;urllib.request&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/http.server.html#module-http.server&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;http.server&lt;/code&gt;&lt;/a&gt; 包含基于 &lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/socketserver.html#module-socketserver&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;socketserver&lt;/code&gt;&lt;/a&gt; 的基本 HTTP 服务类&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/http.cookies.html#module-http.cookies&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;http.cookies&lt;/code&gt;&lt;/a&gt; 包含一些有用来实现通过 cookies 进行状态管理的工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/http.cookiejar.html#module-http.cookiejar&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;http.cookiejar&lt;/code&gt;&lt;/a&gt; 提供了 cookies 的持久化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本次只整理 http.client的内容,后面持续更新。&lt;/p&gt;
&lt;h2 id=&quot;常量&quot;&gt;&lt;a href=&quot;#常量&quot; class=&quot;headerlink&quot; title=&quot;常量&quot;&gt;&lt;/a&gt;常量&lt;/h2&gt;&lt;p&gt;&lt;code&gt;class http.HTTPStatus&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用方法：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; http &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; HTTPStatus&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;HTTPStatus.OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;HTTPStatus.OK: &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;HTTPStatus.OK == &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;HTTPStatus.OK.value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;HTTPStatus.OK.phrase&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;OK&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;HTTPStatus.OK.description&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;Request fulfilled, document follows&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;list(HTTPStatus)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&amp;lt;HTTPStatus.CONTINUE: &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&amp;gt;, &amp;lt;HTTPStatus.SWITCHING_PROTOCOLS: &lt;span class=&quot;number&quot;&gt;101&lt;/span&gt;&amp;gt;, ...]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="http" scheme="https://pinghailinfeng.gitee.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>python standard library glob</title>
    <link href="https://pinghailinfeng.gitee.io/2020/01/07/python-standard-library-glob/"/>
    <id>https://pinghailinfeng.gitee.io/2020/01/07/python-standard-library-glob/</id>
    <published>2020-01-07T01:37:46.000Z</published>
    <updated>2020-01-07T03:23:55.275Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库之-glob"><a href="#python-标准库之-glob" class="headerlink" title="python 标准库之 glob"></a>python 标准库之 glob</h1><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200107_cold.jpg?raw=true" alt></p><p>在严寒的冬季,温暖人的只有笑脸了吧。</p><h2 id="今天继续给大家介绍python标准库-glob"><a href="#今天继续给大家介绍python标准库-glob" class="headerlink" title="今天继续给大家介绍python标准库 glob"></a>今天继续给大家介绍python标准库 glob</h2><p><a href="https://docs.python.org/zh-cn/3.8/library/glob.html" target="_blank" rel="noopener">参考文档</a></p><p><a href="https://docs.python.org/zh-cn/3.8/library/glob.html#module-glob" target="_blank" rel="noopener"><code>glob</code></a> 模块可根据 Unix 终端所用规则找出所有匹配特定模式的路径名，但会按不确定的顺序返回结果。支持查找文件只用到三个匹配符：’*’, “?”, “[ ]”，不包括波浪线~,因为这个符号在linux代表当前用户的home目录。</p><p>对于波浪号和终端变量扩展，请使用 <a href="https://docs.python.org/zh-cn/3.8/library/os.path.html#os.path.expanduser" target="_blank" rel="noopener"><code>os.path.expanduser()</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/library/os.path.html#os.path.expandvars" target="_blank" rel="noopener"><code>os.path.expandvars()</code></a>)。</p><p>根据阅读代码发现,这个底层使用cpython实现, 有兴趣的童鞋可以移步到源代码: <a href="https://github.com/python/cpython/tree/3.8/Lib/glob.py" target="_blank" rel="noopener">Lib/glob.py</a></p><p>相对于高级面向对象路径查找模块<a href="https://docs.python.org/zh-cn/3.8/library/pathlib.html#module-pathlib" target="_blank" rel="noopener">pathlib</a>  ,glob更偏向底层实现。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li><p><code>glob.glob(pathname, *, recursive=False)</code></p><blockquote><p>返回匹配 <em>pathname</em> 的可能为空的路径名列表，其中的元素必须为包含一个路径信息的字符串。 <em>pathname</em> 可以是绝对路径 (如 <code>/usr/src/Python-1.5/Makefile</code>) 或相对路径 (如 <code>../../Tools/*/*.gif</code>)，并且可包含 shell 风格的通配符。 结果也将包含无效的符号链接 (与在 shell 中一致)。 结果是否排序取决于具体文件系统。</p><p>如果 <em>recursive</em> 为真值，则模式 “<code>**</code>“ 将匹配目录中的任何文件以及零个或多个目录、子目录和符号链接。 如果模式加了一个 <a href="https://docs.python.org/zh-cn/3.8/library/os.html#os.sep" target="_blank" rel="noopener"><code>os.sep</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/os.html#os.altsep" target="_blank" rel="noopener"><code>os.altsep</code></a> 则将不匹配文件。</p></blockquote><p><strong>备注</strong>：在一个较大的目录树中使用 “<code>**</code>“ 模式可能会消耗非常多的时间。 <em>3.5 版更改:</em> 支持使用 “<code>**</code>“ 的递归 glob</p></li><li><p><code>glob.iglob(pathname, *, recursive=False)</code></p><blockquote><p>返回一个 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-iterator" target="_blank" rel="noopener">iterator</a>，它会产生与 <a href="https://docs.python.org/zh-cn/3.8/library/glob.html#module-glob" target="_blank" rel="noopener"><code>glob()</code></a> 相同的结果，但不会实际地同时保存它们。</p></blockquote></li><li><p><code>glob.escape(pathname)</code></p><blockquote><p>转义所有特殊字符 (<code>&#39;?&#39;</code>, <code>&#39;*&#39;</code> 和 <code>&#39;[&#39;</code>)。 这适用于当你想要匹配可能带有特殊字符的任意字符串字面值的情况。 在 drive/UNC 共享点中的特殊字符不会被转义，例如在 Windows 上 <code>escape(&#39;//?/c:/Quo vadis?.txt&#39;)</code> 将返回 <code>&#39;//?/c:/Quo vadis[?].txt&#39;</code>。</p></blockquote></li></ul><a id="more"></a><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#例如，考虑一个包含以下内容的目录：文件 1.gif, 2.txt, card.gif 以及一个子目录 sub 其中只包含一个文件 3.txt. glob() 将产生如下结果。 请注意路径的任何开头部分都将被保留。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">'./[0-9].*'</span>)</span><br><span class="line">[<span class="string">'./1.gif'</span>, <span class="string">'./2.txt'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">'*.gif'</span>)</span><br><span class="line">[<span class="string">'1.gif'</span>, <span class="string">'card.gif'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">'?.gif'</span>)</span><br><span class="line">[<span class="string">'1.gif'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">'**/*.txt'</span>, recursive=<span class="literal">True</span>)</span><br><span class="line">[<span class="string">'2.txt'</span>, <span class="string">'sub/3.txt'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">'./**/'</span>, recursive=<span class="literal">True</span>)</span><br><span class="line">[<span class="string">'./'</span>, <span class="string">'./sub/'</span>]</span><br></pre></td></tr></table></figure><p>如果目录包含以 <code>.</code> 打头的文件，它们默认将不会被匹配。 例如，考虑一个包含 <code>card.gif</code> 和 <code>.card.gif</code> 的目录:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> glob</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">'*.gif'</span>)</span><br><span class="line">[<span class="string">'card.gif'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>glob.glob(<span class="string">'.c*'</span>)</span><br><span class="line">[<span class="string">'.card.gif'</span>]</span><br></pre></td></tr></table></figure><h2 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h2><blockquote><p> ”*”匹配任意0个或多个字符；”?”匹配任意单个字符；”[ ]”匹配指定范围内的字符，如：[0-9]匹配数字。</p></blockquote><p>如下图所示的文件结构</p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200107_snapshot.PNG?raw=true" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="comment"># 返回上一级所有目录</span></span><br><span class="line">print(glob.glob(<span class="string">r"../*"</span>))</span><br><span class="line"><span class="comment"># 返回上本级所有目录</span></span><br><span class="line">print(glob.glob(<span class="string">r"./*"</span>))</span><br><span class="line"><span class="comment"># 本级所有文件</span></span><br><span class="line">print(glob.glob(<span class="string">r"./*.*"</span>))</span><br><span class="line"><span class="comment"># 本级所有.py文件</span></span><br><span class="line">print(glob.glob(<span class="string">'./*.py'</span>))</span><br><span class="line"><span class="comment">#两级目录所有的.py文件</span></span><br><span class="line">print(glob.glob(<span class="string">'./*/*.py'</span>))</span><br><span class="line"><span class="comment"># c盘所有文件</span></span><br><span class="line">print(glob.glob(<span class="string">r'c:/*'</span>))</span><br><span class="line"><span class="comment">#C盘所有包含pr/po/br/bo的目录</span></span><br><span class="line">print(glob.glob(<span class="string">'C:/*[PB][RO]*'</span>))</span><br><span class="line"><span class="comment">#C盘所有包含P_o的目录</span></span><br><span class="line">print(glob.glob(<span class="string">'C:/*P?O*'</span>))</span><br><span class="line"><span class="comment">#C盘两级目录所有的.txt文件</span></span><br><span class="line">print(glob.glob(<span class="string">'C:/*/*.txt'</span>))</span><br></pre></td></tr></table></figure><p>显示内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">['..\\class_demo.py', '..\\excel', '..\\flask_test', '..\\glob', '..\\image', '..\\mymodule', '..\\numpy', '..\\opencv', '..\\opencv_demo', '..\\othermodule', '..\\ppt', '..\\python_enuerate.py', '..\\python速成', '..\\selenium_test', '..\\交换算法.py', '..\\爬虫']</span><br><span class="line">['.\\app', '.\\config', '.\\data', '.\\glob_demo.py', '.\\other.py', '.\\readme.md']</span><br><span class="line">['.\\glob_demo.py', '.\\other.py', '.\\readme.md']</span><br><span class="line">['.\\glob_demo.py', '.\\other.py']</span><br><span class="line">['.\\app\\__init__.py', '.\\config\\config.py']</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>阅读源码中发现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""Filename globbing utility."""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> fnmatch</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">__all__ = [<span class="string">"glob"</span>, <span class="string">"iglob"</span>, <span class="string">"escape"</span>]</span><br></pre></td></tr></table></figure><p>顺便把<code>__all__</code>用法整理下,算是查漏补缺,</p><h2 id="all"><a href="#all" class="headerlink" title="__all__"></a><code>__all__</code></h2><p>问题描述:</p><blockquote><p>在研读pythonmodel源码时,会看到一些<em>.py文件或者<strong>init</strong>.py中会使用<strong>all</strong>。对于<strong>all</strong>具体所其的作用是什么?在此对查取结果进行总结下。2.总结(1)在<strong>init</strong>.py文件中表示形式:<strong>all</strong>=[“module_a”,”module_b”]在使用frompackage_nameimport</em>时,表示import该package中的两个module及两个module相关的类、方</p></blockquote><p>表示形式: <code>__all__=[&quot;class_name&quot;,&quot;function_name&quot;]</code></p><p>在使用 from module_name import * 时,表示import 该module中的<strong>all</strong>中所列出的。</p><p>使用注意事项:</p><p>(1) 在普通的*.py中, 使用<strong>all</strong> 时,可以使用<strong>all</strong>列出的 类、函数、变量等,不使用<strong>all</strong>时会使用module中的所有不以下划线开头的成员。</p><p>(2)<strong>all</strong>只能影响到 from import * 这种import 方式, 对于from import 的 import 方式没有影响。</p><p>(3) <strong>all</strong> 的数据类型:List or Tuple </p><h2 id="关联的模块"><a href="#关联的模块" class="headerlink" title="关联的模块"></a>关联的模块</h2><p>模块 <a href="https://docs.python.org/zh-cn/3.8/library/fnmatch.html#module-fnmatch" target="_blank" rel="noopener"><code>fnmatch</code></a></p><p>Shell 风格文件名（而非路径）扩展</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库之-glob&quot;&gt;&lt;a href=&quot;#python-标准库之-glob&quot; class=&quot;headerlink&quot; title=&quot;python 标准库之 glob&quot;&gt;&lt;/a&gt;python 标准库之 glob&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/jeffsui/app_image_resource/blob/master/20200107_cold.jpg?raw=true&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;在严寒的冬季,温暖人的只有笑脸了吧。&lt;/p&gt;
&lt;h2 id=&quot;今天继续给大家介绍python标准库-glob&quot;&gt;&lt;a href=&quot;#今天继续给大家介绍python标准库-glob&quot; class=&quot;headerlink&quot; title=&quot;今天继续给大家介绍python标准库 glob&quot;&gt;&lt;/a&gt;今天继续给大家介绍python标准库 glob&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/glob.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/glob.html#module-glob&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;glob&lt;/code&gt;&lt;/a&gt; 模块可根据 Unix 终端所用规则找出所有匹配特定模式的路径名，但会按不确定的顺序返回结果。支持查找文件只用到三个匹配符：’*’, “?”, “[ ]”，不包括波浪线~,因为这个符号在linux代表当前用户的home目录。&lt;/p&gt;
&lt;p&gt;对于波浪号和终端变量扩展，请使用 &lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/os.path.html#os.path.expanduser&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;os.path.expanduser()&lt;/code&gt;&lt;/a&gt; 和 &lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/os.path.html#os.path.expandvars&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;os.path.expandvars()&lt;/code&gt;&lt;/a&gt;)。&lt;/p&gt;
&lt;p&gt;根据阅读代码发现,这个底层使用cpython实现, 有兴趣的童鞋可以移步到源代码: &lt;a href=&quot;https://github.com/python/cpython/tree/3.8/Lib/glob.py&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Lib/glob.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;相对于高级面向对象路径查找模块&lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/pathlib.html#module-pathlib&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pathlib&lt;/a&gt;  ,glob更偏向底层实现。&lt;/p&gt;
&lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;glob.glob(pathname, *, recursive=False)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;返回匹配 &lt;em&gt;pathname&lt;/em&gt; 的可能为空的路径名列表，其中的元素必须为包含一个路径信息的字符串。 &lt;em&gt;pathname&lt;/em&gt; 可以是绝对路径 (如 &lt;code&gt;/usr/src/Python-1.5/Makefile&lt;/code&gt;) 或相对路径 (如 &lt;code&gt;../../Tools/*/*.gif&lt;/code&gt;)，并且可包含 shell 风格的通配符。 结果也将包含无效的符号链接 (与在 shell 中一致)。 结果是否排序取决于具体文件系统。&lt;/p&gt;
&lt;p&gt;如果 &lt;em&gt;recursive&lt;/em&gt; 为真值，则模式 “&lt;code&gt;**&lt;/code&gt;“ 将匹配目录中的任何文件以及零个或多个目录、子目录和符号链接。 如果模式加了一个 &lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/os.html#os.sep&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;os.sep&lt;/code&gt;&lt;/a&gt; 或 &lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/os.html#os.altsep&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;os.altsep&lt;/code&gt;&lt;/a&gt; 则将不匹配文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;：在一个较大的目录树中使用 “&lt;code&gt;**&lt;/code&gt;“ 模式可能会消耗非常多的时间。 &lt;em&gt;3.5 版更改:&lt;/em&gt; 支持使用 “&lt;code&gt;**&lt;/code&gt;“ 的递归 glob&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;glob.iglob(pathname, *, recursive=False)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;返回一个 &lt;a href=&quot;https://docs.python.org/zh-cn/3.8/glossary.html#term-iterator&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;iterator&lt;/a&gt;，它会产生与 &lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/glob.html#module-glob&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;glob()&lt;/code&gt;&lt;/a&gt; 相同的结果，但不会实际地同时保存它们。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;glob.escape(pathname)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;转义所有特殊字符 (&lt;code&gt;&amp;#39;?&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;*&amp;#39;&lt;/code&gt; 和 &lt;code&gt;&amp;#39;[&amp;#39;&lt;/code&gt;)。 这适用于当你想要匹配可能带有特殊字符的任意字符串字面值的情况。 在 drive/UNC 共享点中的特殊字符不会被转义，例如在 Windows 上 &lt;code&gt;escape(&amp;#39;//?/c:/Quo vadis?.txt&amp;#39;)&lt;/code&gt; 将返回 &lt;code&gt;&amp;#39;//?/c:/Quo vadis[?].txt&amp;#39;&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="glob" scheme="https://pinghailinfeng.gitee.io/tags/glob/"/>
    
      <category term="__all__" scheme="https://pinghailinfeng.gitee.io/tags/all/"/>
    
  </entry>
  
  <entry>
    <title>python standard library textwrap</title>
    <link href="https://pinghailinfeng.gitee.io/2020/01/06/python-standard-library-textwrap/"/>
    <id>https://pinghailinfeng.gitee.io/2020/01/06/python-standard-library-textwrap/</id>
    <published>2020-01-06T06:56:14.000Z</published>
    <updated>2020-01-06T07:33:40.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-标准库-之-textwrap"><a href="#Python-标准库-之-textwrap" class="headerlink" title="Python 标准库 之 textwrap"></a>Python 标准库 之 textwrap</h1><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200106_code_2.jpg?raw=true" alt></p><h2 id="今天给大家介绍-python标准库中的-textwrap"><a href="#今天给大家介绍-python标准库中的-textwrap" class="headerlink" title="今天给大家介绍 python标准库中的 textwrap"></a>今天给大家介绍 python标准库中的 textwrap</h2><p><a href="https://docs.python.org/zh-cn/3.8/library/textwrap.html" target="_blank" rel="noopener">参考文档</a></p><p>标准库 <code>textwrap</code> 是一个关于文本自动换行和填充的模块。</p><p>关于这个模块官网介绍如下:</p><p><a href="https://docs.python.org/zh-cn/3.8/library/textwrap.html#module-textwrap" target="_blank" rel="noopener"><code>textwrap</code></a> 模块提供了一些快捷函数，以及可以完成所有工作的类 <a href="https://docs.python.org/zh-cn/3.8/library/textwrap.html#textwrap.TextWrapper" target="_blank" rel="noopener"><code>TextWrapper</code></a>。 </p><p>如果你只是要对一两个文本字符串进行自动换行或填充，快捷函数应该就够用了；</p><p>否则的话，你应该使用 <a href="https://docs.python.org/zh-cn/3.8/library/textwrap.html#textwrap.TextWrapper" target="_blank" rel="noopener"><code>TextWrapper</code></a> 的实例来提高效率。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li><code>textwrap.wrap(*text*, *width=70*, kwargs)</code></li></ul><p>对 <em>text</em> (字符串) 中的单独段落自动换行以使每行长度最多为 <em>width</em> 个字符。 返回由输出行组成的列表，行尾不带换行符。</p><ul><li><code>textwrap.fill</code>(<em>text</em>, <em>width=70</em>, kwargs)</li></ul><p>对 <em>text</em> 中的单独段落自动换行，并返回一个包含被自动换行段落的单独字符串。 <a href="https://docs.python.org/zh-cn/3.8/library/textwrap.html#textwrap.fill" target="_blank" rel="noopener"><code>fill()</code></a> 是以下语句的快捷方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"\n"</span>.join(wrap(text, ...))</span><br></pre></td></tr></table></figure><ul><li><code>textwrap.shorten(text, width, kwargs)</code></li></ul><p>折叠并截短给定的 <em>text</em> 以符合给定的 <em>width</em>。</p><a id="more"></a><ul><li><code>textwrap.dedent</code>(<em>text</em>)`</li></ul><p>移除 <em>text</em> 中每一行的任何相同前缀空白符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># end first line with \ to avoid the empty line!</span></span><br><span class="line">s = <span class="string">'''\</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">  world</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(repr(s))          <span class="comment"># prints '    hello\n      world\n    '</span></span><br><span class="line">print(repr(dedent(s)))  <span class="comment"># prints 'hello\n  world\n'</span></span><br></pre></td></tr></table></figure><ul><li><code>textwrap.</code>indent(<em>text</em>, <em>prefix</em>, predicate=None)`</li></ul><p>将 <em>prefix</em> 添加到 <em>text</em> 中选定行的开头。</p><p>通过调用 <code>text.splitlines(True)</code> 来对行进行拆分。</p><p>默认情况下，<em>prefix</em> 会被添加到所有不是只由空白符（包括任何行结束符）组成的行。</p><p>例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'hello\n\n \nworld'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>indent(s, <span class="string">'  '</span>)</span><br><span class="line"><span class="string">'  hello\n\n \n  world'</span></span><br></pre></td></tr></table></figure><p>可选的 <em>predicate</em> 参数可用来控制哪些行要缩进。 例如，可以很容易地为空行或只有空白符的行添加 <em>prefix</em>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(indent(s, <span class="string">'+ '</span>, <span class="keyword">lambda</span> line: <span class="literal">True</span>))</span><br><span class="line">+ hello</span><br><span class="line">+</span><br><span class="line">+</span><br><span class="line">+ world</span><br></pre></td></tr></table></figure><h2 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h2><ul><li><p><code>width</code></p><p>(默认: <code>70</code>) 自动换行的最大行长度。 只要输入文本中没有长于 <a href="https://docs.python.org/zh-cn/3.8/library/textwrap.html#textwrap.TextWrapper.width" target="_blank" rel="noopener"><code>width</code></a> 的单个单词，<a href="https://docs.python.org/zh-cn/3.8/library/textwrap.html#textwrap.TextWrapper" target="_blank" rel="noopener"><code>TextWrapper</code></a> 就能保证没有长于 <a href="https://docs.python.org/zh-cn/3.8/library/textwrap.html#textwrap.TextWrapper.width" target="_blank" rel="noopener"><code>width</code></a> 个字符的输出行。</p></li><li><p><code>expand_tabs</code></p><p>(默认: <code>True</code>) 如果为真值，则 <em>text</em> 中所有的制表符将使用 <em>text</em> 的 <code>expandtabs()</code> 方法扩展为空格符。</p></li><li><p><code>tabsize</code></p><p>(默认: <code>8</code>) 如果 <a href="https://docs.python.org/zh-cn/3.8/library/textwrap.html#textwrap.TextWrapper.expand_tabs" target="_blank" rel="noopener"><code>expand_tabs</code></a> 为真值，则 <em>text</em> 中所有的制表符将扩展为零个或多个空格，具体取决于当前列位置和给定的制表宽度。</p></li><li><p><code>replace_whitespace</code></p><p>(default: <code>True</code>) 如果为真值，在制表符扩展之后、自动换行之前，<a href="https://docs.python.org/zh-cn/3.8/library/textwrap.html#textwrap.wrap" target="_blank" rel="noopener"><code>wrap()</code></a> 方法将把每个空白字符都替换为单个空格。 会被替换的空白字符如下：制表，换行，垂直制表，进纸和回车 (<code>&#39;\t\n\v\f\r&#39;</code>)。注解 如果 <a href="https://docs.python.org/zh-cn/3.8/library/textwrap.html#textwrap.TextWrapper.expand_tabs" target="_blank" rel="noopener"><code>expand_tabs</code></a> 为假值且 <a href="https://docs.python.org/zh-cn/3.8/library/textwrap.html#textwrap.TextWrapper.replace_whitespace" target="_blank" rel="noopener"><code>replace_whitespace</code></a> 为真值，每个制表符将被替换为单个空格，这与制表符扩展是 <em>不</em> 一样的。注解 如果 <a href="https://docs.python.org/zh-cn/3.8/library/textwrap.html#textwrap.TextWrapper.replace_whitespace" target="_blank" rel="noopener"><code>replace_whitespace</code></a> 为假值，在一行的中间有可能出现换行符并导致怪异的输出。 因此，文本应当（使用 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#str.splitlines" target="_blank" rel="noopener"><code>str.splitlines()</code></a> 或类似方法）拆分为段落并分别进行自动换行。</p></li><li><p><code>drop_whitespace</code></p><p>(默认: <code>True</code>) 如果为真值，每一行开头和末尾的空白字符（在包装之后、缩进之前）会被丢弃。 但是段落开头的空白字符如果后面不带任何非空白字符则不会被丢弃。 如果被丢弃的空白字符占据了一个整行，则该整行将被丢弃。</p></li><li><p><code>initial_indent</code></p><p>(默认: <code>&#39;&#39;</code>) 将被添加到被自动换行输出内容的第一行的字符串。 其长度会被计入第一行的长度。 空字符串不会被缩进。</p></li><li><p><code>subsequent_indent</code></p><p>(default: <code>&#39;&#39;</code>) 将被添加到被自动换行输出内容除第一行外的所有行的字符串。 其长度会被计入除行一行外的所有行的长度。</p></li><li><p><code>fix_sentence_endings</code></p><p>(默认: <code>False</code>) 如果为真值，<a href="https://docs.python.org/zh-cn/3.8/library/textwrap.html#textwrap.TextWrapper" target="_blank" rel="noopener"><code>TextWrapper</code></a> 将尝试检测句子结尾并确保句子间总是以恰好两个空格符分隔。 对于使用等宽字体的文本来说通常都需要这样。 但是，句子检测算法并不完美：它假定句子结尾是一个小写字母加字符 <code>&#39;.&#39;</code>, <code>&#39;!&#39;</code> 或 <code>&#39;?&#39;</code> 中的一个，并可能带有字符 <code>&#39;&quot;&#39;</code> 或 <code>&quot;&#39;&quot;</code>，最后以一个空格结束。 此算法的问题之一是它无法区分以下文本中的 “Dr.”<code>[...] Dr. Frankenstein&#39;s monster [...]</code>和以下文本中的 “Spot.”<code>[...] See Spot. See Spot run [...]</code><a href="https://docs.python.org/zh-cn/3.8/library/textwrap.html#textwrap.TextWrapper.fix_sentence_endings" target="_blank" rel="noopener"><code>fix_sentence_endings</code></a> 默认为假值。由于句子检测算法依赖于 <code>string.lowercase</code> 来确定“小写字母”，以及约定在句点后使用两个空格来分隔处于同一行的句子，因此只适用于英语文本。</p></li><li><p><code>break_long_words</code></p><p>(默认: <code>True</code>) 如果为真值，则长度超过 <a href="https://docs.python.org/zh-cn/3.8/library/textwrap.html#textwrap.TextWrapper.width" target="_blank" rel="noopener"><code>width</code></a> 的单词将被分开以保证行的长度不会超过 <a href="https://docs.python.org/zh-cn/3.8/library/textwrap.html#textwrap.TextWrapper.width" target="_blank" rel="noopener"><code>width</code></a>。 如果为假值，超长单词不会被分开，因而某些行的长度可能会超过 <a href="https://docs.python.org/zh-cn/3.8/library/textwrap.html#textwrap.TextWrapper.width" target="_blank" rel="noopener"><code>width</code></a>。 （超长单词将被单独作为一行，以尽量减少超出 <a href="https://docs.python.org/zh-cn/3.8/library/textwrap.html#textwrap.TextWrapper.width" target="_blank" rel="noopener"><code>width</code></a> 的情况。）</p></li><li><p><code>break_on_hyphens</code></p><p>(默认: <code>True</code>) 如果为真值，将根据英语的惯例首选在空白符和复合词的连字符之后自动换行。 如果为假值，则只有空白符会被视为合适的潜在断行位置，但如果你确实不希望出现分开的单词则你必须将 <a href="https://docs.python.org/zh-cn/3.8/library/textwrap.html#textwrap.TextWrapper.break_long_words" target="_blank" rel="noopener"><code>break_long_words</code></a> 设为假值。 之前版本的默认行为总是允许分开带有连字符的单词。</p></li><li><p><code>max_lines</code></p><p>(默认: <code>None</code>) 如果不为 <code>None</code>，则输出内容将最多包含 <em>max_lines</em> 行，并使 <em>placeholder</em> 出现在输出内容的末尾。</p></li><li><p><code>placeholder</code></p><p>(默认: <code>&#39; [...]&#39;</code>) 该文本将在输出文本被截短时出现在文本末尾。</p></li></ul><h2 id="公有方法"><a href="#公有方法" class="headerlink" title="公有方法"></a>公有方法</h2><ul><li><p><code>wrap</code>(<em>text</em>)</p><p>对 <em>text</em> (字符串) 中的单独段落自动换行以使每行长度最多为 <a href="https://docs.python.org/zh-cn/3.8/library/textwrap.html#textwrap.TextWrapper.width" target="_blank" rel="noopener"><code>width</code></a> 个字符。 所有自动换行选项均获取自 <a href="https://docs.python.org/zh-cn/3.8/library/textwrap.html#textwrap.TextWrapper" target="_blank" rel="noopener"><code>TextWrapper</code></a> 实例的实例属性。 返回由输出行组成的列表，行尾不带换行符。 如果自动换行输出结果没有任何内容，则返回空列表。</p></li><li><p><code>fill</code>(<em>text</em>)</p><p>对 <em>text</em> 中的单独段落自动换行并返回包含被自动换行段落的单独字符串。</p></li></ul><h2 id="具体实例"><a href="#具体实例" class="headerlink" title="具体实例"></a>具体实例</h2><p>比如我想格式化一个文本,每一行要求输出的文字固定字符的长度30,就可以使用textwrap这个模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> textwrap <span class="keyword">import</span> wrap</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">'This is python programming language. One of its kind, it is also one of the most popular language in the world.'</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = wrap(text = string, width = <span class="number">30</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> s</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'This is python programming'</span>, <span class="string">'language. One of its kind, it'</span>, <span class="string">'is also one of the most'</span>, <span class="string">'popular language in the world.'</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line"><span class="keyword">print</span> i</span><br><span class="line"> </span><br><span class="line">This <span class="keyword">is</span> python programming</span><br><span class="line">language. One of its kind, it</span><br><span class="line"><span class="keyword">is</span> also one of the most</span><br><span class="line">popular language <span class="keyword">in</span> the world.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python-标准库-之-textwrap&quot;&gt;&lt;a href=&quot;#Python-标准库-之-textwrap&quot; class=&quot;headerlink&quot; title=&quot;Python 标准库 之 textwrap&quot;&gt;&lt;/a&gt;Python 标准库 之 textwrap&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/jeffsui/app_image_resource/blob/master/20200106_code_2.jpg?raw=true&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;今天给大家介绍-python标准库中的-textwrap&quot;&gt;&lt;a href=&quot;#今天给大家介绍-python标准库中的-textwrap&quot; class=&quot;headerlink&quot; title=&quot;今天给大家介绍 python标准库中的 textwrap&quot;&gt;&lt;/a&gt;今天给大家介绍 python标准库中的 textwrap&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/textwrap.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;标准库 &lt;code&gt;textwrap&lt;/code&gt; 是一个关于文本自动换行和填充的模块。&lt;/p&gt;
&lt;p&gt;关于这个模块官网介绍如下:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/textwrap.html#module-textwrap&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;textwrap&lt;/code&gt;&lt;/a&gt; 模块提供了一些快捷函数，以及可以完成所有工作的类 &lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/textwrap.html#textwrap.TextWrapper&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;TextWrapper&lt;/code&gt;&lt;/a&gt;。 &lt;/p&gt;
&lt;p&gt;如果你只是要对一两个文本字符串进行自动换行或填充，快捷函数应该就够用了；&lt;/p&gt;
&lt;p&gt;否则的话，你应该使用 &lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/textwrap.html#textwrap.TextWrapper&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;TextWrapper&lt;/code&gt;&lt;/a&gt; 的实例来提高效率。&lt;/p&gt;
&lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;textwrap.wrap(*text*, *width=70*, kwargs)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对 &lt;em&gt;text&lt;/em&gt; (字符串) 中的单独段落自动换行以使每行长度最多为 &lt;em&gt;width&lt;/em&gt; 个字符。 返回由输出行组成的列表，行尾不带换行符。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;textwrap.fill&lt;/code&gt;(&lt;em&gt;text&lt;/em&gt;, &lt;em&gt;width=70&lt;/em&gt;, kwargs)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对 &lt;em&gt;text&lt;/em&gt; 中的单独段落自动换行，并返回一个包含被自动换行段落的单独字符串。 &lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/textwrap.html#textwrap.fill&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;fill()&lt;/code&gt;&lt;/a&gt; 是以下语句的快捷方式&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;.join(wrap(text, ...))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;textwrap.shorten(text, width, kwargs)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;折叠并截短给定的 &lt;em&gt;text&lt;/em&gt; 以符合给定的 &lt;em&gt;width&lt;/em&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
  </entry>
  
  <entry>
    <title>python standard library http.server</title>
    <link href="https://pinghailinfeng.gitee.io/2020/01/05/python-standard-library-http-server/"/>
    <id>https://pinghailinfeng.gitee.io/2020/01/05/python-standard-library-http-server/</id>
    <published>2020-01-05T13:11:30.000Z</published>
    <updated>2020-01-06T06:53:31.924Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库之-http-server"><a href="#python-标准库之-http-server" class="headerlink" title="python 标准库之 http.server"></a>python 标准库之 http.server</h1><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200105_with_my_angle.jpg?raw=true" alt></p><p>今天下午主要是陪我闺女,组装完成一个桌面足球,很开心的一下午。</p><p>孩子的童年只有一次,有时间多陪陪孩子吧。</p><h2 id="python-标准库-http-server"><a href="#python-标准库-http-server" class="headerlink" title="python 标准库 http.server"></a>python 标准库 http.server</h2><p>从python2时代开始 SimpleHttpServer就陪伴我走过那些快乐的时光。可以自己建立一个简单的文件服务器,让同事们通过浏览器就可以访问我电脑上的资源,而不需要http server或者 ftp软件。</p><p>到了python3时代,这个模块被合并进了http.server。</p><p><a href="https://docs.python.org/zh-cn/3.8/library/http.server.html" target="_blank" rel="noopener">参考网址</a></p><p>这个模块定义了实现 HTTP 服务器（ Web 服务器）的类 。</p><p> <a href="https://docs.python.org/zh-cn/3.8/library/http.server.html#http.server.HTTPServer" target="_blank" rel="noopener"><code>HTTPServer</code></a> 是 <a href="https://docs.python.org/zh-cn/3.8/library/socketserver.html#socketserver.TCPServer" target="_blank" rel="noopener"><code>socketserver.TCPServer</code></a> 的一个子类。它会创建和侦听 HTTP 套接字，并将请求调度给处理程序。用于创建和运行服务器的代码看起来像这样 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(server_class=HTTPServer, handler_class=BaseHTTPRequestHandler)</span>:</span></span><br><span class="line">    server_address = (<span class="string">''</span>, <span class="number">8000</span>)</span><br><span class="line">    httpd = server_class(server_address, handler_class)</span><br><span class="line">    httpd.serve_forever()</span><br></pre></td></tr></table></figure><h3 id="核心类"><a href="#核心类" class="headerlink" title="核心类"></a>核心类</h3><p><code>class http.server.HTTPServer(server_address, RequestHandlerClass)</code></p><blockquote><p> 该类基于 <a href="https://docs.python.org/zh-cn/3.8/library/socketserver.html#socketserver.TCPServer" target="_blank" rel="noopener"><code>TCPServer</code></a> 类，并会将服务器地址存入名为 <code>server_name</code> 和 <code>server_port</code> 的实例变量中。服务器可被处理程序通过 <code>server</code> 实例变量访问。 </p></blockquote><p><code>class http.server.ThreadingHTTPServer(server_address, RequestHandlerClass)</code></p><blockquote><p>根据官方说明,这是一个基于 <a href="https://docs.python.org/zh-cn/3.8/library/socketserver.html#socketserver.ThreadingMixIn" target="_blank" rel="noopener"><code>ThreadingMixIn</code></a>的类,主要功能是使用线程处理请求。</p></blockquote><a id="more"></a><h3 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h3><p><a href="https://docs.python.org/zh-cn/3.8/library/http.server.html#http.server.BaseHTTPRequestHandler" target="_blank" rel="noopener"><code>BaseHTTPRequestHandler</code></a> has the following instance variables:</p><ul><li><p><code>client_address</code></p><p>包含指向客户地址的元组类型数据(host,port)</p></li><li><p><code>server</code></p><p>包含Server实例</p></li><li><p><code>close_connection</code></p><p>返回一个Boolean类型数据,在<a href="https://docs.python.org/zh-cn/3.8/library/http.server.html#http.server.BaseHTTPRequestHandler.handle_one_request" target="_blank" rel="noopener"><code>handle_one_request()</code></a> ,表明另一个请求开始,或者当前请求关闭。</p></li><li><p><code>requestline</code></p><p>包含http请求行，. 这个属性应该用 <a href="https://docs.python.org/zh-cn/3.8/library/http.server.html#http.server.BaseHTTPRequestHandler.handle_one_request" target="_blank" rel="noopener"><code>handle_one_request()</code></a>设置. 如果一个不存在的请求被执行,应将其设置成空字符串。</p></li><li><p><code>command</code></p><p>包含Http请求类型,例如:’Get’</p></li><li><p><code>path</code></p><p>包含请求url路径</p></li><li><p><code>request_version</code></p><p>包含请求的版本,例如:’ HTTP/1.0 ‘</p></li><li><p><code>headers</code></p><p>包含通过<a href="https://docs.python.org/zh-cn/3.8/library/http.server.html#http.server.BaseHTTPRequestHandler.MessageClass" target="_blank" rel="noopener"><code>MessageClass</code></a> 类声明的变量。实例会转化为http请求。<a href="https://docs.python.org/zh-cn/3.8/library/http.client.html#module-http.client" target="_blank" rel="noopener"><code>http.client</code></a> 中<a href="https://docs.python.org/zh-cn/3.8/library/http.client.html#http.client.parse_headers" target="_blank" rel="noopener"><code>parse_headers()</code></a> 方法可以验证一个非法的请求头,参照 <a href="https://tools.ietf.org/html/rfc2822.html" target="_blank" rel="noopener"><strong>RFC 2822</strong></a> 中请求头说明。</p></li><li><p><code>rfile</code></p><p>一个<a href="https://docs.python.org/zh-cn/3.8/library/io.html#io.BufferedIOBase" target="_blank" rel="noopener"><code>io.BufferedIOBase</code></a> 输入流对象，读取可能输入数据。</p></li><li><p><code>wfile</code></p><p>根据客户端请求,返回数据</p></li></ul><h2 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h2><ul><li><p><code>server_version</code></p><p>格式化输出服务器版本信息,例如<code>&#39;BaseHTTP/0.2&#39;</code>.</p></li><li><p><code>sys_version</code></p><p>包含系统版本,使用<a href="https://docs.python.org/zh-cn/3.8/library/http.server.html#http.server.BaseHTTPRequestHandler.version_string" target="_blank" rel="noopener"><code>version_string</code></a> 方法和<a href="https://docs.python.org/zh-cn/3.8/library/http.server.html#http.server.BaseHTTPRequestHandler.server_version" target="_blank" rel="noopener"><code>server_version</code></a> 类变量,例如:<code>&#39;Python/1.4&#39;</code>.</p></li><li><p><code>error_message_format</code></p><p>声明错误信息</p></li><li><p><code>error_content_type</code></p><p>声明错误上下文类型默认值是 <code>&#39;text/html&#39;</code>.</p></li><li><p><code>protocol_version</code></p><p>声明HTTP协议版本,例如:<code>&#39;HTTP/1.1&#39;</code>, 服务器会保持连接。</p></li><li><p><code>MessageClass</code></p><p>声明<code>email.message.Message</code>](<a href="https://docs.python.org/zh-cn/3.8/library/email.compat32-message.html#email.message.Message)-like" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3.8/library/email.compat32-message.html#email.message.Message)-like</a> 类处理请求头。通常不用重写,默认指向<code>http.client.HTTPMessage</code>属性。.</p></li><li><p><code>responses</code></p><p>回应 通常使用<a href="https://docs.python.org/zh-cn/3.8/library/http.server.html#http.server.BaseHTTPRequestHandler.send_response_only" target="_blank" rel="noopener"><code>send_response_only()</code></a> 和<a href="https://docs.python.org/zh-cn/3.8/library/http.server.html#http.server.BaseHTTPRequestHandler.send_error" target="_blank" rel="noopener"><code>send_error()</code></a> 方法实现。</p></li></ul><h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><ul><li><p><code>handle</code>()</p><p>调用<a href="https://docs.python.org/zh-cn/3.8/library/http.server.html#http.server.BaseHTTPRequestHandler.handle_one_request" target="_blank" rel="noopener"><code>handle_one_request()</code></a> 方法一次(如果保持连接,会调用多次) 来管理http请求。. 此方法不需要重写,除此以外,可以重写 <code>do_*()</code> 等方法实现处理请求。</p></li><li><p><code>handle_one_request</code>()</p><p>此方法不需要重写,实现处理 <code>do_*()</code>等方法.</p></li><li><p><code>handle_expect_100</code>()</p><p>当 HTTP/1.1 请求时,服务器期望返回  100-continue 并返回 <code>200</code>响应码。如果想拒绝客户端连接,会抛出一个异常。</p></li><li><p><code>send_error</code>(<em>code</em>, <em>message=None</em>, <em>explain=None</em>) </p></li><li><p><code>send_response</code>(<em>code</em>, <em>message=None</em>) </p></li><li><p><code>send_header</code>(<em>keyword</em>, <em>value</em>) </p></li><li><p><code>send_response_only</code>(<em>code</em>, <em>message=None</em>) </p></li><li><p><code>end_headers</code>() </p></li><li><p><code>flush_headers</code>() </p></li><li><p><code>log_request</code>(<em>code=’-‘</em>, <em>size=’-‘</em>) </p></li><li><p><code>log_error</code>(<em>…</em>) </p></li><li><p><code>log_message</code>(<em>format</em>, <em>…</em>) </p></li><li><p><code>version_string</code>() </p></li><li><p><code>date_time_string</code>(<em>timestamp=None</em>) </p></li><li><p><code>log_date_time_string</code>() </p></li><li><p><code>address_string</code>() </p></li></ul><h3 id="创建一个简易服务器"><a href="#创建一个简易服务器" class="headerlink" title="创建一个简易服务器"></a>创建一个简易服务器</h3><p>例如下面的代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http.server</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"></span><br><span class="line">PORT = <span class="number">8000</span></span><br><span class="line"></span><br><span class="line">Handler = http.server.SimpleHTTPRequestHandler</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> socketserver.TCPServer((<span class="string">""</span>, PORT), Handler) <span class="keyword">as</span> httpd:</span><br><span class="line">    print(<span class="string">"serving at port"</span>, PORT)</span><br><span class="line">    httpd.serve_forever()</span><br></pre></td></tr></table></figure><p>当然也可以通过命令行方式创建,例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server <span class="number">8000</span></span><br></pre></td></tr></table></figure><p>默认绑定本机的ip地址。</p><p>当然你可以指定一个ip地址,加入<code>--bind</code>参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server <span class="number">8000</span> --bind <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p>3.8 新增 支持绑定ipv6地址</p><p>3.7 新增支持绑定一个cgi程序,例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server --cgi <span class="number">8000</span></span><br></pre></td></tr></table></figure><h3 id="一个具体应用的实例"><a href="#一个具体应用的实例" class="headerlink" title="一个具体应用的实例"></a>一个具体应用的实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> BaseHTTPRequestHandler, HTTPServer</span><br><span class="line"> </span><br><span class="line"><span class="comment"># HTTPRequestHandler class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">testHTTPServer_RequestHandler</span><span class="params">(BaseHTTPRequestHandler)</span>:</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment"># GET</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">do_GET</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># Send response status code</span></span><br><span class="line">        self.send_response(<span class="number">200</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># Send headers</span></span><br><span class="line">        self.send_header(<span class="string">'Content-type'</span>,<span class="string">'text/html'</span>)</span><br><span class="line">        self.end_headers()</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># Send message back to client</span></span><br><span class="line">        message = <span class="string">"Hello world!"</span></span><br><span class="line">        <span class="comment"># Write content as utf-8 data</span></span><br><span class="line">        self.wfile.write(bytes(message, <span class="string">"utf8"</span>))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">  print(<span class="string">'starting server...'</span>)</span><br><span class="line"> </span><br><span class="line">  <span class="comment"># Server settings</span></span><br><span class="line">  <span class="comment"># Choose port 8080, for port 80, which is normally used for a http server, you need root access</span></span><br><span class="line">  server_address = (<span class="string">'127.0.0.1'</span>, <span class="number">8081</span>)</span><br><span class="line">  httpd = HTTPServer(server_address, testHTTPServer_RequestHandler)</span><br><span class="line">  print(<span class="string">'running server...'</span>)</span><br><span class="line">  httpd.serve_forever()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">run()</span><br></pre></td></tr></table></figure><p><strong>备注</strong>: 此处<code>wfile.write</code>方法 需要转成 byte类型,</p><p>可以参考stackoverflow上的关于这个问题的讨论:: </p><p><a href="https://stackoverflow.com/questions/23264569/python-3-x-basehttpserver-or-http-server" target="_blank" rel="noopener">python-3-x-basehttpserver-or-http-server</a></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>看完http.server 深有感触,一个简单的服务器学习了这么多http协议实现,看来还得继续深入理解。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库之-http-server&quot;&gt;&lt;a href=&quot;#python-标准库之-http-server&quot; class=&quot;headerlink&quot; title=&quot;python 标准库之 http.server&quot;&gt;&lt;/a&gt;python 标准库之 http.server&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/jeffsui/app_image_resource/blob/master/20200105_with_my_angle.jpg?raw=true&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;今天下午主要是陪我闺女,组装完成一个桌面足球,很开心的一下午。&lt;/p&gt;
&lt;p&gt;孩子的童年只有一次,有时间多陪陪孩子吧。&lt;/p&gt;
&lt;h2 id=&quot;python-标准库-http-server&quot;&gt;&lt;a href=&quot;#python-标准库-http-server&quot; class=&quot;headerlink&quot; title=&quot;python 标准库 http.server&quot;&gt;&lt;/a&gt;python 标准库 http.server&lt;/h2&gt;&lt;p&gt;从python2时代开始 SimpleHttpServer就陪伴我走过那些快乐的时光。可以自己建立一个简单的文件服务器,让同事们通过浏览器就可以访问我电脑上的资源,而不需要http server或者 ftp软件。&lt;/p&gt;
&lt;p&gt;到了python3时代,这个模块被合并进了http.server。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/http.server.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考网址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个模块定义了实现 HTTP 服务器（ Web 服务器）的类 。&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/http.server.html#http.server.HTTPServer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;HTTPServer&lt;/code&gt;&lt;/a&gt; 是 &lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/socketserver.html#socketserver.TCPServer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;socketserver.TCPServer&lt;/code&gt;&lt;/a&gt; 的一个子类。它会创建和侦听 HTTP 套接字，并将请求调度给处理程序。用于创建和运行服务器的代码看起来像这样 &lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(server_class=HTTPServer, handler_class=BaseHTTPRequestHandler)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    server_address = (&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    httpd = server_class(server_address, handler_class)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    httpd.serve_forever()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;核心类&quot;&gt;&lt;a href=&quot;#核心类&quot; class=&quot;headerlink&quot; title=&quot;核心类&quot;&gt;&lt;/a&gt;核心类&lt;/h3&gt;&lt;p&gt;&lt;code&gt;class http.server.HTTPServer(server_address, RequestHandlerClass)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 该类基于 &lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/socketserver.html#socketserver.TCPServer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;TCPServer&lt;/code&gt;&lt;/a&gt; 类，并会将服务器地址存入名为 &lt;code&gt;server_name&lt;/code&gt; 和 &lt;code&gt;server_port&lt;/code&gt; 的实例变量中。服务器可被处理程序通过 &lt;code&gt;server&lt;/code&gt; 实例变量访问。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;class http.server.ThreadingHTTPServer(server_address, RequestHandlerClass)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;根据官方说明,这是一个基于 &lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/socketserver.html#socketserver.ThreadingMixIn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;ThreadingMixIn&lt;/code&gt;&lt;/a&gt;的类,主要功能是使用线程处理请求。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="http.server" scheme="https://pinghailinfeng.gitee.io/tags/http-server/"/>
    
  </entry>
  
  <entry>
    <title>windows jupyter notebook nbextension usage</title>
    <link href="https://pinghailinfeng.gitee.io/2020/01/04/windows-jupyter-notebook-nbextension-usage/"/>
    <id>https://pinghailinfeng.gitee.io/2020/01/04/windows-jupyter-notebook-nbextension-usage/</id>
    <published>2020-01-04T07:22:07.000Z</published>
    <updated>2020-01-04T07:52:25.874Z</updated>
    
    <content type="html"><![CDATA[<h1 id="windows下jupyter-安装nbextension-插件填坑记"><a href="#windows下jupyter-安装nbextension-插件填坑记" class="headerlink" title="windows下jupyter 安装nbextension 插件填坑记"></a>windows下jupyter 安装nbextension 插件填坑记</h1><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200104_cold.png?raw=true" alt></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><table><thead><tr><th>软件和操作系统</th><th>版本号</th></tr></thead><tbody><tr><td>操作系统</td><td>win7 64位 sp1</td></tr><tr><td>python版本</td><td>3.6.2</td></tr><tr><td>jupyter core</td><td>4.5.0</td></tr><tr><td>jupyter notebook</td><td>6.0.0</td></tr></tbody></table><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>本来以为给jupyter安装个插件,分分钟搞定的事,结果三天了还是没解决。</p><p>我回家用win10的电脑,5分钟搞定。</p><p>尝试了各种方式,卸载重装,修改环境变量,换不同的python版本。后来我快要放放弃的时候，我终于搞定了。</p><a id="more"></a><h2 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h2><p>我突然想到,是不是因为我安装了anaconda,于是增加了搜索关键字,终于发现了问题所在。</p><h2 id="正确操作步骤"><a href="#正确操作步骤" class="headerlink" title="正确操作步骤"></a>正确操作步骤</h2><ol><li><p>确定是已经安装好<code>anaconda</code></p></li><li><p>要在<strong><code>anaconda prompt</code></strong>模式下(重要的事情说三遍,三遍,三遍，此处省略一万字,万马奔腾)</p></li><li><p><code>pip install jupyter_contrib_nbextensions</code></p></li><li><p>配置：<code>jupyter contrib nbextension install --user --skip-running-check</code></p></li><li><p>启动<code>jupyter notebook</code>，“Nbextensions”出现在导航栏中，在勾选目录。  </p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20190418142848765.png?raw=true" alt></p></li></ol><h2 id="查看-jupyter-版本"><a href="#查看-jupyter-版本" class="headerlink" title="查看 jupyter 版本"></a>查看 jupyter 版本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(base) C:\Users\Mr.Sui&gt;jupyter --version</span><br><span class="line">jupyter core     : 4.5.0</span><br><span class="line">jupyter-notebook : 6.0.0</span><br><span class="line">qtconsole        : 4.5.1</span><br><span class="line">ipython          : 7.6.1</span><br><span class="line">ipykernel        : 5.1.1</span><br><span class="line">jupyter client   : 5.3.1</span><br><span class="line">jupyter lab      : 1.0.2</span><br><span class="line">nbconvert        : 5.5.0</span><br><span class="line">ipywidgets       : 7.5.0</span><br><span class="line">nbformat         : 4.4.0</span><br><span class="line">traitlets        : 4.3.2</span><br></pre></td></tr></table></figure><h2 id="有用的插件"><a href="#有用的插件" class="headerlink" title="有用的插件"></a>有用的插件</h2><ol><li>代码导航功能 Table of Contents</li><li>变量检查器 Variable Inspector</li><li>显示单元格运行的时间和长度 Excute time</li><li>折叠/放下标题 Collapsible Headings</li><li>折叠代码 Codefolding</li><li>隐藏代码 hide input 隐藏选定代码 hide input all 隐藏所有代码</li><li>代码自动补全 Hinterland</li><li>通知 Notify Jupyter Notebook</li></ol><blockquote><p>首先你要勾选Notify扩展，其次再点击按钮正式启动。你选择的时间是Jupyter Notebook运行的最短时间，到点后它会向你发送通知</p></blockquote><ol start="9"><li><p>隐藏活动状态栏 zenmode</p></li><li><p>tqdm_notebook 为循环代码显示执行进度条</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 先安装 tqdm ：pip install tqdm</span><br><span class="line"># 使用时导入：from tqdm import tqdm_notebook</span><br></pre></td></tr></table></figure><ol start="11"><li>脚本自动保存 AutoSaveTime</li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://jupyter-contrib-nbextensions.readthedocs.io/en/latest/install.html#install-the-python-package" target="_blank" rel="noopener">官网教程</a></p><p><a href="https://blog.csdn.net/qq_34705900/article/details/80197956" target="_blank" rel="noopener">jupyter notebook的插件拓展—-jupyter_contrib_nbextensions</a></p><p><a href="https://www.cnblogs.com/noticeable/p/9010881.html" target="_blank" rel="noopener"><a href="https://www.cnblogs.com/noticeable/p/9010881.html" target="_blank" rel="noopener">使用Jupyter Notebook编写技术文档</a></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;windows下jupyter-安装nbextension-插件填坑记&quot;&gt;&lt;a href=&quot;#windows下jupyter-安装nbextension-插件填坑记&quot; class=&quot;headerlink&quot; title=&quot;windows下jupyter 安装nbextension 插件填坑记&quot;&gt;&lt;/a&gt;windows下jupyter 安装nbextension 插件填坑记&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/jeffsui/app_image_resource/blob/master/20200104_cold.png?raw=true&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;软件和操作系统&lt;/th&gt;
&lt;th&gt;版本号&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;操作系统&lt;/td&gt;
&lt;td&gt;win7 64位 sp1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;python版本&lt;/td&gt;
&lt;td&gt;3.6.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jupyter core&lt;/td&gt;
&lt;td&gt;4.5.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jupyter notebook&lt;/td&gt;
&lt;td&gt;6.0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;本来以为给jupyter安装个插件,分分钟搞定的事,结果三天了还是没解决。&lt;/p&gt;
&lt;p&gt;我回家用win10的电脑,5分钟搞定。&lt;/p&gt;
&lt;p&gt;尝试了各种方式,卸载重装,修改环境变量,换不同的python版本。后来我快要放放弃的时候，我终于搞定了。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
    
      <category term="windows" scheme="https://pinghailinfeng.gitee.io/tags/windows/"/>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="juypter" scheme="https://pinghailinfeng.gitee.io/tags/juypter/"/>
    
      <category term="nbextension" scheme="https://pinghailinfeng.gitee.io/tags/nbextension/"/>
    
  </entry>
  
  <entry>
    <title>python standard library webbrowser</title>
    <link href="https://pinghailinfeng.gitee.io/2020/01/03/python-standard-library-webbrowser/"/>
    <id>https://pinghailinfeng.gitee.io/2020/01/03/python-standard-library-webbrowser/</id>
    <published>2020-01-03T04:07:55.000Z</published>
    <updated>2020-01-03T08:26:48.633Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库之-webbrowser"><a href="#python-标准库之-webbrowser" class="headerlink" title="python 标准库之 webbrowser"></a>python 标准库之 webbrowser</h1><h2 id="没啥前提"><a href="#没啥前提" class="headerlink" title="没啥前提"></a>没啥前提</h2><p>一张图表示我现在的心情</p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200103_cold.jpg?raw=true" alt="冷啊"></p><h2 id="标准库-webbrowser"><a href="#标准库-webbrowser" class="headerlink" title="标准库 webbrowser"></a>标准库 webbrowser</h2><p><a href="https://docs.python.org/zh-cn/3.8/library/webbrowser.html#module-webbrowser" target="_blank" rel="noopener"><code>webbrowser</code></a> 模块提供了一个高级接口，允许向用户显示基于Web的文档。 在大多数情况下，只需从该模块调用 <a href="https://docs.python.org/zh-cn/3.8/library/webbrowser.html#webbrowser.open" target="_blank" rel="noopener"><code>open()</code></a> 函数就可以了。</p><p>在 Unix 下，图形浏览器在 X11 下是首选，但如果图形浏览器不可用或 X11 显示不可用，则将使用文本模式浏览器。 如果使用文本模式浏览器，则调用进程将阻塞，直到用户退出浏览器。</p><p>如果存在环境变量 <code>BROWSER</code> ，则将其解释为 <a href="https://docs.python.org/zh-cn/3.8/library/os.html#os.pathsep" target="_blank" rel="noopener"><code>os.pathsep</code></a> 分隔的浏览器列表，以便在平台默认值之前尝试。 当列表部分的值包含字符串 <code>％s</code> 时，它被解释为一个文字浏览器命令行，用于替换 <code>％s</code> 的参数 URL ；如果该部分不包含 <code>％s</code>，则它只被解释为要启动的浏览器的名称。</p><p>脚本 <strong>webbrowser</strong> 可以用作模块的命令行界面。它接受一个 URL 作为参数。还接受以下可选参数：<code>-n</code> 如果可能，在新的浏览器窗口中打开 URL ； <code>-t</code> 在新的浏览器页面（“标签”）中打开 URL。这些选择当然是相互排斥的。用法示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m webbrowser -t <span class="string">"https://jeffsui.github.io"</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p><em>exception</em> <code>webbrowser.Error</code></p><p>发生浏览器控件错误时引发异常。</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li><p><code>webbrowser.`</code>open`(<em>url</em>, <em>new=0</em>, <em>autoraise=True</em>)</p><p>使用默认浏览器显示 <em>url</em>。 如果 <em>new</em> 为 0，则尽可能在同一浏览器窗口中打开 <em>url</em>。 如果 <em>new</em> 为 1，则尽可能打开新的浏览器窗口。 如果 <em>new</em> 为 2，则尽可能打开新的浏览器页面（“标签”）。 如果 <em>autoraise</em> 为 “True”，则会尽可能置前窗口（请注意，在许多窗口管理器下，无论此变量的设置如何，都会置前窗口）。请注意，在某些平台上，尝试使用此函数打开文件名，可能会起作用并启动操作系统的关联程序。 但是，这种方式不被支持也不可移植。使用 <code>url</code> 参数会引发 <a href="https://docs.python.org/zh-cn/3.8/library/sys.html#auditing" target="_blank" rel="noopener">auditing event</a> <code>webbrowser.open</code> 。</p></li><li><p><code>webbrowser.open_new(url)</code></p><p>如果可能，在默认浏览器的新窗口中打开 <em>url</em>，否则，在唯一的浏览器窗口中打开 <em>url</em>。</p></li><li><p><code>webbrowser.open_new_tab(url)</code></p><p>如果可能，在默认浏览器的新页面（“标签”）中打开 <em>url</em>，否则等效于 <a href="https://docs.python.org/zh-cn/3.8/library/webbrowser.html#webbrowser.open_new" target="_blank" rel="noopener"><code>open_new()</code></a>。</p></li><li><p><code>webbrowser.get(*using=None*)</code></p><p>返回浏览器类型为 <em>using</em> 指定的控制器对象。 如果 <em>using</em> 为 <code>None</code>，则返回适用于调用者环境的默认浏览器的控制器。</p></li><li><p><code>webbrowser.register</code>(<em>name</em>, <em>constructor</em>, <em>instance=None</em>, <em>**, </em>preferred=False*)</p><p>注册 <em>name</em> 浏览器类型。 注册浏览器类型后， <a href="https://docs.python.org/zh-cn/3.8/library/webbrowser.html#webbrowser.get" target="_blank" rel="noopener"><code>get()</code></a> 函数可以返回该浏览器类型的控制器。 如果没有提供 <em>instance</em>，或者为 <code>None</code>，<em>constructor</em> 将在没有参数的情况下被调用，以在需要时创建实例。 如果提供了 <em>instance</em>，则永远不会调用 <em>constructor</em>，并且可能是 <code>None</code>。将 <em>preferred</em> 设置为 <code>True</code> 使得这个浏览器成为 <a href="https://docs.python.org/zh-cn/3.8/library/webbrowser.html#webbrowser.get" target="_blank" rel="noopener"><code>get()</code></a> 不带参数调用的首选结果。 否则，只有在您计划设置 <code>BROWSER</code> 变量，或使用与您声明的处理程序的名称相匹配的非空参数调用 <a href="https://docs.python.org/zh-cn/3.8/library/webbrowser.html#webbrowser.get" target="_blank" rel="noopener"><code>get()</code></a> 时，此入口点才有用。</p></li></ul><h3 id="浏览器类型"><a href="#浏览器类型" class="headerlink" title="浏览器类型"></a>浏览器类型</h3><p>预定义了许多浏览器类型。 此表给出了可以传递给 <a href="https://docs.python.org/zh-cn/3.8/library/webbrowser.html#webbrowser.get" target="_blank" rel="noopener"><code>get()</code></a> 函数的类型名称以及控制器类的相应实例化，这些都在此模块中定义。</p><table><thead><tr><th>类型名</th><th>类名</th><th>注释</th></tr></thead><tbody><tr><td><code>&#39;mozilla&#39;</code></td><td><code>Mozilla(&#39;mozilla&#39;)</code></td><td></td></tr><tr><td><code>&#39;firefox&#39;</code></td><td><code>Mozilla(&#39;mozilla&#39;)</code></td><td></td></tr><tr><td><code>&#39;netscape&#39;</code></td><td><code>Mozilla(&#39;netscape&#39;)</code></td><td></td></tr><tr><td><code>&#39;galeon&#39;</code></td><td><code>Galeon(&#39;galeon&#39;)</code></td><td></td></tr><tr><td><code>&#39;epiphany&#39;</code></td><td><code>Galeon(&#39;epiphany&#39;)</code></td><td></td></tr><tr><td><code>&#39;skipstone&#39;</code></td><td><code>BackgroundBrowser(&#39;skipstone&#39;)</code></td><td></td></tr><tr><td><code>&#39;kfmclient&#39;</code></td><td><code>Konqueror()</code></td><td>(1)</td></tr><tr><td><code>&#39;konqueror&#39;</code></td><td><code>Konqueror()</code></td><td>(1)</td></tr><tr><td><code>&#39;kfm&#39;</code></td><td><code>Konqueror()</code></td><td>(1)</td></tr><tr><td><code>&#39;mosaic&#39;</code></td><td><code>BackgroundBrowser(&#39;mosaic&#39;)</code></td><td></td></tr><tr><td><code>&#39;opera&#39;</code></td><td><code>Opera()</code></td><td></td></tr><tr><td><code>&#39;grail&#39;</code></td><td><code>Grail()</code></td><td></td></tr><tr><td><code>&#39;links&#39;</code></td><td><code>GenericBrowser(&#39;links&#39;)</code></td><td></td></tr><tr><td><code>&#39;elinks&#39;</code></td><td><code>Elinks(&#39;elinks&#39;)</code></td><td></td></tr><tr><td><code>&#39;lynx&#39;</code></td><td><code>GenericBrowser(&#39;lynx&#39;)</code></td><td></td></tr><tr><td><code>&#39;w3m&#39;</code></td><td><code>GenericBrowser(&#39;w3m&#39;)</code></td><td></td></tr><tr><td><code>&#39;windows-default&#39;</code></td><td><code>WindowsDefault</code></td><td>(2)</td></tr><tr><td><code>&#39;macosx&#39;</code></td><td><code>MacOSX(&#39;default&#39;)</code></td><td>(3)</td></tr><tr><td><code>&#39;safari&#39;</code></td><td><code>MacOSX(&#39;safari&#39;)</code></td><td>(3)</td></tr><tr><td><code>&#39;google-chrome&#39;</code></td><td><code>Chrome(&#39;google-chrome&#39;)</code></td><td></td></tr><tr><td><code>&#39;chrome&#39;</code></td><td><code>Chrome(&#39;chrome&#39;)</code></td><td></td></tr><tr><td><code>&#39;chromium&#39;</code></td><td><code>Chromium(&#39;chromium&#39;)</code></td><td></td></tr><tr><td><code>&#39;chromium-browser&#39;</code></td><td><code>Chromium(&#39;chromium-browser&#39;)</code></td></tr></tbody></table><p>简单的例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">'http://docs.python.org/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Open URL in a new tab, if a browser window is already open.</span></span><br><span class="line">webbrowser.open_new_tab(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Open URL in new window, raising the window if possible.</span></span><br><span class="line">webbrowser.open_new(url)</span><br></pre></td></tr></table></figure><h3 id="浏览器控制器对象"><a href="#浏览器控制器对象" class="headerlink" title="浏览器控制器对象"></a>浏览器控制器对象</h3><p>浏览器控制器提供三个与模块级便捷函数相同的方法：</p><ul><li><p><code>controller.open</code>(<em>url</em>, <em>new=0</em>, <em>autoraise=True</em>)`</p><p>使用此控制器处理的浏览器显示 <em>url</em>。 如果 <em>new</em> 为 1，则尽可能打开新的浏览器窗口。 如果 <em>new</em> 为 2，则尽可能打开新的浏览器页面（“标签”）。</p></li><li><p><code>controller.open_new</code>(<em>url</em>)`</p><p>如果可能，在此控制器处理的浏览器的新窗口中打开 <em>url</em> ，否则，在唯一的浏览器窗口中打开 <em>url</em> 。 别名 <a href="https://docs.python.org/zh-cn/3.8/library/webbrowser.html#webbrowser.open_new" target="_blank" rel="noopener"><code>open_new()</code></a>。</p></li><li><p><code>controller.open_new_tab</code>(<em>url</em>)`</p><p>如果可能，在此控制器处理的浏览器的新页面（“标签”）中打开 <em>url</em>，否则等效于 <a href="https://docs.python.org/zh-cn/3.8/library/webbrowser.html#webbrowser.open_new" target="_blank" rel="noopener"><code>open_new()</code></a></p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>标准库中的webbrowser只提供了一个简单的操作本地浏览器的接口。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库之-webbrowser&quot;&gt;&lt;a href=&quot;#python-标准库之-webbrowser&quot; class=&quot;headerlink&quot; title=&quot;python 标准库之 webbrowser&quot;&gt;&lt;/a&gt;python 标准库之 webbrowser&lt;/h1&gt;&lt;h2 id=&quot;没啥前提&quot;&gt;&lt;a href=&quot;#没啥前提&quot; class=&quot;headerlink&quot; title=&quot;没啥前提&quot;&gt;&lt;/a&gt;没啥前提&lt;/h2&gt;&lt;p&gt;一张图表示我现在的心情&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/jeffsui/app_image_resource/blob/master/20200103_cold.jpg?raw=true&quot; alt=&quot;冷啊&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;标准库-webbrowser&quot;&gt;&lt;a href=&quot;#标准库-webbrowser&quot; class=&quot;headerlink&quot; title=&quot;标准库 webbrowser&quot;&gt;&lt;/a&gt;标准库 webbrowser&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/webbrowser.html#module-webbrowser&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;webbrowser&lt;/code&gt;&lt;/a&gt; 模块提供了一个高级接口，允许向用户显示基于Web的文档。 在大多数情况下，只需从该模块调用 &lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/webbrowser.html#webbrowser.open&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; 函数就可以了。&lt;/p&gt;
&lt;p&gt;在 Unix 下，图形浏览器在 X11 下是首选，但如果图形浏览器不可用或 X11 显示不可用，则将使用文本模式浏览器。 如果使用文本模式浏览器，则调用进程将阻塞，直到用户退出浏览器。&lt;/p&gt;
&lt;p&gt;如果存在环境变量 &lt;code&gt;BROWSER&lt;/code&gt; ，则将其解释为 &lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/os.html#os.pathsep&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;os.pathsep&lt;/code&gt;&lt;/a&gt; 分隔的浏览器列表，以便在平台默认值之前尝试。 当列表部分的值包含字符串 &lt;code&gt;％s&lt;/code&gt; 时，它被解释为一个文字浏览器命令行，用于替换 &lt;code&gt;％s&lt;/code&gt; 的参数 URL ；如果该部分不包含 &lt;code&gt;％s&lt;/code&gt;，则它只被解释为要启动的浏览器的名称。&lt;/p&gt;
&lt;p&gt;脚本 &lt;strong&gt;webbrowser&lt;/strong&gt; 可以用作模块的命令行界面。它接受一个 URL 作为参数。还接受以下可选参数：&lt;code&gt;-n&lt;/code&gt; 如果可能，在新的浏览器窗口中打开 URL ； &lt;code&gt;-t&lt;/code&gt; 在新的浏览器页面（“标签”）中打开 URL。这些选择当然是相互排斥的。用法示例:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;python -m webbrowser -t &lt;span class=&quot;string&quot;&gt;&quot;https://jeffsui.github.io&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="webbrowser" scheme="https://pinghailinfeng.gitee.io/tags/webbrowser/"/>
    
  </entry>
  
  <entry>
    <title>python standard library csv</title>
    <link href="https://pinghailinfeng.gitee.io/2020/01/02/python-standard-library-csv/"/>
    <id>https://pinghailinfeng.gitee.io/2020/01/02/python-standard-library-csv/</id>
    <published>2020-01-02T06:33:07.000Z</published>
    <updated>2020-01-07T02:38:24.659Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库学习之csv"><a href="#python-标准库学习之csv" class="headerlink" title="python 标准库学习之csv"></a>python 标准库学习之<code>csv</code></h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2019年立的flag,今年继续,标准库系列文章继续更新。</p><p>今天是真冷啊,屋里头才16℃,只能用一张图来表示我的心情。</p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200102_not_cold.jpg?raw=true" alt></p><h2 id="标准库-csv"><a href="#标准库-csv" class="headerlink" title="标准库 csv"></a>标准库 csv</h2><h3 id="文档路径"><a href="#文档路径" class="headerlink" title="文档路径"></a>文档路径</h3><p><a href="https://docs.python.org/zh-cn/3.8/library/csv.html" target="_blank" rel="noopener">python标准库csv</a></p><h3 id="CSV-文件格式"><a href="#CSV-文件格式" class="headerlink" title="CSV 文件格式"></a><code>CSV</code> 文件格式</h3><p>文件扩展名为.csv,通用的电子表格文件格式,经常使用在数据分析中。</p><p>分隔符可能有所差别, python中的csv模块提供了对csv文件的读写操作,非常方便。</p><h3 id="csv-常用方法"><a href="#csv-常用方法" class="headerlink" title="csv 常用方法"></a><code>csv</code> 常用方法</h3><h4 id="csv-reader-csvfile-dialect-39-excel-39-fmtparams"><a href="#csv-reader-csvfile-dialect-39-excel-39-fmtparams" class="headerlink" title="csv.reader(csvfile,dialect=&#39;excel&#39;, ***fmtparams)"></a><code>csv.reader(csvfile,dialect=&#39;excel&#39;, ***fmtparams)</code></h4><blockquote><p>返回一个reader对象,该对象遍历csvfile。csv对象可以是任何对象,只要这个对象支持iteratable协议,并在每次调用<code>__next__()</code>方法时都返回字符串即可。如果csvfile是文件对象,则打开它时应使用<code>newline=&#39;&#39;</code>。可选参数dialect是用于不同的csv文件类型,它可以是 <a href="https://docs.python.org/zh-cn/3.8/library/csv.html#csv.Dialect" target="_blank" rel="noopener"><code>Dialect</code></a> 类的子类的实例，也可以是 <a href="https://docs.python.org/zh-cn/3.8/library/csv.html#csv.list_dialects" target="_blank" rel="noopener"><code>list_dialects()</code></a> 函数返回的字符串之一。完整的解释可以参考<a href="https://docs.python.org/zh-cn/3.8/library/csv.html#csv-fmt-params" target="_blank" rel="noopener">csv文件格式参数</a>。</p><p>csv文件的每一行都会默认当做字符串列表解析,除非指定了 <code>QUOTE_NONNUMERIC</code> 格式选项（在这种情况下，未加引号的字段会转换为浮点数），否则不会执行自动数据类型转换。</p></blockquote><p>一个读文件例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> csv</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'eggs.csv'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line"><span class="meta">... </span>    spamreader = csv.reader(csvfile, delimiter=<span class="string">' '</span>, quotechar=<span class="string">'|'</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> row <span class="keyword">in</span> spamreader:</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">', '</span>.join(row))</span><br><span class="line">Spam, Spam, Spam, Spam, Spam, Baked Beans</span><br><span class="line">Spam, Lovely Spam, Wonderful Spam</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="csv-writer-csvfile-dialect-39-excel-39-fmtparams"><a href="#csv-writer-csvfile-dialect-39-excel-39-fmtparams" class="headerlink" title="csv.writer(csvfile, dialect=&#39;excel&#39;, **fmtparams)"></a><code>csv.writer(csvfile, dialect=&#39;excel&#39;, **fmtparams)</code></h4><blockquote><p>返回一个 writer 对象，该对象负责将用户的数据在给定的文件类对象上转换为带分隔符的字符串。<em>csvfile</em> 可以是具有 <code>write()</code> 方法的任何对象。如果 <em>csvfile</em> 是文件对象，则打开它时应使用 <code>newline=&#39;&#39;</code>。</p><p>为了尽量简化与数据库 API 模块之间的对接，<a href="https://docs.python.org/zh-cn/3.8/library/constants.html#None" target="_blank" rel="noopener"><code>None</code></a> 值会写入为空字符串。虽然这个转换是不可逆的，但它让 SQL 空数据值转储到 CSV 文件更容易，而无需预处理从 <code>cursor.fetch*</code> 调用返回的数据。写入前，所有非字符串数据都先用 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str()</code></a> 转化为字符串再写入。</p></blockquote><p>一个写文件例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'eggs.csv'</span>, <span class="string">'w'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    spamwriter = csv.writer(csvfile, delimiter=<span class="string">' '</span>,</span><br><span class="line">                            quotechar=<span class="string">'|'</span>, quoting=csv.QUOTE_MINIMAL)</span><br><span class="line">    spamwriter.writerow([<span class="string">'Spam'</span>] * <span class="number">5</span> + [<span class="string">'Baked Beans'</span>])</span><br><span class="line">    spamwriter.writerow([<span class="string">'Spam'</span>, <span class="string">'Lovely Spam'</span>, <span class="string">'Wonderful Spam'</span>])</span><br></pre></td></tr></table></figure><h4 id="csv-register-dialect-name-dialect-fmtparams"><a href="#csv-register-dialect-name-dialect-fmtparams" class="headerlink" title="csv.register_dialect(name[, dialect[, **fmtparams]])"></a><code>csv.register_dialect(name[, dialect[, **fmtparams]])</code></h4><blockquote><p>将 <em>name</em> 与 <em>dialect</em> 关联起来。<em>name</em> 必须是字符串。要指定变种 (dialect)，可以给出 <a href="https://docs.python.org/zh-cn/3.8/library/csv.html#csv.Dialect" target="_blank" rel="noopener"><code>Dialect</code></a> 的子类，或给出 <em>fmtparams</em> 关键字参数，或两者都给出（此时关键字参数会覆盖 <em>dialect</em> 参数）。 有关方言和格式设置参数的完整详细信息，请参见 <a href="https://docs.python.org/zh-cn/3.8/library/csv.html#csv-fmt-params" target="_blank" rel="noopener">方言格式参数</a> 部分。</p></blockquote><p>其他方法:</p><ul><li><p><code>csv.unregister_dialect(name)</code></p><p>从变种注册表中删除 <em>name</em> 对应的变种。如果 <em>name</em> 不是已注册的变种名称，则抛出 <a href="https://docs.python.org/zh-cn/3.8/library/csv.html#csv.Error" target="_blank" rel="noopener"><code>Error</code></a> 异常。</p></li><li><p><code>csv.get_dialect(name)</code></p><p>返回 <em>name</em> 对应的变种。如果 <em>name</em> 不是已注册的变种名称，则抛出 <a href="https://docs.python.org/zh-cn/3.8/library/csv.html#csv.Error" target="_blank" rel="noopener"><code>Error</code></a> 异常。该函数返回的是不可变的 <a href="https://docs.python.org/zh-cn/3.8/library/csv.html#csv.Dialect" target="_blank" rel="noopener"><code>Dialect</code></a> 对象。</p></li><li><p><code>csv.list_dialects()</code></p><p>返回所有已注册变种的名称。</p></li><li><p><code>csv.field_size_limit([new_limit])</code></p><p>返回解析器当前允许的最大字段大小。如果指定了 <em>new_limit</em>，则它将成为新的最大字段大小。</p></li></ul><h3 id="csv模块定义的类"><a href="#csv模块定义的类" class="headerlink" title="csv模块定义的类"></a>csv模块定义的类</h3><h4 id="class-csv-DictReader-f-fieldnames-None-restkey-None-restval-None-dialect-39-excel-39-args-kwds"><a href="#class-csv-DictReader-f-fieldnames-None-restkey-None-restval-None-dialect-39-excel-39-args-kwds" class="headerlink" title="class csv.DictReader(*f*, *fieldnames=None*, *restkey=None*, *restval=None*, *dialect=&#39;excel&#39;*, **args*, ***kwds*)"></a><code>class csv.DictReader(*f*, *fieldnames=None*, *restkey=None*, *restval=None*, *dialect=&#39;excel&#39;*, **args*, ***kwds*)</code></h4><blockquote><p>创建一个对象，该对象在操作上类似于常规 reader，但是将每行中的信息映射到一个 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#dict" target="_blank" rel="noopener"><code>dict</code></a>，该 dict 的键由 <em>fieldnames</em> 可选参数给出。</p><p><em>fieldnames</em> 参数是一个 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-sequence" target="_blank" rel="noopener">sequence</a>。如果省略 <em>fieldnames</em>，则文件 <em>f</em> 第一行中的值将用作字段名。无论字段名是如何确定的，字典都将保留其原始顺序。</p><p>如果某一行中的字段多于字段名，则其余字段将放入列表中，字段名由 <em>restkey</em> 指定（默认为 <code>None</code>）。如果非空白行的字段少于字段名，则缺少的值将用 <code>None</code> 填充。</p><p>所有其他可选或关键字参数都传递给底层的 <a href="https://docs.python.org/zh-cn/3.8/library/csv.html#csv.reader" target="_blank" rel="noopener"><code>reader</code></a> 实例。</p><p>3.8 中,返回的行是 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#dict" target="_blank" rel="noopener"><code>dict</code></a> 类型。</p></blockquote><p>一个使用<code>DictReader</code>例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> csv</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'names.csv'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line"><span class="meta">... </span>    reader = csv.DictReader(csvfile)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line"><span class="meta">... </span>        print(row[<span class="string">'first_name'</span>], row[<span class="string">'last_name'</span>])</span><br><span class="line">...</span><br><span class="line">Eric Idle</span><br><span class="line">John Cleese</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(row)</span><br><span class="line">&#123;<span class="string">'first_name'</span>: <span class="string">'John'</span>, <span class="string">'last_name'</span>: <span class="string">'Cleese'</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="class-csv-DictWriter-f-fieldnames-restval-39-39-extrasaction-39-raise-39-dialect-39-excel-39-args-kwds"><a href="#class-csv-DictWriter-f-fieldnames-restval-39-39-extrasaction-39-raise-39-dialect-39-excel-39-args-kwds" class="headerlink" title="class csv.DictWriter(f, fieldnames, restval=&#39;&#39;, extrasaction=&#39;raise&#39;, dialect=&#39;excel&#39;, **args, **kwds)"></a><code>class csv.DictWriter(f, fieldnames, restval=&#39;&#39;, extrasaction=&#39;raise&#39;, dialect=&#39;excel&#39;, **args, **kwds)</code></h4><blockquote><p>创建一个对象，该对象在操作上类似常规 writer，但会将字典映射到输出行。 <em>fieldnames</em> 参数是由键组成的 <a href="https://docs.python.org/zh-cn/3.8/library/collections.abc.html#module-collections.abc" target="_blank" rel="noopener"><code>序列</code></a>，它指定字典中值的顺序，这些值会按指定顺序传递给 <code>writerow()</code> 方法并写入文件 <em>f</em>。 如果字典缺少 <em>fieldnames</em> 中的键，则可选参数 <em>restval</em> 用于指定要写入的值。 如果传递给 <code>writerow()</code> 方法的字典的某些键在 <em>fieldnames</em> 中找不到，则可选参数 <em>extrasaction</em> 用于指定要执行的操作。 如果将其设置为默认值 <code>&#39;raise&#39;</code>，则会引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#ValueError" target="_blank" rel="noopener"><code>ValueError</code></a>。 如果将其设置为 <code>&#39;ignore&#39;</code>，则字典中的其他键值将被忽略。 所有其他可选或关键字参数都传递给底层的 <a href="https://docs.python.org/zh-cn/3.8/library/csv.html#csv.writer" target="_blank" rel="noopener"><code>writer</code></a> 实例。</p><p>注意，与 <a href="https://docs.python.org/zh-cn/3.8/library/csv.html#csv.DictReader" target="_blank" rel="noopener"><code>DictReader</code></a> 类不同，<a href="https://docs.python.org/zh-cn/3.8/library/csv.html#csv.DictWriter" target="_blank" rel="noopener"><code>DictWriter</code></a> 类的 <em>fieldnames</em> 参数不是可选参数</p></blockquote><p>一个使用<code>DictWriter</code>写入文件例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'names.csv'</span>, <span class="string">'w'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    fieldnames = [<span class="string">'first_name'</span>, <span class="string">'last_name'</span>]</span><br><span class="line">    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)</span><br><span class="line"></span><br><span class="line">    writer.writeheader()</span><br><span class="line">    writer.writerow(&#123;<span class="string">'first_name'</span>: <span class="string">'Baked'</span>, <span class="string">'last_name'</span>: <span class="string">'Beans'</span>&#125;)</span><br><span class="line">    writer.writerow(&#123;<span class="string">'first_name'</span>: <span class="string">'Lovely'</span>, <span class="string">'last_name'</span>: <span class="string">'Spam'</span>&#125;)</span><br><span class="line">    writer.writerow(&#123;<span class="string">'first_name'</span>: <span class="string">'Wonderful'</span>, <span class="string">'last_name'</span>: <span class="string">'Spam'</span>&#125;)</span><br></pre></td></tr></table></figure><p>其他方法:</p><ul><li><p><em>class</em> <code>csv.Dialect</code></p><p><a href="https://docs.python.org/zh-cn/3.8/library/csv.html#csv.Dialect" target="_blank" rel="noopener"><code>Dialect</code></a> 类是主要依赖于其属性的容器类，用于将定义好的参数传递给特定的 <a href="https://docs.python.org/zh-cn/3.8/library/csv.html#csv.reader" target="_blank" rel="noopener"><code>reader</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/csv.html#csv.writer" target="_blank" rel="noopener"><code>writer</code></a> 实例。</p></li><li><p><em>class</em> <code>csv.excel</code></p><p><a href="https://docs.python.org/zh-cn/3.8/library/csv.html#csv.excel" target="_blank" rel="noopener"><code>excel</code></a> 类定义了 Excel 生成的 CSV 文件的常规属性。它在变种注册表中的名称是 <code>&#39;excel&#39;</code>。</p></li><li><p><em>class</em> <code>csv.excel_tab</code></p><p><a href="https://docs.python.org/zh-cn/3.8/library/csv.html#csv.excel_tab" target="_blank" rel="noopener"><code>excel_tab</code></a> 类定义了 Excel 生成的、制表符分隔的 CSV 文件的常规属性。它在变种注册表中的名称是 <code>&#39;excel-tab&#39;</code>。</p></li><li><p><em>class</em> <code>csv.unix_dialect</code></p><p><a href="https://docs.python.org/zh-cn/3.8/library/csv.html#csv.unix_dialect" target="_blank" rel="noopener"><code>unix_dialect</code></a> 类定义了在 UNIX 系统上生成的 CSV 文件的常规属性，即使用 <code>&#39;\n&#39;</code> 作为换行符，且所有字段都有引号包围。它在变种注册表中的名称是 <code>&#39;unix&#39;</code>。</p></li></ul><h4 id="class-csv-Sniffer"><a href="#class-csv-Sniffer" class="headerlink" title="class csv.Sniffer"></a><code>class csv.Sniffer</code></h4><p><a href="https://docs.python.org/zh-cn/3.8/library/csv.html#csv.Sniffer" target="_blank" rel="noopener"><code>Sniffer</code></a> 类用于推断 CSV 文件的格式。</p><p><a href="https://docs.python.org/zh-cn/3.8/library/csv.html#csv.Sniffer" target="_blank" rel="noopener"><code>Sniffer</code></a> 类提供了两个方法：</p><ul><li><p><code>sniff</code>(<em>sample</em>, <em>delimiters=None</em>)</p><p>分析给定的 <em>sample</em> 并返回一个 <a href="https://docs.python.org/zh-cn/3.8/library/csv.html#csv.Dialect" target="_blank" rel="noopener"><code>Dialect</code></a> 子类，该子类中包含了分析出的格式参数。如果给出可选的 <em>delimiters</em> 参数，则该参数会被解释为字符串，该字符串包含了可能的有效定界符。</p></li><li><p><code>has_header</code>(<em>sample</em>)</p><p>分析示例文本（假定为 CSV 格式），如果第一行很可能是一系列列标题，则返回 <a href="https://docs.python.org/zh-cn/3.8/library/constants.html#True" target="_blank" rel="noopener"><code>True</code></a>。</p></li></ul><p>一个使用Sniffer的例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'example.csv'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    dialect = csv.Sniffer().sniff(csvfile.read(<span class="number">1024</span>))</span><br><span class="line">    csvfile.seek(<span class="number">0</span>)</span><br><span class="line">    reader = csv.reader(csvfile, dialect)</span><br><span class="line">    <span class="comment"># ... process CSV file contents here ...</span></span><br></pre></td></tr></table></figure><h3 id="csv-中定义的常量"><a href="#csv-中定义的常量" class="headerlink" title="csv 中定义的常量"></a>csv 中定义的常量</h3><ul><li><p><code>csv.QUOTE_ALL</code></p><p>指示 <a href="https://docs.python.org/zh-cn/3.8/library/csv.html#csv.writer" target="_blank" rel="noopener"><code>writer</code></a> 对象给所有字段加上引号。</p></li><li><p><code>csv.QUOTE_MINIMAL</code></p><p>指示 <a href="https://docs.python.org/zh-cn/3.8/library/csv.html#csv.writer" target="_blank" rel="noopener"><code>writer</code></a> 对象仅为包含特殊字符（例如 <em>定界符</em>、<em>引号字符</em> 或 <em>行结束符</em> 中的任何字符）的字段加上引号。</p></li><li><p><code>csv.QUOTE_NONNUMERIC</code></p><p>指示 <a href="https://docs.python.org/zh-cn/3.8/library/csv.html#csv.writer" target="_blank" rel="noopener"><code>writer</code></a> 对象为所有非数字字段加上引号。指示 reader 将所有未用引号引出的字段转换为 <em>float</em> 类型。</p></li><li><p><code>csv.QUOTE_NONE</code></p><p>指示 <a href="https://docs.python.org/zh-cn/3.8/library/csv.html#csv.writer" target="_blank" rel="noopener"><code>writer</code></a> 对象不使用引号引出字段。当 <em>定界符</em> 出现在输出数据中时，其前面应该有 <em>转义符</em>。如果未设置 <em>转义符</em>，则遇到任何需要转义的字符时，writer 都会抛出 <a href="https://docs.python.org/zh-cn/3.8/library/csv.html#csv.Error" target="_blank" rel="noopener"><code>Error</code></a> 异常。指示 <a href="https://docs.python.org/zh-cn/3.8/library/csv.html#csv.reader" target="_blank" rel="noopener"><code>reader</code></a> 不对引号字符进行特殊处理。</p></li></ul><h3 id="csv模块定义了以下异常："><a href="#csv模块定义了以下异常：" class="headerlink" title="csv模块定义了以下异常："></a><code>csv</code>模块定义了以下异常：</h3><ul><li><p><em>exception</em> <code>csv.Error</code></p><p>该异常可能由任何发生错误的函数抛出。</p></li></ul><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>如果没有指定 <code>newline=&#39;&#39;</code>，则嵌入引号中的换行符将无法正确解析，并且在写入时，使用 <code>\r\n</code> 换行的平台会有多余的 <code>\r</code> 写入。由于 csv 模块会执行自己的（<a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-universal-newlines" target="_blank" rel="noopener">通用</a>）换行符处理，因此指定 <code>newline=&#39;&#39;</code> 应该总是安全的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>csv模块是一个非常实用的处理csv文件的标准库，提供了两种处理方法。</p><p>一个是把csv文件对象当作字符串列表解析csv文件的方法,<code>reader</code>， <code>writer</code>，</p><p>另一个是把csv文件对象当作字典解析的类<code>dictReader</code>, <code>dictWriter</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库学习之csv&quot;&gt;&lt;a href=&quot;#python-标准库学习之csv&quot; class=&quot;headerlink&quot; title=&quot;python 标准库学习之csv&quot;&gt;&lt;/a&gt;python 标准库学习之&lt;code&gt;csv&lt;/code&gt;&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;2019年立的flag,今年继续,标准库系列文章继续更新。&lt;/p&gt;
&lt;p&gt;今天是真冷啊,屋里头才16℃,只能用一张图来表示我的心情。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/jeffsui/app_image_resource/blob/master/20200102_not_cold.jpg?raw=true&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;标准库-csv&quot;&gt;&lt;a href=&quot;#标准库-csv&quot; class=&quot;headerlink&quot; title=&quot;标准库 csv&quot;&gt;&lt;/a&gt;标准库 csv&lt;/h2&gt;&lt;h3 id=&quot;文档路径&quot;&gt;&lt;a href=&quot;#文档路径&quot; class=&quot;headerlink&quot; title=&quot;文档路径&quot;&gt;&lt;/a&gt;文档路径&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/csv.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;python标准库csv&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;CSV-文件格式&quot;&gt;&lt;a href=&quot;#CSV-文件格式&quot; class=&quot;headerlink&quot; title=&quot;CSV 文件格式&quot;&gt;&lt;/a&gt;&lt;code&gt;CSV&lt;/code&gt; 文件格式&lt;/h3&gt;&lt;p&gt;文件扩展名为.csv,通用的电子表格文件格式,经常使用在数据分析中。&lt;/p&gt;
&lt;p&gt;分隔符可能有所差别, python中的csv模块提供了对csv文件的读写操作,非常方便。&lt;/p&gt;
&lt;h3 id=&quot;csv-常用方法&quot;&gt;&lt;a href=&quot;#csv-常用方法&quot; class=&quot;headerlink&quot; title=&quot;csv 常用方法&quot;&gt;&lt;/a&gt;&lt;code&gt;csv&lt;/code&gt; 常用方法&lt;/h3&gt;&lt;h4 id=&quot;csv-reader-csvfile-dialect-39-excel-39-fmtparams&quot;&gt;&lt;a href=&quot;#csv-reader-csvfile-dialect-39-excel-39-fmtparams&quot; class=&quot;headerlink&quot; title=&quot;csv.reader(csvfile,dialect=&amp;#39;excel&amp;#39;, ***fmtparams)&quot;&gt;&lt;/a&gt;&lt;code&gt;csv.reader(csvfile,dialect=&amp;#39;excel&amp;#39;, ***fmtparams)&lt;/code&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;返回一个reader对象,该对象遍历csvfile。csv对象可以是任何对象,只要这个对象支持iteratable协议,并在每次调用&lt;code&gt;__next__()&lt;/code&gt;方法时都返回字符串即可。如果csvfile是文件对象,则打开它时应使用&lt;code&gt;newline=&amp;#39;&amp;#39;&lt;/code&gt;。可选参数dialect是用于不同的csv文件类型,它可以是 &lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/csv.html#csv.Dialect&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Dialect&lt;/code&gt;&lt;/a&gt; 类的子类的实例，也可以是 &lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/csv.html#csv.list_dialects&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;list_dialects()&lt;/code&gt;&lt;/a&gt; 函数返回的字符串之一。完整的解释可以参考&lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/csv.html#csv-fmt-params&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;csv文件格式参数&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;csv文件的每一行都会默认当做字符串列表解析,除非指定了 &lt;code&gt;QUOTE_NONNUMERIC&lt;/code&gt; 格式选项（在这种情况下，未加引号的字段会转换为浮点数），否则不会执行自动数据类型转换。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个读文件例子&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; csv&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; open(&lt;span class=&quot;string&quot;&gt;&#39;eggs.csv&#39;&lt;/span&gt;, newline=&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; csvfile:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;    spamreader = csv.reader(csvfile, delimiter=&lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt;, quotechar=&lt;span class=&quot;string&quot;&gt;&#39;|&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; row &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; spamreader:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;        print(&lt;span class=&quot;string&quot;&gt;&#39;, &#39;&lt;/span&gt;.join(row))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Spam, Spam, Spam, Spam, Spam, Baked Beans&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Spam, Lovely Spam, Wonderful Spam&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="csv" scheme="https://pinghailinfeng.gitee.io/tags/csv/"/>
    
  </entry>
  
  <entry>
    <title>using python venv to create virtual environment</title>
    <link href="https://pinghailinfeng.gitee.io/2019/12/26/using-python-venv-to-create-virtual-environment/"/>
    <id>https://pinghailinfeng.gitee.io/2019/12/26/using-python-venv-to-create-virtual-environment/</id>
    <published>2019-12-26T03:17:57.000Z</published>
    <updated>2020-01-02T08:27:36.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-env-创建虚拟环境"><a href="#python-env-创建虚拟环境" class="headerlink" title="python env 创建虚拟环境"></a>python env 创建虚拟环境</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>又断更了,长此以往,我可能无法完成100天打卡任务了。</p><p>红包是刺激自己前进的动力。</p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20191223_blog_3.jpg?raw=true" alt></p><h2 id="python-标准库03之虚拟环境创建"><a href="#python-标准库03之虚拟环境创建" class="headerlink" title="python 标准库03之虚拟环境创建"></a>python 标准库03之虚拟环境创建</h2><p><a href="https://docs.python.org/zh-cn/3/library/venv.html" target="_blank" rel="noopener">参考文档</a></p><p>python目前官方推荐的工具是<code>venv</code></p><p>顺便介绍下目前常用的python虚拟环境工具</p><ul><li>virsualenv</li><li>pyvenv (3.3,3.4中推荐的虚拟环境创建工具,3.6中被弃用)</li><li>venv(3.6以后推荐的虚拟环境创建工具)</li></ul><a id="more"></a><h3 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h3><p>使用下面的命令创建一个虚拟环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m venv /path/to/new/virtual/environment</span><br></pre></td></tr></table></figure><p>windows下使用venv来创建虚拟环境</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c:\&gt;c:\Python35\python -m venv c:\path\to\myenv</span><br></pre></td></tr></table></figure><p>使用<code>-h</code>参数可以查看<code>venv</code>命令行的帮助文档</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">usage: venv [-h] [--system-site-packages] [--symlinks | --copies] [--clear]</span><br><span class="line">            [--upgrade] [--without-pip] [--prompt PROMPT]</span><br><span class="line">            ENV_DIR [ENV_DIR ...]</span><br><span class="line"></span><br><span class="line">Creates virtual Python environments <span class="keyword">in</span> one or more target directories.</span><br><span class="line"></span><br><span class="line">positional arguments:</span><br><span class="line">  ENV_DIR               A directory to create the environment in.</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this help message and <span class="keyword">exit</span></span><br><span class="line">  --system-site-packages</span><br><span class="line">                        Give the virtual environment access to the system</span><br><span class="line">                        site-packages dir.</span><br><span class="line">  --symlinks            <span class="keyword">Try</span> to use symlinks rather than copies, when symlinks</span><br><span class="line">                        are not the default <span class="keyword">for</span> the platform.</span><br><span class="line">  --copies              <span class="keyword">Try</span> to use copies rather than symlinks, even when</span><br><span class="line">                        symlinks are the default <span class="keyword">for</span> the platform.</span><br><span class="line">  --clear               Delete the contents of the environment directory <span class="keyword">if</span> it</span><br><span class="line">                        already exists, before environment creation.</span><br><span class="line">  --upgrade             Upgrade the environment directory to use this version</span><br><span class="line">                        of Python, assuming Python has been upgraded in-place.</span><br><span class="line">  --without-pip         Skips installing or upgrading pip <span class="keyword">in</span> the virtual</span><br><span class="line">                        environment (pip is bootstrapped by default)</span><br><span class="line">  --prompt PROMPT       Provides an alternative prompt prefix <span class="keyword">for</span> this</span><br><span class="line">                        environment.</span><br></pre></td></tr></table></figure><p>除非你使用了<code>--without-pip</code> 参数,否则 <a href="https://docs.python.org/zh-cn/3/library/ensurepip.html#module-ensurepip" target="_blank" rel="noopener">ensurepip</a> 模块会默认安装<code>pip</code>指令到创建好的虚拟环境中。</p><p>一旦一个虚拟环境被创建，可以通过下面的命令激活这个虚拟环境。不同平台下的激活方式略有不同,下面总结了各个平台下虚拟环境的激活命令脚本,请参考。</p><h3 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h3><table><thead><tr><th>平台</th><th>Shell</th><th>用于激活虚拟环境的命令</th></tr></thead><tbody><tr><td>POSIX</td><td>bash/zsh</td><td>$ source <venv>/bin/activate</venv></td></tr><tr><td></td><td>fish</td><td>$ . <venv>/bin/activate.fish</venv></td></tr><tr><td></td><td>csh/tcsh</td><td>$ source <venv>/bin/activate.csh</venv></td></tr><tr><td></td><td>PowerShell Core</td><td>$ <venv>/bin/Activate.ps1</venv></td></tr><tr><td>Windows</td><td>cmd.exe</td><td>C:> <venv>\Scripts\activate.bat</venv></td></tr><tr><td></td><td>PowerShell</td><td>PS C:> <venv>\Scripts\Activate.ps1</venv></td></tr></tbody></table><p>You don’t specifically <em>need</em> to activate an environment; activation just prepends the virtual environment’s binary directory to your path, so that “python” invokes the virtual environment’s Python interpreter and you can run installed scripts without having to use their full path. However, all scripts installed in a virtual environment should be runnable without activating it, and run with the virtual environment’s Python automatically.</p><p>You can deactivate a virtual environment by typing “deactivate” in your shell. The exact mechanism is platform-specific and is an internal implementation detail (typically a script or shell function will be used).</p><p>你无需关心如何激活一个虚拟环境；使用相对于项目当前路径下的可执行方法,python解析器就可以激活虚拟环境。已经激活的虚拟环境, 就可以使用python的命令直接执行脚本或者安装其他软件包到当前的虚拟环境，而不需要关心是否会污染本地python环境的问题。同样，使用deactivate 就可以退出当前的虚拟环境。</p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>下面展示的是一个使用<code>EnvBuilder</code> 创建一个自定义虚拟环境的脚本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class venv.EnvBuilder(system_site_packages=False, clear=False, symlinks=False, upgrade=False, with_pip=False, prompt=None)</span><br></pre></td></tr></table></figure><ul><li><p><code>create</code>(<em>env_dir</em>)</p><ul><li><code>system_site_packages</code> – 一个Boolean值,是否将<code>site-packages</code>添加到虚拟环境中 默认是False.</li><li><code>clear</code> – 一个Boolean值,如果为真,将会在创建环境之前清除已经存在的目标路径.</li><li><code>symlinks</code> – 一个Boolean值,如果为真,将会在创建环境前删除包含内容的目录  </li><li><code>upgrade</code> –  一个Boolean值,如果为真, 则将用正在运行的Python升级现有环境 - 用于在Python就地升级（默认为False）时使用。.</li><li><code>with_pip</code> – 一个Boolean值,如果为真,pip命令将会安装到虚拟环境中 ,使用 <a href="https://docs.python.org/zh-cn/3/library/ensurepip.html#module-ensurepip" target="_blank" rel="noopener"><code>ensurepip</code></a> 的默认 <code>--default-pip</code> 参数选项.</li><li><code>prompt</code> – 在激活虚拟环境后使用的字符串（默认为None表示将使用环境的目录名称）。.</li></ul></li></ul>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, env_dir)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Create a virtualized Python environment in a directory.</span></span><br><span class="line"><span class="string">    env_dir is the target directory to create an environment in.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    env_dir = os.path.abspath(env_dir)</span><br><span class="line">    context = self.ensure_directories(env_dir)</span><br><span class="line">    self.create_configuration(context)</span><br><span class="line">    self.setup_python(context)</span><br><span class="line">    self.setup_scripts(context)</span><br><span class="line">    self.post_setup(context)</span><br></pre></td></tr></table></figure><ul><li><p><code>ensure_directories</code>(<em>env_dir</em>)  </p><blockquote><p>创建环境目录和所有必需的目录，并返回一个上下文对象。这只是属性（如路径）的<br>持有者，供其他方法使用。这些目录已被允许存在，只要其中一个clear或被upgrade<br>指定为允许在现有环境目录上进行操作即可。</p></blockquote></li><li><p><code>create_configuration</code>(<em>context</em>) </p><blockquote><p>pyvenv.cfg在环境中创建配置文件。</p></blockquote></li><li><p><code>setup_python</code>(<em>context</em>) </p><blockquote><p>在环境中创建Python可执行文件（以及Windows下的DLL）的副本。在POSIX系统<br>中，如果一个特定的可执行文件 python3.x使用，符号链接python和python3将创建指<br>向该可执行文件，除非已存在具有这些名称的文件。</p></blockquote></li><li><p><code>setup_scripts</code>(<em>context</em>) </p><blockquote><p>将适合该平台的激活脚本安装到虚拟环境中。</p></blockquote></li><li><p><code>post_setup</code>(<em>context</em>)</p><blockquote><p>一种占位符方法，可以在第三方实现中重写，以在虚拟环境中预安装包或执行其他后<br>创建步骤。</p></blockquote><p>此外，EnvBuilder提供这种工具方法，可以从被称为setup_scripts()或post_setup()在子<br>类中，以协助安装自定义脚本到虚拟环境中。<br>install_scripts（上下文，路径）<br>路径是应包含子目录“common”，“posix”，“nt”的目录的路径，每个目录都包含指向环<br>境中bin目录的脚本。os.name经过一些文本替换占位符后，“common”的内容和相应的<br>目录被复制：</p><ul><li><p><code>__VENV_DIR__</code> 被替换为环境目录的绝对路径。</p></li><li><p><code>__VENV_NAME__</code> 被替换为环境名称（环境目录的最终路径段）。</p></li><li><p><code>__VENV_PROMPT__</code> 被提示符替换（环境名称由括号括起来，并带有下面的空格）</p></li><li><p><code>__VENV_BIN_NAME__</code>被替换为bin目录的名称（bin或者Scripts）。</p></li><li><p><code>__VENV_PYTHON__</code>被替换为环境可执行文件的绝对路径。<br>允许目录存在（用于在现有环境正在升级时）。</p><p>还有一个模块级的便利功能：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">venv.create（env_dir，system_site_packages = False，clear = False，symlinks =</span><br><span class="line">False，with_pip = False ）</span><br></pre></td></tr></table></figure><p><code>EnvBuilder</code>用给定的关键字参数创建一个参数，并调用create()并使用<code>env_dir</code>参数。</p></li></ul></li></ul><h3 id="一个扩展EnvBuilder例子"><a href="#一个扩展EnvBuilder例子" class="headerlink" title="一个扩展EnvBuilder例子"></a>一个扩展<code>EnvBuilder</code>例子</h3><p>以下脚本展示了如何<code>EnvBuilder</code>通过实现将<code>setuptools</code>和<code>pip</code>安装到创建的虚拟环境中的子类来进行扩展：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen, PIPE</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlretrieve</span><br><span class="line"><span class="keyword">import</span> venv</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendedEnvBuilder</span><span class="params">(venv.EnvBuilder)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    This builder installs setuptools and pip so that you can pip or</span></span><br><span class="line"><span class="string">    easy_install other packages into the created virtual environment.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param nodist: If true, setuptools and pip are not installed into the</span></span><br><span class="line"><span class="string">                   created virtual environment.</span></span><br><span class="line"><span class="string">    :param nopip: If true, pip is not installed into the created</span></span><br><span class="line"><span class="string">                  virtual environment.</span></span><br><span class="line"><span class="string">    :param progress: If setuptools or pip are installed, the progress of the</span></span><br><span class="line"><span class="string">                     installation can be monitored by passing a progress</span></span><br><span class="line"><span class="string">                     callable. If specified, it is called with two</span></span><br><span class="line"><span class="string">                     arguments: a string indicating some progress, and a</span></span><br><span class="line"><span class="string">                     context indicating where the string is coming from.</span></span><br><span class="line"><span class="string">                     The context argument can have one of three values:</span></span><br><span class="line"><span class="string">                     'main', indicating that it is called from virtualize()</span></span><br><span class="line"><span class="string">                     itself, and 'stdout' and 'stderr', which are obtained</span></span><br><span class="line"><span class="string">                     by reading lines from the output streams of a subprocess</span></span><br><span class="line"><span class="string">                     which is used to install the app.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                     If a callable is not specified, default progress</span></span><br><span class="line"><span class="string">                     information is output to sys.stderr.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        self.nodist = kwargs.pop(<span class="string">'nodist'</span>, <span class="literal">False</span>)</span><br><span class="line">        self.nopip = kwargs.pop(<span class="string">'nopip'</span>, <span class="literal">False</span>)</span><br><span class="line">        self.progress = kwargs.pop(<span class="string">'progress'</span>, <span class="literal">None</span>)</span><br><span class="line">        self.verbose = kwargs.pop(<span class="string">'verbose'</span>, <span class="literal">False</span>)</span><br><span class="line">        super().__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post_setup</span><span class="params">(self, context)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Set up any packages which need to be pre-installed into the</span></span><br><span class="line"><span class="string">        virtual environment being created.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param context: The information for the virtual environment</span></span><br><span class="line"><span class="string">                        creation request being processed.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        os.environ[<span class="string">'VIRTUAL_ENV'</span>] = context.env_dir</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.nodist:</span><br><span class="line">            self.install_setuptools(context)</span><br><span class="line">        <span class="comment"># Can't install pip without setuptools</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.nopip <span class="keyword">and</span> <span class="keyword">not</span> self.nodist:</span><br><span class="line">            self.install_pip(context)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reader</span><span class="params">(self, stream, context)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Read lines from a subprocess' output stream and either pass to a progress</span></span><br><span class="line"><span class="string">        callable (if specified) or write progress information to sys.stderr.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        progress = self.progress</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            s = stream.readline()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> progress <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                progress(s, context)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> self.verbose:</span><br><span class="line">                    sys.stderr.write(<span class="string">'.'</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    sys.stderr.write(s.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">                sys.stderr.flush()</span><br><span class="line">        stream.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">install_script</span><span class="params">(self, context, name, url)</span>:</span></span><br><span class="line">        _, _, path, _, _, _ = urlparse(url)</span><br><span class="line">        fn = os.path.split(path)[<span class="number">-1</span>]</span><br><span class="line">        binpath = context.bin_path</span><br><span class="line">        distpath = os.path.join(binpath, fn)</span><br><span class="line">        <span class="comment"># Download script into the virtual environment's binaries folder</span></span><br><span class="line">        urlretrieve(url, distpath)</span><br><span class="line">        progress = self.progress</span><br><span class="line">        <span class="keyword">if</span> self.verbose:</span><br><span class="line">            term = <span class="string">'\n'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            term = <span class="string">''</span></span><br><span class="line">        <span class="keyword">if</span> progress <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            progress(<span class="string">'Installing %s ...%s'</span> % (name, term), <span class="string">'main'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sys.stderr.write(<span class="string">'Installing %s ...%s'</span> % (name, term))</span><br><span class="line">            sys.stderr.flush()</span><br><span class="line">        <span class="comment"># Install in the virtual environment</span></span><br><span class="line">        args = [context.env_exe, fn]</span><br><span class="line">        p = Popen(args, stdout=PIPE, stderr=PIPE, cwd=binpath)</span><br><span class="line">        t1 = Thread(target=self.reader, args=(p.stdout, <span class="string">'stdout'</span>))</span><br><span class="line">        t1.start()</span><br><span class="line">        t2 = Thread(target=self.reader, args=(p.stderr, <span class="string">'stderr'</span>))</span><br><span class="line">        t2.start()</span><br><span class="line">        p.wait()</span><br><span class="line">        t1.join()</span><br><span class="line">        t2.join()</span><br><span class="line">        <span class="keyword">if</span> progress <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            progress(<span class="string">'done.'</span>, <span class="string">'main'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sys.stderr.write(<span class="string">'done.\n'</span>)</span><br><span class="line">        <span class="comment"># Clean up - no longer needed</span></span><br><span class="line">        os.unlink(distpath)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">install_setuptools</span><span class="params">(self, context)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Install setuptools in the virtual environment.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param context: The information for the virtual environment</span></span><br><span class="line"><span class="string">                        creation request being processed.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        url = <span class="string">'https://bitbucket.org/pypa/setuptools/downloads/ez_setup.py'</span></span><br><span class="line">        self.install_script(context, <span class="string">'setuptools'</span>, url)</span><br><span class="line">        <span class="comment"># clear up the setuptools archive which gets downloaded</span></span><br><span class="line">        pred = <span class="keyword">lambda</span> o: o.startswith(<span class="string">'setuptools-'</span>) <span class="keyword">and</span> o.endswith(<span class="string">'.tar.gz'</span>)</span><br><span class="line">        files = filter(pred, os.listdir(context.bin_path))</span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">            f = os.path.join(context.bin_path, f)</span><br><span class="line">            os.unlink(f)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">install_pip</span><span class="params">(self, context)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Install pip in the virtual environment.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param context: The information for the virtual environment</span></span><br><span class="line"><span class="string">                        creation request being processed.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        url = <span class="string">'https://raw.github.com/pypa/pip/master/contrib/get-pip.py'</span></span><br><span class="line">        self.install_script(context, <span class="string">'pip'</span>, url)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(args=None)</span>:</span></span><br><span class="line">    compatible = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> sys.version_info &lt; (<span class="number">3</span>, <span class="number">3</span>):</span><br><span class="line">        compatible = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> hasattr(sys, <span class="string">'base_prefix'</span>):</span><br><span class="line">        compatible = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> compatible:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'This script is only for use with '</span></span><br><span class="line">                         <span class="string">'Python 3.3 or later'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">        parser = argparse.ArgumentParser(prog=__name__,</span><br><span class="line">                                         description=<span class="string">'Creates virtual Python '</span></span><br><span class="line">                                                     <span class="string">'environments in one or '</span></span><br><span class="line">                                                     <span class="string">'more target '</span></span><br><span class="line">                                                     <span class="string">'directories.'</span>)</span><br><span class="line">        parser.add_argument(<span class="string">'dirs'</span>, metavar=<span class="string">'ENV_DIR'</span>, nargs=<span class="string">'+'</span>,</span><br><span class="line">                            help=<span class="string">'A directory in which to create the</span></span><br><span class="line"><span class="string">                                 '</span>virtual environment.<span class="string">')</span></span><br><span class="line"><span class="string">        parser.add_argument('</span>--no-setuptools<span class="string">', default=False,</span></span><br><span class="line"><span class="string">                            action='</span>store_true<span class="string">', dest='</span>nodist<span class="string">',</span></span><br><span class="line"><span class="string">                            help="Don'</span>t install setuptools <span class="keyword">or</span> pip <span class="keyword">in</span> the <span class="string">"</span></span><br><span class="line"><span class="string">                                 "</span>virtual environment.<span class="string">")</span></span><br><span class="line"><span class="string">        parser.add_argument('--no-pip', default=False,</span></span><br><span class="line"><span class="string">                            action='store_true', dest='nopip',</span></span><br><span class="line"><span class="string">                            help="</span>Don<span class="string">'t install pip in the virtual "</span></span><br><span class="line"><span class="string">                                 "environment.")</span></span><br><span class="line"><span class="string">        parser.add_argument('</span>--system-site-packages<span class="string">', default=False,</span></span><br><span class="line"><span class="string">                            action='</span>store_true<span class="string">', dest='</span>system_site<span class="string">',</span></span><br><span class="line"><span class="string">                            help='</span>Give the virtual environment access to the <span class="string">'</span></span><br><span class="line"><span class="string">                                 '</span>system site-packages dir.<span class="string">')</span></span><br><span class="line"><span class="string">        if os.name == '</span>nt<span class="string">':</span></span><br><span class="line"><span class="string">            use_symlinks = False</span></span><br><span class="line"><span class="string">        else:</span></span><br><span class="line"><span class="string">            use_symlinks = True</span></span><br><span class="line"><span class="string">        parser.add_argument('</span>--symlinks<span class="string">', default=use_symlinks,</span></span><br><span class="line"><span class="string">                            action='</span>store_true<span class="string">', dest='</span>symlinks<span class="string">',</span></span><br><span class="line"><span class="string">                            help='</span>Try to use symlinks rather than copies, <span class="string">'</span></span><br><span class="line"><span class="string">                                 '</span>when symlinks are <span class="keyword">not</span> the default <span class="keyword">for</span> <span class="string">'</span></span><br><span class="line"><span class="string">                                 '</span>the platform.<span class="string">')</span></span><br><span class="line"><span class="string">        parser.add_argument('</span>--clea<span class="string">r', default=False, action='</span>store_true<span class="string">',</span></span><br><span class="line"><span class="string">                            dest='</span>clea<span class="string">r', help='</span>Delete the contents of the <span class="string">'</span></span><br><span class="line"><span class="string">                                               '</span>virtual environment <span class="string">'</span></span><br><span class="line"><span class="string">                                               '</span>directory <span class="keyword">if</span> it already <span class="string">'</span></span><br><span class="line"><span class="string">                                               '</span>exists, before virtual <span class="string">'</span></span><br><span class="line"><span class="string">                                               '</span>environment creation.<span class="string">')</span></span><br><span class="line"><span class="string">        parser.add_argument('</span>--upgrade<span class="string">', default=False, action='</span>store_true<span class="string">',</span></span><br><span class="line"><span class="string">                            dest='</span>upgrade<span class="string">', help='</span>Upgrade the virtual <span class="string">'</span></span><br><span class="line"><span class="string">                                                 '</span>environment directory to <span class="string">'</span></span><br><span class="line"><span class="string">                                                 '</span>use this version of <span class="string">'</span></span><br><span class="line"><span class="string">                                                 '</span>Python, assuming Python <span class="string">'</span></span><br><span class="line"><span class="string">                                                 '</span>has been upgraded <span class="string">'</span></span><br><span class="line"><span class="string">                                                 '</span><span class="keyword">in</span>-place.<span class="string">')</span></span><br><span class="line"><span class="string">        parser.add_argument('</span>--verbose<span class="string">', default=False, action='</span>store_true<span class="string">',</span></span><br><span class="line"><span class="string">                            dest='</span>verbose<span class="string">', help='</span>Display the output <span class="string">'</span></span><br><span class="line"><span class="string">                                               '</span><span class="keyword">from</span> the scripts which <span class="string">'</span></span><br><span class="line"><span class="string">                                               '</span>install setuptools <span class="keyword">and</span> pip.<span class="string">')</span></span><br><span class="line"><span class="string">        options = parser.parse_args(args)</span></span><br><span class="line"><span class="string">        if options.upgrade and options.clear:</span></span><br><span class="line"><span class="string">            raise ValueError('</span>you cannot supply --upgrade <span class="keyword">and</span> --clear together.<span class="string">')</span></span><br><span class="line"><span class="string">        builder = ExtendedEnvBuilder(system_site_packages=options.system_site,</span></span><br><span class="line"><span class="string">                                       clear=options.clear,</span></span><br><span class="line"><span class="string">                                       symlinks=options.symlinks,</span></span><br><span class="line"><span class="string">                                       upgrade=options.upgrade,</span></span><br><span class="line"><span class="string">                                       nodist=options.nodist,</span></span><br><span class="line"><span class="string">                                       nopip=options.nopip,</span></span><br><span class="line"><span class="string">                                       verbose=options.verbose)</span></span><br><span class="line"><span class="string">        for d in options.dirs:</span></span><br><span class="line"><span class="string">            builder.create(d)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if __name__ == '</span>__main__<span class="string">':</span></span><br><span class="line"><span class="string">    rc = 1</span></span><br><span class="line"><span class="string">    try:</span></span><br><span class="line"><span class="string">        main()</span></span><br><span class="line"><span class="string">        rc = 0</span></span><br><span class="line"><span class="string">    except Exception as e:</span></span><br><span class="line"><span class="string">        print('</span>Error: %s<span class="string">' % e, file=sys.stderr)</span></span><br><span class="line"><span class="string">    sys.exit(rc)</span></span><br></pre></td></tr></table></figure><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>在windows下<code>vscode</code>中通过venv 创建虚拟环境步骤:</p><ol><li><p><code>powershell</code>下,执行命令 <code>python -m venv .venv</code></p></li><li><p>执行激活命令 <code>.\Scripts\activate.ps1</code></p></li><li><p>退出虚拟环境  在项目目录下执行<code>deactivate</code> 即可。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-env-创建虚拟环境&quot;&gt;&lt;a href=&quot;#python-env-创建虚拟环境&quot; class=&quot;headerlink&quot; title=&quot;python env 创建虚拟环境&quot;&gt;&lt;/a&gt;python env 创建虚拟环境&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;又断更了,长此以往,我可能无法完成100天打卡任务了。&lt;/p&gt;
&lt;p&gt;红包是刺激自己前进的动力。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/jeffsui/app_image_resource/blob/master/20191223_blog_3.jpg?raw=true&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;python-标准库03之虚拟环境创建&quot;&gt;&lt;a href=&quot;#python-标准库03之虚拟环境创建&quot; class=&quot;headerlink&quot; title=&quot;python 标准库03之虚拟环境创建&quot;&gt;&lt;/a&gt;python 标准库03之虚拟环境创建&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3/library/venv.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python目前官方推荐的工具是&lt;code&gt;venv&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;顺便介绍下目前常用的python虚拟环境工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;virsualenv&lt;/li&gt;
&lt;li&gt;pyvenv (3.3,3.4中推荐的虚拟环境创建工具,3.6中被弃用)&lt;/li&gt;
&lt;li&gt;venv(3.6以后推荐的虚拟环境创建工具)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
  </entry>
  
  <entry>
    <title>python standard library -2 dictionary</title>
    <link href="https://pinghailinfeng.gitee.io/2019/12/23/python-standard-library-2-dictionary/"/>
    <id>https://pinghailinfeng.gitee.io/2019/12/23/python-standard-library-2-dictionary/</id>
    <published>2019-12-23T06:09:14.000Z</published>
    <updated>2020-01-02T08:35:10.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库学习笔记-–-dictionary"><a href="#python-标准库学习笔记-–-dictionary" class="headerlink" title="python 标准库学习笔记 – dictionary"></a>python 标准库学习笔记 – dictionary</h1><h2 id="0-0-前言"><a href="#0-0-前言" class="headerlink" title="0.0 前言"></a>0.0 前言</h2><p>家里孩子发烧了,延迟更新标准库学习笔记</p><p>折腾了三个晚上,一家三口都累倒了。</p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20191223_rear-view-of-man-in-knit-hat.jpg?raw=true" alt></p><p>人生就好比一个蹒跚学步的孩童,很容易被外界环境影响。</p><h2 id="1-0-标准库-内置函数"><a href="#1-0-标准库-内置函数" class="headerlink" title="1.0 标准库- 内置函数"></a>1.0 标准库- 内置函数</h2><p>参考文档:  <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#mapping-types-dict" target="_blank" rel="noopener">内置类型-字典</a></p><p>python中主要内置类型包括<code>numbers</code>,<code>sequences</code>,<code>mappings</code>,<code>classes</code>,<code>instance</code>和<code>exception</code>。</p><h3 id="1-1-逻辑值检测"><a href="#1-1-逻辑值检测" class="headerlink" title="1.1 逻辑值检测"></a>1.1 逻辑值检测</h3><p>任何对象都可以进行逻辑值检测,以便在<code>if</code> 或<code>while</code>作为条件或是作为上下文所指返回值是布尔类型的表达式来使用。所以就有下面的用法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L = []</span><br><span class="line"><span class="keyword">if</span>(L):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">while</span>(L):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>一个对象在默认情况下被认为是<code>True</code>,除非该对象定义了<code>__boolean__()</code> 方法且返回<code>False</code> 或者定义<code>__len__()</code>方法且返回零。下面三种情况的内置对象都会被认为是逻辑假值。</p><ul><li><p>None 或 False</p></li><li><p>任何数值类型的零</p></li><li><p>空的序列和多项集 包括 空字符串、空列表、空集合、空字典、空元组以及空数列(reange(0))</p><a id="more"></a></li></ul><h3 id="1-2-布尔运算-–-and-or-not"><a href="#1-2-布尔运算-–-and-or-not" class="headerlink" title="1.2 布尔运算 – and,or,not"></a>1.2 布尔运算 – and,or,not</h3><table><thead><tr><th>运算</th><th>结果</th><th>注释</th></tr></thead><tbody><tr><td><code>x or y</code></td><td>if <em>x</em> is false, then <em>y</em>, else <em>x</em></td><td>短路运算,只有第一个为假的时候才会对第二个求值</td></tr><tr><td><code>x and y</code></td><td>if <em>x</em> is false, then <em>x</em>, else <em>y</em></td><td>短路运算,只有第二个为真的时候才会对第二个求值</td></tr><tr><td><code>not x</code></td><td>if <em>x</em> is false, then <code>True</code>, else <code>False</code></td><td>逻辑取反</td></tr></tbody></table><h3 id="1-3-比较运算"><a href="#1-3-比较运算" class="headerlink" title="1.3 比较运算"></a>1.3 比较运算</h3><table><thead><tr><th>运算</th><th>含义</th></tr></thead><tbody><tr><td><code>&lt;</code></td><td>严格小于</td></tr><tr><td><code>&lt;=</code></td><td>小于或等于</td></tr><tr><td><code>&gt;</code></td><td>严格大于</td></tr><tr><td><code>&gt;=</code></td><td>大于或等于</td></tr><tr><td><code>==</code></td><td>等于</td></tr><tr><td><code>!=</code></td><td>不等于</td></tr><tr><td><code>is</code></td><td>对象标识</td></tr><tr><td><code>is not</code></td><td>否定的对象标识</td></tr></tbody></table><p>==tips== </p><ol><li>不同类型的对象之间不能使用比较运算,除非定义了对应的方法，例如<code>__lt__()</code>,<code>__eq__()</code>这样的函数</li><li>具有不同标识的类的实例,比较结果为False,除非你自己定义了<code>__eq__()</code>方法</li><li>一个类实例不能与相同类或的其他实例或其他类型的对象进行排序,除非定义了对应的方法，包括 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__lt__" target="_blank" rel="noopener"><code>__lt__()</code></a>, <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__le__" target="_blank" rel="noopener"><code>__le__()</code></a>, <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__gt__" target="_blank" rel="noopener"><code>__gt__()</code></a> 以及 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__ge__" target="_blank" rel="noopener"><code>__ge__()</code></a> </li></ol><h3 id="1-4-数字类型-–-int、float、complex"><a href="#1-4-数字类型-–-int、float、complex" class="headerlink" title="1.4 数字类型 – int、float、complex"></a>1.4 数字类型 – int、float、complex</h3><p>python中存在三种不同的数字类型: 整数<em>, </em>浮点数<em> 和 </em>复数*。</p><table><thead><tr><th>运算</th><th>结果</th><th>注释</th><th>完整文档</th></tr></thead><tbody><tr><td><code>x + y</code></td><td><em>x</em> 和 <em>y</em> 的和</td><td></td><td></td></tr><tr><td><code>x - y</code></td><td><em>x</em> 和 <em>y</em> 的差</td><td></td><td></td></tr><tr><td><code>x * y</code></td><td><em>x</em> 和 <em>y</em> 的乘积</td><td></td><td></td></tr><tr><td><code>x / y</code></td><td><em>x</em> 和 <em>y</em> 的商</td><td></td><td></td></tr><tr><td><code>x // y</code></td><td><em>x</em> 和 <em>y</em> 的商数</td><td>取整</td><td></td></tr><tr><td><code>x % y</code></td><td>remainder of <code>x / y</code></td><td>不可用于负数</td><td></td></tr><tr><td><code>-x</code></td><td><em>x</em> 取反</td><td></td><td></td></tr><tr><td><code>+x</code></td><td><em>x</em> 不变</td><td></td><td></td></tr><tr><td><code>abs(x)</code></td><td><em>x</em> 的绝对值或大小</td><td></td><td><a href="https://docs.python.org/zh-cn/3.8/library/functions.html#abs" target="_blank" rel="noopener"><code>abs()</code></a></td></tr><tr><td><code>int(x)</code></td><td>将 <em>x</em> 转换为整数</td><td>小数会被截断</td><td><a href="https://docs.python.org/zh-cn/3.8/library/functions.html#int" target="_blank" rel="noopener"><code>int()</code></a></td></tr><tr><td><code>float(x)</code></td><td>将 <em>x</em> 转换为浮点数</td><td>(4)(6)</td><td><a href="https://docs.python.org/zh-cn/3.8/library/functions.html#float" target="_blank" rel="noopener"><code>float()</code></a></td></tr><tr><td><code>complex(re, im)</code></td><td>一个带有实部 <em>re</em> 和虚部 <em>im</em> 的复数。<em>im</em> 默认为0。</td><td>(6)</td><td><a href="https://docs.python.org/zh-cn/3.8/library/functions.html#complex" target="_blank" rel="noopener"><code>complex()</code></a></td></tr><tr><td><code>c.conjugate()</code></td><td>复数 <em>c</em> 的共轭</td><td></td><td></td></tr><tr><td><code>divmod(x, y)</code></td><td><code>(x // y, x % y)</code></td><td>(2)</td><td><a href="https://docs.python.org/zh-cn/3.8/library/functions.html#divmod" target="_blank" rel="noopener"><code>divmod()</code></a></td></tr><tr><td><code>pow(x, y)</code></td><td><em>x</em> 的 <em>y</em> 次幂</td><td>(5)</td><td><a href="https://docs.python.org/zh-cn/3.8/library/functions.html#pow" target="_blank" rel="noopener"><code>pow()</code></a></td></tr><tr><td><code>x ** y</code></td><td><em>x</em> 的 <em>y</em> 次幂</td><td>(5)</td></tr></tbody></table><p>所有的<code>numbers.Real</code>类型（包括<code>int</code> 和 <code>float</code>)还包括以下运算:</p><table><thead><tr><th>运算</th><th>结果</th></tr></thead><tbody><tr><td><a href="https://docs.python.org/zh-cn/3.8/library/math.html#math.trunc" target="_blank" rel="noopener"><code>math.trunc(x)</code></a></td><td><em>x</em> 截断为 <a href="https://docs.python.org/zh-cn/3.8/library/numbers.html#numbers.Integral" target="_blank" rel="noopener"><code>Integral</code></a></td></tr><tr><td><a href="https://docs.python.org/zh-cn/3.8/library/functions.html#round" target="_blank" rel="noopener"><code>round(x[, n\])</code></a></td><td><em>x</em> 舍入到 <em>n</em> 位小数，半数值会舍入到偶数。 如果省略 <em>n</em>，则默认为 0。</td></tr><tr><td><a href="https://docs.python.org/zh-cn/3.8/library/math.html#math.floor" target="_blank" rel="noopener"><code>math.floor(x)</code></a></td><td>&lt;= <em>x</em> 的最大 <a href="https://docs.python.org/zh-cn/3.8/library/numbers.html#numbers.Integral" target="_blank" rel="noopener"><code>Integral</code></a></td></tr><tr><td><a href="https://docs.python.org/zh-cn/3.8/library/math.html#math.ceil" target="_blank" rel="noopener"><code>math.ceil(x)</code></a></td><td>&gt;= <em>x</em> 的最小 <a href="https://docs.python.org/zh-cn/3.8/library/numbers.html#numbers.Integral" target="_blank" rel="noopener"><code>Integral</code></a></td></tr></tbody></table><h3 id="1-5-整数类型的附加方法"><a href="#1-5-整数类型的附加方法" class="headerlink" title="1.5 整数类型的附加方法"></a>1.5 整数类型的附加方法</h3><h4 id="int-bit-length"><a href="#int-bit-length" class="headerlink" title="int.bit_length()"></a>int.bit_length()</h4><blockquote><p> 返回以二进制表示一个整数锁需要的位数，不包括符号位和前面的零</p></blockquote><h3 id="1-6-浮点数类型的附加方法"><a href="#1-6-浮点数类型的附加方法" class="headerlink" title="1.6 浮点数类型的附加方法"></a>1.6 浮点数类型的附加方法</h3><h4 id="float-as-integer-ratio"><a href="#float-as-integer-ratio" class="headerlink" title="float.as_integer_ratio()"></a><code>float.as_integer_ratio</code>()</h4><blockquote><p>返回一对整数，其比率正好等于原浮点数并且分母为正数。 无穷大会引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#OverflowError" target="_blank" rel="noopener"><code>OverflowError</code></a> 而 NaN 则会引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#ValueError" target="_blank" rel="noopener"><code>ValueError</code></a>。</p></blockquote><h4 id="float-is-integer"><a href="#float-is-integer" class="headerlink" title="float.is_integer()"></a><code>float.is_integer</code>()</h4><blockquote><p> 如果 float 实例可用有限位整数表示则返回 <code>True</code>，否则返回 <code>False</code>:</p></blockquote><h4 id="float-hex"><a href="#float-hex" class="headerlink" title="float.hex()"></a><code>float.hex</code>()</h4><blockquote><p> 以十六进制字符串的形式返回一个浮点数表示。 对于有限浮点数，这种表示法将总是包含前导的 <code>0x</code> 和尾随的 <code>p</code> 加指数。</p></blockquote><h4 id="classmethod-float-fromhex-s"><a href="#classmethod-float-fromhex-s" class="headerlink" title="classmethod float.fromhex(s)"></a><em>classmethod</em> <code>float.fromhex</code>(<em>s</em>)</h4><blockquote><p> 返回以十六进制字符串 <em>s</em> 表示的浮点数的类方法。 字符串 <em>s</em> 可以带有前导和尾随的空格。</p></blockquote><p>==tips==: <code>float.hex()</code> 是实例方法, <code>float.fromhex(s)</code>是类方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>float.fromhex(<span class="string">'0x3.a7p10'</span>)</span><br><span class="line"><span class="number">3740.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>float.hex(<span class="number">3740.0</span>)</span><br><span class="line"><span class="string">'0x1.d380000000000p+11'</span></span><br></pre></td></tr></table></figure><h3 id="1-7-数字类型的哈希运算"><a href="#1-7-数字类型的哈希运算" class="headerlink" title="1.7 数字类型的哈希运算"></a>1.7 数字类型的哈希运算</h3><p>一个例子说明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hash_fraction</span><span class="params">(m, n)</span>:</span></span><br><span class="line">    <span class="string">"""Compute the hash of a rational number m / n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Assumes m and n are integers, with n positive.</span></span><br><span class="line"><span class="string">    Equivalent to hash(fractions.Fraction(m, n)).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    P = sys.hash_info.modulus</span><br><span class="line">    <span class="comment"># Remove common factors of P.  (Unnecessary if m and n already coprime.)</span></span><br><span class="line">    <span class="keyword">while</span> m % P == n % P == <span class="number">0</span>:</span><br><span class="line">        m, n = m // P, n // P</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> n % P == <span class="number">0</span>:</span><br><span class="line">        hash_value = sys.hash_info.inf</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># Fermat's Little Theorem: pow(n, P-1, P) is 1, so</span></span><br><span class="line">        <span class="comment"># pow(n, P-2, P) gives the inverse of n modulo P.</span></span><br><span class="line">        hash_value = (abs(m) % P) * pow(n, P - <span class="number">2</span>, P) % P</span><br><span class="line">    <span class="keyword">if</span> m &lt; <span class="number">0</span>:</span><br><span class="line">        hash_value = -hash_value</span><br><span class="line">    <span class="keyword">if</span> hash_value == <span class="number">-1</span>:</span><br><span class="line">        hash_value = <span class="number">-2</span></span><br><span class="line">    <span class="keyword">return</span> hash_value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hash_float</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""Compute the hash of a float x."""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> math.isnan(x):</span><br><span class="line">        <span class="keyword">return</span> sys.hash_info.nan</span><br><span class="line">    <span class="keyword">elif</span> math.isinf(x):</span><br><span class="line">        <span class="keyword">return</span> sys.hash_info.inf <span class="keyword">if</span> x &gt; <span class="number">0</span> <span class="keyword">else</span> -sys.hash_info.inf</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> hash_fraction(*x.as_integer_ratio())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hash_complex</span><span class="params">(z)</span>:</span></span><br><span class="line">    <span class="string">"""Compute the hash of a complex number z."""</span></span><br><span class="line"></span><br><span class="line">    hash_value = hash_float(z.real) + sys.hash_info.imag * hash_float(z.imag)</span><br><span class="line">    <span class="comment"># do a signed reduction modulo 2**sys.hash_info.width</span></span><br><span class="line">    M = <span class="number">2</span>**(sys.hash_info.width - <span class="number">1</span>)</span><br><span class="line">    hash_value = (hash_value &amp; (M - <span class="number">1</span>)) - (hash_value &amp; M)</span><br><span class="line">    <span class="keyword">if</span> hash_value == <span class="number">-1</span>:</span><br><span class="line">        hash_value = <span class="number">-2</span></span><br><span class="line">    <span class="keyword">return</span> hash_value</span><br></pre></td></tr></table></figure><h3 id="1-8-映射类型-–-dict"><a href="#1-8-映射类型-–-dict" class="headerlink" title="1.8 映射类型 – dict"></a>1.8 映射类型 – dict</h3><p>python中目前只有一种映射类型, <code>字典</code>,映射属于可变对象。映射类型会将<code>hashtable</code>值映射到任意对象.</p><p>字典的键 <em>几乎</em>可以是任意值， 可<code>hash</code>的任意值,也就是包含列表、字典和其他可变类型的值,不可以用来充当字典中的键。</p><h4 id="1-创建字典"><a href="#1-创建字典" class="headerlink" title="1.创建字典"></a>1.创建字典</h4><p>字典可以通过将以逗号分隔的 <code>键: 值</code> 对列表包含于花括号之内来创建，例如: <code>{&#39;jack&#39;: 4098, &#39;sjoerd&#39;: 4127}</code> 或 <code>{4098: &#39;jack&#39;, 4127: &#39;sjoerd&#39;}</code>，也可以通过 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#dict" target="_blank" rel="noopener"><code>dict</code></a> 构造器来创建。</p><h4 id="2-构造函数"><a href="#2-构造函数" class="headerlink" title="2.构造函数"></a>2.构造函数</h4><p><em>class</em> <code>dict</code>(<em>**kwarg</em>)</p><p><em>class</em> <code>dict</code>(<em>mapping</em>, <em>**kwarg</em>)</p><p><em>class</em> <code>dict</code>(<em>iterable</em>, <em>**kwarg</em>)</p><h4 id="3-其他函数"><a href="#3-其他函数" class="headerlink" title="3. 其他函数"></a>3. 其他函数</h4><table><thead><tr><th>函数名</th><th>描述</th><th></th></tr></thead><tbody><tr><td>list(d)</td><td>返回字典 <em>d</em> 中使用的所有键的列表。</td><td></td></tr><tr><td><strong>len(d)</strong></td><td>返回字典 <em>d</em> 中的项数。</td><td></td></tr><tr><td><strong>d[key]</strong></td><td>返回 <em>d</em> 中以 <em>key</em> 为键的项。 如果映射中不存在 <em>key</em> 则会引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#KeyError" target="_blank" rel="noopener"><code>KeyError</code></a>。</td><td>[1]</td></tr><tr><td><strong>d[key] = value</strong></td><td>给d[key]的值设为value</td><td></td></tr><tr><td><strong>del d[key]</strong></td><td>将 <code>d[key]</code> 从 <em>d</em> 中移除。 如果映射中不存在 <em>key</em> 则会引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#KeyError" target="_blank" rel="noopener"><code>KeyError</code></a>。</td><td></td></tr><tr><td><strong>key in d</strong></td><td>如果 <em>d</em> 中存在键 <em>key</em> 则返回 <code>True</code>，否则返回 <code>False</code>。</td><td></td></tr><tr><td><strong>key not in d</strong></td><td>等价于 <code>not key in d</code>。</td><td></td></tr><tr><td><strong>iter(d)</strong></td><td>返回以字典的键为元素的迭代器</td><td></td></tr><tr><td><code>clear()</code></td><td>移除字典中的所有元素。</td><td></td></tr><tr><td><code>copy</code>()</td><td>返回原字典的浅拷贝。</td><td></td></tr><tr><td><em>classmethod</em> <code>fromkeys</code>(<em>iterable</em>[, <em>value</em>])</td><td>使用来自 <em>iterable</em> 的键创建一个新字典，并将键值设为 <em>value</em>。</td><td></td></tr><tr><td><code>get</code>(<em>key</em>[, <em>default</em>])</td><td>如果 <em>key</em> 存在于字典中则返回 <em>key</em> 的值，否则返回 <em>default</em>。 如果 <em>default</em> 未给出则默认为 <code>None</code>，因而此方法绝不会引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#KeyError" target="_blank" rel="noopener"><code>KeyError</code></a>。</td><td></td></tr><tr><td><code>items</code>()</td><td>返回由字典项 (<code>(键, 值)</code> 对) 组成的一个新视图。</td><td></td></tr><tr><td><code>keys</code>()</td><td>返回由字典键组成的一个新视图</td><td></td></tr><tr><td><code>pop</code>(<em>key</em>[, <em>default</em>])</td><td>如果 <em>key</em> 存在于字典中则将其移除并返回其值，否则返回 <em>default</em>。 如果 <em>default</em> 未给出且 <em>key</em> 不存在于字典中，则会引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#KeyError" target="_blank" rel="noopener"><code>KeyError</code></a>。</td><td></td></tr><tr><td><code>popitem</code>()</td><td>从字典中移除并返回一个 <code>(键, 值)</code> 对。 键值对会按 LIFO 的顺序被返回。</td><td></td></tr><tr><td><strong>reversed(d)</strong></td><td>返回一个逆序获取字典键的迭代器</td><td></td></tr><tr><td><code>setdefault</code>(<em>key</em>[, <em>default</em>])</td><td>如果字典存在键 <em>key</em> ，返回它的值。如果不存在，插入值为 <em>default</em> 的键 <em>key</em> ，并返回 <em>default</em> 。 <em>default</em> 默认为 <code>None</code>。</td><td></td></tr><tr><td><code>update</code>([<em>other</em>])</td><td>使用来自 <em>other</em> 的键/值对更新字典，覆盖原有的键。</td><td></td></tr><tr><td><code>values</code>()</td><td>返回由字典值组成的一个新视图</td><td>[2]</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#[1] 如果字典的子类定义了方法 __missing__() 并且 key 不存在，则 d[key] 操作将调用该方法并附带键 key 作为参数。 d[key] 随后将返回或引发 __missing__(key) 调用所返回或引发的任何对象或异常。 没有其他操作或方法会发起调用 __missing__()。 如果未定义 __missing__()，则会引发 KeyError。 __missing__() 必须是一个方法；它不能是一个实例变量:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Counter</span><span class="params">(dict)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__missing__</span><span class="params">(self, key)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c[<span class="string">'red'</span>]</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c[<span class="string">'red'</span>] += <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c[<span class="string">'red'</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="comment">#[2]两个 dict.values() 视图之间的相等性比较将总是返回 False。 这在 dict.values() 与其自身比较时也同样适用: </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'a'</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.values() == d.values()</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p><strong>字典比较</strong>:</p><p>两个字典的比较当且仅当它们具有相同的 <code>(键, 值)</code> 对时才会相等（不考虑顺序）。 排序比较 (‘&lt;’, ‘&lt;=’, ‘&gt;=’, ‘&gt;’) 会引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a>。</p><p>字典会保留插入时的顺序。 请注意对键的更新不会影响顺序。 删除并再次添加的键将被插入到末尾。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">"one"</span>: <span class="number">1</span>, <span class="string">"two"</span>: <span class="number">2</span>, <span class="string">"three"</span>: <span class="number">3</span>, <span class="string">"four"</span>: <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">'one'</span>: <span class="number">1</span>, <span class="string">'two'</span>: <span class="number">2</span>, <span class="string">'three'</span>: <span class="number">3</span>, <span class="string">'four'</span>: <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(d)</span><br><span class="line">[<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'four'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(d.values())</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">"one"</span>] = <span class="number">42</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">'one'</span>: <span class="number">42</span>, <span class="string">'two'</span>: <span class="number">2</span>, <span class="string">'three'</span>: <span class="number">3</span>, <span class="string">'four'</span>: <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> d[<span class="string">"two"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">"two"</span>] = <span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">'one'</span>: <span class="number">42</span>, <span class="string">'three'</span>: <span class="number">3</span>, <span class="string">'four'</span>: <span class="number">4</span>, <span class="string">'two'</span>: <span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="4-字典视图对象"><a href="#4-字典视图对象" class="headerlink" title="4.字典视图对象"></a>4.字典视图对象</h4><p>由 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#dict.keys" target="_blank" rel="noopener"><code>dict.keys()</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#dict.values" target="_blank" rel="noopener"><code>dict.values()</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#dict.items" target="_blank" rel="noopener"><code>dict.items()</code></a> 所返回的对象是 <em>视图对象</em>。 该对象提供字典条目的一个动态视图，这意味着当字典改变时，视图也会相应改变。</p><table><thead><tr><th>字典视图函数</th><th>描述</th><th></th></tr></thead><tbody><tr><td><strong>len(dictview)</strong></td><td>返回字典中的条目数</td><td></td></tr><tr><td><strong>iter(dictview)</strong></td><td>返回字典中的键、值或项（以 <code>(键, 值)</code> 为元素的元组表示）的迭代器</td><td>[1]</td></tr><tr><td><strong>x in dictview</strong></td><td>如果 <em>x</em> 是对应字典中存在的键、值或项（在最后一种情况下 <em>x</em> 应为一个 <code>(键, 值)</code> 元组） 则返回 <code>True</code></td><td></td></tr><tr><td><strong>reversed(dictview)</strong></td><td>返回一个逆序获取字典键、值或项的迭代器。 视图将按与插入时相反的顺序进行迭代。</td><td>[2]</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#键视图类似于集合，因为其条目不重复且可哈希。 如果所有值都是可哈希的，即 (键, 值) 对也是不重复且可哈希的，那么条目视图也会类似于集合。 （值视图则不被视为类似于集合，因其条目通常都是有重复的。） 对于类似于集合的视图，为抽象基类 collections.abc.Set 所定义的全部操作都是有效的 (例如 ==, &lt; 或 ^)。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dishes = &#123;<span class="string">'eggs'</span>: <span class="number">2</span>, <span class="string">'sausage'</span>: <span class="number">1</span>, <span class="string">'bacon'</span>: <span class="number">1</span>, <span class="string">'spam'</span>: <span class="number">500</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>keys = dishes.keys()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>values = dishes.values()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># iteration</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> val <span class="keyword">in</span> values:</span><br><span class="line"><span class="meta">... </span>    n += val</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(n)</span><br><span class="line"><span class="number">504</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># keys and values are iterated over in the same order (insertion order)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(keys)</span><br><span class="line">[<span class="string">'eggs'</span>, <span class="string">'sausage'</span>, <span class="string">'bacon'</span>, <span class="string">'spam'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(values)</span><br><span class="line">[<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">500</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># view objects are dynamic and reflect dict changes</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> dishes[<span class="string">'eggs'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> dishes[<span class="string">'sausage'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(keys)</span><br><span class="line">[<span class="string">'bacon'</span>, <span class="string">'spam'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># set operations</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>keys &amp; &#123;<span class="string">'eggs'</span>, <span class="string">'bacon'</span>, <span class="string">'salad'</span>&#125;</span><br><span class="line">&#123;<span class="string">'bacon'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>keys ^ &#123;<span class="string">'sausage'</span>, <span class="string">'juice'</span>&#125;</span><br><span class="line">&#123;<span class="string">'juice'</span>, <span class="string">'sausage'</span>, <span class="string">'bacon'</span>, <span class="string">'spam'</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="2-0-小结"><a href="#2-0-小结" class="headerlink" title="2.0 小结"></a>2.0 小结</h2><ol><li><p>字典是可变类型,键只能是由非hash的数据类型充当</p></li><li><p>字典子类的<code>__missing__</code>方法。</p></li><li><p>字典视图的元素为不重复且可哈希。</p><p>一张图总结如下</p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/python%E5%AD%97%E5%85%B8%E6%80%BB%E7%BB%93.png?raw=true" alt></p></li></ol><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>记得五年前听过的一句话,赠给自己,也赠给凑巧看到这篇博文的有缘人。</p><blockquote><h3 id="种一棵树最好的时间是在十年前，其次是现在。"><a href="#种一棵树最好的时间是在十年前，其次是现在。" class="headerlink" title="种一棵树最好的时间是在十年前，其次是现在。"></a>种一棵树最好的时间是在十年前，其次是现在。</h3></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库学习笔记-–-dictionary&quot;&gt;&lt;a href=&quot;#python-标准库学习笔记-–-dictionary&quot; class=&quot;headerlink&quot; title=&quot;python 标准库学习笔记 – dictionary&quot;&gt;&lt;/a&gt;python 标准库学习笔记 – dictionary&lt;/h1&gt;&lt;h2 id=&quot;0-0-前言&quot;&gt;&lt;a href=&quot;#0-0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.0 前言&quot;&gt;&lt;/a&gt;0.0 前言&lt;/h2&gt;&lt;p&gt;家里孩子发烧了,延迟更新标准库学习笔记&lt;/p&gt;
&lt;p&gt;折腾了三个晚上,一家三口都累倒了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/jeffsui/app_image_resource/blob/master/20191223_rear-view-of-man-in-knit-hat.jpg?raw=true&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;人生就好比一个蹒跚学步的孩童,很容易被外界环境影响。&lt;/p&gt;
&lt;h2 id=&quot;1-0-标准库-内置函数&quot;&gt;&lt;a href=&quot;#1-0-标准库-内置函数&quot; class=&quot;headerlink&quot; title=&quot;1.0 标准库- 内置函数&quot;&gt;&lt;/a&gt;1.0 标准库- 内置函数&lt;/h2&gt;&lt;p&gt;参考文档:  &lt;a href=&quot;https://docs.python.org/zh-cn/3.8/library/stdtypes.html#mapping-types-dict&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;内置类型-字典&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python中主要内置类型包括&lt;code&gt;numbers&lt;/code&gt;,&lt;code&gt;sequences&lt;/code&gt;,&lt;code&gt;mappings&lt;/code&gt;,&lt;code&gt;classes&lt;/code&gt;,&lt;code&gt;instance&lt;/code&gt;和&lt;code&gt;exception&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;1-1-逻辑值检测&quot;&gt;&lt;a href=&quot;#1-1-逻辑值检测&quot; class=&quot;headerlink&quot; title=&quot;1.1 逻辑值检测&quot;&gt;&lt;/a&gt;1.1 逻辑值检测&lt;/h3&gt;&lt;p&gt;任何对象都可以进行逻辑值检测,以便在&lt;code&gt;if&lt;/code&gt; 或&lt;code&gt;while&lt;/code&gt;作为条件或是作为上下文所指返回值是布尔类型的表达式来使用。所以就有下面的用法。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;L = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(L):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(L):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一个对象在默认情况下被认为是&lt;code&gt;True&lt;/code&gt;,除非该对象定义了&lt;code&gt;__boolean__()&lt;/code&gt; 方法且返回&lt;code&gt;False&lt;/code&gt; 或者定义&lt;code&gt;__len__()&lt;/code&gt;方法且返回零。下面三种情况的内置对象都会被认为是逻辑假值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;None 或 False&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;任何数值类型的零&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;空的序列和多项集 包括 空字符串、空列表、空集合、空字典、空元组以及空数列(reange(0))&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="dictionary" scheme="https://pinghailinfeng.gitee.io/tags/dictionary/"/>
    
  </entry>
  
  <entry>
    <title>python_standard_library_1_string</title>
    <link href="https://pinghailinfeng.gitee.io/2019/12/20/python-standard-library-1-string/"/>
    <id>https://pinghailinfeng.gitee.io/2019/12/20/python-standard-library-1-string/</id>
    <published>2019-12-20T01:20:15.000Z</published>
    <updated>2020-01-02T08:34:45.020Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库学习笔记-–-string"><a href="#python-标准库学习笔记-–-string" class="headerlink" title="python 标准库学习笔记 – string"></a>python 标准库学习笔记 – string</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天是2019年12月20日,刚刚晴朗的天</p><p><a href="https://postimg.cc/mcq3BC7F" target="_blank" rel="noopener"><img src="https://i.postimg.cc/xCj6GPCg/20191220.jpg" alt="20191220.jpg"></a></p><p>入冬以来的第二场雪就悄然而至</p><p><a href="https://postimg.cc/9rHxR2ZD" target="_blank" rel="noopener"><img src="https://i.postimg.cc/ZKCXQKqx/20191220-1.jpg" alt="20191220-1.jpg"></a></p><p>从今天开始,坚持更新博文100天,也算是对python学习的总结。那么从哪里开始呢？</p><p>那就从<a href="&quot;https://docs.python.org/zh-cn/3.8/library&quot;">python标准库</a>开始撸吧。</p><a id="more"></a><table><thead><tr><th>操作系统</th><th>win7 sp1 64位 标准版</th></tr></thead><tbody><tr><td>python版本</td><td>3.8</td></tr><tr><td>工具</td><td>vscode</td></tr></tbody></table><h2 id="标准库基础"><a href="#标准库基础" class="headerlink" title="标准库基础"></a>标准库基础</h2><p>在不同操作系统,标准库的路径有所不同,以windows平台为例,我的python安装在<code>C:\Python38</code></p><p>标准库文件就在<code>C:\Python38\Lib</code> 文件夹下</p><p>标准库分为几个部分,参考<a href="https://docs.python.org/zh-cn/3.8/library/index.html" target="_blank" rel="noopener">标准库介绍</a></p><ul><li><p>内置函数:不需要<code>import</code>就可以使用的函数,例如 <code>print</code></p></li><li><p>内置异常</p></li><li><p>内置模块</p><ul><li><p>文本</p></li><li><p>二进制数据</p></li><li><p>数据类型</p></li><li><p>数学</p></li><li><p>函数式编程模块</p></li><li><p>文件和目录访问</p></li><li><p>数据持久化</p></li><li><p>文件格式</p></li><li><p>加密服务</p></li><li><p>并发执行</p></li><li><p>网络和进程间通信</p></li><li><p>互联网数据处理</p></li><li><p>互联网协议和支持</p></li><li><p>多媒体服务</p></li><li><p>国际化</p></li><li><p>程序框架</p></li><li><p>Tk图形用户界面</p></li><li><p>开发工具</p></li><li><p>调试和分析</p></li><li><p>软件打包和分发</p></li><li><p>python运行时服务</p></li><li><p>自定义python解释器</p></li><li><p>导入模块</p></li><li><p>Python语言服务</p></li><li><p>杂项服务</p></li><li><p>Windows系统相关模块</p></li><li><p>Unix专有服务</p></li><li><p>被取代的模块</p></li></ul></li></ul><h2 id="day1-标准库-string"><a href="#day1-标准库-string" class="headerlink" title="day1  标准库 string"></a>day1  标准库 string</h2><p>参考：<a href="https://docs.python.org/zh-cn/3.8/library/string.html#helper-functions" target="_blank" rel="noopener">文本处理服务 string常见字符串操作</a> </p><h2 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__all__ = [<span class="string">"ascii_letters"</span>, <span class="string">"ascii_lowercase"</span>, <span class="string">"ascii_uppercase"</span>, <span class="string">"capwords"</span>,</span><br><span class="line">           <span class="string">"digits"</span>, <span class="string">"hexdigits"</span>, <span class="string">"octdigits"</span>, <span class="string">"printable"</span>, <span class="string">"punctuation"</span>,</span><br><span class="line">           <span class="string">"whitespace"</span>, <span class="string">"Formatter"</span>, <span class="string">"Template"</span>]</span><br></pre></td></tr></table></figure><p>测试如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line">print(string.__all__)</span><br><span class="line"></span><br><span class="line">print(string.ascii_letters) <span class="comment">#abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ</span></span><br><span class="line">print(string.ascii_lowercase) <span class="comment">#abcdefghijklmnopqrstuvwxyz</span></span><br><span class="line">print(string.ascii_uppercase) <span class="comment">#ABCDEFGHIJKLMNOPQRSTUVWXYZ</span></span><br><span class="line">print(string.digits)<span class="comment"># 十进制数字常数 0123456789</span></span><br><span class="line">print(string.hexdigits)<span class="comment">#十六进制数字常数 0123456789abcdefABCDEF</span></span><br><span class="line">print(string.octdigits)<span class="comment">#八进制数字常数 01234567</span></span><br><span class="line">print(string.punctuation)</span><br><span class="line">print(string.printable)</span><br><span class="line">print(string.whitespace)</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>string.whitespace ：由被视为空白符号的 ASCII 字符组成的字符串。 其中包括空格、制表、换行、回车、进纸和纵向制表符。</li></ul><h2 id="自定义字符串格式化"><a href="#自定义字符串格式化" class="headerlink" title="自定义字符串格式化"></a>自定义字符串格式化</h2><table><thead><tr><th>主要函数</th><th>功能</th></tr></thead><tbody><tr><td>format(format_string, *args, **kwargs)</td><td>它采用格式字符串和一组任意位置和关键字参数。它只是一个调用vformat（）的包装器。</td></tr><tr><td>vformat(format_string, args, kwargs)</td><td>执行格式化的实际工作</td></tr><tr><td>parse(format_string)</td><td>循环遍历format_string并返回一个可迭代的元组（literal_text，field_name，format_spec，conversion）。</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">data = (<span class="string">"Pi = "</span>,<span class="number">3.1415926</span>)</span><br><span class="line">strtmp = <span class="string">"This is a test:&#123;&#125;&#123;:.4f&#125;"</span></span><br><span class="line">formatter = string.Formatter()</span><br><span class="line">strtmp = formatter.vformat(strtmp,data,&#123;&#125;)</span><br><span class="line">print(strtmp) <span class="comment">#This is a test:&#123;&#125;&#123;:.4f&#125;</span></span><br><span class="line"></span><br><span class="line">data =&#123;<span class="string">"key1"</span>:<span class="number">3.1415926</span>,<span class="string">"key2"</span>:<span class="string">"Pi: ="</span>&#125;</span><br><span class="line">strtmp = <span class="string">"This is a test:&#123;key2&#125;&#123;key1&#125;"</span></span><br><span class="line">formatter = string.Formatter()</span><br><span class="line">strtmp = formatter.vformat(strtmp,(),data)</span><br><span class="line">print(strtmp)</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">data = (<span class="string">"Pi="</span>,<span class="number">3.1415926</span>)</span><br><span class="line">strtmp = <span class="string">"This is a test:&#123;&#125;&#123;:.4f&#125;"</span></span><br><span class="line">formatter = string.Formatter()</span><br><span class="line">formatter.vformat(strtmp,data,&#123;&#125;)</span><br><span class="line">print(strtmp) <span class="comment">#This is a test:&#123;&#125;&#123;:.4f&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data =&#123;<span class="string">"key1"</span>:<span class="number">3.1415926</span>,<span class="string">"key2"</span>:<span class="string">"Pi: ="</span>&#125;</span><br><span class="line">strtmp = <span class="string">"This is a test:&#123;key2&#125;&#123;key1&#125;"</span></span><br><span class="line">formatter = string.Formatter()</span><br><span class="line">strtmp = formatter.vformat(strtmp,(),data)</span><br><span class="line">print(strtmp)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line">strtmp = <span class="string">"This is a test:&#123;&#125;&#123;:.4f&#125;"</span></span><br><span class="line">formatter  = string.Formatter()</span><br><span class="line">strtuple = formatter.parse(strtmp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(strtuple):</span><br><span class="line">    print(i, v)</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    0 ('This is a test:', '', '', None)</span></span><br><span class="line"><span class="string">    1 ('', '', '.4f', None)</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">strtmp = <span class="string">"This is a test:&#123;Key2&#125;&#123;Key1&#125;"</span></span><br><span class="line">formatter  = string.Formatter()</span><br><span class="line">strtuple = formatter.parse(strtmp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(strtuple):</span><br><span class="line">    print(i, v)</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    0 ('This is a test:', 'Key2', '', None)</span></span><br><span class="line"><span class="string">    1 ('', 'Key1', '', None)</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"><span class="comment"># string.Formatter.parse(format_string) End</span></span><br></pre></td></tr></table></figure><h2 id="格式化字符串范例"><a href="#格式化字符串范例" class="headerlink" title="格式化字符串范例"></a>格式化字符串范例</h2><h3 id="按位置访问参数"><a href="#按位置访问参数" class="headerlink" title="按位置访问参数"></a>按位置访问参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tupdata = (<span class="string">"This"</span>,<span class="string">"is"</span>,<span class="string">"a"</span>,<span class="string">"test"</span>) <span class="comment"># 元组</span></span><br><span class="line">formatstr = <span class="string">'&#123;0&#125; &#123;1&#125; &#123;2&#125; &#123;3&#125;'</span>.format(<span class="string">"This"</span>,<span class="string">"is"</span>,<span class="string">"a"</span>,<span class="string">"test"</span>) </span><br><span class="line">print(formatstr)    <span class="comment"># This is a test</span></span><br><span class="line">formatstr = <span class="string">'&#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;'</span>.format(*tupdata) <span class="comment"># *data 解包参数序列</span></span><br><span class="line">print(formatstr)    <span class="comment"># This is a test</span></span><br><span class="line">formatstr = <span class="string">'&#123;3&#125; &#123;2&#125; &#123;1&#125; &#123;0&#125;'</span>.format(*tupdata) <span class="comment"># *data 解包参数序列</span></span><br><span class="line">print(formatstr)    <span class="comment"># test a is This</span></span><br><span class="line">formatstr = <span class="string">'&#123;2&#125; &#123;3&#125; &#123;1&#125; &#123;2&#125; &#123;3&#125;'</span>.format(*tupdata)  <span class="comment"># 参数可以重复</span></span><br><span class="line">print(formatstr)    <span class="comment"># a test is a test</span></span><br></pre></td></tr></table></figure><h3 id="按关键字访问参数"><a href="#按关键字访问参数" class="headerlink" title="按关键字访问参数"></a>按关键字访问参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dicdata = &#123;<span class="string">'Author'</span>:<span class="string">'leacoder'</span>,<span class="string">'Time'</span>:<span class="string">'2019/04/17'</span>&#125;</span><br><span class="line">formatstr = <span class="string">'The author is &#123;Author&#125;，The time is &#123;Time&#125;'</span>.format(Author=<span class="string">'leacoder'</span>,Time=<span class="string">'2019/04/17'</span>)</span><br><span class="line">print(formatstr)    <span class="comment"># The author is leacoder，The time is 2019/04/17</span></span><br><span class="line">formatstr = <span class="string">'The author is &#123;Author&#125;，The time is &#123;Time&#125;'</span>.format(**dicdata)</span><br><span class="line">print(formatstr)    <span class="comment"># The author is leacoder，The time is 2019/04/17</span></span><br></pre></td></tr></table></figure><h3 id="访问参数的属性"><a href="#访问参数的属性" class="headerlink" title="访问参数的属性"></a>访问参数的属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,x,y)</span>:</span></span><br><span class="line">        self.x ,self.y = x, y</span><br><span class="line">point = Point(<span class="number">4</span>,<span class="number">2</span>)</span><br><span class="line">formatstr = <span class="string">'Thie point is (&#123;key.x&#125;,&#123;key.y&#125;)'</span>.format(key = point) <span class="comment"># key 可为其他 </span></span><br><span class="line">print(formatstr)  <span class="comment"># Thie point is (4,2)</span></span><br><span class="line">formatstr = <span class="string">'Thie point is (&#123;point.x&#125;,&#123;point.y&#125;)'</span>.format(point = point) <span class="comment"># point 可为其他 </span></span><br><span class="line">print(formatstr)  <span class="comment"># Thie point is (4,2)</span></span><br></pre></td></tr></table></figure><h2 id="访问参数的各项"><a href="#访问参数的各项" class="headerlink" title="访问参数的各项"></a>访问参数的各项</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tupdata = (<span class="string">"leacoder"</span>,<span class="string">"2019/04/17"</span>) <span class="comment"># 元组</span></span><br><span class="line">formatstr = <span class="string">'The author is &#123;0[0]&#125;,The time is &#123;0[1]&#125;'</span>.format(tupdata)</span><br><span class="line">print(formatstr)    <span class="comment"># The author is leacoder,The time is 2019/04/17</span></span><br><span class="line">formatstr = <span class="string">'The author is &#123;0[0]&#125;,The time is &#123;0[1]&#125;'</span>.format(*tupdata)  <span class="comment"># 注意区别</span></span><br><span class="line">print(formatstr)    <span class="comment"># The author is l,The time is e</span></span><br></pre></td></tr></table></figure><h3 id="对齐文本并指定宽度"><a href="#对齐文本并指定宽度" class="headerlink" title="对齐文本并指定宽度"></a>对齐文本并指定宽度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">formatstr = <span class="string">'&#123;:&lt;30&#125;'</span>.format(<span class="string">'left aligned'</span>) <span class="comment"># 左对齐 30位</span></span><br><span class="line">print(formatstr)    <span class="comment"># ‘left aligned                  ’  为了体现位数加了‘’</span></span><br><span class="line">formatstr = <span class="string">'&#123;:&gt;30&#125;'</span>.format(<span class="string">'right aligned'</span>)    <span class="comment"># 右对齐 30位</span></span><br><span class="line">print(formatstr)    <span class="comment"># ‘                 right aligned’</span></span><br><span class="line">formatstr = <span class="string">'&#123;:^30&#125;'</span>.format(<span class="string">'centered'</span>)  <span class="comment"># 中间对齐 30位</span></span><br><span class="line">print(formatstr)    <span class="comment"># ‘           centered           ’</span></span><br><span class="line">formatstr =  <span class="string">'&#123;:*^30&#125;'</span>.format(<span class="string">'centered'</span>)  <span class="comment"># 使用* 作为填充字符</span></span><br><span class="line">print(formatstr)    <span class="comment"># ‘***********centered***********’</span></span><br></pre></td></tr></table></figure><h3 id="Replacing-f-f-and-f-and-specifying-a-sign-替换％-f，％-f和％f并指定符号"><a href="#Replacing-f-f-and-f-and-specifying-a-sign-替换％-f，％-f和％f并指定符号" class="headerlink" title="Replacing %+f, %-f, and % f and specifying a sign: 替换％+ f，％ - f和％f并指定符号:"></a>Replacing %+f, %-f, and % f and specifying a sign: 替换％+ f，％ - f和％f并指定符号:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">formatstr = <span class="string">'&#123;:+f&#125;; &#123;:+f&#125;'</span>.format(<span class="number">3.14</span>, <span class="number">-3.14</span>)  <span class="comment"># 总是显示它符号</span></span><br><span class="line">print(formatstr)    <span class="comment"># ‘+3.140000; -3.140000’</span></span><br><span class="line">formatstr = <span class="string">'&#123;: f&#125;; &#123;: f&#125;'</span>.format(<span class="number">3.14</span>, <span class="number">-3.14</span>)  <span class="comment"># 正数前显示空格</span></span><br><span class="line">print(formatstr)    <span class="comment"># ‘ 3.140000; -3.140000’</span></span><br><span class="line">formatstr = <span class="string">'&#123;:-f&#125;; &#123;:-f&#125;'</span>.format(<span class="number">3.14</span>, <span class="number">-3.14</span>)  <span class="comment"># 只显示负号 同 '&#123;:f&#125;; &#123;:f&#125;'</span></span><br><span class="line">print(formatstr)    <span class="comment"># ‘3.140000; -3.140000’</span></span><br></pre></td></tr></table></figure><h3 id="Replacing-x-and-o-and-converting-the-value-to-different-bases-替换％x和％o并将值转换为不同的进制"><a href="#Replacing-x-and-o-and-converting-the-value-to-different-bases-替换％x和％o并将值转换为不同的进制" class="headerlink" title="Replacing %x and %o and converting the value to different bases: 替换％x和％o并将值转换为不同的进制"></a>Replacing %x and %o and converting the value to different bases: 替换％x和％o并将值转换为不同的进制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">formatstr = <span class="string">"int: &#123;0:d&#125;;  hex: &#123;0:x&#125;;  oct: &#123;0:o&#125;;  bin: &#123;0:b&#125;"</span>.format(<span class="number">64</span>)</span><br><span class="line">print(formatstr)  <span class="comment"># int: 64;  hex: 40;  oct: 100;  bin: 1000000</span></span><br><span class="line">formatstr = <span class="string">"int: &#123;0:d&#125;;  hex: &#123;0:#x&#125;;  oct: &#123;0:#o&#125;;  bin: &#123;0:#b&#125;"</span>.format(<span class="number">64</span>)</span><br><span class="line">print(formatstr)  <span class="comment"># int: 64;  hex: 0x40;  oct: 0o100;  bin: 0b1000000</span></span><br><span class="line">formatstr = <span class="string">"int: &#123;0:d&#125;;  hex: &#123;0:#x&#125;;  oct: &#123;0:#o&#125;;  bin: &#123;0:#b&#125;"</span>.format(<span class="number">0b1000001</span>) <span class="comment"># 也支持其他进制</span></span><br><span class="line">print(formatstr)  <span class="comment"># int: 65;  hex: 0x41;  oct: 0o101;  bin: 0b100000</span></span><br></pre></td></tr></table></figure><h3 id="使用逗号作为千位分隔符"><a href="#使用逗号作为千位分隔符" class="headerlink" title="使用逗号作为千位分隔符"></a>使用逗号作为千位分隔符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">points = <span class="number">1</span></span><br><span class="line">total = <span class="number">3</span></span><br><span class="line">formatstr = <span class="string">'points / total = &#123;:.2%&#125;'</span>.format(points/total)</span><br><span class="line">print(formatstr)    <span class="comment"># points / total = 33.33%</span></span><br></pre></td></tr></table></figure><h3 id="使用特定类型的格式"><a href="#使用特定类型的格式" class="headerlink" title="使用特定类型的格式"></a>使用特定类型的格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">d = datetime.datetime(<span class="number">2019</span>, <span class="number">4</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">49</span>, <span class="number">2</span>) <span class="comment"># 2019/04/17 22:49:02</span></span><br><span class="line">formatstr = <span class="string">'&#123;:%Y-%m-%d %H:%M:%S&#125;'</span>.format(d)</span><br><span class="line">print(formatstr)    <span class="comment"># 2019-04-17 22:49:02</span></span><br></pre></td></tr></table></figure><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><h3 id="模板字符串规则"><a href="#模板字符串规则" class="headerlink" title="模板字符串规则"></a>模板字符串规则</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">模板字符串提供更简单的字符串替换，如PEP 292中所述 https://www.python.org/dev/peps/pep-0292/</span></span><br><span class="line"><span class="string">模板字符串支持基于$的替换，使用以下规则：</span></span><br><span class="line"><span class="string">    1、$$是转义; 它被替换为单个$。</span></span><br><span class="line"><span class="string">    2、$identifier 一个替换占位符，用于匹配映射关键字“identifier”默认情况下，</span></span><br><span class="line"><span class="string">    “标识符”仅限于以下划线或ASCII字母开头的任何不区分大小写的ASCII字母数字字符串（包括下划线）。$字符后面的第一个非标识符字符结束此占位符。</span></span><br><span class="line"><span class="string">    3、$ &#123;identifier&#125;相当于$ identifier。当有效标识符字符跟随占位符但不是占位符的一部分时，例如“$ &#123;noun&#125; ification”，则需要它。</span></span><br><span class="line"><span class="string">    4、字符串中$的任何其他形式都将导致引发ValueError。</span></span><br><span class="line"><span class="string">字符串模块提供实现这些规则的Template类。class string.Template(template)</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="class-string-Template-template"><a href="#class-string-Template-template" class="headerlink" title="class string.`Template`(template)"></a><em>class</em> <code>string.`</code>Template`(<em>template</em>)</h2><h3 id="substitute-mapping-kwargs"><a href="#substitute-mapping-kwargs" class="headerlink" title="substitute(mapping,**kwargs)"></a>substitute(mapping,**kwargs)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">执行模板替换，返回一个新字符串。 mapping 为任意字典类对象，其中的键将匹配模板中的占位符。 或者你也可以提供一组关键字参数，其中的关键字即对应占位符。 当同时给出 mapping 和 kwds 并且存在重复时，则以 kwds 中的占位符为优先</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">s = Template(<span class="string">'The Author is $Author, The Time is $Time'</span>)    <span class="comment"># 使用Template类构造函数</span></span><br><span class="line">kewds = &#123;<span class="string">'Author'</span>:<span class="string">'leacoder'</span>, <span class="string">'Time'</span>:<span class="string">'2019/04/18 00:01:38'</span>&#125;</span><br><span class="line">templatestr = s.substitute(Author=<span class="string">'leacoder'</span>, Time=<span class="string">'2019/04/18 00:01:38'</span>)  <span class="comment"># **kewds</span></span><br><span class="line">print(templatestr)  <span class="comment"># The Author is leacoder, The Time is 2019/04/18 00:01:38</span></span><br><span class="line">templatestr = s.substitute(**kewds)  <span class="comment"># **kewds</span></span><br><span class="line">print(templatestr)  <span class="comment"># The Author is leacoder, The Time is 2019/04/18 00:01:38</span></span><br><span class="line">templatestr = s.substitute(kewds)  <span class="comment"># mapping</span></span><br><span class="line">print(templatestr)  <span class="comment"># The Author is leacoder, The Time is 2019/04/18 00:01:38</span></span><br><span class="line">templatestr = s.substitute(kewds,Author=<span class="string">'250'</span>,Time = <span class="string">'No Time'</span>)  <span class="comment"># mapping  **kewds</span></span><br><span class="line">print(templatestr)  <span class="comment"># The Author is 250, The Time is No Time</span></span><br><span class="line"></span><br><span class="line">kewds1 = &#123;<span class="string">'Author'</span>:<span class="string">'leacoder'</span>&#125;</span><br><span class="line">templatestr = s.substitute(kewds1)</span><br><span class="line">print(templatestr)  <span class="comment"># KeyError: 'Time'</span></span><br><span class="line"><span class="comment"># substitute(mapping, **kwds) End</span></span><br></pre></td></tr></table></figure><h3 id="safe-substitute-mapping-kwds"><a href="#safe-substitute-mapping-kwds" class="headerlink" title="safe_substitute(mapping, **kwds)"></a>safe_substitute(mapping, **kwds)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">类似于 substitute()，不同之处是如果有占位符未在 mapping 和 kwds 中找到，不是引发 KeyError 异常，而是将原始占位符不加修改地显示在结果字符串中。 另一个与 substitute() 的差异是任何在其他情况下出现的 $ 将简单地返回 $ 而不是引发 ValueError。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># safe_substitute(mapping, **kwds)</span></span><br><span class="line">kewds1 = &#123;<span class="string">'Author'</span>:<span class="string">'leacoder'</span>&#125;</span><br><span class="line">templatestr = s.safe_substitute(kewds1)</span><br><span class="line">print(templatestr)  <span class="comment"># The Author is leacoder, The Time is $Time</span></span><br><span class="line"><span class="comment"># safe_substitute(mapping, **kwds) End</span></span><br></pre></td></tr></table></figure><h2 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h2><h3 id="string-capwords-s-sep-None）"><a href="#string-capwords-s-sep-None）" class="headerlink" title="string.`capwords`(s, sep=None）"></a><code>string.`</code>capwords`(<em>s</em>, <em>sep=None</em>）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">使用 str.split() 将参数拆分为单词，使用 str.capitalize() 将单词转为大写形式，使用 str.join() 将大写的单词进行拼接。 如果可选的第二个参数 sep 被省略或为 None，则连续的空白字符会被替换为单个空格符并且开头和末尾的空白字符会被移除，否则 sep 会被用来拆分和拼接单词</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库学习笔记-–-string&quot;&gt;&lt;a href=&quot;#python-标准库学习笔记-–-string&quot; class=&quot;headerlink&quot; title=&quot;python 标准库学习笔记 – string&quot;&gt;&lt;/a&gt;python 标准库学习笔记 – string&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天是2019年12月20日,刚刚晴朗的天&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://postimg.cc/mcq3BC7F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://i.postimg.cc/xCj6GPCg/20191220.jpg&quot; alt=&quot;20191220.jpg&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;入冬以来的第二场雪就悄然而至&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://postimg.cc/9rHxR2ZD&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://i.postimg.cc/ZKCXQKqx/20191220-1.jpg&quot; alt=&quot;20191220-1.jpg&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从今天开始,坚持更新博文100天,也算是对python学习的总结。那么从哪里开始呢？&lt;/p&gt;
&lt;p&gt;那就从&lt;a href=&quot;&amp;quot;https://docs.python.org/zh-cn/3.8/library&amp;quot;&quot;&gt;python标准库&lt;/a&gt;开始撸吧。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="string" scheme="https://pinghailinfeng.gitee.io/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>vscode Cannot edit in read-only editor</title>
    <link href="https://pinghailinfeng.gitee.io/2019/12/12/vscode-Cannot-edit-in-read-only-editor/"/>
    <id>https://pinghailinfeng.gitee.io/2019/12/12/vscode-Cannot-edit-in-read-only-editor/</id>
    <published>2019-12-12T06:35:56.000Z</published>
    <updated>2019-12-12T06:45:34.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vscode-Cannot-edit-in-read-only-editor-错误解决"><a href="#vscode-Cannot-edit-in-read-only-editor-错误解决" class="headerlink" title="vscode Cannot edit in read-only editor 错误解决"></a>vscode Cannot edit in read-only editor 错误解决</h1><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><blockquote><p>使用了<code>Run Code</code>插件,output是只读的</p></blockquote><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>将 run code设置为在Terminal中运行</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File -&gt; Preferences -&gt; Settings</span><br></pre></td></tr></table></figure><p>找到 <code>run code in terminal</code> 打上 √</p><p>或 在settings.json文件中,添加一行配置信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"code-runner.runInTerminal": true</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vscode-Cannot-edit-in-read-only-editor-错误解决&quot;&gt;&lt;a href=&quot;#vscode-Cannot-edit-in-read-only-editor-错误解决&quot; class=&quot;headerlink&quot; title=&quot;vscode
      
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="IDEs" scheme="https://pinghailinfeng.gitee.io/categories/python/IDEs/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="vscode" scheme="https://pinghailinfeng.gitee.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>Install python3.8 on Centos6.5</title>
    <link href="https://pinghailinfeng.gitee.io/2019/12/03/Install-python3-8-on-Centos6-5/"/>
    <id>https://pinghailinfeng.gitee.io/2019/12/03/Install-python3-8-on-Centos6-5/</id>
    <published>2019-12-03T01:48:12.000Z</published>
    <updated>2019-12-03T01:55:47.566Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-安装必要的工具"><a href="#1-安装必要的工具" class="headerlink" title="1. 安装必要的工具"></a>1. 安装必要的工具</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install yum-utils</span><br></pre></td></tr></table></figure><h3 id="2-使用-yum-builddep-命令-设置-python-编译环境，下载缺少的依赖"><a href="#2-使用-yum-builddep-命令-设置-python-编译环境，下载缺少的依赖" class="headerlink" title="2. 使用 yum-builddep 命令 设置 python 编译环境，下载缺少的依赖"></a>2. 使用 yum-builddep 命令 设置 python 编译环境，下载缺少的依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-builddep python</span><br></pre></td></tr></table></figure><h3 id="3-下载-python3-的源代码"><a href="#3-下载-python3-的源代码" class="headerlink" title="3. 下载 python3 的源代码"></a>3. 下载 python3 的源代码</h3><p>源代码可以在 <a href="https://www.python.org/ftp/" target="_blank" rel="noopener">https://www.python.org/ftp/python/ </a> 下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://www.python.org/ftp/python/3.8.0/Python-3.8.0a1.tgz</span><br></pre></td></tr></table></figure><h3 id="4-对源代码进行解压并编译安装"><a href="#4-对源代码进行解压并编译安装" class="headerlink" title="4. 对源代码进行解压并编译安装"></a>4. 对源代码进行解压并编译安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar xf Python-3.8.0a1.tgz</span><br><span class="line">cd Python-3.8.0a1</span><br><span class="line">./configure</span><br><span class="line">sudo make &amp;&amp; make install</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="5-现在-python3-已经完成安装，使用-python3-version-查看版本号"><a href="#5-现在-python3-已经完成安装，使用-python3-version-查看版本号" class="headerlink" title="5. 现在 python3 已经完成安装，使用 python3 -version 查看版本号"></a>5. 现在 python3 已经完成安装，使用 python3 -version 查看版本号</h3><p>显示 Python 3.8.0a1 表示已经成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 --version</span><br></pre></td></tr></table></figure><h3 id="6-如果你想把-python3-作为默认python-解析器，可以进行如下设置"><a href="#6-如果你想把-python3-作为默认python-解析器，可以进行如下设置" class="headerlink" title="6. 如果你想把 python3 作为默认python 解析器，可以进行如下设置"></a>6. 如果你想把 python3 作为默认python 解析器，可以进行如下设置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias python='/usr/local/bin/python3.8'</span><br></pre></td></tr></table></figure><h3 id="7-配置阿里pip源"><a href="#7-配置阿里pip源" class="headerlink" title="7. 配置阿里pip源"></a>7. 配置阿里pip源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@localhost ~]# cd </span><br><span class="line">[root@localhost ~]# mkdir .pip</span><br><span class="line">[root@localhost ~]# cd .pip</span><br><span class="line">[root@localhost .pip]# vim pip.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">文件内容如下</span></span><br><span class="line">[global]</span><br><span class="line">index-url = http://mirrors.aliyun.com/pypi/simple </span><br><span class="line"></span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-安装必要的工具&quot;&gt;&lt;a href=&quot;#1-安装必要的工具&quot; class=&quot;headerlink&quot; title=&quot;1. 安装必要的工具&quot;&gt;&lt;/a&gt;1. 安装必要的工具&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo yum install yum-utils&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-使用-yum-builddep-命令-设置-python-编译环境，下载缺少的依赖&quot;&gt;&lt;a href=&quot;#2-使用-yum-builddep-命令-设置-python-编译环境，下载缺少的依赖&quot; class=&quot;headerlink&quot; title=&quot;2. 使用 yum-builddep 命令 设置 python 编译环境，下载缺少的依赖&quot;&gt;&lt;/a&gt;2. 使用 yum-builddep 命令 设置 python 编译环境，下载缺少的依赖&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo yum-builddep python&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-下载-python3-的源代码&quot;&gt;&lt;a href=&quot;#3-下载-python3-的源代码&quot; class=&quot;headerlink&quot; title=&quot;3. 下载 python3 的源代码&quot;&gt;&lt;/a&gt;3. 下载 python3 的源代码&lt;/h3&gt;&lt;p&gt;源代码可以在 &lt;a href=&quot;https://www.python.org/ftp/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.python.org/ftp/python/ &lt;/a&gt; 下载&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -O https://www.python.org/ftp/python/3.8.0/Python-3.8.0a1.tgz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;4-对源代码进行解压并编译安装&quot;&gt;&lt;a href=&quot;#4-对源代码进行解压并编译安装&quot; class=&quot;headerlink&quot; title=&quot;4. 对源代码进行解压并编译安装&quot;&gt;&lt;/a&gt;4. 对源代码进行解压并编译安装&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tar xf Python-3.8.0a1.tgz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd Python-3.8.0a1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./configure&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo make &amp;amp;&amp;amp; make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="linux" scheme="https://pinghailinfeng.gitee.io/categories/linux/"/>
    
    
      <category term="python3" scheme="https://pinghailinfeng.gitee.io/tags/python3/"/>
    
      <category term="centos" scheme="https://pinghailinfeng.gitee.io/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>ios devices list</title>
    <link href="https://pinghailinfeng.gitee.io/2019/12/02/ios-devices-list/"/>
    <id>https://pinghailinfeng.gitee.io/2019/12/02/ios-devices-list/</id>
    <published>2019-12-02T01:18:48.000Z</published>
    <updated>2019-12-02T01:27:15.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ios-设备一览表"><a href="#ios-设备一览表" class="headerlink" title="ios 设备一览表"></a>ios 设备一览表</h1><h2 id="iPhone"><a href="#iPhone" class="headerlink" title="iPhone"></a>iPhone</h2><table><thead><tr><th>设备</th><th>时间</th><th>CPU</th><th>分辨率</th><th>大小</th><th>密度</th><th>@Nx</th><th>iOS系统</th></tr></thead><tbody><tr><td>iPhone</td><td>2007</td><td>armv6</td><td>320 x 480</td><td>3.5</td><td>165</td><td>@1x</td><td>1.0 - 3.1.3</td></tr><tr><td>iPhone 3G</td><td>2008</td><td>armv6</td><td>320 x 480</td><td>3.5</td><td>165</td><td>@1x</td><td>2.0 - 4.2.1</td></tr><tr><td>iPhone 3GS</td><td>2009</td><td>armv7</td><td>320 x 480</td><td>3.5</td><td>165</td><td>@1x</td><td>3.0 - 6.1.4</td></tr><tr><td>iPhone 4 (GSM)</td><td>2010</td><td>armv7</td><td>640 x 960</td><td>3.5</td><td>330</td><td>@2x</td><td>4.0 - 7.1.2</td></tr><tr><td>iPhone 4 (CDMA)</td><td>2011</td><td>armv7</td><td>640 x 960</td><td>3.5</td><td>330</td><td>@2x</td><td>4.2.4 - 7.1.2</td></tr><tr><td>iPhone 4S</td><td>2011</td><td>armv7</td><td>640 x 960</td><td>3.5</td><td>330</td><td>@2x</td><td>5.0 - 9.3.5</td></tr><tr><td>iPhone 5</td><td>2012</td><td>armv7s</td><td>640 x 1136</td><td>4</td><td>326</td><td>@2x</td><td>6.0 - 10.3.3</td></tr><tr><td>iPhone 5c</td><td>2013</td><td>armv7s</td><td>640 x 1136</td><td>4</td><td>326</td><td>@2x</td><td>7.0 - 10.3.3</td></tr><tr><td>iPhone 5s</td><td>2013</td><td>arm64</td><td>640 x 1136</td><td>4</td><td>326</td><td>@2x</td><td>7.0 -</td></tr><tr><td>iPhone 6</td><td>2014</td><td>arm64</td><td>750 x 1334</td><td>4.7</td><td>326</td><td>@2x</td><td>8.0 -</td></tr><tr><td>iPhone 6 Plus</td><td>2014</td><td>arm64</td><td>1242 x 2208</td><td>5.5</td><td>461</td><td>@3x</td><td>8.0 -</td></tr><tr><td>iPhone 6s</td><td>2015</td><td>arm64</td><td>750 x 1334</td><td>4.7</td><td>326</td><td>@2x</td><td>9.0 -</td></tr><tr><td>iPhone 6s Plus</td><td>2015</td><td>arm64</td><td>1242 x 2208</td><td>5.5</td><td>461</td><td>@3x</td><td>9.0 -</td></tr><tr><td>iPhone SE</td><td>2016</td><td>arm64</td><td>640 x 1136</td><td>4</td><td>326</td><td>@2x</td><td>9.3 -</td></tr><tr><td>iPhone 7</td><td>2016</td><td>arm64</td><td>750 x 1334</td><td>4.7</td><td>326</td><td>@2x</td><td>10.0 -</td></tr><tr><td>iPhone 7 Plus</td><td>2016</td><td>arm64</td><td>1242 x 2208</td><td>5.5</td><td>461</td><td>@3x</td><td>10.0 -</td></tr><tr><td>iPhone 8</td><td>2017</td><td>arm64</td><td>750 x 1334</td><td>4.7</td><td>326</td><td>@2x</td><td>11.0 -</td></tr><tr><td>iPhone 8 Plus</td><td>2017</td><td>arm64</td><td>1242 x 2208</td><td>5.5</td><td>461</td><td>@3x</td><td>11.0 -</td></tr><tr><td>iPhone X</td><td>2017</td><td>arm64</td><td>1125 x 2436</td><td>5.8</td><td>463</td><td>@3x</td><td>11.0 -</td></tr><tr><td>iPhone XS</td><td>2018</td><td>arm64</td><td>1125 x 2436</td><td>5.8</td><td>463</td><td>@3x</td><td>12.0 -</td></tr><tr><td>iPhone XS Max</td><td>2018</td><td>arm64</td><td>1242 x 2688</td><td>6.5</td><td>458</td><td>@3x</td><td>12.0 -</td></tr><tr><td>iPhone XR</td><td>2018</td><td>arm64</td><td>828 x 1792</td><td>6.1</td><td>326</td><td>@2x</td><td>12.0 -</td></tr><tr><td>iPhone 11</td><td>2019</td><td>arm64</td><td>828 x 1792</td><td>6.1</td><td>326</td><td>@2x</td><td>13.0 -</td></tr><tr><td>iPhone 11 Pro</td><td>2019</td><td>arm64</td><td>1125 x 2436</td><td>5.8</td><td>458</td><td>@3x</td><td>13.0 -</td></tr><tr><td>iPhone 11 Pro Max</td><td>2019</td><td>arm64</td><td>1242 x 2688</td><td>6.5</td><td>458</td><td>@3x</td><td>13.0 -</td></tr></tbody></table><p>注：屏幕分辨率单位为英寸(inch)，分辨率密度单位为ppi</p><a id="more"></a><h2 id="iPad"><a href="#iPad" class="headerlink" title="iPad"></a>iPad</h2><table><thead><tr><th>设备</th><th>发布年份</th><th>CPU架构</th><th>分辨率</th><th>@Nx</th><th>iOS系统</th></tr></thead><tbody><tr><td>iPad</td><td>2010</td><td>armv7</td><td>768 x 1024</td><td>@1x</td><td>3.2 - 5.1.1</td></tr><tr><td>iPad 2</td><td>2011</td><td>armv7</td><td>768 x 1024</td><td>@1x</td><td>4.3 - 9.3.5</td></tr><tr><td>iPad (3rd)</td><td>2012</td><td>armv7</td><td>1536 x 2048</td><td>@2x</td><td>5.1 - 9.3.5</td></tr><tr><td>iPad mini</td><td>2012</td><td>armv7s</td><td>768 x 1024</td><td>@1x</td><td>6.0 - 9.3.5</td></tr><tr><td>iPad (4rd)</td><td>2012</td><td>armv7s</td><td>1536 x 2048</td><td>@2x</td><td>6.0 -</td></tr><tr><td>iPad Air</td><td>2013</td><td>arm64</td><td>1536 x 2048</td><td>@2x</td><td>7.0 -</td></tr><tr><td>iPad mini Retina</td><td>2013</td><td>arm64</td><td>1536 x 2048</td><td>@2x</td><td>7.0 -</td></tr><tr><td>iPad Air 2</td><td>2014</td><td>arm64</td><td>1536 x 2048</td><td>@2x</td><td>8.1 -</td></tr><tr><td>iPad mini 3</td><td>2014</td><td>arm64</td><td>1536 x 2048</td><td>@2x</td><td>8.1 -</td></tr><tr><td>iPad mini 4</td><td>2015</td><td>arm64</td><td>1536 x 2048</td><td>@2x</td><td>9.0 -</td></tr><tr><td>iPad Pro (12.9)</td><td>2015</td><td>arm64</td><td>2048 x 2732</td><td>@2x</td><td>9.1 -</td></tr><tr><td>iPad Pro (9.7)</td><td>2016</td><td>arm64</td><td>1536 x 2048</td><td>@2x</td><td>9.3 -</td></tr><tr><td>iPad (5rd)</td><td>2017</td><td>arm64</td><td>1536 x 2048</td><td>@2x</td><td>10.2.1 -</td></tr><tr><td>iPad Pro (10.5)</td><td>2017</td><td>arm64</td><td>1668 x 2224</td><td>@2x</td><td>10.3.2 -</td></tr><tr><td>iPad Pro (12.9-2)</td><td>2017</td><td>arm64</td><td>2048 x 2732</td><td>@2x</td><td>10.3.2 -</td></tr><tr><td>iPad (10.2)</td><td>2019</td><td>arm64</td><td>1620 x 2160</td><td>@2x</td><td>iPadOS</td></tr></tbody></table><h2 id="iPod-touch"><a href="#iPod-touch" class="headerlink" title="iPod touch"></a>iPod touch</h2><table><thead><tr><th>设备</th><th>发布年份</th><th>CPU架构</th><th>分辨率</th><th>@Nx</th><th>iOS系统</th></tr></thead><tbody><tr><td>iPod touch</td><td>2007</td><td>armv6</td><td>320 x 480</td><td>@1x</td><td>1.1 - 3.1.3</td></tr><tr><td>iPod touch (2nd)</td><td>2008</td><td>armv6</td><td>320 x 480</td><td>@1x</td><td>2.1.1 - 4.2.1</td></tr><tr><td>iPod touch (3rd)</td><td>2009</td><td>armv7</td><td>320 x 480</td><td>@1x</td><td>3.1 - 5.1.1</td></tr><tr><td>iPod touch (4th)</td><td>2010</td><td>armv7</td><td>640 x 960</td><td>@2x</td><td>4.1 - 6.1.4</td></tr><tr><td>iPod touch (5th)</td><td>2012</td><td>armv7</td><td>640 x 1136</td><td>@2x</td><td>6.0 - 9.3.5</td></tr><tr><td>iPod touch (6th)</td><td>2015</td><td>arm64</td><td>640 x 1136</td><td>@2x</td><td>8.4 -</td></tr></tbody></table><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.jianshu.com/p/2671829b86ab" target="_blank" rel="noopener">iOS设备一览表</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ios-设备一览表&quot;&gt;&lt;a href=&quot;#ios-设备一览表&quot; class=&quot;headerlink&quot; title=&quot;ios 设备一览表&quot;&gt;&lt;/a&gt;ios 设备一览表&lt;/h1&gt;&lt;h2 id=&quot;iPhone&quot;&gt;&lt;a href=&quot;#iPhone&quot; class=&quot;headerlink&quot; title=&quot;iPhone&quot;&gt;&lt;/a&gt;iPhone&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;设备&lt;/th&gt;
&lt;th&gt;时间&lt;/th&gt;
&lt;th&gt;CPU&lt;/th&gt;
&lt;th&gt;分辨率&lt;/th&gt;
&lt;th&gt;大小&lt;/th&gt;
&lt;th&gt;密度&lt;/th&gt;
&lt;th&gt;@Nx&lt;/th&gt;
&lt;th&gt;iOS系统&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;iPhone&lt;/td&gt;
&lt;td&gt;2007&lt;/td&gt;
&lt;td&gt;armv6&lt;/td&gt;
&lt;td&gt;320 x 480&lt;/td&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;td&gt;165&lt;/td&gt;
&lt;td&gt;@1x&lt;/td&gt;
&lt;td&gt;1.0 - 3.1.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone 3G&lt;/td&gt;
&lt;td&gt;2008&lt;/td&gt;
&lt;td&gt;armv6&lt;/td&gt;
&lt;td&gt;320 x 480&lt;/td&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;td&gt;165&lt;/td&gt;
&lt;td&gt;@1x&lt;/td&gt;
&lt;td&gt;2.0 - 4.2.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone 3GS&lt;/td&gt;
&lt;td&gt;2009&lt;/td&gt;
&lt;td&gt;armv7&lt;/td&gt;
&lt;td&gt;320 x 480&lt;/td&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;td&gt;165&lt;/td&gt;
&lt;td&gt;@1x&lt;/td&gt;
&lt;td&gt;3.0 - 6.1.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone 4 (GSM)&lt;/td&gt;
&lt;td&gt;2010&lt;/td&gt;
&lt;td&gt;armv7&lt;/td&gt;
&lt;td&gt;640 x 960&lt;/td&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;td&gt;330&lt;/td&gt;
&lt;td&gt;@2x&lt;/td&gt;
&lt;td&gt;4.0 - 7.1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone 4 (CDMA)&lt;/td&gt;
&lt;td&gt;2011&lt;/td&gt;
&lt;td&gt;armv7&lt;/td&gt;
&lt;td&gt;640 x 960&lt;/td&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;td&gt;330&lt;/td&gt;
&lt;td&gt;@2x&lt;/td&gt;
&lt;td&gt;4.2.4 - 7.1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone 4S&lt;/td&gt;
&lt;td&gt;2011&lt;/td&gt;
&lt;td&gt;armv7&lt;/td&gt;
&lt;td&gt;640 x 960&lt;/td&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;td&gt;330&lt;/td&gt;
&lt;td&gt;@2x&lt;/td&gt;
&lt;td&gt;5.0 - 9.3.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone 5&lt;/td&gt;
&lt;td&gt;2012&lt;/td&gt;
&lt;td&gt;armv7s&lt;/td&gt;
&lt;td&gt;640 x 1136&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;326&lt;/td&gt;
&lt;td&gt;@2x&lt;/td&gt;
&lt;td&gt;6.0 - 10.3.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone 5c&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;td&gt;armv7s&lt;/td&gt;
&lt;td&gt;640 x 1136&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;326&lt;/td&gt;
&lt;td&gt;@2x&lt;/td&gt;
&lt;td&gt;7.0 - 10.3.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone 5s&lt;/td&gt;
&lt;td&gt;2013&lt;/td&gt;
&lt;td&gt;arm64&lt;/td&gt;
&lt;td&gt;640 x 1136&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;326&lt;/td&gt;
&lt;td&gt;@2x&lt;/td&gt;
&lt;td&gt;7.0 -&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone 6&lt;/td&gt;
&lt;td&gt;2014&lt;/td&gt;
&lt;td&gt;arm64&lt;/td&gt;
&lt;td&gt;750 x 1334&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;326&lt;/td&gt;
&lt;td&gt;@2x&lt;/td&gt;
&lt;td&gt;8.0 -&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone 6 Plus&lt;/td&gt;
&lt;td&gt;2014&lt;/td&gt;
&lt;td&gt;arm64&lt;/td&gt;
&lt;td&gt;1242 x 2208&lt;/td&gt;
&lt;td&gt;5.5&lt;/td&gt;
&lt;td&gt;461&lt;/td&gt;
&lt;td&gt;@3x&lt;/td&gt;
&lt;td&gt;8.0 -&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone 6s&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td&gt;arm64&lt;/td&gt;
&lt;td&gt;750 x 1334&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;326&lt;/td&gt;
&lt;td&gt;@2x&lt;/td&gt;
&lt;td&gt;9.0 -&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone 6s Plus&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td&gt;arm64&lt;/td&gt;
&lt;td&gt;1242 x 2208&lt;/td&gt;
&lt;td&gt;5.5&lt;/td&gt;
&lt;td&gt;461&lt;/td&gt;
&lt;td&gt;@3x&lt;/td&gt;
&lt;td&gt;9.0 -&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone SE&lt;/td&gt;
&lt;td&gt;2016&lt;/td&gt;
&lt;td&gt;arm64&lt;/td&gt;
&lt;td&gt;640 x 1136&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;326&lt;/td&gt;
&lt;td&gt;@2x&lt;/td&gt;
&lt;td&gt;9.3 -&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone 7&lt;/td&gt;
&lt;td&gt;2016&lt;/td&gt;
&lt;td&gt;arm64&lt;/td&gt;
&lt;td&gt;750 x 1334&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;326&lt;/td&gt;
&lt;td&gt;@2x&lt;/td&gt;
&lt;td&gt;10.0 -&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone 7 Plus&lt;/td&gt;
&lt;td&gt;2016&lt;/td&gt;
&lt;td&gt;arm64&lt;/td&gt;
&lt;td&gt;1242 x 2208&lt;/td&gt;
&lt;td&gt;5.5&lt;/td&gt;
&lt;td&gt;461&lt;/td&gt;
&lt;td&gt;@3x&lt;/td&gt;
&lt;td&gt;10.0 -&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone 8&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;td&gt;arm64&lt;/td&gt;
&lt;td&gt;750 x 1334&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;326&lt;/td&gt;
&lt;td&gt;@2x&lt;/td&gt;
&lt;td&gt;11.0 -&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone 8 Plus&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;td&gt;arm64&lt;/td&gt;
&lt;td&gt;1242 x 2208&lt;/td&gt;
&lt;td&gt;5.5&lt;/td&gt;
&lt;td&gt;461&lt;/td&gt;
&lt;td&gt;@3x&lt;/td&gt;
&lt;td&gt;11.0 -&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone X&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;td&gt;arm64&lt;/td&gt;
&lt;td&gt;1125 x 2436&lt;/td&gt;
&lt;td&gt;5.8&lt;/td&gt;
&lt;td&gt;463&lt;/td&gt;
&lt;td&gt;@3x&lt;/td&gt;
&lt;td&gt;11.0 -&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone XS&lt;/td&gt;
&lt;td&gt;2018&lt;/td&gt;
&lt;td&gt;arm64&lt;/td&gt;
&lt;td&gt;1125 x 2436&lt;/td&gt;
&lt;td&gt;5.8&lt;/td&gt;
&lt;td&gt;463&lt;/td&gt;
&lt;td&gt;@3x&lt;/td&gt;
&lt;td&gt;12.0 -&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone XS Max&lt;/td&gt;
&lt;td&gt;2018&lt;/td&gt;
&lt;td&gt;arm64&lt;/td&gt;
&lt;td&gt;1242 x 2688&lt;/td&gt;
&lt;td&gt;6.5&lt;/td&gt;
&lt;td&gt;458&lt;/td&gt;
&lt;td&gt;@3x&lt;/td&gt;
&lt;td&gt;12.0 -&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone XR&lt;/td&gt;
&lt;td&gt;2018&lt;/td&gt;
&lt;td&gt;arm64&lt;/td&gt;
&lt;td&gt;828 x 1792&lt;/td&gt;
&lt;td&gt;6.1&lt;/td&gt;
&lt;td&gt;326&lt;/td&gt;
&lt;td&gt;@2x&lt;/td&gt;
&lt;td&gt;12.0 -&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone 11&lt;/td&gt;
&lt;td&gt;2019&lt;/td&gt;
&lt;td&gt;arm64&lt;/td&gt;
&lt;td&gt;828 x 1792&lt;/td&gt;
&lt;td&gt;6.1&lt;/td&gt;
&lt;td&gt;326&lt;/td&gt;
&lt;td&gt;@2x&lt;/td&gt;
&lt;td&gt;13.0 -&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone 11 Pro&lt;/td&gt;
&lt;td&gt;2019&lt;/td&gt;
&lt;td&gt;arm64&lt;/td&gt;
&lt;td&gt;1125 x 2436&lt;/td&gt;
&lt;td&gt;5.8&lt;/td&gt;
&lt;td&gt;458&lt;/td&gt;
&lt;td&gt;@3x&lt;/td&gt;
&lt;td&gt;13.0 -&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iPhone 11 Pro Max&lt;/td&gt;
&lt;td&gt;2019&lt;/td&gt;
&lt;td&gt;arm64&lt;/td&gt;
&lt;td&gt;1242 x 2688&lt;/td&gt;
&lt;td&gt;6.5&lt;/td&gt;
&lt;td&gt;458&lt;/td&gt;
&lt;td&gt;@3x&lt;/td&gt;
&lt;td&gt;13.0 -&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注：屏幕分辨率单位为英寸(inch)，分辨率密度单位为ppi&lt;/p&gt;
    
    </summary>
    
      <category term="ios" scheme="https://pinghailinfeng.gitee.io/categories/ios/"/>
    
    
      <category term="app" scheme="https://pinghailinfeng.gitee.io/tags/app/"/>
    
      <category term="ios" scheme="https://pinghailinfeng.gitee.io/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>git diff usage</title>
    <link href="https://pinghailinfeng.gitee.io/2019/11/21/git-diff-usage/"/>
    <id>https://pinghailinfeng.gitee.io/2019/11/21/git-diff-usage/</id>
    <published>2019-11-21T04:04:12.000Z</published>
    <updated>2019-11-21T05:58:19.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-中-diff-命令使用"><a href="#Git-中-diff-命令使用" class="headerlink" title="Git 中 diff 命令使用"></a>Git 中 diff 命令使用</h1><p>整理总结工作中常用的<code>git</code> 命令, 今天是一个非常有用的命令 <code>git diff</code></p><p>主要作用是用来比较差异，包括 <code>commits</code>之间,<code>commit</code> 和 工作区间 差异 </p><p>命令格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git diff [&lt;options&gt;] [&lt;commit&gt;] [--] [&lt;path&gt;…​]</span><br><span class="line">git diff [&lt;options&gt;] --cached [&lt;commit&gt;] [--] [&lt;path&gt;…​]</span><br><span class="line">git diff [&lt;options&gt;] &lt;commit&gt; &lt;commit&gt; [--] [&lt;path&gt;…​]</span><br><span class="line">git diff [&lt;options&gt;] &lt;blob&gt; &lt;blob&gt;</span><br><span class="line">git diff [&lt;options&gt;] --no-index [--] &lt;path&gt; &lt;path&gt;</span><br></pre></td></tr></table></figure><h2 id="1-比较工作区与暂存区"><a href="#1-比较工作区与暂存区" class="headerlink" title="1. 比较工作区与暂存区"></a>1. 比较工作区与暂存区</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff 不加参数</span><br></pre></td></tr></table></figure><h2 id="2-比较暂存区与-本地-最新版本-最后一次commit"><a href="#2-比较暂存区与-本地-最新版本-最后一次commit" class="headerlink" title="2. 比较暂存区与 本地 最新版本 (最后一次commit)"></a>2. 比较暂存区与 本地 最新版本 (最后一次commit)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached</span><br></pre></td></tr></table></figure><h2 id="3-比较工作区与最新本地版本库"><a href="#3-比较工作区与最新本地版本库" class="headerlink" title="3. 比较工作区与最新本地版本库"></a>3. 比较工作区与最新本地版本库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD</span><br></pre></td></tr></table></figure><h2 id="4-比较工作区与commit-id的差异"><a href="#4-比较工作区与commit-id的差异" class="headerlink" title="4. 比较工作区与commit-id的差异"></a>4. 比较工作区与commit-id的差异</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff commit-id</span><br></pre></td></tr></table></figure><h2 id="5-比较暂存区与指定commit-id的差异"><a href="#5-比较暂存区与指定commit-id的差异" class="headerlink" title="5. 比较暂存区与指定commit-id的差异"></a>5. <strong>比较暂存区与指定commit-id的差异</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached commit-id</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="6-比较两个commit-id之间的差异"><a href="#6-比较两个commit-id之间的差异" class="headerlink" title="6. 比较两个commit-id之间的差异"></a>6. <strong>比较两个commit-id之间的差异</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff commit-id commit-id</span><br></pre></td></tr></table></figure><h2 id="7-比较不同本地分支的差异"><a href="#7-比较不同本地分支的差异" class="headerlink" title="7.  比较不同本地分支的差异"></a>7.  比较不同本地分支的差异</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff dev # 当前所处分支为master</span><br></pre></td></tr></table></figure><h2 id="8-比较本地分支和远程分支之间的差异"><a href="#8-比较本地分支和远程分支之间的差异" class="headerlink" title="8. 比较本地分支和远程分支之间的差异"></a>8. 比较本地分支和远程分支之间的差异</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin master</span><br><span class="line">git diff master origin/master</span><br></pre></td></tr></table></figure><h2 id="9-比较差异只显示文件名"><a href="#9-比较差异只显示文件名" class="headerlink" title="9. 比较差异只显示文件名"></a>9. 比较差异只显示文件名</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --name-only</span><br></pre></td></tr></table></figure><h2 id="10-比较差异-显示更改文件状态"><a href="#10-比较差异-显示更改文件状态" class="headerlink" title="10 . 比较差异 显示更改文件状态"></a>10 . 比较差异 显示更改文件状态</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --name-status</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git-中-diff-命令使用&quot;&gt;&lt;a href=&quot;#Git-中-diff-命令使用&quot; class=&quot;headerlink&quot; title=&quot;Git 中 diff 命令使用&quot;&gt;&lt;/a&gt;Git 中 diff 命令使用&lt;/h1&gt;&lt;p&gt;整理总结工作中常用的&lt;code&gt;git&lt;/code&gt; 命令, 今天是一个非常有用的命令 &lt;code&gt;git diff&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;主要作用是用来比较差异，包括 &lt;code&gt;commits&lt;/code&gt;之间,&lt;code&gt;commit&lt;/code&gt; 和 工作区间 差异 &lt;/p&gt;
&lt;p&gt;命令格式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git diff [&amp;lt;options&amp;gt;] [&amp;lt;commit&amp;gt;] [--] [&amp;lt;path&amp;gt;…​]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git diff [&amp;lt;options&amp;gt;] --cached [&amp;lt;commit&amp;gt;] [--] [&amp;lt;path&amp;gt;…​]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git diff [&amp;lt;options&amp;gt;] &amp;lt;commit&amp;gt; &amp;lt;commit&amp;gt; [--] [&amp;lt;path&amp;gt;…​]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git diff [&amp;lt;options&amp;gt;] &amp;lt;blob&amp;gt; &amp;lt;blob&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git diff [&amp;lt;options&amp;gt;] --no-index [--] &amp;lt;path&amp;gt; &amp;lt;path&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;1-比较工作区与暂存区&quot;&gt;&lt;a href=&quot;#1-比较工作区与暂存区&quot; class=&quot;headerlink&quot; title=&quot;1. 比较工作区与暂存区&quot;&gt;&lt;/a&gt;1. 比较工作区与暂存区&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git diff 不加参数&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-比较暂存区与-本地-最新版本-最后一次commit&quot;&gt;&lt;a href=&quot;#2-比较暂存区与-本地-最新版本-最后一次commit&quot; class=&quot;headerlink&quot; title=&quot;2. 比较暂存区与 本地 最新版本 (最后一次commit)&quot;&gt;&lt;/a&gt;2. 比较暂存区与 本地 最新版本 (最后一次commit)&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git diff --cached&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;3-比较工作区与最新本地版本库&quot;&gt;&lt;a href=&quot;#3-比较工作区与最新本地版本库&quot; class=&quot;headerlink&quot; title=&quot;3. 比较工作区与最新本地版本库&quot;&gt;&lt;/a&gt;3. 比较工作区与最新本地版本库&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git diff HEAD&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;4-比较工作区与commit-id的差异&quot;&gt;&lt;a href=&quot;#4-比较工作区与commit-id的差异&quot; class=&quot;headerlink&quot; title=&quot;4. 比较工作区与commit-id的差异&quot;&gt;&lt;/a&gt;4. 比较工作区与commit-id的差异&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git diff commit-id&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;5-比较暂存区与指定commit-id的差异&quot;&gt;&lt;a href=&quot;#5-比较暂存区与指定commit-id的差异&quot; class=&quot;headerlink&quot; title=&quot;5. 比较暂存区与指定commit-id的差异&quot;&gt;&lt;/a&gt;5. &lt;strong&gt;比较暂存区与指定commit-id的差异&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git diff --cached commit-id&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="版本管理" scheme="https://pinghailinfeng.gitee.io/categories/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="git" scheme="https://pinghailinfeng.gitee.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>javascript get checkbox checked value</title>
    <link href="https://pinghailinfeng.gitee.io/2019/09/28/javascript-get-checkbox-checked-value/"/>
    <id>https://pinghailinfeng.gitee.io/2019/09/28/javascript-get-checkbox-checked-value/</id>
    <published>2019-09-28T05:53:50.000Z</published>
    <updated>2019-09-28T06:44:03.336Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javascript如何获取checkbox被选中的值"><a href="#javascript如何获取checkbox被选中的值" class="headerlink" title="javascript如何获取checkbox被选中的值"></a>javascript如何获取checkbox被选中的值</h1><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p>javascript dom 常用方法</p><table><thead><tr><th>方法名</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>document.getElementById</td><td>返回给定id属性值的元素节点相对应的对象</td><td><input type="checkbox" name="hobbies" id="hobbies"></td></tr><tr><td>document.getElementsByTagName</td><td>返回给定name属性的元素节点对应的元素集合</td><td>var hobbies = document.getElementsByName(“hobbies”);</td></tr><tr><td>element.nextSibling</td><td>返回该元素紧跟的一个节点</td><td></td></tr><tr><td>nodeValue</td><td>获取节点中的文本值 ,例如：跑步</td><td><input type="checkbox" name="hobbies" id="hobbies" class="hobbies" value="2">跑步</td></tr></tbody></table><p>数组常用方法：</p><table><thead><tr><th>方法 或者 属性</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>arrayObject.length</td><td>属性：数组长度</td><td></td></tr><tr><td>arrayObject.push()</td><td>向数组末尾添加一个或多个元素</td><td>var arr = new Array(3) <br>arr[0] = “George” <br>arr[1] = “John” <br>arr[2] = “Thomas”</td></tr></tbody></table><a id="more"></a><h2 id="页面如下："><a href="#页面如下：" class="headerlink" title="页面如下："></a>页面如下：</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>javascript获取复选框值方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobbies"</span> <span class="attr">id</span>=<span class="string">"hobbies"</span> <span class="attr">class</span>=<span class="string">"hobbies"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>游泳</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobbies"</span> <span class="attr">id</span>=<span class="string">"hobbies"</span> <span class="attr">class</span>=<span class="string">"hobbies"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>跑步</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>获取复选框值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><blockquote><p>通过复选框的name属性,遍历后将被选中的复选框的值输出</p><p><strong>checkbox[index].nextSibling.nodeValue</strong>: 获取的是checkbox中标签包裹的文本值 </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_checkbox_val</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> hobbies = <span class="built_in">document</span>.getElementsByName(<span class="string">"hobbies"</span>);</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; hobbies.length; index++) &#123;</span><br><span class="line">              <span class="keyword">if</span> (hobbies[index].checked) &#123;</span><br><span class="line">                  alert(hobbies[index].value + <span class="string">","</span> + hobbies[index].nextSibling.nodeValue);</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><blockquote><p>建立一个数组,使用<code>push</code>方法将被选中的元素保存到数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_checkbox_val_with_array</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> arr = [];</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; hobbies.length; index++) &#123;</span><br><span class="line">              <span class="keyword">if</span> (hobbies[index].checked) &#123;</span><br><span class="line">                  arr.push(hobbies[index].value);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          alert(arr);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><blockquote><p>通过class选择器 获取被选中的复选框的值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_checkbox_val_with_selector</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">var</span> hobbies = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'hobbies'</span>);</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; hobbies.length; index++) &#123;</span><br><span class="line">             <span class="keyword">if</span> (hobbies[index].checked) &#123;</span><br><span class="line">                 checkedValue = hobbies[index].value;</span><br><span class="line">                 alert(hobbies[index].value + <span class="string">","</span> + hobbies[index].nextSibling.nodeValue);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h3 id="使用jquery"><a href="#使用jquery" class="headerlink" title="使用jquery"></a>使用jquery</h3><blockquote><p>需要引入jquery,这里我使用国内的cdn</p><p>jquery中通过each() 方法遍历所有被选中的复选框的值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">         $(<span class="string">'#btn1'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">"input[name='hobbies']:checked"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert($(<span class="keyword">this</span>).val());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">     </span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>==tips== :  </p><ul><li>$(“input[name=’xxxx’]:checked”) 被选中的复选框对象集合</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;javascript如何获取checkbox被选中的值&quot;&gt;&lt;a href=&quot;#javascript如何获取checkbox被选中的值&quot; class=&quot;headerlink&quot; title=&quot;javascript如何获取checkbox被选中的值&quot;&gt;&lt;/a&gt;javascript如何获取checkbox被选中的值&lt;/h1&gt;&lt;h2 id=&quot;预备知识&quot;&gt;&lt;a href=&quot;#预备知识&quot; class=&quot;headerlink&quot; title=&quot;预备知识&quot;&gt;&lt;/a&gt;预备知识&lt;/h2&gt;&lt;p&gt;javascript dom 常用方法&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法名&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;document.getElementById&lt;/td&gt;
&lt;td&gt;返回给定id属性值的元素节点相对应的对象&lt;/td&gt;
&lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;hobbies&quot; id=&quot;hobbies&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;document.getElementsByTagName&lt;/td&gt;
&lt;td&gt;返回给定name属性的元素节点对应的元素集合&lt;/td&gt;
&lt;td&gt;var hobbies = document.getElementsByName(“hobbies”);&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element.nextSibling&lt;/td&gt;
&lt;td&gt;返回该元素紧跟的一个节点&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nodeValue&lt;/td&gt;
&lt;td&gt;获取节点中的文本值 ,例如：跑步&lt;/td&gt;
&lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;hobbies&quot; id=&quot;hobbies&quot; class=&quot;hobbies&quot; value=&quot;2&quot;&gt;跑步&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;数组常用方法：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法 或者 属性&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;例子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;arrayObject.length&lt;/td&gt;
&lt;td&gt;属性：数组长度&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;arrayObject.push()&lt;/td&gt;
&lt;td&gt;向数组末尾添加一个或多个元素&lt;/td&gt;
&lt;td&gt;var arr = new Array(3) &lt;br&gt;arr[0] = “George” &lt;br&gt;arr[1] = “John” &lt;br&gt;arr[2] = “Thomas”&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://pinghailinfeng.gitee.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://pinghailinfeng.gitee.io/tags/javascript/"/>
    
      <category term="checkbox" scheme="https://pinghailinfeng.gitee.io/tags/checkbox/"/>
    
  </entry>
  
  <entry>
    <title>javascript中Boolean_Object与Boolean_Primitives</title>
    <link href="https://pinghailinfeng.gitee.io/2019/09/20/javascript%E4%B8%ADBoolean-Object%E4%B8%8EBoolean-Primitives/"/>
    <id>https://pinghailinfeng.gitee.io/2019/09/20/javascript中Boolean-Object与Boolean-Primitives/</id>
    <published>2019-09-20T07:34:37.000Z</published>
    <updated>2019-09-20T07:48:52.021Z</updated>
    
    <content type="html"><![CDATA[<p>先看下面的脚本，预测下结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(flag));<span class="comment">//boolean</span></span><br><span class="line"><span class="keyword">var</span> fa = <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(fa));<span class="comment">//boolean</span></span><br><span class="line"><span class="keyword">var</span> ff = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(ff)); <span class="comment">//Object</span></span><br></pre></td></tr></table></figure><p>在 jslint中明确提示 new Boolean(true)；<code>do not use Boolean as a constructor. (W053)jshint(W053)</code></p><p>接下来的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"true is true"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(fa)&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"Boolean is  true"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ff)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Object Boolean is true"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span> is <span class="literal">true</span></span><br><span class="line"><span class="built_in">Boolean</span> is  <span class="literal">true</span></span><br><span class="line"><span class="built_in">Object</span> <span class="built_in">Boolean</span> is <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>修改脚本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(<span class="literal">false</span>));<span class="comment">//boolean</span></span><br><span class="line"><span class="keyword">var</span> fa = <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(fa));<span class="comment">//boolean</span></span><br><span class="line"><span class="keyword">var</span> ff = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(ff)); <span class="comment">//Object</span></span><br></pre></td></tr></table></figure><p>结果竟然显示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span> <span class="built_in">Boolean</span> is <span class="literal">true</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>后来查阅资料发现,</p><p>JavaScript的其他数据类型都可以转换成Boolean类型，注意！！！<strong>只有这几种类型会转换为false</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="literal">null</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">-0</span></span><br><span class="line"><span class="literal">NaN</span></span><br><span class="line"><span class="string">""</span>  (空字符串)</span><br></pre></td></tr></table></figure><p>其他都转化为true,包括空对象{}，空数组[] ， 负数 ，false的对象包装等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="number">-1</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'-1转换为true'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(&#123;&#125;)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'&#123;&#125;转换为true'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>([])&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'[]转换为true'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>))&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'new Boolean(false)转换为true'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>new Boolean(false)是布尔值的包装对象    <strong>typeof (new Boolean(false))  // ‘object’</strong>  ,所以 转换为boolean是true，而不是false。</p><p>从另一个层面也证明了为啥<code>jslint</code> 禁止在构造方法里使用Boolean类型的数据。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>Boolean.valueOf() 可以返回Boolean对象对应的值类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**/</span></span><br><span class="line"><span class="keyword">if</span>(ff.valueOf())&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"Object Boolean is true"</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>对于数字<code>0</code> 连续使用两次!! 仍旧返回false.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fa = <span class="built_in">Boolean</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(fa); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="number">0</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ol><li><p><a href="https://www.cnblogs.com/shapeY/p/7609593.html" target="_blank" rel="noopener"><a href="https://www.cnblogs.com/shapeY/p/7609593.html" target="_blank" rel="noopener">JavaScript Boolean( new Boolean(false) ) 其实是true</a></a></p></li><li><p><a href="http://adripofjavascript.com/blog/drips/the-difference-between-boolean-objects-and-boolean-primitives-in-javascript.html" target="_blank" rel="noopener">The Difference Between Boolean Objects and Boolean Primitives in JavaScript</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先看下面的脚本，预测下结果&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; flag = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(flag));&lt;span class=&quot;comment&quot;&gt;//boolean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fa = &lt;span class=&quot;built_in&quot;&gt;Boolean&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(fa));&lt;span class=&quot;comment&quot;&gt;//boolean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ff = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Boolean&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(ff)); &lt;span class=&quot;comment&quot;&gt;//Object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 jslint中明确提示 new Boolean(true)；&lt;code&gt;do not use Boolean as a constructor. (W053)jshint(W053)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;接下来的例子&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(flag)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;true is true&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(fa)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Boolean is  true&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ff)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Object Boolean is true&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果如下&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; is &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Boolean&lt;/span&gt; is  &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Boolean&lt;/span&gt; is &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;修改脚本：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; flag = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;));&lt;span class=&quot;comment&quot;&gt;//boolean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fa = &lt;span class=&quot;built_in&quot;&gt;Boolean&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(fa));&lt;span class=&quot;comment&quot;&gt;//boolean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ff = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Boolean&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(ff)); &lt;span class=&quot;comment&quot;&gt;//Object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果竟然显示：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Boolean&lt;/span&gt; is &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://pinghailinfeng.gitee.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://pinghailinfeng.gitee.io/tags/javascript/"/>
    
      <category term="Boolean" scheme="https://pinghailinfeng.gitee.io/tags/Boolean/"/>
    
      <category term="坑" scheme="https://pinghailinfeng.gitee.io/tags/%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>how to add 163 music to hexo</title>
    <link href="https://pinghailinfeng.gitee.io/2019/09/06/how-to-add-163-music-to-hexo/"/>
    <id>https://pinghailinfeng.gitee.io/2019/09/06/how-to-add-163-music-to-hexo/</id>
    <published>2019-09-06T05:25:19.000Z</published>
    <updated>2019-09-06T05:44:36.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何给hexo添加网易音乐"><a href="#如何给hexo添加网易音乐" class="headerlink" title="如何给hexo添加网易音乐"></a>如何给hexo添加网易音乐</h2><h2 id="先看看效果"><a href="#先看看效果" class="headerlink" title="先看看效果"></a>先看看效果</h2><p><img src="https://i.loli.net/2019/09/06/3W96u4wDtHpeAa7.png" alt="博客添加网易音乐.png"></p><h3 id="1-访问网易云首页，选择你喜欢的音乐，点击生成外链-我不希望音乐一直播放-如果来访的朋友想听-点击下播放就好。"><a href="#1-访问网易云首页，选择你喜欢的音乐，点击生成外链-我不希望音乐一直播放-如果来访的朋友想听-点击下播放就好。" class="headerlink" title="1.访问网易云首页，选择你喜欢的音乐，点击生成外链,我不希望音乐一直播放,如果来访的朋友想听,点击下播放就好。"></a>1.访问网易云首页，选择你喜欢的音乐，点击生成外链,我不希望音乐一直播放,如果来访的朋友想听,点击下播放就好。</h3><blockquote><p>这里我选择二十岁的某一天</p></blockquote><a id="more"></a><h3 id="2-复制iframe插件下的src里的地址"><a href="#2-复制iframe插件下的src里的地址" class="headerlink" title="2. 复制iframe插件下的src里的地址"></a>2. 复制iframe插件下的src里的地址</h3><p><img src="https://i.loli.net/2019/09/06/5y4bDzKHTVpAJGF.png" alt="外链地址网易音乐.png"></p><h3 id="3-修改themes-next-layout-sidebar-swig文件"><a href="#3-修改themes-next-layout-sidebar-swig文件" class="headerlink" title="3. 修改themes/next/layout/sidebar.swig文件"></a>3. 修改themes/next/layout/sidebar.swig文件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.background_music %&#125;</span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"210"</span> <span class="attr">height</span>=<span class="string">"110"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; theme.background_music &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h3 id="4-添加音乐地址到主题"><a href="#4-添加音乐地址到主题" class="headerlink" title="4.添加音乐地址到主题"></a>4.添加音乐地址到主题</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">background_music</span> <span class="string">:</span> <span class="string">//music.163.com/outchain/player?type=2&amp;id=247172&amp;auto=1&amp;height=66</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;如何给hexo添加网易音乐&quot;&gt;&lt;a href=&quot;#如何给hexo添加网易音乐&quot; class=&quot;headerlink&quot; title=&quot;如何给hexo添加网易音乐&quot;&gt;&lt;/a&gt;如何给hexo添加网易音乐&lt;/h2&gt;&lt;h2 id=&quot;先看看效果&quot;&gt;&lt;a href=&quot;#先看看效果&quot; class=&quot;headerlink&quot; title=&quot;先看看效果&quot;&gt;&lt;/a&gt;先看看效果&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/09/06/3W96u4wDtHpeAa7.png&quot; alt=&quot;博客添加网易音乐.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-访问网易云首页，选择你喜欢的音乐，点击生成外链-我不希望音乐一直播放-如果来访的朋友想听-点击下播放就好。&quot;&gt;&lt;a href=&quot;#1-访问网易云首页，选择你喜欢的音乐，点击生成外链-我不希望音乐一直播放-如果来访的朋友想听-点击下播放就好。&quot; class=&quot;headerlink&quot; title=&quot;1.访问网易云首页，选择你喜欢的音乐，点击生成外链,我不希望音乐一直播放,如果来访的朋友想听,点击下播放就好。&quot;&gt;&lt;/a&gt;1.访问网易云首页，选择你喜欢的音乐，点击生成外链,我不希望音乐一直播放,如果来访的朋友想听,点击下播放就好。&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;这里我选择二十岁的某一天&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="搭建博客" scheme="https://pinghailinfeng.gitee.io/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="https://pinghailinfeng.gitee.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="网易音乐" scheme="https://pinghailinfeng.gitee.io/tags/%E7%BD%91%E6%98%93%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>how to Sort Python Dictionaries by Key or Value</title>
    <link href="https://pinghailinfeng.gitee.io/2019/07/28/how-to-Sort-Python-Dictionaries-by-Key-or-Value/"/>
    <id>https://pinghailinfeng.gitee.io/2019/07/28/how-to-Sort-Python-Dictionaries-by-Key-or-Value/</id>
    <published>2019-07-28T03:17:04.000Z</published>
    <updated>2019-07-28T03:21:54.831Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>众所周知,python中字典是无序的,那么该如何对字典排序呢？</p></blockquote><p>例如下面的字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numbers = &#123;<span class="string">'second'</span>: <span class="number">2</span>,<span class="string">'first'</span>: <span class="number">1</span>,  <span class="string">'third'</span>: <span class="number">3</span>, <span class="string">'Fourth'</span>: <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过list()函数打印value,<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;list(numbers)</span><br><span class="line">[<span class="string">'second'</span>, <span class="string">'first'</span>, <span class="string">'third'</span>, <span class="string">'Fourth'</span>]</span><br></pre></td></tr></table></figure></p><p><strong>备注</strong>: </p><blockquote><p>python3.6.4 以上的版本,字典根据插入的顺序自动排序</p></blockquote><h3 id="如何根据key-对字典排序"><a href="#如何根据key-对字典排序" class="headerlink" title="如何根据key 对字典排序"></a>如何根据key 对字典排序</h3><p>可以使用python的内置函数<code>sorted</code> 来对字典排序,如下面的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(numbers)</span><br><span class="line">[<span class="string">'Fourth'</span>, <span class="string">'first'</span>, <span class="string">'second'</span>, <span class="string">'third'</span>]</span><br></pre></td></tr></table></figure><p>结果有点差强人意,因为默认<code>sorted</code>函数是根据字母的顺序升序排列的,这里的字典中 key 恰好是字母，所以才会显示这个结果。</p><h3 id="根据value对字典排序"><a href="#根据value对字典排序" class="headerlink" title="根据value对字典排序"></a>根据value对字典排序</h3><p>用同样的方法,我们可以根据value来排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(numbers.values())</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="如何根据自定义的规则对字典排序"><a href="#如何根据自定义的规则对字典排序" class="headerlink" title="如何根据自定义的规则对字典排序"></a>如何根据自定义的规则对字典排序</h2><p><code>sorted</code>函数还有一个可选参数叫key,注意这里的<code>key</code>和字典的<code>key</code>没有关系,根据指定的<code>key</code> 来进行排序,实现的机制类似迭代器。来看这个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(numbers,key=numbers.__getitem__)</span><br><span class="line">[<span class="string">'first'</span>, <span class="string">'second'</span>, <span class="string">'third'</span>, <span class="string">'Fourth'</span>]</span><br></pre></td></tr></table></figure><p>这里我们使用了字典类中内置函数<code>__getitem__</code> 在遍历字典值的过程中,获取对应的值来对字典排序</p><p>关于<code>__getitem__</code> 函数的详细说明，请参考官方文档。</p><p>当然我们也可以使用<a href="https://www.pythoncentral.io/list-comprehension-in-python/" target="_blank" rel="noopener">列表推导</a>的方式来进行排序(实质上是转化成了列表来进行排序)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(numbers,key=numbers.__getitem__,reverse=<span class="literal">True</span>)</span><br><span class="line">[<span class="string">'Fourth'</span>, <span class="string">'third'</span>, <span class="string">'second'</span>, <span class="string">'first'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[value <span class="keyword">for</span> (key,value) <span class="keyword">in</span> sorted(numbers.items(),reverse=<span class="literal">True</span>)]</span><br><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><h3 id="字典的key是数字或者字母的情况下对字典排序"><a href="#字典的key是数字或者字母的情况下对字典排序" class="headerlink" title="字典的key是数字或者字母的情况下对字典排序"></a>字典的key是数字或者字母的情况下对字典排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(numbers,key=str.lower)</span><br><span class="line">[<span class="string">'first'</span>, <span class="string">'Fourth'</span>, <span class="string">'second'</span>, <span class="string">'third'</span>]</span><br></pre></td></tr></table></figure><p>我们定义一个新的字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>month = dict(one=<span class="string">'January'</span>,</span><br><span class="line">                 two=<span class="string">'February'</span>,</span><br><span class="line">                 three=<span class="string">'March'</span>,</span><br><span class="line">                 four=<span class="string">'April'</span>,</span><br><span class="line">                 five=<span class="string">'May'</span>)</span><br></pre></td></tr></table></figure><p>通过<code>__getitem__</code>方法比较 我们定义的字典month中对应的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbermap = &#123;<span class="string">'one'</span>: <span class="number">1</span>, <span class="string">'two'</span>: <span class="number">2</span>, <span class="string">'three'</span>: <span class="number">3</span>, <span class="string">'four'</span>: <span class="number">4</span>, <span class="string">'five'</span>: <span class="number">5</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(month, key=numbermap.__getitem__)</span><br><span class="line">[<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'four'</span>, <span class="string">'five'</span>]</span><br></pre></td></tr></table></figure><p>同样的原理,可以使用列表推导来实现排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[month[i] <span class="keyword">for</span> i <span class="keyword">in</span> sorted(month,key=numbermap.__getitem__)]</span><br><span class="line">[<span class="string">'January'</span>, <span class="string">'February'</span>, <span class="string">'March'</span>, <span class="string">'April'</span>, <span class="string">'May'</span>]</span><br></pre></td></tr></table></figure><h3 id="定义一个方法来定义我们自己的排序规则"><a href="#定义一个方法来定义我们自己的排序规则" class="headerlink" title="定义一个方法来定义我们自己的排序规则"></a>定义一个方法来定义我们自己的排序规则</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repeats</span><span class="params">(string)</span>:</span></span><br><span class="line">    <span class="comment"># Lower the case in the string</span></span><br><span class="line">    string = string.lower()</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Get a set of the unique letters</span></span><br><span class="line">    uniques = set(string)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Count the max occurrences of each unique letter</span></span><br><span class="line">    counts = [string.count(letter) <span class="keyword">for</span> letter <span class="keyword">in</span> uniques]</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> max(counts)</span><br></pre></td></tr></table></figure><p>根据字母小写排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(month.values(), key=repeats, reverse=<span class="literal">True</span>)</span><br><span class="line">[<span class="string">'February'</span>, <span class="string">'January'</span>, <span class="string">'March'</span>, <span class="string">'April'</span>, <span class="string">'May'</span>]</span><br></pre></td></tr></table></figure><h3 id="使用lambda表达式排序"><a href="#使用lambda表达式排序" class="headerlink" title="使用lambda表达式排序"></a>使用lambda表达式排序</h3><p>使用lambda表达式  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(month.items(),key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line">[(<span class="string">'four'</span>, <span class="string">'April'</span>), (<span class="string">'two'</span>, <span class="string">'February'</span>), (<span class="string">'one'</span>, <span class="string">'January'</span>), (<span class="string">'three'</span>, <span class="string">'March'</span>), (<span class="string">'five'</span>, <span class="string">'May'</span>)]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(month.items(),key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>])</span><br><span class="line">[(<span class="string">'five'</span>, <span class="string">'May'</span>), (<span class="string">'four'</span>, <span class="string">'April'</span>), (<span class="string">'one'</span>, <span class="string">'January'</span>), (<span class="string">'three'</span>, <span class="string">'March'</span>), (<span class="string">'two'</span>, <span class="string">'February'</span>)]</span><br></pre></td></tr></table></figure><p>其中： </p><ul><li>lambda x:x[1] 表明根据值排序 </li><li>lambda x:x[0] 表明根据键排序 </li></ul><p>以上就是python中对字典排序的一个总结,希望能帮到大家。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;众所周知,python中字典是无序的,那么该如何对字典排序呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如下面的字典：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;numbers = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;second&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;first&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,  &lt;span class=&quot;string&quot;&gt;&#39;third&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Fourth&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以通过list()函数打印value,&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;list(numbers)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&#39;second&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;first&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;third&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Fourth&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;python3.6.4 以上的版本,字典根据插入的顺序自动排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;如何根据key-对字典排序&quot;&gt;&lt;a href=&quot;#如何根据key-对字典排序&quot; class=&quot;headerlink&quot; title=&quot;如何根据key 对字典排序&quot;&gt;&lt;/a&gt;如何根据key 对字典排序&lt;/h3&gt;&lt;p&gt;可以使用python的内置函数&lt;code&gt;sorted&lt;/code&gt; 来对字典排序,如下面的代码&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sorted(numbers)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&#39;Fourth&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;first&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;second&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;third&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果有点差强人意,因为默认&lt;code&gt;sorted&lt;/code&gt;函数是根据字母的顺序升序排列的,这里的字典中 key 恰好是字母，所以才会显示这个结果。&lt;/p&gt;
&lt;h3 id=&quot;根据value对字典排序&quot;&gt;&lt;a href=&quot;#根据value对字典排序&quot; class=&quot;headerlink&quot; title=&quot;根据value对字典排序&quot;&gt;&lt;/a&gt;根据value对字典排序&lt;/h3&gt;&lt;p&gt;用同样的方法,我们可以根据value来排序&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sorted(numbers.values())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="dict" scheme="https://pinghailinfeng.gitee.io/tags/dict/"/>
    
      <category term="sort" scheme="https://pinghailinfeng.gitee.io/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>javascript-undefined-description</title>
    <link href="https://pinghailinfeng.gitee.io/2019/06/11/javascript-undefined-description/"/>
    <id>https://pinghailinfeng.gitee.io/2019/06/11/javascript-undefined-description/</id>
    <published>2019-06-11T07:45:18.000Z</published>
    <updated>2019-06-11T09:28:03.554Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Javascript-基础拾遗之undefined"><a href="#Javascript-基础拾遗之undefined" class="headerlink" title="Javascript 基础拾遗之undefined"></a>Javascript 基础拾遗之undefined</h2><p>先看一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(a)); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>javascript中的数据类型包括<code>undefined</code>，<code>null</code>,<code>boolean</code>,<code>number</code>,<code>string</code>,<code>boolean</code>六种类型(ECMAScript 2015)</p><h3 id="undefined-小结"><a href="#undefined-小结" class="headerlink" title="undefined 小结"></a>undefined 小结</h3><p>undefined 类型的意思是当前对象未定义,适用于下面几种情况</p><ol><li>变量声明,但未赋值</li><li>对象没有赋值的属性,该属性的值为undefined</li><li>调用函数参数,但是未提供参数，该参数的值为undefined</li><li>函数没有返回值时,默认返回undefined</li></ol><p>再看下面的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.</span></span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="built_in">console</span>.log(o.p);</span><br><span class="line"><span class="comment">//3.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);    <span class="comment">// undefined</span></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="comment">//4.</span></span><br><span class="line">myfunc()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myfunc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//console.log("my function.");</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(myfunc());</span><br></pre></td></tr></table></figure><p>需要区别下面这个情况,不同浏览器提示信息可能会不同(Chrome和IE测试)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="comment">// Uncaught ReferenceError: b is not defined</span></span><br></pre></td></tr></table></figure><h3 id="如何判断为空"><a href="#如何判断为空" class="headerlink" title="如何判断为空"></a>如何判断为空</h3><p>下面三种判断方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式1</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> age === <span class="string">'undefined'</span>)</span><br><span class="line"><span class="comment">// 方式2</span></span><br><span class="line"><span class="keyword">if</span>(age === <span class="literal">undefined</span>)</span><br><span class="line"><span class="comment">// 方式3</span></span><br><span class="line"><span class="keyword">if</span>(varName) <span class="comment">//万能判断,包括boolean</span></span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined" target="_blank" rel="noopener">火狐JavaScript教程</a></p><p><a href="https://stackoverflow.com/questions/2559318/how-to-check-for-an-undefined-or-null-variable-in-javascript" target="_blank" rel="noopener">stackoverflow如何检查undefined</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Javascript-基础拾遗之undefined&quot;&gt;&lt;a href=&quot;#Javascript-基础拾遗之undefined&quot; class=&quot;headerlink&quot; title=&quot;Javascript 基础拾遗之undefined&quot;&gt;&lt;/a&gt;Javascript 
      
    
    </summary>
    
      <category term="javascript" scheme="https://pinghailinfeng.gitee.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://pinghailinfeng.gitee.io/tags/javascript/"/>
    
      <category term="javaweb" scheme="https://pinghailinfeng.gitee.io/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>Build path entry is missing /src/test/java missing问题解决</title>
    <link href="https://pinghailinfeng.gitee.io/2019/06/03/Maven-webapp-buildpath-missing-test-folder/"/>
    <id>https://pinghailinfeng.gitee.io/2019/06/03/Maven-webapp-buildpath-missing-test-folder/</id>
    <published>2019-06-03T09:04:00.000Z</published>
    <updated>2019-06-03T09:24:57.454Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="[问题描述]"></a>[问题描述]</h2><p>通过maven构建webapp,发现缺少java和test目录</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="[解决方案]"></a>[解决方案]</h2><blockquote><p>project –right click –build path– config build path – libraries – double click “JRE System Library”–choose “workspace default JRE”  OK</p></blockquote><p>如下图所示<br><img src="https://i.loli.net/2019/06/03/5cf4e41a0d68921253.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;[问题描述]&quot;&gt;&lt;/a&gt;[问题描述]&lt;/h2&gt;&lt;p&gt;通过maven构建webapp,发现缺少java和test目录&lt;/p&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="javaweb" scheme="https://pinghailinfeng.gitee.io/categories/javaweb/"/>
    
    
      <category term="maven" scheme="https://pinghailinfeng.gitee.io/tags/maven/"/>
    
      <category term="javaweb" scheme="https://pinghailinfeng.gitee.io/tags/javaweb/"/>
    
  </entry>
  
</feed>
