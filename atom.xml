<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>凭海临风的IT江湖</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pinghailinfeng.gitee.io/"/>
  <updated>2023-06-09T07:40:26.747Z</updated>
  <id>https://pinghailinfeng.gitee.io/</id>
  
  <author>
    <name>Jeff Sui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>django field constraint</title>
    <link href="https://pinghailinfeng.gitee.io/2023/06/09/django-field-constraint/"/>
    <id>https://pinghailinfeng.gitee.io/2023/06/09/django-field-constraint/</id>
    <published>2023-06-09T07:32:41.000Z</published>
    <updated>2023-06-09T07:40:26.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django中关于字段约束"><a href="#Django中关于字段约束" class="headerlink" title="Django中关于字段约束"></a>Django中关于字段约束</h1><p><img src="https://cbu01.alicdn.com/img/ibank/2015/577/026/2630620775_828955012.jpg" alt></p><a id="more"></a><h2 id="blank和null"><a href="#blank和null" class="headerlink" title="blank和null"></a>blank和null</h2><ul><li>blank=True、null=True。统一的表明了该字段（列）是可以为空的。</li><li>blank=False、null=False。统一的表面了该字段（列）不可以为空。</li><li>blank=True、null=False。这个设定的意义在于，某些字段并不希望用户在表单中创建（如slug），而是通过在save方法中根据其他字段生成。</li><li>blank=False、null=True。这个设定不允许表单中该字段为空，但是允许在更新时或者通过shell等非表单方式插入数据该字段为空。</li></ul><h2 id="DateField中auto-now-add和auto-now"><a href="#DateField中auto-now-add和auto-now" class="headerlink" title="DateField中auto_now_add和auto_now"></a>DateField中auto_now_add和auto_now</h2><ul><li><code>auto_now=True</code><blockquote><p>这个参数的默认值为false，设置为true时，能够在保存该字段时，将其值设置为当前时间，并且每次修改model，都会自动更新。因此这个参数在需要存储“最后修改时间”的场景下，十分方便。需要注意的是，设置该参数为true时，并不简单地意味着字段的默认值为当前时间，而是指字段会被“强制”更新到当前时间，你无法程序中手动为字段赋值；如果使用django再带的admin管理器，那么该字段在admin中是只读的</p></blockquote></li><li><code>auto_now_add</code><blockquote><p> 这个参数的默认值也为False，设置为True时，会在model对象第一次被创建时，将字段的值设置为创建时的时间，以后修改对象时，字段的值不会再更新。该属性通常被用在存储“创建时间”的场景下。与auto_now类似，auto_now_add也具有强制性，一旦被设置为True，就无法在程序中手动为字段赋值，在admin中字段也会成为只读的。</p></blockquote></li><li>如何将创建时间设置为“默认当前”并且可修改</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">import</span> django.utils.timezone <span class="keyword">as</span> timezone</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Doc</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    add_date = models.DateTimeField(<span class="string">'保存日期'</span>,default = timezone.now)</span><br><span class="line">    mod_date = models.DateTimeField(<span class="string">'最后修改日期'</span>, auto_now = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>备注：<br>前台页面从数据库取值,需要格式化字符串,添加<code>&lt;td&gt;\{\{ infor.updatetime|date:&quot;Y-m-d H:i:s&quot; \}\}&lt;/td&gt;</code>类似的过滤器。</p><h2 id="外键约束-on-delete"><a href="#外键约束-on-delete" class="headerlink" title="外键约束(on_delete)"></a>外键约束(on_delete)</h2><p>通常外键约束需要添加on_delete属性</p><ol><li><code>CASECADE</code>:级联(常用)<br>如果外键对应的那条数据被删除了，那么这条数据也会被删除<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app2 = models.ForeignKey(App1, on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure></li></ol><p>2.<code>PROTECT</code>: 受保护<br>即只要这条数据引用了外键的那条数据，那么就不能删除外键的那条数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app2 = models.ForeignKey(App1, on_delete=models.PROTECT)</span><br></pre></td></tr></table></figure></p><p>3.<code>SET_NULL</code>: 设置为空<br>如果外键的那条数据被删除了，那么在本条数据上就将这个字段设置为空<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app2 = models.ForeignKey(App1, on_delete=models.SET_NULL, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></p><p>4.<code>SET_DEFAULT</code> :设置默认值</p><p>如果外键的那条数据被删除了，那么本条数据上就将这个字段设置为默认值。</p><p>如果设置这个选项，前提是要指定这个字段一个默认值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/models.py</span></span><br><span class="line">app2 = models.ForeignKey(App1, default=<span class="string">'test_default'</span>, on_delete=models.SET_DEFAULT)</span><br></pre></td></tr></table></figure></p><p>5.<code>SET()</code> : 设定函数处理</p><p>如果外键的那条数据被删除了。那么将会获取SET函数中的值(value)来作为这个外键的值。SET函数可以接收一个可以调用的对象（比如函数或者方法）。<br>如果是可以调用的对象，那么会将这个对象调用后的结果作为返回值return返回回去。可以不用指定默认值</p><p>6.<code>DO_NOTHING</code>: 不处理(不推荐)</p><p>原数据不会有任何操作，也就是说 App1 的某条数据被删除，App2 中的引用还在，其实就是外表的外键还在。 但其实这是一种不推荐的做法，因为如果访问到App2 中的这条数据，用到了 app1 这个字段，就会报错，因为有一条数据被删除了，那么外键表内就有一条数据的外键和主表的外键对应不上，找不到，就报错了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/models.py</span></span><br><span class="line">app2 = models.ForeignKey(App1, default=<span class="string">'test_nothing'</span>, on_delete=models.DO_NOTHING)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Django中关于字段约束&quot;&gt;&lt;a href=&quot;#Django中关于字段约束&quot; class=&quot;headerlink&quot; title=&quot;Django中关于字段约束&quot;&gt;&lt;/a&gt;Django中关于字段约束&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://cbu01.alicdn.com/img/ibank/2015/577/026/2630620775_828955012.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="django" scheme="https://pinghailinfeng.gitee.io/categories/python/django/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="django" scheme="https://pinghailinfeng.gitee.io/tags/django/"/>
    
      <category term="约束" scheme="https://pinghailinfeng.gitee.io/tags/%E7%BA%A6%E6%9D%9F/"/>
    
  </entry>
  
  <entry>
    <title>django migrations</title>
    <link href="https://pinghailinfeng.gitee.io/2023/06/09/django-migrations/"/>
    <id>https://pinghailinfeng.gitee.io/2023/06/09/django-migrations/</id>
    <published>2023-06-09T07:16:35.000Z</published>
    <updated>2023-06-09T07:29:54.390Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django不删库数据迁移方案"><a href="#Django不删库数据迁移方案" class="headerlink" title="Django不删库数据迁移方案"></a>Django不删库数据迁移方案</h1><p><img src="https://gss0.baidu.com/-4o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/bd3eb13533fa828b5a2504a7f51f4134970a5a74.jpg" alt></p><a id="more"></a><h2 id="不删库数据迁移方案"><a href="#不删库数据迁移方案" class="headerlink" title="不删库数据迁移方案"></a>不删库数据迁移方案</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 01 清空django_migrations所有记录</span></span><br><span class="line">delete FROM public.django_migrations</span><br><span class="line"><span class="meta">#</span><span class="bash"> 02  清空工程目录下的所有迁移文件</span></span><br><span class="line">find . -path "*/migrations/*.py" -not -name "__init__.py" -delete</span><br><span class="line">find . -path "*/migrations/*.pyc"  -delete</span><br><span class="line">******如果，你确定数据库与app的models.py同步，则不需要第03与04步骤*****</span><br><span class="line"><span class="meta">#</span><span class="bash"> 03 导出数据库表结构为模型文件</span></span><br><span class="line">python manage.py inspectdb &gt; ./db_models.py</span><br><span class="line"><span class="meta">#</span><span class="bash"> 04 核查每个app的模型文件与db_models.py中有无差异？有差异需要依据数据库修改app下的models.py文件</span></span><br><span class="line">- 这里需要备份每个app的models.py, 人工check与修改models.py保持与数据库同步。</span><br><span class="line"><span class="meta">#</span><span class="bash"> 05 创建本地迁移文件</span></span><br><span class="line">python manage.py makemigrations</span><br><span class="line"><span class="meta">#</span><span class="bash"> 06 提交迁移文件至数据库</span></span><br><span class="line">python manage.py migrate --fake</span><br><span class="line"><span class="meta">#</span><span class="bash"> 07 还原自己最新的app中的models.py文件</span></span><br><span class="line">- 手工替换一下</span><br><span class="line"><span class="meta">#</span><span class="bash"> 08 按常规操作进行数据库迁移与同步</span></span><br><span class="line">....................开始迁移与写代码吧...............</span><br></pre></td></tr></table></figure><h2 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">位置参数:</span><br><span class="line">  app_label            指定同步的应用程序标签.</span><br><span class="line">  migration_name        Database state will be brought to the state after that</span><br><span class="line">                        migration. Use the name "zero" to unapply all</span><br><span class="line">                        migrations.</span><br><span class="line"></span><br><span class="line">可选参数:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  --noinput, --no-input 告诉Django不要提示用户输入任何类型的信息。.</span><br><span class="line">  --database DATABASE   指定要同步的数据库。默认为“default”数据库.</span><br><span class="line">  --fake                将迁移标记为运行而不实际运行它们.</span><br><span class="line">  --fake-initial        检测表是否已经存在，假若已经应用了初始迁移。在使用此标志之前，请确保当前数据库架构与初始迁移匹配。Django只检查一个现有的表名。</span><br><span class="line">  --plan                显示将要执行的迁移操作的列表.</span><br><span class="line">  --run-syncdb     为不进行迁移的应用程序创建表。</span><br><span class="line">  --version             显示程序的版本号和退出</span><br><span class="line">                    -v &#123;0,1,2,3&#125;, --verbosity &#123;0,1,2,3&#125;</span><br><span class="line">                        Verbosity level; 0=minimal output, 1=normal output,</span><br><span class="line">                        2=verbose output, 3=very verbose output</span><br><span class="line">  --settings SETTINGS   设置模块的Python路径，例如“myproject.settings.main”如果未提供此选项，则将使用DJANGO_SETTINGS_MODULE环境变量。</span><br><span class="line">  --pythonpath Python path要添加到Python路径的目录，例如“/home/djangoprojects/myproject”。</span><br><span class="line">  --traceback           Raise on CommandError exceptions</span><br><span class="line">  --no-color            不要将命令输出着色。</span><br><span class="line">  --force-color        强制命令输出着色。</span><br></pre></td></tr></table></figure><h2 id="makemigrations"><a href="#makemigrations" class="headerlink" title="makemigrations"></a>makemigrations</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">位置参数:</span><br><span class="line">  app_label          指定要为其创建迁移的应用程序标签.</span><br><span class="line">可选参数:</span><br><span class="line">  --dry-run             只需显示将要进行的迁移；不要实际编写它们。</span><br><span class="line">  --merge               启用迁移冲突的修复。</span><br><span class="line">  --empty               创建空迁移.</span><br><span class="line">  --noinput, --no-input 告诉Django不要提示用户输入任何类型的信息.</span><br><span class="line">  -n NAME, --name 名称，将此名称用于迁移文件.</span><br><span class="line">  --no-header           不要向新迁移文件添加头注释。</span><br><span class="line">  --check               如果模型更改丢失迁移，则以非零状态退出.</span><br><span class="line">  --version             show program's version number and exit</span><br><span class="line">  -v &#123;0,1,2,3&#125;, --verbosity &#123;0,1,2,3&#125;</span><br><span class="line">                        Verbosity level; 0=minimal output, 1=normal output,</span><br><span class="line">                        2=verbose output, 3=very verbose output</span><br><span class="line">  --settings SETTINGS   The Python path to a settings module, e.g.</span><br><span class="line">                        "myproject.settings.main". If this isn't provided, the</span><br><span class="line">                        DJANGO_SETTINGS_MODULE environment variable will be</span><br><span class="line">                        used.</span><br><span class="line">  --pythonpath PYTHONPATH</span><br><span class="line">                        A directory to add to the Python path, e.g.</span><br><span class="line">                        "/home/djangoprojects/myproject".</span><br><span class="line">  --traceback           Raise on CommandError exceptions</span><br><span class="line">  --no-color            Don't colorize the command output.</span><br><span class="line">  --force-color         Force colorization of the command output.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Django不删库数据迁移方案&quot;&gt;&lt;a href=&quot;#Django不删库数据迁移方案&quot; class=&quot;headerlink&quot; title=&quot;Django不删库数据迁移方案&quot;&gt;&lt;/a&gt;Django不删库数据迁移方案&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://gss0.baidu.com/-4o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/bd3eb13533fa828b5a2504a7f51f4134970a5a74.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="django" scheme="https://pinghailinfeng.gitee.io/categories/python/django/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="django" scheme="https://pinghailinfeng.gitee.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>table tablespace schema etc</title>
    <link href="https://pinghailinfeng.gitee.io/2023/06/09/table-tablespace-schema-etc/"/>
    <id>https://pinghailinfeng.gitee.io/2023/06/09/table-tablespace-schema-etc/</id>
    <published>2023-06-09T07:05:50.000Z</published>
    <updated>2023-06-09T07:21:53.850Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于表空间、用户和schema相关概念"><a href="#关于表空间、用户和schema相关概念" class="headerlink" title="关于表空间、用户和schema相关概念"></a>关于表空间、用户和<code>schema</code>相关概念</h1><p><img src="https://typora-images.oss-cn-shenzhen.aliyuncs.com/mysql/%E7%8B%AC%E7%AB%8B%E8%A1%A8%E7%A9%BA%E9%97%B4.jpg" alt></p><a id="more"></a><blockquote><p>没办法,在码云发表,被屏蔽了,只能转这里了</p></blockquote><h2 id="数据库这个柜子"><a href="#数据库这个柜子" class="headerlink" title="数据库这个柜子"></a>数据库这个柜子</h2><p>　　解释数据库、表空间、数据文件、表、数据的最好办法就是想象一个装满东西的柜子。</p><p>　　从物理方面来讲：数据库是柜子，柜中的抽屉是表空间，抽屉中的文件夹是数据文件，文件夹中的纸是表，写在纸上的信息就是数据。</p><p>　　从对象方面来讲：数据库是柜子，柜中的抽屉是Schema，抽屉中直接就是各种纸，这些纸就是表，写在纸上的信息就是数据。</p><p>　　如果从作为数据库实例和表之间的一层这个概念上面讲，Schema和表空间是一个层次的概念，他们都有一个很重要的特性，就是对表的独占性。Schema是表的逻辑集合，是所有应用访问表必须指定的对象（虽然一般大家都省略了，但是实际上一定是db.schema.table这种访问模式），同一张表不可能既属于这个Schema，又属于另一个Schema。表空间是表的物理集合，是所有磁盘读写必须访问的文件（大家一般也不用太管，主要是Oracle管，个性化的需求DBA管），同一张表也不可能既放在这个表空间，又放在那个表空间。</p><h2 id="关于用户"><a href="#关于用户" class="headerlink" title="关于用户"></a>关于用户</h2><p>　　<br>　　用户就是用户，用户就是打开抽屉，拿出纸来用的人。一般情况下，用户和Schema这种抽屉打交道会多一点，因为每个用户都有一个Oracle给他量身打造的Schema，而在实际的使用过程中，都是通过Schema来访问表，进行增删改查的操作。当然，在主人允许的情况下，客人也是可以打开自己的抽屉查文件的。而DBA，就是那个有万能钥匙的人。</p><p>　　表空间这个抽屉上面同样也贴了用户的名字，每个人可以设置自己的默认抽屉来放东西，如果不设置的话，Oracle也会给你一个公用的抽屉放东西。表空间这种抽屉是物理上的抽屉，是实际存在的，这个抽屉没有了，文件也就没有了。Schema这个抽屉呢，好像是跟着用户天生而来，天生而去的，是个神秘的抽屉。</p><h2 id="表空间"><a href="#表空间" class="headerlink" title="表空间"></a>表空间</h2><p>　　ORACLE数据库被划分成称作为表空间的逻辑区域——形成ORACLE数据库的逻辑结构。一个ORACLE数据库能够有一个或多个表空间,而一个表空间则对应着一个或多个物理的数据库文件。表空间是ORACLE数据库恢复的最小单位,容纳着许多数据库实体,如表、视图、索引、聚簇、回退段和临时段等。</p><h2 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h2><p>　　方案（Schema）为数据库对象的集合，为了区分各个集合，我们需要给这个集合起个名字，这些名字就是我们在企业管理器的方案下看到的许多类似用户名的节点，这些类似用户名的节点其实就是一个schema，schema里面包含了各种对象如tables, views, sequences, stored procedures, synonyms, indexes, clusters, and database links。 一个用户一般对应一个schema,该用户的schema名等于用户名，并作为该用户缺省schema。这也就是我们在企业管理器的方案下看到schema名都为数据库用户名的原因。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于表空间、用户和schema相关概念&quot;&gt;&lt;a href=&quot;#关于表空间、用户和schema相关概念&quot; class=&quot;headerlink&quot; title=&quot;关于表空间、用户和schema相关概念&quot;&gt;&lt;/a&gt;关于表空间、用户和&lt;code&gt;schema&lt;/code&gt;相关概念&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://typora-images.oss-cn-shenzhen.aliyuncs.com/mysql/%E7%8B%AC%E7%AB%8B%E8%A1%A8%E7%A9%BA%E9%97%B4.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://pinghailinfeng.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="https://pinghailinfeng.gitee.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>word和pdf转换</title>
    <link href="https://pinghailinfeng.gitee.io/2022/12/06/word%E5%92%8Cpdf%E8%BD%AC%E6%8D%A2/"/>
    <id>https://pinghailinfeng.gitee.io/2022/12/06/word和pdf转换/</id>
    <published>2022-12-06T01:22:39.000Z</published>
    <updated>2023-06-09T06:19:44.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Python-进行word和pdf转换"><a href="#使用Python-进行word和pdf转换" class="headerlink" title="使用Python 进行word和pdf转换"></a>使用Python 进行word和pdf转换</h1><p><img src="https://img.wmzhe.top/pics/f4/4c/f44ccd1b1ae065727d5f80ce8bdfdc6e.jpg" alt></p><a id="more"></a><h2 id="安装第三方库"><a href="#安装第三方库" class="headerlink" title="安装第三方库"></a>安装第三方库</h2><p><code>pip install docx2pdf</code></p><ul><li>WORD TO PDF</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> docx2pdf <span class="keyword">import</span> convert</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件位置</span></span><br><span class="line">path = <span class="string">'d:/word_list/'</span></span><br><span class="line"><span class="comment"># 定义空list,存放文件夹中的文件名</span></span><br><span class="line">files = []</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">    <span class="keyword">if</span> file.endswith(<span class="string">".docx"</span>):</span><br><span class="line">        files.append(path+file)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">   a = convert(file,file.split(<span class="string">'.'</span>)[<span class="number">0</span>]+<span class="string">'.pdf'</span>) <span class="comment">#创建生成的pdf文件和文件名的文件名</span></span><br><span class="line">   time.sleep(<span class="number">1.2</span>)</span><br><span class="line"></span><br><span class="line">   print(file+<span class="string">'转换成功'</span>)</span><br></pre></td></tr></table></figure><ul><li>PDF TO WORD</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pdf2docx <span class="keyword">import</span> Converter</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#批量pdf转word</span></span><br><span class="line"></span><br><span class="line">path = <span class="string">'d:/pdf_list/'</span></span><br><span class="line"><span class="comment"># 定义空list,存放文件夹中的文件名</span></span><br><span class="line">files = []</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">    <span class="keyword">if</span> file.endswith(<span class="string">".pdf"</span>):</span><br><span class="line">        files.append(path+file)</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    a = Converter(file)</span><br><span class="line">    a.convert(file.split(<span class="string">'.'</span>)[<span class="number">0</span>]+<span class="string">'.docx'</span>) <span class="comment">#创建生成的docx文件和文件名的文件名</span></span><br><span class="line">    a.close()</span><br><span class="line">    print(file+<span class="string">'转换成功'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用Python-进行word和pdf转换&quot;&gt;&lt;a href=&quot;#使用Python-进行word和pdf转换&quot; class=&quot;headerlink&quot; title=&quot;使用Python 进行word和pdf转换&quot;&gt;&lt;/a&gt;使用Python 进行word和pdf转换&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://img.wmzhe.top/pics/f4/4c/f44ccd1b1ae065727d5f80ce8bdfdc6e.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="办公" scheme="https://pinghailinfeng.gitee.io/tags/%E5%8A%9E%E5%85%AC/"/>
    
  </entry>
  
  <entry>
    <title>fix FinalShell error channel is not opened</title>
    <link href="https://pinghailinfeng.gitee.io/2022/08/22/fix-FinalShell-error-channel-is-not-opened/"/>
    <id>https://pinghailinfeng.gitee.io/2022/08/22/fix-FinalShell-error-channel-is-not-opened/</id>
    <published>2022-08-22T06:04:49.000Z</published>
    <updated>2022-08-22T06:14:06.231Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决FinalShell-终端错误-channel-is-not-opened"><a href="#解决FinalShell-终端错误-channel-is-not-opened" class="headerlink" title="解决FinalShell 终端错误 channel is not opened"></a>解决FinalShell 终端错误 <code>channel is not opened</code></h1><p><img src="https://pic.zsucai.com/files/2020/1220/ffpic0224ddfere07725.jpg" alt></p><a id="more"></a><blockquote><p>打开虚拟机连接FinalShell出现久联不上的问题,显示显示连接上,不一会就断掉,报错为channel is not opened.</p></blockquote><h2 id="1-打开虚拟机-找到相关配置文件"><a href="#1-打开虚拟机-找到相关配置文件" class="headerlink" title="1.打开虚拟机:找到相关配置文件"></a>1.打开虚拟机:找到相关配置文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><h2 id="2-找到被注释的-UseDNS-yes去掉-更改为UseDNS-no-完成后ESC退出编辑模式-使用-wq-回车保存并退出"><a href="#2-找到被注释的-UseDNS-yes去掉-更改为UseDNS-no-完成后ESC退出编辑模式-使用-wq-回车保存并退出" class="headerlink" title="2.找到被注释的#UseDNS yes去掉#,更改为UseDNS no,完成后ESC退出编辑模式,使用 :wq 回车保存并退出"></a>2.找到被注释的<code>#UseDNS yes</code>去掉#,更改为<code>UseDNS no</code>,完成后ESC退出编辑模式,使用 :wq 回车保存并退出</h2><h2 id="3-重启sshd服务"><a href="#3-重启sshd服务" class="headerlink" title="3.重启sshd服务"></a>3.重启sshd服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sshd.service</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;解决FinalShell-终端错误-channel-is-not-opened&quot;&gt;&lt;a href=&quot;#解决FinalShell-终端错误-channel-is-not-opened&quot; class=&quot;headerlink&quot; title=&quot;解决FinalShell 终端错误 channel is not opened&quot;&gt;&lt;/a&gt;解决FinalShell 终端错误 &lt;code&gt;channel is not opened&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://pic.zsucai.com/files/2020/1220/ffpic0224ddfere07725.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="终端" scheme="https://pinghailinfeng.gitee.io/categories/%E7%BB%88%E7%AB%AF/"/>
    
    
      <category term="linux" scheme="https://pinghailinfeng.gitee.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>missing you</title>
    <link href="https://pinghailinfeng.gitee.io/2021/04/21/missing-you/"/>
    <id>https://pinghailinfeng.gitee.io/2021/04/21/missing-you/</id>
    <published>2021-04-21T14:49:36.000Z</published>
    <updated>2022-08-22T06:01:37.433Z</updated>
    
    <content type="html"><![CDATA[<h1 id="夜已深-天凉-想您了"><a href="#夜已深-天凉-想您了" class="headerlink" title="夜已深,天凉,想您了"></a>夜已深,天凉,想您了</h1><p><img src="https://bpic.588ku.com/element_origin_min_pic/19/04/11/e9a157f9c729af7aac211ce53eb1b8a7.jpg" alt></p><a id="more"></a><p>对一个人的思念可以到什么程度？可能只有真正失去的人才能懂吧。一晃父亲离开我们已经2年了…….</p><p>前段时间无意中看到迟尚斌因病逝世的消息,突然想起了父亲生前也是球迷。</p><p>回想起小时候,爸爸每周六都要看cctv5转播的意大利联赛,我也耳濡目染喜欢上了足球。</p><p>“足球是圆的,没到最后一刻,一切皆有可能。”马拉多纳、齐达内、博格坎普、伊基塔那些在球场上闪耀的球星,我只要听到他们的名字内心都莫名的激动。</p><p>然而父亲并没有让我踢足球,我记得又一次我自己拿了个破足球在球场上踢,爸爸默默走过来说:你也喜欢足球？我点了点头。知道为啥不让你踢足球吗？我摇了摇头。因为你太瘦了,足球对抗性太强,怕你受伤。我似懂非懂的点了点头。</p><p>我和父亲的话题也渐渐多了起来,从五大联赛到欧洲杯、世界杯到甲A联赛,基本上有关足球的东西都是茶余饭后的谈资。我熬夜看球,父亲慢慢熬不了夜,只能让我把白天录播的时间给他记下来,他白天没事的时候看。每次看到漂亮的进球总想和父亲分享,一转身,父亲已经睡着了。</p><p>父亲中年的时候担任分厂足球队的教练,我偷摸在场边看着父亲,整个人在球场上的感觉都不一样了。心里别提多自豪了。听妈妈说,你爸年轻的时候,不光是足球,篮球、排球都很厉害,刚开始还能踢前锋,伴随着年龄增长,就改踢中场,到最后只能踢后卫了。我没想到爸爸还有这么风光的经历。我眼中的父亲,话很少,很严厉,工作起来很认真。</p><p>说点高兴的事,爸爸告诉你个事儿,今年女足挺进了世界杯,贾秀全也是大连人。我想您在天上应该也会很开心的。</p><p>一天,媳妇调侃闺女说,你以后找对象会找你爸这样的吗？闺女说,不会啊,因为爸爸只有一个啊。我听到了,心里莫名感动。现在能理解为人父母那份不需要回报的心了。</p><p>挚爱亲朋的离开,与其悲伤,我们只能选择坚强。做好一个父亲,尽可能地呵护家人,我会照顾好自己，父亲不用再为我担心。</p><p>夜已深,父亲,我又想您了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;夜已深-天凉-想您了&quot;&gt;&lt;a href=&quot;#夜已深-天凉-想您了&quot; class=&quot;headerlink&quot; title=&quot;夜已深,天凉,想您了&quot;&gt;&lt;/a&gt;夜已深,天凉,想您了&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://bpic.588ku.com/element_origin_min_pic/19/04/11/e9a157f9c729af7aac211ce53eb1b8a7.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂记" scheme="https://pinghailinfeng.gitee.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="others" scheme="https://pinghailinfeng.gitee.io/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>how to use maketrans in python3</title>
    <link href="https://pinghailinfeng.gitee.io/2021/04/09/how-to-use-maketrans-in-python3/"/>
    <id>https://pinghailinfeng.gitee.io/2021/04/09/how-to-use-maketrans-in-python3/</id>
    <published>2021-04-09T03:42:41.000Z</published>
    <updated>2022-08-18T08:03:08.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何在python3中使用maketrans"><a href="#如何在python3中使用maketrans" class="headerlink" title="如何在python3中使用maketrans"></a>如何在python3中使用maketrans</h1><p><img src="https://gss0.baidu.com/-4o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/b999a9014c086e064153b48607087bf40bd1cb00.jpg" alt></p><a id="more"></a><h2 id="python3中的maketrans"><a href="#python3中的maketrans" class="headerlink" title="python3中的maketrans"></a>python3中的maketrans</h2><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><blockquote><p>Python maketrans() 方法用于给 translate()方法创建字符映射转换表。</p><p>可以只接受一个参数，此时这个参数是个字典类型（暂不研究这种情况）。</p><p>对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串，表示转换的目标。两个字符串的长度必须相同，为一一对应的关系。</p><p>在Python3中可以有第三个参数，表示要删除的字符，也是字符串。</p><p>一般 maketrans() 方法需要配合 translate() 方法一起使用。</p><p><strong>注：</strong>Python3.4 以后已经不需要从外部 string 模块中来调用 maketrans() 方法了，取而代之的是内建函数: bytearray.maketrans()、bytes.maketrans()、str.maketrans()。</p></blockquote><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li>python3中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.maketrans(intab,outtab[,delchars])</span><br></pre></td></tr></table></figure><ul><li>python2中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line">string.maketrans(intab,outtab)</span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li>intab – 需要转换的字符组成的字符串。</li><li>outtab – 转换的目标字符组成的字符串。</li><li>delchars – 可选参数，表示要删除的字符组成的字符串。</li></ul><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个字符映射转换表供 translate()方法调用。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>借用 <a href="http://www.pythonchallenge.com/pc/def/map.html" target="_blank" rel="noopener">python挑战</a> 第一关</p><p>提示信息显示:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">K--&gt;M </span><br><span class="line">O--&gt;Q</span><br><span class="line">E--&gt;G</span><br></pre></td></tr></table></figure><p>每个字母向后移动两位就是加密之前的单词了,于是就有下面的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> str = <span class="string">"g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj."</span></span><br><span class="line"> </span><br><span class="line">table=str.maketrans(<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>,<span class="string">'cdefghijklmnopqrstuvwxyzab'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> str.translate(table)</span><br></pre></td></tr></table></figure><p>翻译过来: i hope you didnt translate it by hand. thats what computers are for. doing it in by hand is inefficient and that’s why this text is so long. using string.maketrans() is recommended. now apply on the url</p><p>通过转换得到下一关的地址</p><p><a href="http://www.pythonchallenge.com/pc/def/ocr.html" target="_blank" rel="noopener">http://www.pythonchallenge.com/pc/def/ocr.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何在python3中使用maketrans&quot;&gt;&lt;a href=&quot;#如何在python3中使用maketrans&quot; class=&quot;headerlink&quot; title=&quot;如何在python3中使用maketrans&quot;&gt;&lt;/a&gt;如何在python3中使用maketrans&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://gss0.baidu.com/-4o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/b999a9014c086e064153b48607087bf40bd1cb00.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu install nodejs config taobao source</title>
    <link href="https://pinghailinfeng.gitee.io/2021/04/07/ubuntu-install-nodejs-config-taobao-source/"/>
    <id>https://pinghailinfeng.gitee.io/2021/04/07/ubuntu-install-nodejs-config-taobao-source/</id>
    <published>2021-04-07T03:53:32.000Z</published>
    <updated>2022-08-18T08:03:08.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu-npm-切换淘宝镜像源"><a href="#Ubuntu-npm-切换淘宝镜像源" class="headerlink" title="Ubuntu npm 切换淘宝镜像源"></a>Ubuntu npm 切换淘宝镜像源</h1><p><img src="https://up.enterdesk.com/edpic/97/66/ed/9766edaddc5a38b512222fc387f83d9f.jpg" alt></p><a id="more"></a><h2 id="npm-切换到淘宝源"><a href="#npm-切换到淘宝源" class="headerlink" title="npm 切换到淘宝源"></a>npm 切换到淘宝源</h2><p>默认的npm下载地址：<a href="http://www.npmjs.org/" target="_blank" rel="noopener">http://www.npmjs.org/</a><br>淘宝npm镜像的地址：<a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a><br>临时使用淘宝源：</p><pre><code>$ npm --registry https://registry.npm.taobao.org install node-red-contrib-composer@latest</code></pre><h2 id="全局配置切换到淘宝源："><a href="#全局配置切换到淘宝源：" class="headerlink" title="全局配置切换到淘宝源："></a>全局配置切换到淘宝源：</h2><pre><code>$ npm config set registry https://registry.npm.taobao.org</code></pre><h2 id="全局配置切换到官方源："><a href="#全局配置切换到官方源：" class="headerlink" title="全局配置切换到官方源："></a>全局配置切换到官方源：</h2><pre><code>$ npm config set registry http://www.npmjs.org</code></pre><h3 id="检测是否切换到了淘宝源："><a href="#检测是否切换到了淘宝源：" class="headerlink" title="检测是否切换到了淘宝源："></a>检测是否切换到了淘宝源：</h3><pre><code>$ npm info underscore</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Ubuntu-npm-切换淘宝镜像源&quot;&gt;&lt;a href=&quot;#Ubuntu-npm-切换淘宝镜像源&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu npm 切换淘宝镜像源&quot;&gt;&lt;/a&gt;Ubuntu npm 切换淘宝镜像源&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://up.enterdesk.com/edpic/97/66/ed/9766edaddc5a38b512222fc387f83d9f.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="nodejs" scheme="https://pinghailinfeng.gitee.io/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="https://pinghailinfeng.gitee.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Javascript keep i variable value in loop</title>
    <link href="https://pinghailinfeng.gitee.io/2021/01/11/Javascript-keep-i-variable-value-in-loop/"/>
    <id>https://pinghailinfeng.gitee.io/2021/01/11/Javascript-keep-i-variable-value-in-loop/</id>
    <published>2021-01-11T14:05:40.000Z</published>
    <updated>2022-08-18T08:03:08.617Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript的循环中保留变量i的值"><a href="#JavaScript的循环中保留变量i的值" class="headerlink" title="JavaScript的循环中保留变量i的值"></a>JavaScript的循环中保留变量i的值</h1><p><img src="https://www.programiz.com/sites/tutorial2program/files/for-loop_0.jpg" alt></p><a id="more"></a><p>又一波疫情,本来就景气的大连又一次雪上加霜。只要有希望,一切都会好的。</p><blockquote><p>循环是我们常用的控制语句，在<code>javascript</code>中每次循环结束后其 i 值会指向最后一次的结果，这样循环注册事件时使用到 i 值便会出错</p></blockquote><p>点击图片切换背景的<code>javascript</code>脚本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> imgs = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>).querySelectorAll(<span class="string">'img'</span>)</span></span><br><span class="line"><span class="actionscript"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imgs.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">    imgs[i].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">       <span class="comment">// console.log(imgs[i].src);</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(i);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.style.backgroundImage = <span class="string">'url('</span> + imgs[i].src + <span class="string">')'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>直接报错:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught TypeError: Cannot read property 'src' of undefined</span><br></pre></td></tr></table></figure><p>打印变量<code>i</code>,永远都是指向最大索引值4</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> 4</span></span><br></pre></td></tr></table></figure><p>下面是解决方案 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种解决方案： this关键字</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imgs.length; i++) &#123;</span><br><span class="line">    imgs[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="comment">// console.log(imgs[i].src);</span></span><br><span class="line">       <span class="built_in">console</span>.log(i);</span><br><span class="line">       <span class="built_in">document</span>.body.style.backgroundImage = <span class="string">'url('</span> + <span class="keyword">this</span>.src + <span class="string">')'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//第二种解决方案: 自动执行函数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imgs.length; i++) &#123;</span><br><span class="line">            (<span class="function"><span class="keyword">function</span> (<span class="params">inner</span>) </span>&#123;</span><br><span class="line">                imgs[inner].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(imgs[inner]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)(i);</span><br><span class="line">        &#125;</span><br><span class="line">  <span class="comment">//第三种解决方案 闭包</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imgs.length; i++) &#123;</span><br><span class="line">            imgs[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params">inner</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(inner);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;(i);</span><br><span class="line">        &#125;</span><br><span class="line"> <span class="comment">//第四种解决方案 let 块级作用域</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; imgs.length; i++) &#123;</span><br><span class="line">            imgs[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(i);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript的循环中保留变量i的值&quot;&gt;&lt;a href=&quot;#JavaScript的循环中保留变量i的值&quot; class=&quot;headerlink&quot; title=&quot;JavaScript的循环中保留变量i的值&quot;&gt;&lt;/a&gt;JavaScript的循环中保留变量i的值&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://www.programiz.com/sites/tutorial2program/files/for-loop_0.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://pinghailinfeng.gitee.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://pinghailinfeng.gitee.io/tags/javascript/"/>
    
      <category term="循环" scheme="https://pinghailinfeng.gitee.io/tags/%E5%BE%AA%E7%8E%AF/"/>
    
      <category term="闭包" scheme="https://pinghailinfeng.gitee.io/tags/%E9%97%AD%E5%8C%85/"/>
    
      <category term="es6" scheme="https://pinghailinfeng.gitee.io/tags/es6/"/>
    
      <category term="this" scheme="https://pinghailinfeng.gitee.io/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>node14.4 run hexo TypeError [ERR_INVALID_ARG_TYPE]</title>
    <link href="https://pinghailinfeng.gitee.io/2020/12/27/node14-4-run-hexo-TypeError-ERR-INVALID-ARG-TYPE/"/>
    <id>https://pinghailinfeng.gitee.io/2020/12/27/node14-4-run-hexo-TypeError-ERR-INVALID-ARG-TYPE/</id>
    <published>2020-12-26T21:35:28.000Z</published>
    <updated>2022-08-18T08:03:08.616Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Node升级到14-4-hexo-运行失败"><a href="#Node升级到14-4-hexo-运行失败" class="headerlink" title="Node升级到14.4 hexo 运行失败"></a>Node升级到14.4 hexo 运行失败</h1><p><img src="https://www.prajwaldesai.com/wp-content/uploads/2014/01/error-code.jpeg" alt></p><a id="more"></a><p>node刚升级到14.4,结果发现使用<code>hexo d</code>命令部署到<code>gitee</code>上发现如下错误</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; typeError [ERR_INVALID_ARG_TYPE]: The <span class="string">"mode"</span> argument must be <span class="built_in">integer</span>. Received an instance of Object</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>查阅相关资料发现是node版本太高导致,最终将node降级到12.14.0后,重新部署就成功了。</p><p>当然你也可以使用nvm来切换node版本。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Node升级到14-4-hexo-运行失败&quot;&gt;&lt;a href=&quot;#Node升级到14-4-hexo-运行失败&quot; class=&quot;headerlink&quot; title=&quot;Node升级到14.4 hexo 运行失败&quot;&gt;&lt;/a&gt;Node升级到14.4 hexo 运行失败&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://www.prajwaldesai.com/wp-content/uploads/2014/01/error-code.jpeg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://pinghailinfeng.gitee.io/categories/hexo/"/>
    
      <category term="博客搭建" scheme="https://pinghailinfeng.gitee.io/categories/hexo/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="hexo" scheme="https://pinghailinfeng.gitee.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Farewell, 2020</title>
    <link href="https://pinghailinfeng.gitee.io/2020/12/26/Farewell-2020/"/>
    <id>https://pinghailinfeng.gitee.io/2020/12/26/Farewell-2020/</id>
    <published>2020-12-26T08:22:08.000Z</published>
    <updated>2022-08-18T08:03:08.616Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Farewell-2020"><a href="#Farewell-2020" class="headerlink" title="Farewell, 2020"></a>Farewell, 2020</h1><p><img src="https://gss0.baidu.com/-fo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/7acb0a46f21fbe09cd42640566600c338744ad87.jpg" alt></p><a id="more"></a><p>2020年还有不到五天就要过去了,时光如梭,这一年一眨眼就过去了。</p><p>大连又一次迎来了第三次新冠疫情,大街上冷冷清清。商场里也没有往日的喧闹。这个城市又一次变得安静了下来。</p><p>2020年,大家说得最多的一个字就是”难”。大家好不容易挺过来,来势汹汹的疫情打乱了节奏。很多人心情跌落谷底。</p><p>昨天回到家,媳妇说孩子网课表现很优秀,一边跟着老师听讲,一边和老师互动,还知道静音,非常投入，孩子这是长大了。我心里却不是滋味,和去年疫情相比,网课一天不上,天天就是看平板电脑形成了强烈的反差。孩子不是长大了,是社会让她不得不遵守规则。</p><p>学生问我,你白天上课,晚上还上晚课,收入一定很高,我笑了笑说,还可以吧,他接着又问,你肯定是学校股东,要不谁能这么拼命。我回答,成年人的世界里哪有什么不容易。师生相视一笑。大家都明白,个中滋味自己体会吧。</p><p>疫情让我们明白一些道理,什么都没有活着和生存更重要。只要活着,就有希望。</p><p>2020让我们体会到生命的伟大,致敬那些工作在一线的医护工作者们,他们是最美的逆行者。</p><p>致敬那些为了后勤保障,辛勤工作的各行各业的人们,他们社会能正常运转。</p><p>为人父,为人母,体会到了父母的艰辛。</p><p>就像奥特曼经常说的一样,相信光，会守护世界。每个人心中都有奥特曼。我也会守护我的家人,守护我身边的一切。</p><p>希望在新的一年,一切都会变好。</p><p>祝愿大家都身体健康,因为有光,就有希望。</p><p>未来可期,再见2020!</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Farewell-2020&quot;&gt;&lt;a href=&quot;#Farewell-2020&quot; class=&quot;headerlink&quot; title=&quot;Farewell, 2020&quot;&gt;&lt;/a&gt;Farewell, 2020&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://gss0.baidu.com/-fo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/7acb0a46f21fbe09cd42640566600c338744ad87.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂记" scheme="https://pinghailinfeng.gitee.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="2020" scheme="https://pinghailinfeng.gitee.io/tags/2020/"/>
    
  </entry>
  
  <entry>
    <title>how to export django project dependency</title>
    <link href="https://pinghailinfeng.gitee.io/2020/09/15/how-to-export-django-project-dependency/"/>
    <id>https://pinghailinfeng.gitee.io/2020/09/15/how-to-export-django-project-dependency/</id>
    <published>2020-09-15T01:19:55.000Z</published>
    <updated>2022-08-18T08:03:08.615Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何导出django项目依赖第三方库"><a href="#如何导出django项目依赖第三方库" class="headerlink" title="如何导出django项目依赖第三方库"></a>如何导出<code>django</code>项目依赖第三方库</h1><p><img src="https://gss0.baidu.com/-Po3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=f979fd647b8da9774e7a8e2d8061d421/d000baa1cd11728bf4f9b275c0fcc3cec2fd2c94.jpg" alt></p><a id="more"></a><h2 id="使用pip-freeze-导出"><a href="#使用pip-freeze-导出" class="headerlink" title="使用pip freeze 导出"></a>使用<code>pip freeze</code> 导出</h2><p>针对大部分使用<code>virtualenv</code> 或<code>venv</code>，<code>pipenv</code> 虚拟环境的项目而言,导出第三方依赖很容易,运行下面的命令即可</p><p><code>pip freeze &gt; requirements.txt</code></p><h2 id="非虚拟环境如何导出项目依赖"><a href="#非虚拟环境如何导出项目依赖" class="headerlink" title="非虚拟环境如何导出项目依赖"></a>非虚拟环境如何导出项目依赖</h2><h3 id="安装-pipreqs库"><a href="#安装-pipreqs库" class="headerlink" title="安装 pipreqs库"></a>安装 <code>pipreqs</code>库</h3><p><code>pip install pipreqs</code></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>进入项目根目录,使用下面的指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipreqs ./</span><br></pre></td></tr></table></figure><h3 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">D:\code\django_blog\mysite&gt;pipreqs ./</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "c:\python38\lib\runpy.py", line 194, in _run_module_as_main</span><br><span class="line">    return _run_code(code, main_globals, None,</span><br><span class="line">  File "c:\python38\lib\runpy.py", line 87, in _run_code</span><br><span class="line">    exec(code, run_globals)</span><br><span class="line">  File "C:\Python38\Scripts\pipreqs.exe\__main__.py", line 9, in &lt;module&gt;</span><br><span class="line">  File "c:\python38\lib\site-packages\pipreqs\pipreqs.py", line 470, in main</span><br><span class="line">    init(args)</span><br><span class="line">  File "c:\python38\lib\site-packages\pipreqs\pipreqs.py", line 406, in init</span><br><span class="line">    candidates = get_all_imports(input_path,</span><br><span class="line">  File "c:\python38\lib\site-packages\pipreqs\pipreqs.py", line 122, in get_all_imports</span><br><span class="line">    contents = f.read()</span><br><span class="line">UnicodeDecodeError: 'gbk' codec can't decode byte 0xae in position 403: illegal multibyte sequence</span><br></pre></td></tr></table></figure><h3 id="添加命令行参数-encoding-utf-8"><a href="#添加命令行参数-encoding-utf-8" class="headerlink" title="添加命令行参数 encoding=utf-8"></a>添加命令行参数 <code>encoding=utf-8</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipreqs ./ --encoding=utf<span class="number">-8</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何导出django项目依赖第三方库&quot;&gt;&lt;a href=&quot;#如何导出django项目依赖第三方库&quot; class=&quot;headerlink&quot; title=&quot;如何导出django项目依赖第三方库&quot;&gt;&lt;/a&gt;如何导出&lt;code&gt;django&lt;/code&gt;项目依赖第三方库&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://gss0.baidu.com/-Po3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=f979fd647b8da9774e7a8e2d8061d421/d000baa1cd11728bf4f9b275c0fcc3cec2fd2c94.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="django" scheme="https://pinghailinfeng.gitee.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>make django3.1 backend markdown support</title>
    <link href="https://pinghailinfeng.gitee.io/2020/09/14/make_django3.1_backend_markdown_support/"/>
    <id>https://pinghailinfeng.gitee.io/2020/09/14/make_django3.1_backend_markdown_support/</id>
    <published>2020-09-14T08:57:20.000Z</published>
    <updated>2022-08-18T08:03:08.615Z</updated>
    
    <content type="html"><![CDATA[<h1 id="django3-1-后台添加markdown支持"><a href="#django3-1-后台添加markdown支持" class="headerlink" title="django3.1 后台添加markdown支持"></a>django3.1 后台添加markdown支持</h1><p><img src="https://media.vanityfair.com/photos/54caaa85b8f23e3a0314d5ae/master/w_768,c_limit/image.png" alt></p><a id="more"></a><h2 id="首先安装-django-mdeditor"><a href="#首先安装-django-mdeditor" class="headerlink" title="首先安装 django-mdeditor"></a>首先安装 <code>django-mdeditor</code></h2><p><code>python pip install django-mdeditor</code></p><h2 id="settings-py-中添加"><a href="#settings-py-中添加" class="headerlink" title="settings.py 中添加"></a>settings.py 中添加</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'blog'</span>,</span><br><span class="line">    <span class="string">'mdeditor'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="comment"># add uploads文件夹</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">'uploads'</span>)  <span class="comment">#uploads必须存在，且在项目目录下</span></span><br><span class="line">MEDIA_URL = <span class="string">'/media/'</span></span><br></pre></td></tr></table></figure><h2 id="添加站点路由-mysite-urls-py"><a href="#添加站点路由-mysite-urls-py" class="headerlink" title="添加站点路由 mysite/urls.py"></a>添加站点路由 <code>mysite/urls.py</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"><span class="keyword">from</span> django.conf.urls.static <span class="keyword">import</span>  static</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'blog/'</span>, include((<span class="string">'blog.urls'</span>,<span class="string">'blog'</span>),namespace=<span class="string">'blog'</span>)),</span><br><span class="line">    path(<span class="string">'mdeditor/'</span>,include(<span class="string">'mdeditor.urls'</span>)),</span><br><span class="line">]</span><br><span class="line"><span class="keyword">if</span> settings.DEBUG:</span><br><span class="line">    <span class="comment"># static files (images, css, javascript, etc.)</span></span><br><span class="line">    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)</span><br></pre></td></tr></table></figure><h2 id="修改blog下models-py中内容类型"><a href="#修改blog下models-py中内容类型" class="headerlink" title="修改blog下models.py中内容类型"></a>修改blog下<code>models.py</code>中内容类型</h2><p><code>导入MDTextField</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> mdeditor.fields <span class="keyword">import</span> MDTextField</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPost</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length= <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># body = models.TextField()</span></span><br><span class="line">    body = MDTextField()</span><br><span class="line"></span><br><span class="line">    create_time = models.DateTimeField()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f"&lt;BlogPost <span class="subst">&#123;self.title&#125;</span>&gt;"</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name =<span class="string">"文章"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure></p><h2 id="blog应用views-py"><a href="#blog应用views-py" class="headerlink" title="blog应用views.py"></a>blog应用views.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">details</span><span class="params">(request, blog_id)</span>:</span></span><br><span class="line">    blog = get_object_or_404 (BlogPost, pk=blog_id)</span><br><span class="line">    blog.body = markdown(blog.body, extensions=[</span><br><span class="line">        <span class="comment"># 包含 缩写、表格等常用扩展</span></span><br><span class="line">        <span class="string">'markdown.extensions.extra'</span>,</span><br><span class="line">        <span class="comment"># 语法高亮扩展</span></span><br><span class="line">        <span class="string">'markdown.extensions.codehilite'</span>,</span><br><span class="line">        <span class="comment">#允许我们自动生成目录</span></span><br><span class="line">         <span class="string">'markdown.extensions.toc'</span>,</span><br><span class="line">        ])</span><br><span class="line">    <span class="keyword">return</span> render (request, <span class="string">'blog_detail.html'</span>, &#123;<span class="string">'blog'</span>: blog&#125;)</span><br></pre></td></tr></table></figure><h2 id="前台页面添加markdown-css支持"><a href="#前台页面添加markdown-css支持" class="headerlink" title="前台页面添加markdown css支持"></a>前台页面添加markdown css支持</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/github-markdown-css/3.0.1/github-markdown.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="前台页面添加-safe渲染"><a href="#前台页面添加-safe渲染" class="headerlink" title="前台页面添加 safe渲染"></a>前台页面添加 safe渲染</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; blog.title &#125;&#125;</span><br><span class="line">&#123;&#123; blog.body | safe &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="重新启动服务"><a href="#重新启动服务" class="headerlink" title="重新启动服务"></a>重新启动服务</h2><p><code>python manage.py runserver 127.0.0.1:8000</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;django3-1-后台添加markdown支持&quot;&gt;&lt;a href=&quot;#django3-1-后台添加markdown支持&quot; class=&quot;headerlink&quot; title=&quot;django3.1 后台添加markdown支持&quot;&gt;&lt;/a&gt;django3.1 后台添加markdown支持&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://media.vanityfair.com/photos/54caaa85b8f23e3a0314d5ae/master/w_768,c_limit/image.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="django" scheme="https://pinghailinfeng.gitee.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>from beginning to setup a typescript develop environment</title>
    <link href="https://pinghailinfeng.gitee.io/2020/04/13/from-beginning-to-setup-a-typescript-develop-environment/"/>
    <id>https://pinghailinfeng.gitee.io/2020/04/13/from-beginning-to-setup-a-typescript-develop-environment/</id>
    <published>2020-04-13T09:22:58.000Z</published>
    <updated>2022-08-18T08:03:08.614Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从零开始搭建typescript开发环境"><a href="#从零开始搭建typescript开发环境" class="headerlink" title="从零开始搭建typescript开发环境"></a>从零开始搭建typescript开发环境</h1><p><img src="https://pic3.zhimg.com/v2-7ae2e2942fa8ae187a24cae8afe9547e_1200x500.jpg" alt></p><a id="more"></a><h2 id="【背景】"><a href="#【背景】" class="headerlink" title="【背景】"></a>【背景】</h2><p>从零开始搭建一个typescript项目中使用了lite-server 模块,备忘一下</p><h2 id="【解决方案】"><a href="#【解决方案】" class="headerlink" title="【解决方案】"></a>【解决方案】</h2><h3 id="项目下-创建一个-bs-config-json文件"><a href="#项目下-创建一个-bs-config-json文件" class="headerlink" title="项目下 创建一个 bs-config.json文件"></a>项目下 创建一个 <code>bs-config.json</code>文件</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"port"</span> : <span class="number">3000</span>,</span><br><span class="line">    <span class="attr">"files"</span>: [<span class="string">"../dist/**/*.&#123;html,htm,css,js&#125;"</span>],</span><br><span class="line">    <span class="attr">"server"</span>: &#123;<span class="attr">"baseDir"</span> : <span class="string">"./dist"</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>port 参数指定端口</li><li>files 指定包含的文件类型</li><li>server 中 baseDir参数指定 静态文件所在目录,根据自己项目目录结构调整</li></ul><h3 id="添加-lite-server-到-package-json-的-script"><a href="#添加-lite-server-到-package-json-的-script" class="headerlink" title="添加 lite-server 到 package.json 的 script"></a>添加 lite-server 到 package.json 的 script</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "start": "lite-server",</span><br><span class="line">    "tsc-build": "tsc -w",</span><br><span class="line">    "tsc-watch": "nodemon dist/hello.js"</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="命令行运行"><a href="#命令行运行" class="headerlink" title="命令行运行"></a>命令行运行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><h2 id="【参考文档】"><a href="#【参考文档】" class="headerlink" title="【参考文档】"></a>【参考文档】</h2><p><a href="https://github.com/johnpapa/lite-server" target="_blank" rel="noopener">lite-server官方github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;从零开始搭建typescript开发环境&quot;&gt;&lt;a href=&quot;#从零开始搭建typescript开发环境&quot; class=&quot;headerlink&quot; title=&quot;从零开始搭建typescript开发环境&quot;&gt;&lt;/a&gt;从零开始搭建typescript开发环境&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-7ae2e2942fa8ae187a24cae8afe9547e_1200x500.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="typescript" scheme="https://pinghailinfeng.gitee.io/categories/typescript/"/>
    
      <category term="basic" scheme="https://pinghailinfeng.gitee.io/categories/typescript/basic/"/>
    
    
      <category term="typescript" scheme="https://pinghailinfeng.gitee.io/tags/typescript/"/>
    
      <category term="lite-server" scheme="https://pinghailinfeng.gitee.io/tags/lite-server/"/>
    
  </entry>
  
  <entry>
    <title>using selenium execute JavaScript controll browser scroll</title>
    <link href="https://pinghailinfeng.gitee.io/2020/04/10/using-selenium-execute-JavaScript-controll-browser-scroll/"/>
    <id>https://pinghailinfeng.gitee.io/2020/04/10/using-selenium-execute-JavaScript-controll-browser-scroll/</id>
    <published>2020-04-10T09:18:09.000Z</published>
    <updated>2022-08-18T08:03:08.613Z</updated>
    
    <content type="html"><![CDATA[<h1 id="selenium中使用JavaScript控制浏览器"><a href="#selenium中使用JavaScript控制浏览器" class="headerlink" title="selenium中使用JavaScript控制浏览器"></a>selenium中使用JavaScript控制浏览器</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//移动到元素element对象的“顶端”与当前窗口的“顶部”对齐</span></span><br><span class="line">((JavascriptExecutor) driver).executeScript(<span class="string">"arguments[0].scrollIntoView();"</span>, element);</span><br><span class="line">((JavascriptExecutor) driver).executeScript(<span class="string">"arguments[0].scrollIntoView(true);"</span>, element);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//移动到元素element对象的“底端”与当前窗口的“底部”对齐</span></span><br><span class="line">((JavascriptExecutor) driver).executeScript(<span class="string">"arguments[0].scrollIntoView(false);"</span>, element);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//移动到页面最底部</span></span><br><span class="line">((JavascriptExecutor) driver).executeScript(<span class="string">"window.scrollTo(0, document.body.scrollHeight)"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//移动到指定的坐标(相对当前的坐标移动)</span></span><br><span class="line">((JavascriptExecutor) driver).executeScript(<span class="string">"window.scrollBy(0, 700)"</span>);</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line"><span class="comment">//结合上面的scrollBy语句，相当于移动到700+800=1600像素位置</span></span><br><span class="line">((JavascriptExecutor) driver).executeScript(<span class="string">"window.scrollBy(0, 800)"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//移动到窗口绝对位置坐标，如下移动到纵坐标1600像素位置</span></span><br><span class="line">((JavascriptExecutor) driver).executeScript(<span class="string">"window.scrollTo(0, 1600)"</span>);</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line"><span class="comment">//结合上面的scrollTo语句，仍然移动到纵坐标1200像素位置</span></span><br><span class="line">((JavascriptExecutor) driver).executeScript(<span class="string">"window.scrollTo(0, 1200)"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;selenium中使用JavaScript控制浏览器&quot;&gt;&lt;a href=&quot;#selenium中使用JavaScript控制浏览器&quot; class=&quot;headerlink&quot; title=&quot;selenium中使用JavaScript控制浏览器&quot;&gt;&lt;/a&gt;selenium
      
    
    </summary>
    
      <category term="selenium" scheme="https://pinghailinfeng.gitee.io/categories/selenium/"/>
    
      <category term="java" scheme="https://pinghailinfeng.gitee.io/categories/selenium/java/"/>
    
    
      <category term="selenium" scheme="https://pinghailinfeng.gitee.io/tags/selenium/"/>
    
      <category term="java" scheme="https://pinghailinfeng.gitee.io/tags/java/"/>
    
      <category term="自动化测试" scheme="https://pinghailinfeng.gitee.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Still a teenager</title>
    <link href="https://pinghailinfeng.gitee.io/2020/04/05/Still-a-teenager/"/>
    <id>https://pinghailinfeng.gitee.io/2020/04/05/Still-a-teenager/</id>
    <published>2020-04-05T14:11:31.000Z</published>
    <updated>2022-08-18T08:03:08.613Z</updated>
    
    <content type="html"><![CDATA[<h1 id="归来仍是少年"><a href="#归来仍是少年" class="headerlink" title="归来仍是少年"></a>归来仍是少年</h1><p><img src="http://a3.att.hudong.com/36/19/01300000660677127669194340150.jpg" alt></p><a id="more"></a><p>很久没有更新博客了,一来是需要自己整理下思路,二来是自己也要学习,不想因为这样降低博客的质量。<br>坚持了70多天中断了,感觉有点可惜，但是想来也对自己有个交代。</p><p>停下也是为了更好的往下走。</p><p>一年前的今天,我父亲还健在。</p><p>清明时节雨纷纷的季节，一年前的事情仍旧历历在目。</p><p>阴历三月初一是父亲的生日,寻思给父亲过个生日,3月底才出的院。父亲明显感觉比以前气色差了很多。</p><p>老人有讲究,不到80大寿,不宜大操大办。因此我给父亲订了蛋糕,俺娘准备了父亲喜欢吃的蚬子长寿面,就一家人简简单单过了一个生日。</p><p>父亲的那天胃口格外的好，吃了两大碗面条。我和母亲对视了一眼,心里感觉好了一点。</p><p>席间和闺女还做起了游戏,闺女想骑大马,但是考虑到父亲身体还很虚弱,就让媳妇领到一边去玩。</p><p>去厨房刷碗,母亲小声告诉我。你爸好几天都难受的睡不着觉了。我心里咯噔一下,只能提醒母亲注意,随时给我打电话。</p><p>聊起了很多小时候的事。</p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200405_father_and_mother.jpg?raw=true" alt></p><p>印象中爸爸年轻时候喜欢各种运动,足篮排乒乓没有不会的,会吹笛子,会画画,照片看是个俊美的男子。</p><p>后来遇到了母亲,有了我和姐姐,足球也踢不动了,担任了厂队的领队,那段风风火火的日子,我经常去球场看球。</p><p>想起下雨天,我在水坑打闹,弄得一身白衣服变成了灰色,父亲回家用毛巾狠狠抽了我。</p><p>其实抽完,父亲就觉得后悔,谁都有调皮的时候。</p><p>回到大连,房子正在装修,我接到一个女同学电话。我父亲问起来,大学有没有要好的女同学,有合适的可以处处看。我那时候还是懵懂的年纪,只知道傻乎乎的笑。</p><p>年龄越来越大了,父亲表面没说什么,其实心里着实着急。</p><p>我也装傻充愣,在以找对象名义,又玩了好几年。</p><p>终于婚了,父亲拉着我媳妇的手,就说一句话,好好过啊,有啥需要就找我们。我偷偷看到,老爷子眼角有了泪花。</p><p>婚房房子装修的日子,爸妈全程建工,登梯子爬高,为了一个门帘从金三角老两口硬是走了回来。我姐夫调侃说,看出来了,这是儿啊。</p><p>老爷子私下问我,啥时候准备要孩子啊。我说不着急,反问俺爸: 您着急了。俺爸说,能不着急吗,我和你妈都多大年纪了,趁腿脚好,还能帮你带带。</p><p>孩子啼哭的那一刻,我突然意识到这个小生命的诞生,让我从一个黄花少年,也当了爹。</p><p>媳妇怀孕期间一直反应很大,从开始怀孕一直吐到产床。父亲一直担心,孩子会有影响。</p><p>当护士把孩子报过来的时候,老爷子乐的合不拢嘴,一个劲的念叨,挺好挺好。</p><p>因为母亲过来带孩子,忽视了父亲的身体,老爷子自己不想给我们添麻烦,终于2016年的冬天,老爷子突然因病入院。</p><p>进手术室前,父亲就说了一句话,我还想活着看孙女上小学呢！期间母亲一直在哭,我们只能祈祷手术能成功。</p><p>事后,主治医生说,这个手术风险很高,正常人基本上下不了手术台,更何况我父亲有20年的糖尿病,并发症一来,谁也没招。正常40分钟的手术做了2个半小时,老爷子硬是挺了过来。</p><p>不到一个月的时间,又因为大面积静脉渗血导致心肌炎,又一次去了手术室……..</p><p>我急急忙忙跑去医院,看到俺爸浑身插着十几个管子的时候,我控制不住自己,眼泪止不住流。</p><p>老爷子慢慢恢复了过来,看着他那神采奕奕的眼睛慢慢失去了光,我意识到,这场病对于俺爸意味着什么。</p><p>2017年十月一,我记得很清楚,我开车领着俺爸去看了东港的喷泉。老爷子走路都费劲了,不到200米的路,歇了十几趟。我搀扶着父亲,手上就剩下骨头了。我扭过头,强忍着泪水。那是父亲最后一次出远门。</p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200405_father.jpg?raw=true" alt></p><p>2018年春节,家人都聚在一起,那时父亲的头发已经全白了。</p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200405_father_and_famliy.jpg?raw=true" alt></p><p>19年,刚过完春节,父亲觉得心脏不舒服,就去住院了。凌晨2点,我给父亲送去医院住院。没来得及告诉俺姐。等到住院手续办理完。我才给俺姐打电话,谁知道俺姐也来同一个医院住院了。老爷子一听到俺姐也住院了,眼泪就流下来了,那时候还没有床位,就一个劲念叨,我要等着俺老闺女来。俺姐来了,父亲就抱着俺姐哭了起来。</p><p>晚上需要有人陪护,怕我睡不好,故意说我打呼噜影响他睡眠,就让我回家睡。</p><p>医生也把我们家属叫到一起,详细说明了父亲现在的病情,距离上次手术过去了三年,现在最重要的不是糖尿病,也不是静脉栓塞,而是心脏。老爷子现在的身体已经不能再做手术了。建议回家静养。我们听了感觉心里很难受。不停追问医生还有没有更好的办法。医生虽然没明着说没有,其实也间接说明病情已经很严重了。</p><p>父亲是一个很聪明的人,从医生的只言片语里也清楚自己时日无多。</p><p>3月底了,有一天我去医院陪护,父亲拉着我的手说,去走廊溜达溜达。他背靠在护士站的台子前,和我说了一段意味深长的话，他说,我知道我现在心脏是大问题,一旦出问题,3分钟人就没了,我的银行卡都在你妈那,房子你和你姐一人一半,房产证都在你妈那,有事找你妈。我以为父亲是开玩笑,说道,咋的,你这是交代后事啊。父亲突然严肃了起来,说,对,就是交代下。我心里一沉。</p><p>4月7号,我正好陪孩子去上英语课,突然接到了母亲的电话,快来,你爸不行了。</p><p>当我打车冲过去的时候,父亲已经永远离开了我们。120又急救了将近20分钟,脉搏一直都是一条直线。领队说,老爷子心脏病突发,走了,没遭罪，子女看看是否还需要送医院,否则就在死亡确认书上签字吧。听到这个的时候,我整个大脑都一片空白了。</p><p>姐夫赶紧联系了殡葬的人,过了不到十分钟，办事的人说,来孝子来给老爷子净身。我用毛巾给父亲擦脸,感受到父亲的温度。我到现在都不相信,父亲永远的离开了我们。就像睡着了一样。</p><p>我实在写不下去了……..</p><p>想想对父亲的承诺,说出了院,还能带着父亲去趟澡堂子,这辈子再也不可能实现了。</p><p>归来还是少年吗？体会到为人父,为人夫的责任,你就不会再是孩子了。</p><p>如今一周年了,我只想对我父亲说,<strong>儿子想你了,你还能回来不？</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;归来仍是少年&quot;&gt;&lt;a href=&quot;#归来仍是少年&quot; class=&quot;headerlink&quot; title=&quot;归来仍是少年&quot;&gt;&lt;/a&gt;归来仍是少年&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://a3.att.hudong.com/36/19/01300000660677127669194340150.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂记" scheme="https://pinghailinfeng.gitee.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="杂记" scheme="https://pinghailinfeng.gitee.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
      <category term="感悟" scheme="https://pinghailinfeng.gitee.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>esp32 micropython 03 webrepl</title>
    <link href="https://pinghailinfeng.gitee.io/2020/03/27/esp32-micropython-03-webrepl/"/>
    <id>https://pinghailinfeng.gitee.io/2020/03/27/esp32-micropython-03-webrepl/</id>
    <published>2020-03-27T14:46:44.000Z</published>
    <updated>2022-08-18T08:03:08.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="esp32-micropython-之旅-03-webrepl"><a href="#esp32-micropython-之旅-03-webrepl" class="headerlink" title="esp32  micropython 之旅 03 webrepl"></a>esp32  micropython 之旅 03 webrepl</h1><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200327_dianlu.jpg?raw=true" alt></p><a id="more"></a><h2 id="使用network模块连接WIFI"><a href="#使用network模块连接WIFI" class="headerlink" title="使用network模块连接WIFI"></a>使用network模块连接WIFI</h2><p><code>network</code>模块是和网络相关的模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> network <span class="comment"># 导入network模块</span></span><br><span class="line">wifi = network.WLAN(network.STA_IF)  <span class="comment"># 设置为STA_IF模式，即接入wifi路由器的模式AP_IF为作为热点</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200327_wifi.png?raw=true" alt></p><p>接下来我们需要激活wifi，并进行连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wifi.active(<span class="literal">True</span>) <span class="comment"># 将wifi激活</span></span><br><span class="line">wifi.connect(<span class="string">'&lt;essid&gt;'</span>,<span class="string">'&lt;password&gt;'</span>) <span class="comment">#连接至wifi</span></span><br></pre></td></tr></table></figure><h3 id="查看wifi连接状态"><a href="#查看wifi连接状态" class="headerlink" title="查看wifi连接状态"></a>查看wifi连接状态</h3><p>使用<code>ifconfig</code>查看网络状态：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wifi.ifconfig()</span><br></pre></td></tr></table></figure><h2 id="WebREPL"><a href="#WebREPL" class="headerlink" title="WebREPL"></a>WebREPL</h2><p>WebREPL是一个使用Web前端技术栈构建的单页应用。</p><p><strong>WebREPL允许你通过WiFi使用MicroPython的REPL，通过浏览器连接，使用了WebSockt通信协议</strong>。</p><p>在MicroPython的网站上托管了WebREPL的单页应用，点击如下链接即可访问：</p><p><a href="http://micropython.org/webrepl" target="_blank" rel="noopener">http://micropython.org/webrepl</a></p><p>两个步骤</p><ul><li>初始化WebREPL</li><li>开启WebREPL</li></ul><h3 id="初始化WebREPL"><a href="#初始化WebREPL" class="headerlink" title="初始化WebREPL"></a>初始化WebREPL</h3><p>初次使用WebREPL，我们先要使用<code>webrepl_setup</code>模块来进行初始化设置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> webrepl_setup</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200327_repl_confirm_password.png?raw=true" alt></p><p>当你看到亲切的<code>&gt;&gt;&gt;</code>提示符时，则表明你已成功的连接到了WebREPL</p><h3 id="开启WebREPL"><a href="#开启WebREPL" class="headerlink" title="开启WebREPL"></a>开启WebREPL</h3><p>接下来，我们直接开启webrepl的服务:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> webrepl</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>webrepl.start()</span><br></pre></td></tr></table></figure><p>如上两句指令执行后，如下图所示：</p><h3 id="连接WebREPL"><a href="#连接WebREPL" class="headerlink" title="连接WebREPL"></a>连接WebREPL</h3><p>访问<a href="http://micropython.org/webrepl" target="_blank" rel="noopener">http://micropython.org/webrepl</a></p><p>输入正确的URL,然后点击Connet按钮</p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200327_repl_connection_success.png?raw=true" alt></p><h3 id="试试WebREPL"><a href="#试试WebREPL" class="headerlink" title="试试WebREPL"></a>试试WebREPL</h3><p>现在，你可以在这个Web页面上欢快的玩耍了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;esp32-micropython-之旅-03-webrepl&quot;&gt;&lt;a href=&quot;#esp32-micropython-之旅-03-webrepl&quot; class=&quot;headerlink&quot; title=&quot;esp32  micropython 之旅 03 webrepl&quot;&gt;&lt;/a&gt;esp32  micropython 之旅 03 webrepl&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/jeffsui/app_image_resource/blob/master/20200327_dianlu.jpg?raw=true&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="micropython" scheme="https://pinghailinfeng.gitee.io/categories/python/micropython/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="esp32" scheme="https://pinghailinfeng.gitee.io/tags/esp32/"/>
    
      <category term="micorpython" scheme="https://pinghailinfeng.gitee.io/tags/micorpython/"/>
    
      <category term="webrepl" scheme="https://pinghailinfeng.gitee.io/tags/webrepl/"/>
    
  </entry>
  
  <entry>
    <title>esp32 micropython using uPycraft IDE</title>
    <link href="https://pinghailinfeng.gitee.io/2020/03/24/esp32-micropython-using-uPyCraft/"/>
    <id>https://pinghailinfeng.gitee.io/2020/03/24/esp32-micropython-using-uPyCraft/</id>
    <published>2020-03-24T15:51:00.000Z</published>
    <updated>2022-08-18T08:03:08.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="esp32-micropython-之旅-02-使用uPycraft-IDE"><a href="#esp32-micropython-之旅-02-使用uPycraft-IDE" class="headerlink" title="esp32 micropython 之旅 02 使用uPycraft IDE"></a>esp32 micropython 之旅 02 使用uPycraft IDE</h1><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200326getting-started-esp32.jpg?raw=true" alt></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上次使用命令方式推送代码烧录到固件,今天介绍下micropython的几个著名的IDE。</p><h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h3><ul><li>Thonny IDE </li><li>uPyCraft IDE.</li></ul><h3 id="使用uPyCraft"><a href="#使用uPyCraft" class="headerlink" title="使用uPyCraft"></a>使用<strong>uPyCraft</strong></h3><h4 id="Step-1-点击这个链接下载uPyCraft-的-exe文件"><a href="#Step-1-点击这个链接下载uPyCraft-的-exe文件" class="headerlink" title="Step 1.  点击这个链接下载uPyCraft 的.exe文件"></a><strong>Step 1.</strong>  点击这个<a href="https://github.com/DFRobot/uPyCraft" target="_blank" rel="noopener">链接</a>下载<strong>uPyCraft</strong> 的.exe文件</h4><h4 id="Step-2-双击安装包-打开安装后偶uPyCraft-可能是这个样子"><a href="#Step-2-双击安装包-打开安装后偶uPyCraft-可能是这个样子" class="headerlink" title="Step 2.   双击安装包,打开安装后偶uPyCraft 可能是这个样子"></a><strong>Step 2.</strong>   双击安装包,打开安装后偶uPyCraft 可能是这个样子</h4><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200326-Installing-uPyCraft-IDE-on-Windows-to-Program-ESP32.png?raw=true" alt></p><h4 id="uPyCraft-核心组件"><a href="#uPyCraft-核心组件" class="headerlink" title="uPyCraft 核心组件"></a>uPyCraft 核心组件</h4><h5 id="1-Folder-and-Files"><a href="#1-Folder-and-Files" class="headerlink" title="1. Folder and Files"></a>1. Folder and Files</h5><ul><li><p>Device ：设备 是esp32还是esp8266 还是microbit</p></li><li><p>SD : 包含文件存储的 SD 卡。很多不开发版都支持SD </p></li><li><p>uPy_lib:  包含micropython 内置模块</p></li><li><p>workSpace : 将保结果存到本地</p></li></ul><h5 id="2-Editor-：编写python代码。"><a href="#2-Editor-：编写python代码。" class="headerlink" title="2. Editor ：编写python代码。"></a>2. Editor ：编写python代码。</h5><p><strong>3. Shell/Terminal:</strong>  终端</p><h5 id="4-Tools-创建新文件，保存和上传文件到开发板上，关闭连接等功能。"><a href="#4-Tools-创建新文件，保存和上传文件到开发板上，关闭连接等功能。" class="headerlink" title="4. Tools:   创建新文件，保存和上传文件到开发板上，关闭连接等功能。"></a><strong>4. Tools:</strong>   创建新文件，保存和上传文件到开发板上，关闭连接等功能。</h5><h3 id="开始烧录最新的-esp32-micropython-固件"><a href="#开始烧录最新的-esp32-micropython-固件" class="headerlink" title="开始烧录最新的 esp32 micropython 固件"></a>开始烧录最新的 esp32 micropython 固件</h3><p>首先,从<a href="https://micropython.org/download#esp32" target="_blank" rel="noopener">这个</a>站点,下载最新的esp32 micropython固件</p><p><strong>Step 2.</strong>,打开 <strong>uPyCraft</strong> ，点击 <strong>*Tools-&gt; Serial**</strong> 选择映射端口. </p><p>  <img src="https://github.com/jeffsui/app_image_resource/blob/master/20200326Flashing-MicroPython-Firmware-on-ESP32-Board.png?raw=true" alt></p><p> <strong>Step 2.</strong> 选择<strong>*Tools-&gt;board*</strong>.这里我们选择esp32</p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200326-using-uPyCrfaft-burn-micropython.png?raw=true" alt></p><p> <strong>Step 3.</strong> 开始烧录</p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200326Flashing-MicroPython-Firmware-on-ESP32.png?raw=true" alt></p><h3 id="使用-uPyCraft-IDE-上传代码到esp32"><a href="#使用-uPyCraft-IDE-上传代码到esp32" class="headerlink" title="使用  uPyCraft IDE 上传代码到esp32"></a>使用  <strong>uPyCraft IDE</strong> 上传代码到esp32</h3><p><strong>Step 1.</strong> 打开 uPyCraft IDE 和 <strong>Tools-&gt;boards</strong>，选择你的主板</p><p><strong>Step 2.</strong> 直接点击 <strong><em>tools-&gt; Serial\</em></strong> 选择COM口.</p><p><strong>Step 3.</strong> 点击Connect 连接IDE和esp主板</p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200326Uploading-the-Code%20into-ESP32.png?raw=true" alt></p><p> <strong>Step 4.</strong> 如果连接正常,则下面的终端区会显示  <strong>&gt;&gt;&gt;</strong> 符号,此时可以执行micropython的命令。</p><p>  <strong>Step 5.</strong>现在点击iNew File,并保存到本地。</p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200326Programming-and-uploading-the-code-into-ESP32-using-uPyCraft-IDE.png?raw=true" alt></p><p><strong>Step 6.</strong> 点击新创建的文件,开始编写小灯程序的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> machine <span class="keyword">import</span> Pin</span><br><span class="line">led = Pin(<span class="number">2</span>, Pin.OUT)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    led.value(<span class="keyword">not</span> led.value())</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>​    </p><p> <strong>Step 7.</strong> 点击 <strong><em>Download and run\</em></strong> 按钮</p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200326uPyCraft-IDE-blink-script-to-board.png?raw=true" alt></p><p> <strong>Step 8.</strong> 重新测试代码是否正确,点击 <strong><em>En/Reset\</em></strong> 按钮。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>不知道什么原因,win7操作系统 uPycraft 就是识别不了 我的板子,换成win10 一次性搞定。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;esp32-micropython-之旅-02-使用uPycraft-IDE&quot;&gt;&lt;a href=&quot;#esp32-micropython-之旅-02-使用uPycraft-IDE&quot; class=&quot;headerlink&quot; title=&quot;esp32 micropython 之旅 02 使用uPycraft IDE&quot;&gt;&lt;/a&gt;esp32 micropython 之旅 02 使用uPycraft IDE&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/jeffsui/app_image_resource/blob/master/20200326getting-started-esp32.jpg?raw=true&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="micropython" scheme="https://pinghailinfeng.gitee.io/categories/python/micropython/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="micropython" scheme="https://pinghailinfeng.gitee.io/tags/micropython/"/>
    
      <category term="esp32" scheme="https://pinghailinfeng.gitee.io/tags/esp32/"/>
    
      <category term="uPycraft" scheme="https://pinghailinfeng.gitee.io/tags/uPycraft/"/>
    
  </entry>
  
  <entry>
    <title>esp32 micropython tutorial 01 environment setup</title>
    <link href="https://pinghailinfeng.gitee.io/2020/03/23/esp32-micropython-tutorial-01-environment-setup/"/>
    <id>https://pinghailinfeng.gitee.io/2020/03/23/esp32-micropython-tutorial-01-environment-setup/</id>
    <published>2020-03-23T15:27:29.000Z</published>
    <updated>2022-08-18T08:03:08.611Z</updated>
    
    <content type="html"><![CDATA[<h1 id="esp32-micropython-之旅-01-环境搭建"><a href="#esp32-micropython-之旅-01-环境搭建" class="headerlink" title="esp32  micropython 之旅 01 环境搭建"></a>esp32  micropython 之旅 01 环境搭建</h1><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/ardunio_logo.jpg?raw=true" alt></p><a id="more"></a><p>今天开始另一个系列的文章,有关嵌入式的专题,希望大家能支持我！</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><table><thead><tr><th>环境</th><th>版本</th></tr></thead><tbody><tr><td>操作系统</td><td>win7 64位 旗舰版</td></tr><tr><td>micropython</td><td>v1.12</td></tr><tr><td>esp32</td><td>uno D1 R32</td></tr><tr><td>ardunio ide</td><td>v1.8.12</td></tr></tbody></table><h2 id="开箱时刻"><a href="#开箱时刻" class="headerlink" title="开箱时刻"></a>开箱时刻</h2><p>某宝买了一个不到30块钱的板子,支持蓝牙、WIFI,4m缓存,直接开搞</p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/b3c9d52def57969321ed5dad73c169a.jpg?raw=true" alt></p><p>开箱通电</p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/6fd65f0e334bf5b843ec2a3367e0b7c.jpg?raw=true" alt></p><p>安装驱动部分我一篇再说,下面是具体刷<code>micropython</code>固件过程</p><h2 id="安装-esptool"><a href="#安装-esptool" class="headerlink" title="安装 esptool"></a>安装 esptool</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install esptool</span><br></pre></td></tr></table></figure><h2 id="擦除固件"><a href="#擦除固件" class="headerlink" title="擦除固件"></a>擦除固件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">esptool.py --chip esp32 --port /dev/ttyUSB0 erase_flash</span><br></pre></td></tr></table></figure><h2 id="刷micropython固件"><a href="#刷micropython固件" class="headerlink" title="刷micropython固件"></a>刷micropython固件</h2><p><a href="https://micropython.org/download#esp32" target="_blank" rel="noopener">固件下载地址</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">esptool.py --port COM13 write_flash 0x1000 esp32-idf3-20200323-v1.12-270-g38ccb4c64.bin</span><br></pre></td></tr></table></figure><h2 id="编写小灯闪亮程序"><a href="#编写小灯闪亮程序" class="headerlink" title="编写小灯闪亮程序"></a>编写小灯闪亮程序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> machine <span class="keyword">import</span> Pin</span><br><span class="line">p0 = Pin(<span class="number">2</span>,Pin.OUT)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p0.value(<span class="number">0</span>)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    p0.value(<span class="number">1</span>)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><h2 id="通过ampy命令推送到uno中"><a href="#通过ampy命令推送到uno中" class="headerlink" title="通过ampy命令推送到uno中"></a>通过ampy命令推送到uno中</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install adafruit-ampy</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ampy --port COM13 put blink.py</span><br></pre></td></tr></table></figure><h2 id="查看固件中的文件"><a href="#查看固件中的文件" class="headerlink" title="查看固件中的文件"></a>查看固件中的文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Type "help()" for more information.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; import os</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; os.listdir()</span></span><br><span class="line">['boot.py', 'blink.py']</span><br></pre></td></tr></table></figure><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.remove('blink.py')</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>引脚问题还没解决,小灯正常应该可以点亮,以后有得玩了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;esp32-micropython-之旅-01-环境搭建&quot;&gt;&lt;a href=&quot;#esp32-micropython-之旅-01-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;esp32  micropython 之旅 01 环境搭建&quot;&gt;&lt;/a&gt;esp32  micropython 之旅 01 环境搭建&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/jeffsui/app_image_resource/blob/master/ardunio_logo.jpg?raw=true&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="micropython" scheme="https://pinghailinfeng.gitee.io/categories/micropython/"/>
    
      <category term="esp32" scheme="https://pinghailinfeng.gitee.io/categories/micropython/esp32/"/>
    
    
      <category term="micropython" scheme="https://pinghailinfeng.gitee.io/tags/micropython/"/>
    
      <category term="esp32" scheme="https://pinghailinfeng.gitee.io/tags/esp32/"/>
    
      <category term="esptool" scheme="https://pinghailinfeng.gitee.io/tags/esptool/"/>
    
  </entry>
  
  <entry>
    <title>python standard_library fileinput</title>
    <link href="https://pinghailinfeng.gitee.io/2020/03/22/python-standard-library-fileinput/"/>
    <id>https://pinghailinfeng.gitee.io/2020/03/22/python-standard-library-fileinput/</id>
    <published>2020-03-22T15:55:23.000Z</published>
    <updated>2022-08-18T08:03:08.611Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-标准库-fileinput"><a href="#Python-标准库-fileinput" class="headerlink" title="Python 标准库 fileinput"></a>Python 标准库 fileinput</h1><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200323_input-output.jpg?raw=true" alt></p><a id="more"></a><p><strong>源代码:</strong> <a href="https://github.com/python/cpython/tree/3.8/Lib/fileinput.py" target="_blank" rel="noopener">Lib/fileinput.py</a></p><hr><p>此模块实现了一个辅助类和一些函数用来快速编写访问标准输入或文件列表的循环。 如果你只想要读写一个文件请参阅 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#open" target="_blank" rel="noopener"><code>open()</code></a>。</p><p>典型用法为:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fileinput.input():</span><br><span class="line">    process(line)</span><br></pre></td></tr></table></figure><p>此程序会迭代 <code>sys.argv[1:]</code> 中列出的所有文件内的行，如果列表为空则会使用 <code>sys.stdin</code>。 如果有一个文件名为 <code>&#39;-&#39;</code>，它也会被替换为 <code>sys.stdin</code> 并且可选参数 <em>mode</em> 和 <em>openhook</em> 会被忽略。 要指定替代文件列表，请将其作为第一个参数传给 <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.input" target="_blank" rel="noopener"><code>input()</code></a>。 也允许使用单个文件。</p><p>所有文件都默认以文本模式打开，但你可以通过在调用 <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.input" target="_blank" rel="noopener"><code>input()</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.FileInput" target="_blank" rel="noopener"><code>FileInput</code></a> 时指定 <em>mode</em> 形参来重载此行为。 如果在打开或读取文件时发生了 I/O 错误，将会引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#OSError" target="_blank" rel="noopener"><code>OSError</code></a>。</p><p><em>在 3.3 版更改:</em> 原来会引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#IOError" target="_blank" rel="noopener"><code>IOError</code></a>；现在它是 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#OSError" target="_blank" rel="noopener"><code>OSError</code></a> 的别名。</p><p>如果 <code>sys.stdin</code> 被使用超过一次，则第二次之后的使用将不返回任何行，除非是被交互式的使用，或都是被显式地重置 (例如使用 <code>sys.stdin.seek(0)</code>)。</p><p>空文件打开后将立即被关闭；它们在文件列表中会被注意到的唯一情况只有当最后打开的文件为空的时候。</p><p>反回的行不会对换行符做任何处理，这意味着文件中的最后一行可能不带换行符。</p><p>想要控制文件的打开方式，你可以通过将 <em>openhook</em> 形参传给 <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.input" target="_blank" rel="noopener"><code>fileinput.input()</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.FileInput" target="_blank" rel="noopener"><code>FileInput()</code></a> 来提供一个打开钩子。 此钩子必须为一个函数，它接受两个参数，<em>filename</em> 和 <em>mode</em>，并返回一个以相应模式打开的文件类对象。 此模块已经提供了两个有用的钩子。</p><p>以下函数是此模块的初始接口：</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li><p><code>fileinput.input</code>(<em>files=None</em>, <em>inplace=False</em>, <em>backup=’’</em>, <em>**, </em>mode=’r’<em>, </em>openhook=None*)</p><p>创建一个 <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.FileInput" target="_blank" rel="noopener"><code>FileInput</code></a> 类的实例。 该实例将被用作此模块中函数的全局状态，并且还将在迭代期间被返回使用。 此函数的形参将被继续传递给 <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.FileInput" target="_blank" rel="noopener"><code>FileInput</code></a> 类的构造器。</p><p><a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.FileInput" target="_blank" rel="noopener"><code>FileInput</code></a> 实例可以在 <a href="https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#with" target="_blank" rel="noopener"><code>with</code></a> 语句中被用作上下文管理器。 在这个例子中，<em>input</em> 在 <code>with</code> 语句结束后将会被关闭，即使发生了异常也是如此:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">with fileinput.input(files=(&apos;spam.txt&apos;, &apos;eggs.txt&apos;)) as f:</span><br><span class="line">    for line in f:</span><br><span class="line">        process(line)</span><br></pre></td></tr></table></figure><p><em>在 3.2 版更改:</em> 可以被用作上下文管理器。</p><p><em>在 3.8 版更改:</em> 关键字形参 <em>mode</em> 和 <em>openhook</em> 现在是仅限关键字形参。</p></li></ul><p>下列函数会使用 <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.input" target="_blank" rel="noopener"><code>fileinput.input()</code></a> 所创建的全局状态；如果没有活动的状态，则会引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#RuntimeError" target="_blank" rel="noopener"><code>RuntimeError</code></a>。</p><ul><li><p><code>fileinput.filename</code>()</p><p>返回当前被读取的文件名。 在第一行被读取之前，返回 <code>None</code>。</p></li><li><p><code>fileinput.fileno</code>()</p><p>返回以整数表示的当前文件“文件描述符”。 当未打开文件时（处在第一行和文件之间），返回 <code>-1</code>。</p></li><li><p><code>fileinput.lineno</code>()</p><p>返回已被读取的累计行号。 在第一行被读取之前，返回 <code>0</code>。 在最后一个文件的最后一行被读取之后，返回该行的行号。</p></li><li><p><code>fileinput.filelineno</code>()</p><p>返回当前文件中的行号。 在第一行被读取之前，返回 <code>0</code>。 在最后一个文件的最后一行被读取之后，返回此文件中该行的行号。</p></li><li><p><code>fileinput.isfirstline</code>()</p><p>如果刚读取的行是其所在文件的第一行则返回 <code>True</code>，否则返回 <code>False</code>。</p></li><li><p><code>fileinput.isstdin</code>()</p><p>如果最后读取的行来自 <code>sys.stdin</code> 则返回 <code>True</code>，否则返回 <code>False</code>。</p></li><li><p><code>fileinput.nextfile</code>()</p><p>关闭当前文件以使下次迭代将从下一个文件（如果存在）读取第一行；不是从该文件读取的行将不会被计入累计行数。 直到下一个文件的第一行被读取之后文件名才会改变。 在第一行被读取之前，此函数将不会生效；它不能被用来跳过第一个文件。 在最后一个文件的最后一行被读取之后，此函数将不再生效。</p></li><li><p><code>fileinput.close</code>()</p><p>关闭序列。</p></li></ul><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>此模块所提供的实现了序列行为的类同样也可用于子类化：</p><ul><li><p><em>class</em> <code>fileinput.FileInput</code>(<em>files=None</em>, <em>inplace=False</em>, <em>backup=’’</em>, <em>**, </em>mode=’r’<em>, </em>openhook=None*)</p><p>类 <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.FileInput" target="_blank" rel="noopener"><code>FileInput</code></a> 是一个实现；它的方法 <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.filename" target="_blank" rel="noopener"><code>filename()</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.fileno" target="_blank" rel="noopener"><code>fileno()</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.lineno" target="_blank" rel="noopener"><code>lineno()</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.filelineno" target="_blank" rel="noopener"><code>filelineno()</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.isfirstline" target="_blank" rel="noopener"><code>isfirstline()</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.isstdin" target="_blank" rel="noopener"><code>isstdin()</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.nextfile" target="_blank" rel="noopener"><code>nextfile()</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.close" target="_blank" rel="noopener"><code>close()</code></a> 对应于此模块中具有相同名称的函数。 此外它还有一个 <a href="https://docs.python.org/zh-cn/3.8/library/io.html#io.TextIOBase.readline" target="_blank" rel="noopener"><code>readline()</code></a> 方法可返回下一个输入行，以及一个 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__getitem__" target="_blank" rel="noopener"><code>__getitem__()</code></a> 方法，该方法实现了序列行为。 这种序列必须以严格的序列顺序来读写；随机读写和 <a href="https://docs.python.org/zh-cn/3.8/library/io.html#io.TextIOBase.readline" target="_blank" rel="noopener"><code>readline()</code></a> 不可以被混用。</p><p>通过 <em>mode</em> 你可以指定要传给 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#open" target="_blank" rel="noopener"><code>open()</code></a> 的文件模式。 它必须为 <code>&#39;r&#39;</code>, <code>&#39;rU&#39;</code>, <code>&#39;U&#39;</code> 和 <code>&#39;rb&#39;</code> 中的一个。</p><p><em>openhook</em> 如果给出则必须为一个函数，它接受两个参数 <em>filename</em> 和 <em>mode</em>，并相应地返回一个打开的文件类对象。 你不能同时使用 <em>inplace</em> 和 <em>openhook</em>。</p><p><a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.FileInput" target="_blank" rel="noopener"><code>FileInput</code></a> 实例可以在 <a href="https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#with" target="_blank" rel="noopener"><code>with</code></a> 语句中被用作上下文管理器。 在这个例子中，<em>input</em> 在 <code>with</code> 语句结束后将会被关闭，即使发生了异常也是如此:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> FileInput(files=(<span class="string">'spam.txt'</span>, <span class="string">'eggs.txt'</span>)) <span class="keyword">as</span> input:</span><br><span class="line">    process(input)</span><br></pre></td></tr></table></figure><p><em>在 3.2 版更改:</em> 可以被用作上下文管理器。</p><p><em>3.4 版后已移除:</em> <code>&#39;rU&#39;</code> 和 <code>&#39;U&#39;</code> 模式。</p><p><em>3.8 版后已移除:</em> 对 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__getitem__" target="_blank" rel="noopener"><code>__getitem__()</code></a> 方法的支持已弃用。</p><p><em>在 3.8 版更改:</em> 关键字形参 <em>mode</em> 和 <em>openhook</em> 现在是仅限关键字形参。</p></li></ul><p><strong>可选的原地过滤:</strong> 如果传递了关键字参数 <code>inplace=True</code> 给 <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.input" target="_blank" rel="noopener"><code>fileinput.input()</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.FileInput" target="_blank" rel="noopener"><code>FileInput</code></a> 构造器，则文件会被移至备份文件并将标准输出定向到输入文件（如果已存在与备份文件同名的文件，它将被静默地替换）。 这使得编写一个能够原地重写其输入文件的过滤器成为可能。 如果给出了 <em>backup</em> 形参 (通常形式为 <code>backup=&#39;.&lt;some extension&gt;&#39;</code>)，它将指定备份文件的扩展名，并且备份文件会被保留；默认情况下扩展名为 <code>&#39;.bak&#39;</code> 并且它会在输出文件关闭时被删除。 在读取标准输入时原地过滤会被禁用。</p><p>此模块提供了以下两种打开文件钩子：</p><ul><li><p><code>fileinput.hook_compressed</code>(<em>filename</em>, <em>mode</em>)</p><p>使用 <a href="https://docs.python.org/zh-cn/3.8/library/gzip.html#module-gzip" target="_blank" rel="noopener"><code>gzip</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/library/bz2.html#module-bz2" target="_blank" rel="noopener"><code>bz2</code></a> 模块透明地打开 gzip 和 bzip2 压缩的文件（通过扩展名 <code>&#39;.gz&#39;</code> 和 <code>&#39;.bz2&#39;</code> 来识别）。 如果文件扩展名不是 <code>&#39;.gz&#39;</code> 或 <code>&#39;.bz2&#39;</code>，文件会以正常方式打开（即使用 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#open" target="_blank" rel="noopener"><code>open()</code></a> 并且不带任何解压操作）。使用示例: <code>fi = fileinput.FileInput(openhook=fileinput.hook_compressed)</code></p></li><li><p><code>fileinput.hook_encoded</code>(<em>encoding</em>, <em>errors=None</em>)</p><p>返回一个通过 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#open" target="_blank" rel="noopener"><code>open()</code></a> 打开每个文件的钩子，使用给定的 <em>encoding</em> 和 <em>errors</em> 来读取文件。使用示例: <code>fi = fileinput.FileInput(openhook=fileinput.hook_encoded(&quot;utf-8&quot;, &quot;surrogateescape&quot;))</code><em>在 3.6 版更改:</em> 添加了可选的 <em>errors</em> 形参。</p></li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><em>利用fileinput及re做日志分析: 提取所有含日期的行</em></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#--样本文件--</span></span><br><span class="line">aaa</span><br><span class="line"><span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">13</span>:<span class="number">45</span>:<span class="number">30</span>  Error: **** Due to System Disk spacke <span class="keyword">not</span> enough...</span><br><span class="line">bbb</span><br><span class="line"><span class="number">1970</span><span class="number">-01</span><span class="number">-02</span> <span class="number">10</span>:<span class="number">20</span>:<span class="number">30</span>  Error: **** Due to System Out of Memory...</span><br><span class="line">ccc</span><br><span class="line"> </span><br><span class="line"><span class="comment">#---测试脚本---</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line">pattern = <span class="string">'d&#123;4&#125;-d&#123;2&#125;-d&#123;2&#125; d&#123;2&#125;:d&#123;2&#125;:d&#123;2&#125;'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fileinput.input(<span class="string">'error.log'</span>,backup=<span class="string">'.bak'</span>,inplace=<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> re.search(pattern,line):</span><br><span class="line">        sys.stdout.write(=&gt; )</span><br><span class="line">        sys.stdout.write(line)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#---测试结果---</span></span><br><span class="line">=&gt; 1970-01-01 13:45:30  Error: **** Due to System Disk spacke not enough...</span><br><span class="line">=&gt; 1970-01-02 10:20:30  Error: **** Due to System Out of Memory...</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python-标准库-fileinput&quot;&gt;&lt;a href=&quot;#Python-标准库-fileinput&quot; class=&quot;headerlink&quot; title=&quot;Python 标准库 fileinput&quot;&gt;&lt;/a&gt;Python 标准库 fileinput&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/jeffsui/app_image_resource/blob/master/20200323_input-output.jpg?raw=true&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/categories/python/standard-library/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="fileinput" scheme="https://pinghailinfeng.gitee.io/tags/fileinput/"/>
    
  </entry>
  
</feed>
