<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>凭海临风的IT江湖</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pinghailinfeng.gitee.io/"/>
  <updated>2019-05-28T09:26:35.995Z</updated>
  <id>https://pinghailinfeng.gitee.io/</id>
  
  <author>
    <name>Jeff Sui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python操作sqlite3</title>
    <link href="https://pinghailinfeng.gitee.io/2019/05/28/python%E6%93%8D%E4%BD%9Csqlite3/"/>
    <id>https://pinghailinfeng.gitee.io/2019/05/28/python操作sqlite3/</id>
    <published>2019-05-28T09:24:42.000Z</published>
    <updated>2019-05-28T09:26:35.995Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sqlite3-简介"><a href="#sqlite3-简介" class="headerlink" title="sqlite3 简介"></a>sqlite3 简介</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">SQLite数据库是一款非常小巧的嵌入式开源数据库软件，也就是说</span><br><span class="line">没有独立的维护进程，所有的维护都来自于程序本身。</span><br><span class="line">在python中，使用sqlite3创建数据库的连接，当我们指定的数据库文件不存在的时候</span><br><span class="line">连接对象会自动创建数据库文件；如果数据库文件已经存在，则连接对象不会再创建</span><br><span class="line">数据库文件，而是直接打开该数据库文件。</span><br><span class="line">    连接对象可以是硬盘上面的数据库文件，也可以是建立在内存中的，在内存中的数据库</span><br><span class="line">    执行完任何操作后，都不需要提交事务的(commit)</span><br><span class="line"></span><br><span class="line">    创建在硬盘上面： conn = sqlite3.connect(&apos;c:\\test\\test.db&apos;)</span><br><span class="line">    创建在内存上面： conn = sqlite3.connect(&apos;&quot;memory:&apos;)</span><br><span class="line"></span><br><span class="line">    下面我们一硬盘上面创建数据库文件为例来具体说明：</span><br><span class="line">    conn = sqlite3.connect(&apos;c:\\test\\hongten.db&apos;)</span><br><span class="line">    其中conn对象是数据库链接对象，而对于数据库链接对象来说，具有以下操作：</span><br><span class="line"></span><br><span class="line">        commit()            --事务提交</span><br><span class="line">        rollback()          --事务回滚</span><br><span class="line">        close()             --关闭一个数据库链接</span><br><span class="line">        cursor()            --创建一个游标</span><br><span class="line"></span><br><span class="line">    cu = conn.cursor()</span><br><span class="line">    这样我们就创建了一个游标对象：cu</span><br><span class="line">    在sqlite3中，所有sql语句的执行都要在游标对象的参与下完成</span><br><span class="line">    对于游标对象cu，具有以下具体操作：</span><br><span class="line"></span><br><span class="line">        execute()           --执行一条sql语句</span><br><span class="line">        executemany()       --执行多条sql语句</span><br><span class="line">        close()             --游标关闭</span><br><span class="line">        fetchone()          --从结果中取出一条记录</span><br><span class="line">        fetchmany()         --从结果中取出多条记录</span><br><span class="line">        fetchall()          --从结果中取出所有记录</span><br><span class="line">        scroll()            --游标滚动</span><br></pre></td></tr></table></figure><h2 id="sqlite3常用操作"><a href="#sqlite3常用操作" class="headerlink" title="sqlite3常用操作"></a>sqlite3常用操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Date    : 2019-03-14 16:10:24</span><br><span class="line"># @Author  : Jeff.Sui (215687736@qq.com)</span><br><span class="line"># @Link    : http://example.org</span><br><span class="line"># @Version : $Id$</span><br><span class="line">import sqlite3</span><br><span class="line"></span><br><span class="line">con = sqlite3.connect(&quot;:memory:&quot;)</span><br><span class="line"></span><br><span class="line">c = con.cursor()</span><br><span class="line"></span><br><span class="line"># Create table</span><br><span class="line">c.execute(&apos;&apos;&apos;CREATE TABLE stocks</span><br><span class="line">             (date text, trans text, symbol text, qty real, price real)&apos;&apos;&apos;)</span><br><span class="line"></span><br><span class="line"># Insert a row of data</span><br><span class="line">c.execute(&quot;INSERT INTO stocks VALUES (?,?,?,?,?)&quot;, (&apos;2006-03-27&apos;,&apos;BUY&apos;,&apos;RHAT&apos;,100,60.14))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Larger example that inserts many records at a time</span><br><span class="line">purchases = [(&apos;2006-03-28&apos;, &apos;BUY&apos;, &apos;IBM&apos;, 1000, 45.00),</span><br><span class="line">             (&apos;2006-04-05&apos;, &apos;BUY&apos;, &apos;MSFT&apos;, 1000, 72.00),</span><br><span class="line">             (&apos;2006-04-06&apos;, &apos;SELL&apos;, &apos;IBM&apos;, 500, 53.00),</span><br><span class="line">             (&apos;2006-04-07&apos;, &apos;SELL&apos;, &apos;MSFT&apos;, 500, 74.00),</span><br><span class="line">             (&apos;2006-04-08&apos;, &apos;SELL&apos;, &apos;IBM&apos;, 500, 54.00),</span><br><span class="line">             (&apos;2006-04-09&apos;, &apos;SELL&apos;, &apos;MSFT&apos;, 500, 73.00),</span><br><span class="line">             (&apos;2006-04-10&apos;, &apos;SELL&apos;, &apos;MSFT&apos;, 500, 75.00),</span><br><span class="line">             (&apos;2006-04-12&apos;, &apos;SELL&apos;, &apos;IBM&apos;, 500, 55.00),</span><br><span class="line">            ]</span><br><span class="line">c.executemany(&apos;INSERT INTO stocks VALUES (?,?,?,?,?)&apos;, purchases)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Save (commit) the changes</span><br><span class="line">con.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Do this instead</span><br><span class="line">t = (&apos;RHAT&apos;,)</span><br><span class="line">c.execute(&apos;SELECT * FROM stocks WHERE symbol=?&apos;, t)</span><br><span class="line">#print(c.fetchone())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#for row in c.execute(&apos;SELECT * FROM stocks ORDER BY price&apos;):</span><br><span class="line">#    print(row)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">#for row in c.execute(&apos;SELECT * FROM stocks LIMIT 5 OFFSET 0&apos;):</span><br><span class="line">#    print(row)</span><br><span class="line">for row in c.execute(&apos;SELECT * FROM stocks LIMIT 5 OFFSET 1&apos;):</span><br><span class="line">    print(row)</span><br><span class="line">#Select Top N * From</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ====================================================================================</span><br><span class="line"># SQLite 日期 &amp; 时间</span><br><span class="line"># ====================================================================================</span><br><span class="line">print(&apos;=&apos;*30)</span><br><span class="line">print(&apos;SQLite 日期 &amp; 时间&apos;)</span><br><span class="line">print(&apos;=&apos;*30)</span><br><span class="line"></span><br><span class="line"># 计算当前日期</span><br><span class="line">c.execute(&quot;SELECT date(&apos;now&apos;)&quot;)</span><br><span class="line">print(c.fetchone())</span><br><span class="line"></span><br><span class="line"># 计算当前月份的最后一天：</span><br><span class="line">c.execute(&quot;SELECT date(&apos;now&apos;,&apos;start of month&apos;,&apos;+1 month&apos;,&apos;-1 day&apos;);&quot;)</span><br><span class="line">print(c.fetchone())</span><br><span class="line"></span><br><span class="line"># 计算给定 UNIX 时间戳 1092941466 的日期和时间：</span><br><span class="line">c.execute(&quot;SELECT datetime(1092941466, &apos;unixepoch&apos;);&quot;)</span><br><span class="line">print(c.fetchone())</span><br><span class="line"></span><br><span class="line"># 计算给定 UNIX 时间戳 1092941466 相对本地时区的日期和时间：</span><br><span class="line">c.execute(&quot;SELECT datetime(1092941466, &apos;unixepoch&apos;, &apos;localtime&apos;);&quot;)</span><br><span class="line">print(c.fetchone())</span><br><span class="line"></span><br><span class="line"># 计算当前的 UNIX 时间戳：</span><br><span class="line">c.execute(&quot;SELECT datetime(1092941466, &apos;unixepoch&apos;, &apos;localtime&apos;);&quot;)</span><br><span class="line">print(c.fetchone())</span><br><span class="line"></span><br><span class="line"># 计算美国&quot;独立宣言&quot;签署以来的天数：</span><br><span class="line">c.execute(&quot;SELECT julianday(&apos;now&apos;) - julianday(&apos;1776-07-04&apos;);&quot;)</span><br><span class="line">print(c.fetchone())</span><br><span class="line"></span><br><span class="line"># 计算从 2004 年某一特定时刻以来的秒数：</span><br><span class="line">c.execute(&quot;SELECT strftime(&apos;%s&apos;,&apos;now&apos;) - strftime(&apos;%s&apos;,&apos;2004-01-01 02:34:56&apos;);&quot;)</span><br><span class="line">print(c.fetchone())</span><br><span class="line"></span><br><span class="line"># 计算当年 10 月的第一个星期二的日期：</span><br><span class="line">c.execute(&quot;SELECT date(&apos;now&apos;,&apos;start of year&apos;,&apos;+9 months&apos;,&apos;weekday 2&apos;);&quot;)</span><br><span class="line">print(c.fetchone())</span><br><span class="line"></span><br><span class="line"># 计算从 UNIX 纪元算起的以秒为单位的时间（类似 strftime(&apos;%s&apos;,&apos;now&apos;) ，不同的是这里有包括小数部分）：</span><br><span class="line">c.execute(&quot;SELECT (julianday(&apos;now&apos;) - 2440587.5)*86400.0;&quot;)</span><br><span class="line">print(c.fetchone())</span><br><span class="line"></span><br><span class="line"># 在 UTC 与本地时间值之间进行转换，当格式化日期时，使用 utc 或 localtime 修饰符，如下所示：</span><br><span class="line">c.execute(&quot;SELECT time(&apos;12:00&apos;, &apos;localtime&apos;);&quot;)</span><br><span class="line">print(c.fetchone())</span><br><span class="line"></span><br><span class="line"># </span><br><span class="line">c.execute(&quot;SELECT time(&apos;12:00&apos;, &apos;utc&apos;);&quot;)</span><br><span class="line">print(c.fetchone())</span><br><span class="line"></span><br><span class="line">con.close()</span><br><span class="line"></span><br><span class="line"># ====================================================================================</span><br><span class="line"># SQLite 常用函数</span><br><span class="line"># ====================================================================================</span><br><span class="line"></span><br><span class="line">print(&apos;=&apos;*30)</span><br><span class="line">print(&apos;SQLite 常用函数&apos;)</span><br><span class="line">print(&apos;=&apos;*30)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">con = sqlite3.connect(&quot;:memory:&quot;)</span><br><span class="line"></span><br><span class="line">c = con.cursor()</span><br><span class="line"></span><br><span class="line"># Create table</span><br><span class="line">c.execute(&apos;&apos;&apos;CREATE TABLE COMPANY</span><br><span class="line">            (ID integer, NAME text, AGE integer, ADDRESS text, SALARY real)&apos;&apos;&apos;)</span><br><span class="line"></span><br><span class="line"># Larger example that inserts many records at a time</span><br><span class="line">purchases = [(1,&apos;Paul&apos;,32,&apos;California&apos;,20000.0),</span><br><span class="line">             (2,&apos;Allen&apos;,25,&apos;Texas&apos;,15000.0),</span><br><span class="line">             (3,&apos;Teddy&apos;,23,&apos;Norway&apos;,20000.0),</span><br><span class="line">             (4,&apos;Mark&apos;,25,&apos;Rich-Mond&apos;,65000.0),</span><br><span class="line">             (5,&apos;David&apos;,27,&apos;Texas&apos;,85000.0),</span><br><span class="line">             (6,&apos;Kim&apos;,22,&apos;South-Hall&apos;,45000.0),</span><br><span class="line">             (7,&apos;James&apos;,24,&apos;Houston&apos;,10000.0)]</span><br><span class="line">c.executemany(&apos;INSERT INTO COMPANY VALUES (?,?,?,?,?)&apos;, purchases)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Save (commit) the changes</span><br><span class="line">con.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 返回数据库表最后 n 行记录</span><br><span class="line"># 先计算一个数据库表中的行数</span><br><span class="line">c.execute(&quot;SELECT count(*) FROM COMPANY;&quot;)</span><br><span class="line">last = c.fetchone()[0]</span><br><span class="line">n = 5</span><br><span class="line">c.execute(&quot;SELECT * FROM COMPANY LIMIT ? OFFSET ?;&quot;, (n, last-n))</span><br><span class="line">for row in c:</span><br><span class="line">    print(row)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 计算一个数据库表中的行数</span><br><span class="line">c.execute(&quot;SELECT count(*) FROM COMPANY;&quot;)</span><br><span class="line">print(c.fetchone())</span><br><span class="line"></span><br><span class="line"># 选择某列的最大值</span><br><span class="line">c.execute(&quot;SELECT max(salary) FROM COMPANY;&quot;)</span><br><span class="line">print(c.fetchone())</span><br><span class="line"></span><br><span class="line"># 选择某列的最小值</span><br><span class="line">c.execute(&quot;SELECT min(salary) FROM COMPANY;&quot;)</span><br><span class="line">print(c.fetchone())</span><br><span class="line"></span><br><span class="line"># 计算某列的平均值</span><br><span class="line">c.execute(&quot;SELECT avg(salary) FROM COMPANY;&quot;)</span><br><span class="line">print(c.fetchone())</span><br><span class="line"></span><br><span class="line"># 为一个数值列计算总和</span><br><span class="line">c.execute(&quot;SELECT sum(salary) FROM COMPANY;&quot;)</span><br><span class="line">print(c.fetchone())</span><br><span class="line"></span><br><span class="line"># 返回一个介于 -9223372036854775808 和 +9223372036854775807 之间的伪随机整数</span><br><span class="line">c.execute(&quot;SELECT random() AS Random;&quot;)</span><br><span class="line">print(c.fetchone())</span><br><span class="line"></span><br><span class="line"># 返回数值参数的绝对值</span><br><span class="line">c.execute(&quot;SELECT abs(5), abs(-15), abs(NULL), abs(0), abs(&apos;ABC&apos;);&quot;)</span><br><span class="line">print(c.fetchone())</span><br><span class="line"></span><br><span class="line"># 把字符串转换为大写字母</span><br><span class="line">c.execute(&quot;SELECT upper(name) FROM COMPANY;&quot;)</span><br><span class="line">print(c.fetchone())</span><br><span class="line"></span><br><span class="line"># 把字符串转换为小写字母</span><br><span class="line">c.execute(&quot;SELECT lower(name) FROM COMPANY;&quot;)</span><br><span class="line">print(c.fetchone())</span><br><span class="line"></span><br><span class="line"># 返回字符串的长度</span><br><span class="line">c.execute(&quot;SELECT name, length(name) FROM COMPANY;&quot;)</span><br><span class="line">print(c.fetchone())</span><br><span class="line"></span><br><span class="line"># 返回 SQLite 库的版本</span><br><span class="line">c.execute(&quot;SELECT sqlite_version() AS &apos;SQLite Version&apos;;&quot;)</span><br><span class="line">print(c.fetchone())</span><br><span class="line"></span><br><span class="line"># </span><br><span class="line">c.execute(&quot;SELECT CURRENT_TIMESTAMP;&quot;)</span><br><span class="line">print(c.fetchone())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;sqlite3-简介&quot;&gt;&lt;a href=&quot;#sqlite3-简介&quot; class=&quot;headerlink&quot; title=&quot;sqlite3 简介&quot;&gt;&lt;/a&gt;sqlite3 简介&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="sqlite3" scheme="https://pinghailinfeng.gitee.io/tags/sqlite3/"/>
    
  </entry>
  
  <entry>
    <title>selenium元素操作封装</title>
    <link href="https://pinghailinfeng.gitee.io/2019/05/28/selenium%E5%85%83%E7%B4%A0%E6%93%8D%E4%BD%9C%E5%B0%81%E8%A3%85/"/>
    <id>https://pinghailinfeng.gitee.io/2019/05/28/selenium元素操作封装/</id>
    <published>2019-05-28T09:14:18.000Z</published>
    <updated>2019-05-28T09:17:42.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="selenium-常用的元素定位操作"><a href="#selenium-常用的元素定位操作" class="headerlink" title="selenium 常用的元素定位操作"></a>selenium 常用的元素定位操作</h1><h2 id="Selenium提供了8种定位方式。"><a href="#Selenium提供了8种定位方式。" class="headerlink" title="Selenium提供了8种定位方式。"></a>Selenium提供了8种定位方式。</h2><ul><li>id</li><li>name</li><li>class name</li><li>tag name</li><li>link text</li><li>partial link text</li><li>xpath</li><li>css selector</li></ul><h2 id="这8种定位方式在Python-selenium中所对应的方法为："><a href="#这8种定位方式在Python-selenium中所对应的方法为：" class="headerlink" title="这8种定位方式在Python selenium中所对应的方法为："></a>这8种定位方式在Python selenium中所对应的方法为：</h2><ul><li>find_element_by_id()</li><li>find_element_by_name()</li><li>find_element_by_class_name()</li><li>find_element_by_tag_name()</li><li>find_element_by_link_text()</li><li>find_element_by_partial_link_text()</li><li>find_element_by_xpath()</li><li>find_element_by_css_selector()</li></ul><h2 id="常用元素定位封装"><a href="#常用元素定位封装" class="headerlink" title="常用元素定位封装"></a>常用元素定位封装</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_locate_element</span><span class="params">(self, selector)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    to locate element by selector</span></span><br><span class="line"><span class="string">    :arg</span></span><br><span class="line"><span class="string">    selector should be passed by an example with "i,xxx"</span></span><br><span class="line"><span class="string">    "x,//*[@id='langs']/button"</span></span><br><span class="line"><span class="string">    :returns</span></span><br><span class="line"><span class="string">    DOM element</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> self.by_char <span class="keyword">not</span> <span class="keyword">in</span> selector:</span><br><span class="line">        <span class="keyword">return</span> self.base_driver.find_element_by_id(selector)</span><br><span class="line"></span><br><span class="line">    selector_by = selector.split(self.by_char)[<span class="number">0</span>].strip()</span><br><span class="line">    selector_value = selector.split(self.by_char)[<span class="number">1</span>].strip()</span><br><span class="line">    <span class="keyword">if</span> selector_by == <span class="string">"i"</span> <span class="keyword">or</span> selector_by == <span class="string">'id'</span>:</span><br><span class="line">        element = self.base_driver.find_element_by_id(selector_value)</span><br><span class="line">    <span class="keyword">elif</span> selector_by == <span class="string">"n"</span> <span class="keyword">or</span> selector_by == <span class="string">'name'</span>:</span><br><span class="line">        element = self.base_driver.find_element_by_name(selector_value)</span><br><span class="line">    <span class="keyword">elif</span> selector_by == <span class="string">"c"</span> <span class="keyword">or</span> selector_by == <span class="string">'class_name'</span>:</span><br><span class="line">        element = self.base_driver.find_element_by_class_name(selector_value)</span><br><span class="line">    <span class="keyword">elif</span> selector_by == <span class="string">"l"</span> <span class="keyword">or</span> selector_by == <span class="string">'link_text'</span>:</span><br><span class="line">        element = self.base_driver.find_element_by_link_text(selector_value)</span><br><span class="line">    <span class="keyword">elif</span> selector_by == <span class="string">"p"</span> <span class="keyword">or</span> selector_by == <span class="string">'partial_link_text'</span>:</span><br><span class="line">        element = self.base_driver.find_element_by_partial_link_text(selector_value)</span><br><span class="line">    <span class="keyword">elif</span> selector_by == <span class="string">"t"</span> <span class="keyword">or</span> selector_by == <span class="string">'tag_name'</span>:</span><br><span class="line">        element = self.base_driver.find_element_by_tag_name(selector_value)</span><br><span class="line">    <span class="keyword">elif</span> selector_by == <span class="string">"x"</span> <span class="keyword">or</span> selector_by == <span class="string">'xpath'</span>:</span><br><span class="line">        element = self.base_driver.find_element_by_xpath(selector_value)</span><br><span class="line">    <span class="keyword">elif</span> selector_by == <span class="string">"s"</span> <span class="keyword">or</span> selector_by == <span class="string">'css_selector'</span>:</span><br><span class="line">        element = self.base_driver.find_element_by_css_selector(selector_value)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> NameError(<span class="string">"Please enter a valid type of targeting elements."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> element</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;selenium-常用的元素定位操作&quot;&gt;&lt;a href=&quot;#selenium-常用的元素定位操作&quot; class=&quot;headerlink&quot; title=&quot;selenium 常用的元素定位操作&quot;&gt;&lt;/a&gt;selenium 常用的元素定位操作&lt;/h1&gt;&lt;h2 id=&quot;S
      
    
    </summary>
    
      <category term="自动化测试" scheme="https://pinghailinfeng.gitee.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="selenium" scheme="https://pinghailinfeng.gitee.io/tags/selenium/"/>
    
      <category term="web test" scheme="https://pinghailinfeng.gitee.io/tags/web-test/"/>
    
  </entry>
  
  <entry>
    <title>使用selenium访问爱奇艺网站</title>
    <link href="https://pinghailinfeng.gitee.io/2019/05/28/using-selenium-visit-iqiyi-website/"/>
    <id>https://pinghailinfeng.gitee.io/2019/05/28/using-selenium-visit-iqiyi-website/</id>
    <published>2019-05-28T07:23:36.000Z</published>
    <updated>2019-05-28T09:18:58.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用selenium访问爱奇艺网站"><a href="#使用selenium访问爱奇艺网站" class="headerlink" title="使用selenium访问爱奇艺网站"></a>使用<code>selenium</code>访问爱奇艺网站</h1><blockquote><p>selenium 是一种常用的自动化测试工具。它支持各种浏览器，包括 Chrome，Safari，Firefox 等主流界面式浏览器，如果你在这些浏览器里面安装一个 Selenium 的插件，还可以通过录制，快速生成脚本。</p><p>selenium 支持多种主流的开发语言，比如<code>Ruby</code>，<code>java</code>，<code>python</code>，<code>javascript</code>。</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>python3.7.3</p><p>运行 <code>pip install selenium</code> 就可以直接下载最新的selenium版本</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>浏览器:chrome 70.0.3538.77 </p><p>操作系统：win7</p><p>selenium版本: 3.14.1</p><p>chromedriver: <a href="https://npm.taobao.org/mirrors/chromedriver/70.0.3538.97/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/chromedriver/70.0.3538.97/</a></p><h2 id="使用selenium-打开和关闭浏览器"><a href="#使用selenium-打开和关闭浏览器" class="headerlink" title="使用selenium 打开和关闭浏览器"></a>使用selenium 打开和关闭浏览器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">"http://www.iqiyi.com/"</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h2 id="定位搜索框"><a href="#定位搜索框" class="headerlink" title="定位搜索框"></a>定位搜索框</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">search_xpath=<span class="string">r"//*[@id='nav_searchboxIn']/input"</span></span><br><span class="line">driver.find_element_by_xpath(search_xpath).send_keys(<span class="string">"复仇者联盟"</span>)</span><br></pre></td></tr></table></figure><h2 id="点击搜索图片"><a href="#点击搜索图片" class="headerlink" title="点击搜索图片"></a>点击搜索图片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">search_button=<span class="string">r"//*[@id='nav_searchboxOut']/span"</span></span><br><span class="line">driver.find_element_by_xpath(search_button).click()</span><br></pre></td></tr></table></figure><h2 id="切换tab页"><a href="#切换tab页" class="headerlink" title="切换tab页"></a>切换tab页</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入键盘操作--20190528更新</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="comment">#此处通过键盘操作切换tab页</span></span><br><span class="line">driver.find_element_by_tag_name(<span class="string">"body"</span>).send_keys(Keys.CONTROL + <span class="string">"t"</span>)</span><br><span class="line"><span class="comment">#all_handles 保存所有已经打开的tab窗体</span></span><br><span class="line">all_handles = driver.window_handles</span><br><span class="line">print(driver.window_handles)</span><br><span class="line">index_handle=driver.current_window_handle</span><br><span class="line">print(index_handle)</span><br><span class="line"><span class="comment">#用switch_to方法切换到tab窗体</span></span><br><span class="line"><span class="keyword">for</span> handle <span class="keyword">in</span> all_handles:</span><br><span class="line">    <span class="keyword">if</span> handle!=index_handle:</span><br><span class="line">        print(<span class="string">'now is search window'</span>)</span><br><span class="line">        search_handle = handle</span><br><span class="line">driver.switch_to.window(search_handle)</span><br></pre></td></tr></table></figure><h2 id="打印页面的title，并截图"><a href="#打印页面的title，并截图" class="headerlink" title="打印页面的title，并截图"></a>打印页面的<code>title</code>，并截图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(driver.title)</span><br><span class="line">driver.get_screenshot_as_file(<span class="string">"aqiyi.png"</span>)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要介绍了自动化工具<code>selenium</code>的基本使用，如何对页面元素进行基本操作，实现自动抓取关键字图片功能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用selenium访问爱奇艺网站&quot;&gt;&lt;a href=&quot;#使用selenium访问爱奇艺网站&quot; class=&quot;headerlink&quot; title=&quot;使用selenium访问爱奇艺网站&quot;&gt;&lt;/a&gt;使用&lt;code&gt;selenium&lt;/code&gt;访问爱奇艺网站&lt;/h1&gt;
      
    
    </summary>
    
      <category term="自动化测试" scheme="https://pinghailinfeng.gitee.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="selenium" scheme="https://pinghailinfeng.gitee.io/tags/selenium/"/>
    
      <category term="web test" scheme="https://pinghailinfeng.gitee.io/tags/web-test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://pinghailinfeng.gitee.io/2019/05/28/hello-world/"/>
    <id>https://pinghailinfeng.gitee.io/2019/05/28/hello-world/</id>
    <published>2019-05-27T16:00:00.000Z</published>
    <updated>2019-05-28T00:26:01.942Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
