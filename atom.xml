<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>凭海临风的IT江湖</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pinghailinfeng.gitee.io/"/>
  <updated>2023-06-08T09:26:27.771Z</updated>
  <id>https://pinghailinfeng.gitee.io/</id>
  
  <author>
    <name>Jeff Sui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>word和pdf转换</title>
    <link href="https://pinghailinfeng.gitee.io/2022/12/06/word%E5%92%8Cpdf%E8%BD%AC%E6%8D%A2/"/>
    <id>https://pinghailinfeng.gitee.io/2022/12/06/word和pdf转换/</id>
    <published>2022-12-06T01:22:39.000Z</published>
    <updated>2023-06-08T09:26:27.771Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Python-进行word和pdf转换"><a href="#使用Python-进行word和pdf转换" class="headerlink" title="使用Python 进行word和pdf转换"></a>使用Python 进行word和pdf转换</h1><p><img src="https://img.wmzhe.top/pics/f4/4c/f44ccd1b1ae065727d5f80ce8bdfdc6e.jpg" alt></p><a id="more"></a><h2 id="安装第三方库"><a href="#安装第三方库" class="headerlink" title="安装第三方库"></a>安装第三方库</h2><p><code>pip install docx2pdf</code></p><ul><li>WORD TO PDF</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> docx2pdf <span class="keyword">import</span> convert</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件位置</span></span><br><span class="line">path = <span class="string">'d:/word_list/'</span></span><br><span class="line"><span class="comment"># 定义空list,存放文件夹中的文件名</span></span><br><span class="line">files = []</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">    <span class="keyword">if</span> file.endswith(<span class="string">".docx"</span>):</span><br><span class="line">        files.append(path+file)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">   a = convert(file,file.split(<span class="string">'.'</span>)[<span class="number">0</span>]+<span class="string">'.pdf'</span>) <span class="comment">#创建生成的pdf文件和文件名的文件名</span></span><br><span class="line">   time.sleep(<span class="number">1.2</span>)</span><br><span class="line"></span><br><span class="line">   print(file+<span class="string">'转换成功'</span>)</span><br></pre></td></tr></table></figure><ul><li>PDF TO WORD</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pdf2docx <span class="keyword">import</span> Converter</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#批量pdf转word</span></span><br><span class="line"></span><br><span class="line">path = <span class="string">'d:/pdf_list/'</span></span><br><span class="line"><span class="comment"># 定义空list,存放文件夹中的文件名</span></span><br><span class="line">files = []</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">    <span class="keyword">if</span> file.endswith(<span class="string">".pdf"</span>):</span><br><span class="line">        files.append(path+file)</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    a = Converter(file)</span><br><span class="line">    a.convert(file.split(<span class="string">'.'</span>)[<span class="number">0</span>]+<span class="string">'.docx'</span>) <span class="comment">#创建生成的docx文件和文件名的文件名</span></span><br><span class="line">    a.close()</span><br><span class="line">    print(file+<span class="string">'转换成功'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用Python-进行word和pdf转换&quot;&gt;&lt;a href=&quot;#使用Python-进行word和pdf转换&quot; class=&quot;headerlink&quot; title=&quot;使用Python 进行word和pdf转换&quot;&gt;&lt;/a&gt;使用Python 进行word和pdf转换&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://img.wmzhe.top/pics/f4/4c/f44ccd1b1ae065727d5f80ce8bdfdc6e.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="办公" scheme="https://pinghailinfeng.gitee.io/categories/%E5%8A%9E%E5%85%AC/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="word" scheme="https://pinghailinfeng.gitee.io/tags/word/"/>
    
  </entry>
  
  <entry>
    <title>fix FinalShell error channel is not opened</title>
    <link href="https://pinghailinfeng.gitee.io/2022/08/22/fix-FinalShell-error-channel-is-not-opened/"/>
    <id>https://pinghailinfeng.gitee.io/2022/08/22/fix-FinalShell-error-channel-is-not-opened/</id>
    <published>2022-08-22T06:04:49.000Z</published>
    <updated>2022-08-22T06:14:06.231Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决FinalShell-终端错误-channel-is-not-opened"><a href="#解决FinalShell-终端错误-channel-is-not-opened" class="headerlink" title="解决FinalShell 终端错误 channel is not opened"></a>解决FinalShell 终端错误 <code>channel is not opened</code></h1><p><img src="https://pic.zsucai.com/files/2020/1220/ffpic0224ddfere07725.jpg" alt></p><a id="more"></a><blockquote><p>打开虚拟机连接FinalShell出现久联不上的问题,显示显示连接上,不一会就断掉,报错为channel is not opened.</p></blockquote><h2 id="1-打开虚拟机-找到相关配置文件"><a href="#1-打开虚拟机-找到相关配置文件" class="headerlink" title="1.打开虚拟机:找到相关配置文件"></a>1.打开虚拟机:找到相关配置文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><h2 id="2-找到被注释的-UseDNS-yes去掉-更改为UseDNS-no-完成后ESC退出编辑模式-使用-wq-回车保存并退出"><a href="#2-找到被注释的-UseDNS-yes去掉-更改为UseDNS-no-完成后ESC退出编辑模式-使用-wq-回车保存并退出" class="headerlink" title="2.找到被注释的#UseDNS yes去掉#,更改为UseDNS no,完成后ESC退出编辑模式,使用 :wq 回车保存并退出"></a>2.找到被注释的<code>#UseDNS yes</code>去掉#,更改为<code>UseDNS no</code>,完成后ESC退出编辑模式,使用 :wq 回车保存并退出</h2><h2 id="3-重启sshd服务"><a href="#3-重启sshd服务" class="headerlink" title="3.重启sshd服务"></a>3.重启sshd服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sshd.service</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;解决FinalShell-终端错误-channel-is-not-opened&quot;&gt;&lt;a href=&quot;#解决FinalShell-终端错误-channel-is-not-opened&quot; class=&quot;headerlink&quot; title=&quot;解决FinalShell 终端错误 channel is not opened&quot;&gt;&lt;/a&gt;解决FinalShell 终端错误 &lt;code&gt;channel is not opened&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://pic.zsucai.com/files/2020/1220/ffpic0224ddfere07725.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="终端" scheme="https://pinghailinfeng.gitee.io/categories/%E7%BB%88%E7%AB%AF/"/>
    
    
      <category term="linux" scheme="https://pinghailinfeng.gitee.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>missing you</title>
    <link href="https://pinghailinfeng.gitee.io/2021/04/21/missing-you/"/>
    <id>https://pinghailinfeng.gitee.io/2021/04/21/missing-you/</id>
    <published>2021-04-21T14:49:36.000Z</published>
    <updated>2022-08-22T06:01:37.433Z</updated>
    
    <content type="html"><![CDATA[<h1 id="夜已深-天凉-想您了"><a href="#夜已深-天凉-想您了" class="headerlink" title="夜已深,天凉,想您了"></a>夜已深,天凉,想您了</h1><p><img src="https://bpic.588ku.com/element_origin_min_pic/19/04/11/e9a157f9c729af7aac211ce53eb1b8a7.jpg" alt></p><a id="more"></a><p>对一个人的思念可以到什么程度？可能只有真正失去的人才能懂吧。一晃父亲离开我们已经2年了…….</p><p>前段时间无意中看到迟尚斌因病逝世的消息,突然想起了父亲生前也是球迷。</p><p>回想起小时候,爸爸每周六都要看cctv5转播的意大利联赛,我也耳濡目染喜欢上了足球。</p><p>“足球是圆的,没到最后一刻,一切皆有可能。”马拉多纳、齐达内、博格坎普、伊基塔那些在球场上闪耀的球星,我只要听到他们的名字内心都莫名的激动。</p><p>然而父亲并没有让我踢足球,我记得又一次我自己拿了个破足球在球场上踢,爸爸默默走过来说:你也喜欢足球？我点了点头。知道为啥不让你踢足球吗？我摇了摇头。因为你太瘦了,足球对抗性太强,怕你受伤。我似懂非懂的点了点头。</p><p>我和父亲的话题也渐渐多了起来,从五大联赛到欧洲杯、世界杯到甲A联赛,基本上有关足球的东西都是茶余饭后的谈资。我熬夜看球,父亲慢慢熬不了夜,只能让我把白天录播的时间给他记下来,他白天没事的时候看。每次看到漂亮的进球总想和父亲分享,一转身,父亲已经睡着了。</p><p>父亲中年的时候担任分厂足球队的教练,我偷摸在场边看着父亲,整个人在球场上的感觉都不一样了。心里别提多自豪了。听妈妈说,你爸年轻的时候,不光是足球,篮球、排球都很厉害,刚开始还能踢前锋,伴随着年龄增长,就改踢中场,到最后只能踢后卫了。我没想到爸爸还有这么风光的经历。我眼中的父亲,话很少,很严厉,工作起来很认真。</p><p>说点高兴的事,爸爸告诉你个事儿,今年女足挺进了世界杯,贾秀全也是大连人。我想您在天上应该也会很开心的。</p><p>一天,媳妇调侃闺女说,你以后找对象会找你爸这样的吗？闺女说,不会啊,因为爸爸只有一个啊。我听到了,心里莫名感动。现在能理解为人父母那份不需要回报的心了。</p><p>挚爱亲朋的离开,与其悲伤,我们只能选择坚强。做好一个父亲,尽可能地呵护家人,我会照顾好自己，父亲不用再为我担心。</p><p>夜已深,父亲,我又想您了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;夜已深-天凉-想您了&quot;&gt;&lt;a href=&quot;#夜已深-天凉-想您了&quot; class=&quot;headerlink&quot; title=&quot;夜已深,天凉,想您了&quot;&gt;&lt;/a&gt;夜已深,天凉,想您了&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://bpic.588ku.com/element_origin_min_pic/19/04/11/e9a157f9c729af7aac211ce53eb1b8a7.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂记" scheme="https://pinghailinfeng.gitee.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="others" scheme="https://pinghailinfeng.gitee.io/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>how to use maketrans in python3</title>
    <link href="https://pinghailinfeng.gitee.io/2021/04/09/how-to-use-maketrans-in-python3/"/>
    <id>https://pinghailinfeng.gitee.io/2021/04/09/how-to-use-maketrans-in-python3/</id>
    <published>2021-04-09T03:42:41.000Z</published>
    <updated>2022-08-18T08:03:08.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何在python3中使用maketrans"><a href="#如何在python3中使用maketrans" class="headerlink" title="如何在python3中使用maketrans"></a>如何在python3中使用maketrans</h1><p><img src="https://gss0.baidu.com/-4o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/b999a9014c086e064153b48607087bf40bd1cb00.jpg" alt></p><a id="more"></a><h2 id="python3中的maketrans"><a href="#python3中的maketrans" class="headerlink" title="python3中的maketrans"></a>python3中的maketrans</h2><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><blockquote><p>Python maketrans() 方法用于给 translate()方法创建字符映射转换表。</p><p>可以只接受一个参数，此时这个参数是个字典类型（暂不研究这种情况）。</p><p>对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串，表示转换的目标。两个字符串的长度必须相同，为一一对应的关系。</p><p>在Python3中可以有第三个参数，表示要删除的字符，也是字符串。</p><p>一般 maketrans() 方法需要配合 translate() 方法一起使用。</p><p><strong>注：</strong>Python3.4 以后已经不需要从外部 string 模块中来调用 maketrans() 方法了，取而代之的是内建函数: bytearray.maketrans()、bytes.maketrans()、str.maketrans()。</p></blockquote><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li>python3中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.maketrans(intab,outtab[,delchars])</span><br></pre></td></tr></table></figure><ul><li>python2中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line">string.maketrans(intab,outtab)</span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li>intab – 需要转换的字符组成的字符串。</li><li>outtab – 转换的目标字符组成的字符串。</li><li>delchars – 可选参数，表示要删除的字符组成的字符串。</li></ul><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个字符映射转换表供 translate()方法调用。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>借用 <a href="http://www.pythonchallenge.com/pc/def/map.html" target="_blank" rel="noopener">python挑战</a> 第一关</p><p>提示信息显示:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">K--&gt;M </span><br><span class="line">O--&gt;Q</span><br><span class="line">E--&gt;G</span><br></pre></td></tr></table></figure><p>每个字母向后移动两位就是加密之前的单词了,于是就有下面的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> str = <span class="string">"g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj."</span></span><br><span class="line"> </span><br><span class="line">table=str.maketrans(<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>,<span class="string">'cdefghijklmnopqrstuvwxyzab'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> str.translate(table)</span><br></pre></td></tr></table></figure><p>翻译过来: i hope you didnt translate it by hand. thats what computers are for. doing it in by hand is inefficient and that’s why this text is so long. using string.maketrans() is recommended. now apply on the url</p><p>通过转换得到下一关的地址</p><p><a href="http://www.pythonchallenge.com/pc/def/ocr.html" target="_blank" rel="noopener">http://www.pythonchallenge.com/pc/def/ocr.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何在python3中使用maketrans&quot;&gt;&lt;a href=&quot;#如何在python3中使用maketrans&quot; class=&quot;headerlink&quot; title=&quot;如何在python3中使用maketrans&quot;&gt;&lt;/a&gt;如何在python3中使用maketrans&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://gss0.baidu.com/-4o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/b999a9014c086e064153b48607087bf40bd1cb00.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu install nodejs config taobao source</title>
    <link href="https://pinghailinfeng.gitee.io/2021/04/07/ubuntu-install-nodejs-config-taobao-source/"/>
    <id>https://pinghailinfeng.gitee.io/2021/04/07/ubuntu-install-nodejs-config-taobao-source/</id>
    <published>2021-04-07T03:53:32.000Z</published>
    <updated>2022-08-18T08:03:08.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu-npm-切换淘宝镜像源"><a href="#Ubuntu-npm-切换淘宝镜像源" class="headerlink" title="Ubuntu npm 切换淘宝镜像源"></a>Ubuntu npm 切换淘宝镜像源</h1><p><img src="https://up.enterdesk.com/edpic/97/66/ed/9766edaddc5a38b512222fc387f83d9f.jpg" alt></p><a id="more"></a><h2 id="npm-切换到淘宝源"><a href="#npm-切换到淘宝源" class="headerlink" title="npm 切换到淘宝源"></a>npm 切换到淘宝源</h2><p>默认的npm下载地址：<a href="http://www.npmjs.org/" target="_blank" rel="noopener">http://www.npmjs.org/</a><br>淘宝npm镜像的地址：<a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a><br>临时使用淘宝源：</p><pre><code>$ npm --registry https://registry.npm.taobao.org install node-red-contrib-composer@latest</code></pre><h2 id="全局配置切换到淘宝源："><a href="#全局配置切换到淘宝源：" class="headerlink" title="全局配置切换到淘宝源："></a>全局配置切换到淘宝源：</h2><pre><code>$ npm config set registry https://registry.npm.taobao.org</code></pre><h2 id="全局配置切换到官方源："><a href="#全局配置切换到官方源：" class="headerlink" title="全局配置切换到官方源："></a>全局配置切换到官方源：</h2><pre><code>$ npm config set registry http://www.npmjs.org</code></pre><h3 id="检测是否切换到了淘宝源："><a href="#检测是否切换到了淘宝源：" class="headerlink" title="检测是否切换到了淘宝源："></a>检测是否切换到了淘宝源：</h3><pre><code>$ npm info underscore</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Ubuntu-npm-切换淘宝镜像源&quot;&gt;&lt;a href=&quot;#Ubuntu-npm-切换淘宝镜像源&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu npm 切换淘宝镜像源&quot;&gt;&lt;/a&gt;Ubuntu npm 切换淘宝镜像源&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://up.enterdesk.com/edpic/97/66/ed/9766edaddc5a38b512222fc387f83d9f.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="nodejs" scheme="https://pinghailinfeng.gitee.io/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="https://pinghailinfeng.gitee.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Javascript keep i variable value in loop</title>
    <link href="https://pinghailinfeng.gitee.io/2021/01/11/Javascript-keep-i-variable-value-in-loop/"/>
    <id>https://pinghailinfeng.gitee.io/2021/01/11/Javascript-keep-i-variable-value-in-loop/</id>
    <published>2021-01-11T14:05:40.000Z</published>
    <updated>2022-08-18T08:03:08.617Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript的循环中保留变量i的值"><a href="#JavaScript的循环中保留变量i的值" class="headerlink" title="JavaScript的循环中保留变量i的值"></a>JavaScript的循环中保留变量i的值</h1><p><img src="https://www.programiz.com/sites/tutorial2program/files/for-loop_0.jpg" alt></p><a id="more"></a><p>又一波疫情,本来就景气的大连又一次雪上加霜。只要有希望,一切都会好的。</p><blockquote><p>循环是我们常用的控制语句，在<code>javascript</code>中每次循环结束后其 i 值会指向最后一次的结果，这样循环注册事件时使用到 i 值便会出错</p></blockquote><p>点击图片切换背景的<code>javascript</code>脚本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> imgs = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>).querySelectorAll(<span class="string">'img'</span>)</span></span><br><span class="line"><span class="actionscript"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imgs.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">    imgs[i].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">       <span class="comment">// console.log(imgs[i].src);</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(i);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.style.backgroundImage = <span class="string">'url('</span> + imgs[i].src + <span class="string">')'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>直接报错:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught TypeError: Cannot read property 'src' of undefined</span><br></pre></td></tr></table></figure><p>打印变量<code>i</code>,永远都是指向最大索引值4</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> 4</span></span><br></pre></td></tr></table></figure><p>下面是解决方案 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种解决方案： this关键字</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imgs.length; i++) &#123;</span><br><span class="line">    imgs[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="comment">// console.log(imgs[i].src);</span></span><br><span class="line">       <span class="built_in">console</span>.log(i);</span><br><span class="line">       <span class="built_in">document</span>.body.style.backgroundImage = <span class="string">'url('</span> + <span class="keyword">this</span>.src + <span class="string">')'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//第二种解决方案: 自动执行函数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imgs.length; i++) &#123;</span><br><span class="line">            (<span class="function"><span class="keyword">function</span> (<span class="params">inner</span>) </span>&#123;</span><br><span class="line">                imgs[inner].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(imgs[inner]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)(i);</span><br><span class="line">        &#125;</span><br><span class="line">  <span class="comment">//第三种解决方案 闭包</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imgs.length; i++) &#123;</span><br><span class="line">            imgs[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params">inner</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(inner);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;(i);</span><br><span class="line">        &#125;</span><br><span class="line"> <span class="comment">//第四种解决方案 let 块级作用域</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; imgs.length; i++) &#123;</span><br><span class="line">            imgs[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(i);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript的循环中保留变量i的值&quot;&gt;&lt;a href=&quot;#JavaScript的循环中保留变量i的值&quot; class=&quot;headerlink&quot; title=&quot;JavaScript的循环中保留变量i的值&quot;&gt;&lt;/a&gt;JavaScript的循环中保留变量i的值&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://www.programiz.com/sites/tutorial2program/files/for-loop_0.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://pinghailinfeng.gitee.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://pinghailinfeng.gitee.io/tags/javascript/"/>
    
      <category term="循环" scheme="https://pinghailinfeng.gitee.io/tags/%E5%BE%AA%E7%8E%AF/"/>
    
      <category term="闭包" scheme="https://pinghailinfeng.gitee.io/tags/%E9%97%AD%E5%8C%85/"/>
    
      <category term="es6" scheme="https://pinghailinfeng.gitee.io/tags/es6/"/>
    
      <category term="this" scheme="https://pinghailinfeng.gitee.io/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>node14.4 run hexo TypeError [ERR_INVALID_ARG_TYPE]</title>
    <link href="https://pinghailinfeng.gitee.io/2020/12/27/node14-4-run-hexo-TypeError-ERR-INVALID-ARG-TYPE/"/>
    <id>https://pinghailinfeng.gitee.io/2020/12/27/node14-4-run-hexo-TypeError-ERR-INVALID-ARG-TYPE/</id>
    <published>2020-12-26T21:35:28.000Z</published>
    <updated>2022-08-18T08:03:08.616Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Node升级到14-4-hexo-运行失败"><a href="#Node升级到14-4-hexo-运行失败" class="headerlink" title="Node升级到14.4 hexo 运行失败"></a>Node升级到14.4 hexo 运行失败</h1><p><img src="https://www.prajwaldesai.com/wp-content/uploads/2014/01/error-code.jpeg" alt></p><a id="more"></a><p>node刚升级到14.4,结果发现使用<code>hexo d</code>命令部署到<code>gitee</code>上发现如下错误</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; typeError [ERR_INVALID_ARG_TYPE]: The <span class="string">"mode"</span> argument must be <span class="built_in">integer</span>. Received an instance of Object</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>查阅相关资料发现是node版本太高导致,最终将node降级到12.14.0后,重新部署就成功了。</p><p>当然你也可以使用nvm来切换node版本。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Node升级到14-4-hexo-运行失败&quot;&gt;&lt;a href=&quot;#Node升级到14-4-hexo-运行失败&quot; class=&quot;headerlink&quot; title=&quot;Node升级到14.4 hexo 运行失败&quot;&gt;&lt;/a&gt;Node升级到14.4 hexo 运行失败&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://www.prajwaldesai.com/wp-content/uploads/2014/01/error-code.jpeg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://pinghailinfeng.gitee.io/categories/hexo/"/>
    
      <category term="博客搭建" scheme="https://pinghailinfeng.gitee.io/categories/hexo/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="hexo" scheme="https://pinghailinfeng.gitee.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Farewell, 2020</title>
    <link href="https://pinghailinfeng.gitee.io/2020/12/26/Farewell-2020/"/>
    <id>https://pinghailinfeng.gitee.io/2020/12/26/Farewell-2020/</id>
    <published>2020-12-26T08:22:08.000Z</published>
    <updated>2022-08-18T08:03:08.616Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Farewell-2020"><a href="#Farewell-2020" class="headerlink" title="Farewell, 2020"></a>Farewell, 2020</h1><p><img src="https://gss0.baidu.com/-fo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/7acb0a46f21fbe09cd42640566600c338744ad87.jpg" alt></p><a id="more"></a><p>2020年还有不到五天就要过去了,时光如梭,这一年一眨眼就过去了。</p><p>大连又一次迎来了第三次新冠疫情,大街上冷冷清清。商场里也没有往日的喧闹。这个城市又一次变得安静了下来。</p><p>2020年,大家说得最多的一个字就是”难”。大家好不容易挺过来,来势汹汹的疫情打乱了节奏。很多人心情跌落谷底。</p><p>昨天回到家,媳妇说孩子网课表现很优秀,一边跟着老师听讲,一边和老师互动,还知道静音,非常投入，孩子这是长大了。我心里却不是滋味,和去年疫情相比,网课一天不上,天天就是看平板电脑形成了强烈的反差。孩子不是长大了,是社会让她不得不遵守规则。</p><p>学生问我,你白天上课,晚上还上晚课,收入一定很高,我笑了笑说,还可以吧,他接着又问,你肯定是学校股东,要不谁能这么拼命。我回答,成年人的世界里哪有什么不容易。师生相视一笑。大家都明白,个中滋味自己体会吧。</p><p>疫情让我们明白一些道理,什么都没有活着和生存更重要。只要活着,就有希望。</p><p>2020让我们体会到生命的伟大,致敬那些工作在一线的医护工作者们,他们是最美的逆行者。</p><p>致敬那些为了后勤保障,辛勤工作的各行各业的人们,他们社会能正常运转。</p><p>为人父,为人母,体会到了父母的艰辛。</p><p>就像奥特曼经常说的一样,相信光，会守护世界。每个人心中都有奥特曼。我也会守护我的家人,守护我身边的一切。</p><p>希望在新的一年,一切都会变好。</p><p>祝愿大家都身体健康,因为有光,就有希望。</p><p>未来可期,再见2020!</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Farewell-2020&quot;&gt;&lt;a href=&quot;#Farewell-2020&quot; class=&quot;headerlink&quot; title=&quot;Farewell, 2020&quot;&gt;&lt;/a&gt;Farewell, 2020&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://gss0.baidu.com/-fo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/7acb0a46f21fbe09cd42640566600c338744ad87.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂记" scheme="https://pinghailinfeng.gitee.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="2020" scheme="https://pinghailinfeng.gitee.io/tags/2020/"/>
    
  </entry>
  
  <entry>
    <title>how to export django project dependency</title>
    <link href="https://pinghailinfeng.gitee.io/2020/09/15/how-to-export-django-project-dependency/"/>
    <id>https://pinghailinfeng.gitee.io/2020/09/15/how-to-export-django-project-dependency/</id>
    <published>2020-09-15T01:19:55.000Z</published>
    <updated>2022-08-18T08:03:08.615Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何导出django项目依赖第三方库"><a href="#如何导出django项目依赖第三方库" class="headerlink" title="如何导出django项目依赖第三方库"></a>如何导出<code>django</code>项目依赖第三方库</h1><p><img src="https://gss0.baidu.com/-Po3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=f979fd647b8da9774e7a8e2d8061d421/d000baa1cd11728bf4f9b275c0fcc3cec2fd2c94.jpg" alt></p><a id="more"></a><h2 id="使用pip-freeze-导出"><a href="#使用pip-freeze-导出" class="headerlink" title="使用pip freeze 导出"></a>使用<code>pip freeze</code> 导出</h2><p>针对大部分使用<code>virtualenv</code> 或<code>venv</code>，<code>pipenv</code> 虚拟环境的项目而言,导出第三方依赖很容易,运行下面的命令即可</p><p><code>pip freeze &gt; requirements.txt</code></p><h2 id="非虚拟环境如何导出项目依赖"><a href="#非虚拟环境如何导出项目依赖" class="headerlink" title="非虚拟环境如何导出项目依赖"></a>非虚拟环境如何导出项目依赖</h2><h3 id="安装-pipreqs库"><a href="#安装-pipreqs库" class="headerlink" title="安装 pipreqs库"></a>安装 <code>pipreqs</code>库</h3><p><code>pip install pipreqs</code></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>进入项目根目录,使用下面的指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipreqs ./</span><br></pre></td></tr></table></figure><h3 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">D:\code\django_blog\mysite&gt;pipreqs ./</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "c:\python38\lib\runpy.py", line 194, in _run_module_as_main</span><br><span class="line">    return _run_code(code, main_globals, None,</span><br><span class="line">  File "c:\python38\lib\runpy.py", line 87, in _run_code</span><br><span class="line">    exec(code, run_globals)</span><br><span class="line">  File "C:\Python38\Scripts\pipreqs.exe\__main__.py", line 9, in &lt;module&gt;</span><br><span class="line">  File "c:\python38\lib\site-packages\pipreqs\pipreqs.py", line 470, in main</span><br><span class="line">    init(args)</span><br><span class="line">  File "c:\python38\lib\site-packages\pipreqs\pipreqs.py", line 406, in init</span><br><span class="line">    candidates = get_all_imports(input_path,</span><br><span class="line">  File "c:\python38\lib\site-packages\pipreqs\pipreqs.py", line 122, in get_all_imports</span><br><span class="line">    contents = f.read()</span><br><span class="line">UnicodeDecodeError: 'gbk' codec can't decode byte 0xae in position 403: illegal multibyte sequence</span><br></pre></td></tr></table></figure><h3 id="添加命令行参数-encoding-utf-8"><a href="#添加命令行参数-encoding-utf-8" class="headerlink" title="添加命令行参数 encoding=utf-8"></a>添加命令行参数 <code>encoding=utf-8</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipreqs ./ --encoding=utf<span class="number">-8</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何导出django项目依赖第三方库&quot;&gt;&lt;a href=&quot;#如何导出django项目依赖第三方库&quot; class=&quot;headerlink&quot; title=&quot;如何导出django项目依赖第三方库&quot;&gt;&lt;/a&gt;如何导出&lt;code&gt;django&lt;/code&gt;项目依赖第三方库&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://gss0.baidu.com/-Po3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=f979fd647b8da9774e7a8e2d8061d421/d000baa1cd11728bf4f9b275c0fcc3cec2fd2c94.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="django" scheme="https://pinghailinfeng.gitee.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>make django3.1 backend markdown support</title>
    <link href="https://pinghailinfeng.gitee.io/2020/09/14/make_django3.1_backend_markdown_support/"/>
    <id>https://pinghailinfeng.gitee.io/2020/09/14/make_django3.1_backend_markdown_support/</id>
    <published>2020-09-14T08:57:20.000Z</published>
    <updated>2022-08-18T08:03:08.615Z</updated>
    
    <content type="html"><![CDATA[<h1 id="django3-1-后台添加markdown支持"><a href="#django3-1-后台添加markdown支持" class="headerlink" title="django3.1 后台添加markdown支持"></a>django3.1 后台添加markdown支持</h1><p><img src="https://media.vanityfair.com/photos/54caaa85b8f23e3a0314d5ae/master/w_768,c_limit/image.png" alt></p><a id="more"></a><h2 id="首先安装-django-mdeditor"><a href="#首先安装-django-mdeditor" class="headerlink" title="首先安装 django-mdeditor"></a>首先安装 <code>django-mdeditor</code></h2><p><code>python pip install django-mdeditor</code></p><h2 id="settings-py-中添加"><a href="#settings-py-中添加" class="headerlink" title="settings.py 中添加"></a>settings.py 中添加</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'blog'</span>,</span><br><span class="line">    <span class="string">'mdeditor'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="comment"># add uploads文件夹</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">'uploads'</span>)  <span class="comment">#uploads必须存在，且在项目目录下</span></span><br><span class="line">MEDIA_URL = <span class="string">'/media/'</span></span><br></pre></td></tr></table></figure><h2 id="添加站点路由-mysite-urls-py"><a href="#添加站点路由-mysite-urls-py" class="headerlink" title="添加站点路由 mysite/urls.py"></a>添加站点路由 <code>mysite/urls.py</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"><span class="keyword">from</span> django.conf.urls.static <span class="keyword">import</span>  static</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'blog/'</span>, include((<span class="string">'blog.urls'</span>,<span class="string">'blog'</span>),namespace=<span class="string">'blog'</span>)),</span><br><span class="line">    path(<span class="string">'mdeditor/'</span>,include(<span class="string">'mdeditor.urls'</span>)),</span><br><span class="line">]</span><br><span class="line"><span class="keyword">if</span> settings.DEBUG:</span><br><span class="line">    <span class="comment"># static files (images, css, javascript, etc.)</span></span><br><span class="line">    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)</span><br></pre></td></tr></table></figure><h2 id="修改blog下models-py中内容类型"><a href="#修改blog下models-py中内容类型" class="headerlink" title="修改blog下models.py中内容类型"></a>修改blog下<code>models.py</code>中内容类型</h2><p><code>导入MDTextField</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> mdeditor.fields <span class="keyword">import</span> MDTextField</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPost</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length= <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># body = models.TextField()</span></span><br><span class="line">    body = MDTextField()</span><br><span class="line"></span><br><span class="line">    create_time = models.DateTimeField()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f"&lt;BlogPost <span class="subst">&#123;self.title&#125;</span>&gt;"</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name =<span class="string">"文章"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure></p><h2 id="blog应用views-py"><a href="#blog应用views-py" class="headerlink" title="blog应用views.py"></a>blog应用views.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">details</span><span class="params">(request, blog_id)</span>:</span></span><br><span class="line">    blog = get_object_or_404 (BlogPost, pk=blog_id)</span><br><span class="line">    blog.body = markdown(blog.body, extensions=[</span><br><span class="line">        <span class="comment"># 包含 缩写、表格等常用扩展</span></span><br><span class="line">        <span class="string">'markdown.extensions.extra'</span>,</span><br><span class="line">        <span class="comment"># 语法高亮扩展</span></span><br><span class="line">        <span class="string">'markdown.extensions.codehilite'</span>,</span><br><span class="line">        <span class="comment">#允许我们自动生成目录</span></span><br><span class="line">         <span class="string">'markdown.extensions.toc'</span>,</span><br><span class="line">        ])</span><br><span class="line">    <span class="keyword">return</span> render (request, <span class="string">'blog_detail.html'</span>, &#123;<span class="string">'blog'</span>: blog&#125;)</span><br></pre></td></tr></table></figure><h2 id="前台页面添加markdown-css支持"><a href="#前台页面添加markdown-css支持" class="headerlink" title="前台页面添加markdown css支持"></a>前台页面添加markdown css支持</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/github-markdown-css/3.0.1/github-markdown.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="前台页面添加-safe渲染"><a href="#前台页面添加-safe渲染" class="headerlink" title="前台页面添加 safe渲染"></a>前台页面添加 safe渲染</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; blog.title &#125;&#125;</span><br><span class="line">&#123;&#123; blog.body | safe &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="重新启动服务"><a href="#重新启动服务" class="headerlink" title="重新启动服务"></a>重新启动服务</h2><p><code>python manage.py runserver 127.0.0.1:8000</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;django3-1-后台添加markdown支持&quot;&gt;&lt;a href=&quot;#django3-1-后台添加markdown支持&quot; class=&quot;headerlink&quot; title=&quot;django3.1 后台添加markdown支持&quot;&gt;&lt;/a&gt;django3.1 后台添加markdown支持&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://media.vanityfair.com/photos/54caaa85b8f23e3a0314d5ae/master/w_768,c_limit/image.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="django" scheme="https://pinghailinfeng.gitee.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>from beginning to setup a typescript develop environment</title>
    <link href="https://pinghailinfeng.gitee.io/2020/04/13/from-beginning-to-setup-a-typescript-develop-environment/"/>
    <id>https://pinghailinfeng.gitee.io/2020/04/13/from-beginning-to-setup-a-typescript-develop-environment/</id>
    <published>2020-04-13T09:22:58.000Z</published>
    <updated>2022-08-18T08:03:08.614Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从零开始搭建typescript开发环境"><a href="#从零开始搭建typescript开发环境" class="headerlink" title="从零开始搭建typescript开发环境"></a>从零开始搭建typescript开发环境</h1><p><img src="https://pic3.zhimg.com/v2-7ae2e2942fa8ae187a24cae8afe9547e_1200x500.jpg" alt></p><a id="more"></a><h2 id="【背景】"><a href="#【背景】" class="headerlink" title="【背景】"></a>【背景】</h2><p>从零开始搭建一个typescript项目中使用了lite-server 模块,备忘一下</p><h2 id="【解决方案】"><a href="#【解决方案】" class="headerlink" title="【解决方案】"></a>【解决方案】</h2><h3 id="项目下-创建一个-bs-config-json文件"><a href="#项目下-创建一个-bs-config-json文件" class="headerlink" title="项目下 创建一个 bs-config.json文件"></a>项目下 创建一个 <code>bs-config.json</code>文件</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"port"</span> : <span class="number">3000</span>,</span><br><span class="line">    <span class="attr">"files"</span>: [<span class="string">"../dist/**/*.&#123;html,htm,css,js&#125;"</span>],</span><br><span class="line">    <span class="attr">"server"</span>: &#123;<span class="attr">"baseDir"</span> : <span class="string">"./dist"</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>port 参数指定端口</li><li>files 指定包含的文件类型</li><li>server 中 baseDir参数指定 静态文件所在目录,根据自己项目目录结构调整</li></ul><h3 id="添加-lite-server-到-package-json-的-script"><a href="#添加-lite-server-到-package-json-的-script" class="headerlink" title="添加 lite-server 到 package.json 的 script"></a>添加 lite-server 到 package.json 的 script</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "start": "lite-server",</span><br><span class="line">    "tsc-build": "tsc -w",</span><br><span class="line">    "tsc-watch": "nodemon dist/hello.js"</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="命令行运行"><a href="#命令行运行" class="headerlink" title="命令行运行"></a>命令行运行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><h2 id="【参考文档】"><a href="#【参考文档】" class="headerlink" title="【参考文档】"></a>【参考文档】</h2><p><a href="https://github.com/johnpapa/lite-server" target="_blank" rel="noopener">lite-server官方github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;从零开始搭建typescript开发环境&quot;&gt;&lt;a href=&quot;#从零开始搭建typescript开发环境&quot; class=&quot;headerlink&quot; title=&quot;从零开始搭建typescript开发环境&quot;&gt;&lt;/a&gt;从零开始搭建typescript开发环境&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-7ae2e2942fa8ae187a24cae8afe9547e_1200x500.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="typescript" scheme="https://pinghailinfeng.gitee.io/categories/typescript/"/>
    
      <category term="basic" scheme="https://pinghailinfeng.gitee.io/categories/typescript/basic/"/>
    
    
      <category term="typescript" scheme="https://pinghailinfeng.gitee.io/tags/typescript/"/>
    
      <category term="lite-server" scheme="https://pinghailinfeng.gitee.io/tags/lite-server/"/>
    
  </entry>
  
  <entry>
    <title>using selenium execute JavaScript controll browser scroll</title>
    <link href="https://pinghailinfeng.gitee.io/2020/04/10/using-selenium-execute-JavaScript-controll-browser-scroll/"/>
    <id>https://pinghailinfeng.gitee.io/2020/04/10/using-selenium-execute-JavaScript-controll-browser-scroll/</id>
    <published>2020-04-10T09:18:09.000Z</published>
    <updated>2022-08-18T08:03:08.613Z</updated>
    
    <content type="html"><![CDATA[<h1 id="selenium中使用JavaScript控制浏览器"><a href="#selenium中使用JavaScript控制浏览器" class="headerlink" title="selenium中使用JavaScript控制浏览器"></a>selenium中使用JavaScript控制浏览器</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//移动到元素element对象的“顶端”与当前窗口的“顶部”对齐</span></span><br><span class="line">((JavascriptExecutor) driver).executeScript(<span class="string">"arguments[0].scrollIntoView();"</span>, element);</span><br><span class="line">((JavascriptExecutor) driver).executeScript(<span class="string">"arguments[0].scrollIntoView(true);"</span>, element);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//移动到元素element对象的“底端”与当前窗口的“底部”对齐</span></span><br><span class="line">((JavascriptExecutor) driver).executeScript(<span class="string">"arguments[0].scrollIntoView(false);"</span>, element);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//移动到页面最底部</span></span><br><span class="line">((JavascriptExecutor) driver).executeScript(<span class="string">"window.scrollTo(0, document.body.scrollHeight)"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//移动到指定的坐标(相对当前的坐标移动)</span></span><br><span class="line">((JavascriptExecutor) driver).executeScript(<span class="string">"window.scrollBy(0, 700)"</span>);</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line"><span class="comment">//结合上面的scrollBy语句，相当于移动到700+800=1600像素位置</span></span><br><span class="line">((JavascriptExecutor) driver).executeScript(<span class="string">"window.scrollBy(0, 800)"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//移动到窗口绝对位置坐标，如下移动到纵坐标1600像素位置</span></span><br><span class="line">((JavascriptExecutor) driver).executeScript(<span class="string">"window.scrollTo(0, 1600)"</span>);</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line"><span class="comment">//结合上面的scrollTo语句，仍然移动到纵坐标1200像素位置</span></span><br><span class="line">((JavascriptExecutor) driver).executeScript(<span class="string">"window.scrollTo(0, 1200)"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;selenium中使用JavaScript控制浏览器&quot;&gt;&lt;a href=&quot;#selenium中使用JavaScript控制浏览器&quot; class=&quot;headerlink&quot; title=&quot;selenium中使用JavaScript控制浏览器&quot;&gt;&lt;/a&gt;selenium
      
    
    </summary>
    
      <category term="selenium" scheme="https://pinghailinfeng.gitee.io/categories/selenium/"/>
    
      <category term="java" scheme="https://pinghailinfeng.gitee.io/categories/selenium/java/"/>
    
    
      <category term="java" scheme="https://pinghailinfeng.gitee.io/tags/java/"/>
    
      <category term="selenium" scheme="https://pinghailinfeng.gitee.io/tags/selenium/"/>
    
      <category term="自动化测试" scheme="https://pinghailinfeng.gitee.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Still a teenager</title>
    <link href="https://pinghailinfeng.gitee.io/2020/04/05/Still-a-teenager/"/>
    <id>https://pinghailinfeng.gitee.io/2020/04/05/Still-a-teenager/</id>
    <published>2020-04-05T14:11:31.000Z</published>
    <updated>2022-08-18T08:03:08.613Z</updated>
    
    <content type="html"><![CDATA[<h1 id="归来仍是少年"><a href="#归来仍是少年" class="headerlink" title="归来仍是少年"></a>归来仍是少年</h1><p><img src="http://a3.att.hudong.com/36/19/01300000660677127669194340150.jpg" alt></p><a id="more"></a><p>很久没有更新博客了,一来是需要自己整理下思路,二来是自己也要学习,不想因为这样降低博客的质量。<br>坚持了70多天中断了,感觉有点可惜，但是想来也对自己有个交代。</p><p>停下也是为了更好的往下走。</p><p>一年前的今天,我父亲还健在。</p><p>清明时节雨纷纷的季节，一年前的事情仍旧历历在目。</p><p>阴历三月初一是父亲的生日,寻思给父亲过个生日,3月底才出的院。父亲明显感觉比以前气色差了很多。</p><p>老人有讲究,不到80大寿,不宜大操大办。因此我给父亲订了蛋糕,俺娘准备了父亲喜欢吃的蚬子长寿面,就一家人简简单单过了一个生日。</p><p>父亲的那天胃口格外的好，吃了两大碗面条。我和母亲对视了一眼,心里感觉好了一点。</p><p>席间和闺女还做起了游戏,闺女想骑大马,但是考虑到父亲身体还很虚弱,就让媳妇领到一边去玩。</p><p>去厨房刷碗,母亲小声告诉我。你爸好几天都难受的睡不着觉了。我心里咯噔一下,只能提醒母亲注意,随时给我打电话。</p><p>聊起了很多小时候的事。</p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200405_father_and_mother.jpg?raw=true" alt></p><p>印象中爸爸年轻时候喜欢各种运动,足篮排乒乓没有不会的,会吹笛子,会画画,照片看是个俊美的男子。</p><p>后来遇到了母亲,有了我和姐姐,足球也踢不动了,担任了厂队的领队,那段风风火火的日子,我经常去球场看球。</p><p>想起下雨天,我在水坑打闹,弄得一身白衣服变成了灰色,父亲回家用毛巾狠狠抽了我。</p><p>其实抽完,父亲就觉得后悔,谁都有调皮的时候。</p><p>回到大连,房子正在装修,我接到一个女同学电话。我父亲问起来,大学有没有要好的女同学,有合适的可以处处看。我那时候还是懵懂的年纪,只知道傻乎乎的笑。</p><p>年龄越来越大了,父亲表面没说什么,其实心里着实着急。</p><p>我也装傻充愣,在以找对象名义,又玩了好几年。</p><p>终于婚了,父亲拉着我媳妇的手,就说一句话,好好过啊,有啥需要就找我们。我偷偷看到,老爷子眼角有了泪花。</p><p>婚房房子装修的日子,爸妈全程建工,登梯子爬高,为了一个门帘从金三角老两口硬是走了回来。我姐夫调侃说,看出来了,这是儿啊。</p><p>老爷子私下问我,啥时候准备要孩子啊。我说不着急,反问俺爸: 您着急了。俺爸说,能不着急吗,我和你妈都多大年纪了,趁腿脚好,还能帮你带带。</p><p>孩子啼哭的那一刻,我突然意识到这个小生命的诞生,让我从一个黄花少年,也当了爹。</p><p>媳妇怀孕期间一直反应很大,从开始怀孕一直吐到产床。父亲一直担心,孩子会有影响。</p><p>当护士把孩子报过来的时候,老爷子乐的合不拢嘴,一个劲的念叨,挺好挺好。</p><p>因为母亲过来带孩子,忽视了父亲的身体,老爷子自己不想给我们添麻烦,终于2016年的冬天,老爷子突然因病入院。</p><p>进手术室前,父亲就说了一句话,我还想活着看孙女上小学呢！期间母亲一直在哭,我们只能祈祷手术能成功。</p><p>事后,主治医生说,这个手术风险很高,正常人基本上下不了手术台,更何况我父亲有20年的糖尿病,并发症一来,谁也没招。正常40分钟的手术做了2个半小时,老爷子硬是挺了过来。</p><p>不到一个月的时间,又因为大面积静脉渗血导致心肌炎,又一次去了手术室……..</p><p>我急急忙忙跑去医院,看到俺爸浑身插着十几个管子的时候,我控制不住自己,眼泪止不住流。</p><p>老爷子慢慢恢复了过来,看着他那神采奕奕的眼睛慢慢失去了光,我意识到,这场病对于俺爸意味着什么。</p><p>2017年十月一,我记得很清楚,我开车领着俺爸去看了东港的喷泉。老爷子走路都费劲了,不到200米的路,歇了十几趟。我搀扶着父亲,手上就剩下骨头了。我扭过头,强忍着泪水。那是父亲最后一次出远门。</p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200405_father.jpg?raw=true" alt></p><p>2018年春节,家人都聚在一起,那时父亲的头发已经全白了。</p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200405_father_and_famliy.jpg?raw=true" alt></p><p>19年,刚过完春节,父亲觉得心脏不舒服,就去住院了。凌晨2点,我给父亲送去医院住院。没来得及告诉俺姐。等到住院手续办理完。我才给俺姐打电话,谁知道俺姐也来同一个医院住院了。老爷子一听到俺姐也住院了,眼泪就流下来了,那时候还没有床位,就一个劲念叨,我要等着俺老闺女来。俺姐来了,父亲就抱着俺姐哭了起来。</p><p>晚上需要有人陪护,怕我睡不好,故意说我打呼噜影响他睡眠,就让我回家睡。</p><p>医生也把我们家属叫到一起,详细说明了父亲现在的病情,距离上次手术过去了三年,现在最重要的不是糖尿病,也不是静脉栓塞,而是心脏。老爷子现在的身体已经不能再做手术了。建议回家静养。我们听了感觉心里很难受。不停追问医生还有没有更好的办法。医生虽然没明着说没有,其实也间接说明病情已经很严重了。</p><p>父亲是一个很聪明的人,从医生的只言片语里也清楚自己时日无多。</p><p>3月底了,有一天我去医院陪护,父亲拉着我的手说,去走廊溜达溜达。他背靠在护士站的台子前,和我说了一段意味深长的话，他说,我知道我现在心脏是大问题,一旦出问题,3分钟人就没了,我的银行卡都在你妈那,房子你和你姐一人一半,房产证都在你妈那,有事找你妈。我以为父亲是开玩笑,说道,咋的,你这是交代后事啊。父亲突然严肃了起来,说,对,就是交代下。我心里一沉。</p><p>4月7号,我正好陪孩子去上英语课,突然接到了母亲的电话,快来,你爸不行了。</p><p>当我打车冲过去的时候,父亲已经永远离开了我们。120又急救了将近20分钟,脉搏一直都是一条直线。领队说,老爷子心脏病突发,走了,没遭罪，子女看看是否还需要送医院,否则就在死亡确认书上签字吧。听到这个的时候,我整个大脑都一片空白了。</p><p>姐夫赶紧联系了殡葬的人,过了不到十分钟，办事的人说,来孝子来给老爷子净身。我用毛巾给父亲擦脸,感受到父亲的温度。我到现在都不相信,父亲永远的离开了我们。就像睡着了一样。</p><p>我实在写不下去了……..</p><p>想想对父亲的承诺,说出了院,还能带着父亲去趟澡堂子,这辈子再也不可能实现了。</p><p>归来还是少年吗？体会到为人父,为人夫的责任,你就不会再是孩子了。</p><p>如今一周年了,我只想对我父亲说,<strong>儿子想你了,你还能回来不？</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;归来仍是少年&quot;&gt;&lt;a href=&quot;#归来仍是少年&quot; class=&quot;headerlink&quot; title=&quot;归来仍是少年&quot;&gt;&lt;/a&gt;归来仍是少年&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://a3.att.hudong.com/36/19/01300000660677127669194340150.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂记" scheme="https://pinghailinfeng.gitee.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="杂记" scheme="https://pinghailinfeng.gitee.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
      <category term="感悟" scheme="https://pinghailinfeng.gitee.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>esp32 micropython 03 webrepl</title>
    <link href="https://pinghailinfeng.gitee.io/2020/03/27/esp32-micropython-03-webrepl/"/>
    <id>https://pinghailinfeng.gitee.io/2020/03/27/esp32-micropython-03-webrepl/</id>
    <published>2020-03-27T14:46:44.000Z</published>
    <updated>2022-08-18T08:03:08.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="esp32-micropython-之旅-03-webrepl"><a href="#esp32-micropython-之旅-03-webrepl" class="headerlink" title="esp32  micropython 之旅 03 webrepl"></a>esp32  micropython 之旅 03 webrepl</h1><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200327_dianlu.jpg?raw=true" alt></p><a id="more"></a><h2 id="使用network模块连接WIFI"><a href="#使用network模块连接WIFI" class="headerlink" title="使用network模块连接WIFI"></a>使用network模块连接WIFI</h2><p><code>network</code>模块是和网络相关的模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> network <span class="comment"># 导入network模块</span></span><br><span class="line">wifi = network.WLAN(network.STA_IF)  <span class="comment"># 设置为STA_IF模式，即接入wifi路由器的模式AP_IF为作为热点</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200327_wifi.png?raw=true" alt></p><p>接下来我们需要激活wifi，并进行连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wifi.active(<span class="literal">True</span>) <span class="comment"># 将wifi激活</span></span><br><span class="line">wifi.connect(<span class="string">'&lt;essid&gt;'</span>,<span class="string">'&lt;password&gt;'</span>) <span class="comment">#连接至wifi</span></span><br></pre></td></tr></table></figure><h3 id="查看wifi连接状态"><a href="#查看wifi连接状态" class="headerlink" title="查看wifi连接状态"></a>查看wifi连接状态</h3><p>使用<code>ifconfig</code>查看网络状态：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wifi.ifconfig()</span><br></pre></td></tr></table></figure><h2 id="WebREPL"><a href="#WebREPL" class="headerlink" title="WebREPL"></a>WebREPL</h2><p>WebREPL是一个使用Web前端技术栈构建的单页应用。</p><p><strong>WebREPL允许你通过WiFi使用MicroPython的REPL，通过浏览器连接，使用了WebSockt通信协议</strong>。</p><p>在MicroPython的网站上托管了WebREPL的单页应用，点击如下链接即可访问：</p><p><a href="http://micropython.org/webrepl" target="_blank" rel="noopener">http://micropython.org/webrepl</a></p><p>两个步骤</p><ul><li>初始化WebREPL</li><li>开启WebREPL</li></ul><h3 id="初始化WebREPL"><a href="#初始化WebREPL" class="headerlink" title="初始化WebREPL"></a>初始化WebREPL</h3><p>初次使用WebREPL，我们先要使用<code>webrepl_setup</code>模块来进行初始化设置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> webrepl_setup</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200327_repl_confirm_password.png?raw=true" alt></p><p>当你看到亲切的<code>&gt;&gt;&gt;</code>提示符时，则表明你已成功的连接到了WebREPL</p><h3 id="开启WebREPL"><a href="#开启WebREPL" class="headerlink" title="开启WebREPL"></a>开启WebREPL</h3><p>接下来，我们直接开启webrepl的服务:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> webrepl</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>webrepl.start()</span><br></pre></td></tr></table></figure><p>如上两句指令执行后，如下图所示：</p><h3 id="连接WebREPL"><a href="#连接WebREPL" class="headerlink" title="连接WebREPL"></a>连接WebREPL</h3><p>访问<a href="http://micropython.org/webrepl" target="_blank" rel="noopener">http://micropython.org/webrepl</a></p><p>输入正确的URL,然后点击Connet按钮</p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200327_repl_connection_success.png?raw=true" alt></p><h3 id="试试WebREPL"><a href="#试试WebREPL" class="headerlink" title="试试WebREPL"></a>试试WebREPL</h3><p>现在，你可以在这个Web页面上欢快的玩耍了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;esp32-micropython-之旅-03-webrepl&quot;&gt;&lt;a href=&quot;#esp32-micropython-之旅-03-webrepl&quot; class=&quot;headerlink&quot; title=&quot;esp32  micropython 之旅 03 webrepl&quot;&gt;&lt;/a&gt;esp32  micropython 之旅 03 webrepl&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/jeffsui/app_image_resource/blob/master/20200327_dianlu.jpg?raw=true&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="micropython" scheme="https://pinghailinfeng.gitee.io/categories/python/micropython/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="esp32" scheme="https://pinghailinfeng.gitee.io/tags/esp32/"/>
    
      <category term="micorpython" scheme="https://pinghailinfeng.gitee.io/tags/micorpython/"/>
    
      <category term="webrepl" scheme="https://pinghailinfeng.gitee.io/tags/webrepl/"/>
    
  </entry>
  
  <entry>
    <title>esp32 micropython using uPycraft IDE</title>
    <link href="https://pinghailinfeng.gitee.io/2020/03/24/esp32-micropython-using-uPyCraft/"/>
    <id>https://pinghailinfeng.gitee.io/2020/03/24/esp32-micropython-using-uPyCraft/</id>
    <published>2020-03-24T15:51:00.000Z</published>
    <updated>2022-08-18T08:03:08.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="esp32-micropython-之旅-02-使用uPycraft-IDE"><a href="#esp32-micropython-之旅-02-使用uPycraft-IDE" class="headerlink" title="esp32 micropython 之旅 02 使用uPycraft IDE"></a>esp32 micropython 之旅 02 使用uPycraft IDE</h1><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200326getting-started-esp32.jpg?raw=true" alt></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上次使用命令方式推送代码烧录到固件,今天介绍下micropython的几个著名的IDE。</p><h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h3><ul><li>Thonny IDE </li><li>uPyCraft IDE.</li></ul><h3 id="使用uPyCraft"><a href="#使用uPyCraft" class="headerlink" title="使用uPyCraft"></a>使用<strong>uPyCraft</strong></h3><h4 id="Step-1-点击这个链接下载uPyCraft-的-exe文件"><a href="#Step-1-点击这个链接下载uPyCraft-的-exe文件" class="headerlink" title="Step 1.  点击这个链接下载uPyCraft 的.exe文件"></a><strong>Step 1.</strong>  点击这个<a href="https://github.com/DFRobot/uPyCraft" target="_blank" rel="noopener">链接</a>下载<strong>uPyCraft</strong> 的.exe文件</h4><h4 id="Step-2-双击安装包-打开安装后偶uPyCraft-可能是这个样子"><a href="#Step-2-双击安装包-打开安装后偶uPyCraft-可能是这个样子" class="headerlink" title="Step 2.   双击安装包,打开安装后偶uPyCraft 可能是这个样子"></a><strong>Step 2.</strong>   双击安装包,打开安装后偶uPyCraft 可能是这个样子</h4><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200326-Installing-uPyCraft-IDE-on-Windows-to-Program-ESP32.png?raw=true" alt></p><h4 id="uPyCraft-核心组件"><a href="#uPyCraft-核心组件" class="headerlink" title="uPyCraft 核心组件"></a>uPyCraft 核心组件</h4><h5 id="1-Folder-and-Files"><a href="#1-Folder-and-Files" class="headerlink" title="1. Folder and Files"></a>1. Folder and Files</h5><ul><li><p>Device ：设备 是esp32还是esp8266 还是microbit</p></li><li><p>SD : 包含文件存储的 SD 卡。很多不开发版都支持SD </p></li><li><p>uPy_lib:  包含micropython 内置模块</p></li><li><p>workSpace : 将保结果存到本地</p></li></ul><h5 id="2-Editor-：编写python代码。"><a href="#2-Editor-：编写python代码。" class="headerlink" title="2. Editor ：编写python代码。"></a>2. Editor ：编写python代码。</h5><p><strong>3. Shell/Terminal:</strong>  终端</p><h5 id="4-Tools-创建新文件，保存和上传文件到开发板上，关闭连接等功能。"><a href="#4-Tools-创建新文件，保存和上传文件到开发板上，关闭连接等功能。" class="headerlink" title="4. Tools:   创建新文件，保存和上传文件到开发板上，关闭连接等功能。"></a><strong>4. Tools:</strong>   创建新文件，保存和上传文件到开发板上，关闭连接等功能。</h5><h3 id="开始烧录最新的-esp32-micropython-固件"><a href="#开始烧录最新的-esp32-micropython-固件" class="headerlink" title="开始烧录最新的 esp32 micropython 固件"></a>开始烧录最新的 esp32 micropython 固件</h3><p>首先,从<a href="https://micropython.org/download#esp32" target="_blank" rel="noopener">这个</a>站点,下载最新的esp32 micropython固件</p><p><strong>Step 2.</strong>,打开 <strong>uPyCraft</strong> ，点击 <strong>*Tools-&gt; Serial**</strong> 选择映射端口. </p><p>  <img src="https://github.com/jeffsui/app_image_resource/blob/master/20200326Flashing-MicroPython-Firmware-on-ESP32-Board.png?raw=true" alt></p><p> <strong>Step 2.</strong> 选择<strong>*Tools-&gt;board*</strong>.这里我们选择esp32</p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200326-using-uPyCrfaft-burn-micropython.png?raw=true" alt></p><p> <strong>Step 3.</strong> 开始烧录</p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200326Flashing-MicroPython-Firmware-on-ESP32.png?raw=true" alt></p><h3 id="使用-uPyCraft-IDE-上传代码到esp32"><a href="#使用-uPyCraft-IDE-上传代码到esp32" class="headerlink" title="使用  uPyCraft IDE 上传代码到esp32"></a>使用  <strong>uPyCraft IDE</strong> 上传代码到esp32</h3><p><strong>Step 1.</strong> 打开 uPyCraft IDE 和 <strong>Tools-&gt;boards</strong>，选择你的主板</p><p><strong>Step 2.</strong> 直接点击 <strong><em>tools-&gt; Serial\</em></strong> 选择COM口.</p><p><strong>Step 3.</strong> 点击Connect 连接IDE和esp主板</p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200326Uploading-the-Code%20into-ESP32.png?raw=true" alt></p><p> <strong>Step 4.</strong> 如果连接正常,则下面的终端区会显示  <strong>&gt;&gt;&gt;</strong> 符号,此时可以执行micropython的命令。</p><p>  <strong>Step 5.</strong>现在点击iNew File,并保存到本地。</p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200326Programming-and-uploading-the-code-into-ESP32-using-uPyCraft-IDE.png?raw=true" alt></p><p><strong>Step 6.</strong> 点击新创建的文件,开始编写小灯程序的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> machine <span class="keyword">import</span> Pin</span><br><span class="line">led = Pin(<span class="number">2</span>, Pin.OUT)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    led.value(<span class="keyword">not</span> led.value())</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>​    </p><p> <strong>Step 7.</strong> 点击 <strong><em>Download and run\</em></strong> 按钮</p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200326uPyCraft-IDE-blink-script-to-board.png?raw=true" alt></p><p> <strong>Step 8.</strong> 重新测试代码是否正确,点击 <strong><em>En/Reset\</em></strong> 按钮。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>不知道什么原因,win7操作系统 uPycraft 就是识别不了 我的板子,换成win10 一次性搞定。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;esp32-micropython-之旅-02-使用uPycraft-IDE&quot;&gt;&lt;a href=&quot;#esp32-micropython-之旅-02-使用uPycraft-IDE&quot; class=&quot;headerlink&quot; title=&quot;esp32 micropython 之旅 02 使用uPycraft IDE&quot;&gt;&lt;/a&gt;esp32 micropython 之旅 02 使用uPycraft IDE&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/jeffsui/app_image_resource/blob/master/20200326getting-started-esp32.jpg?raw=true&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="micropython" scheme="https://pinghailinfeng.gitee.io/categories/python/micropython/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="micropython" scheme="https://pinghailinfeng.gitee.io/tags/micropython/"/>
    
      <category term="esp32" scheme="https://pinghailinfeng.gitee.io/tags/esp32/"/>
    
      <category term="uPycraft" scheme="https://pinghailinfeng.gitee.io/tags/uPycraft/"/>
    
  </entry>
  
  <entry>
    <title>esp32 micropython tutorial 01 environment setup</title>
    <link href="https://pinghailinfeng.gitee.io/2020/03/23/esp32-micropython-tutorial-01-environment-setup/"/>
    <id>https://pinghailinfeng.gitee.io/2020/03/23/esp32-micropython-tutorial-01-environment-setup/</id>
    <published>2020-03-23T15:27:29.000Z</published>
    <updated>2022-08-18T08:03:08.611Z</updated>
    
    <content type="html"><![CDATA[<h1 id="esp32-micropython-之旅-01-环境搭建"><a href="#esp32-micropython-之旅-01-环境搭建" class="headerlink" title="esp32  micropython 之旅 01 环境搭建"></a>esp32  micropython 之旅 01 环境搭建</h1><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/ardunio_logo.jpg?raw=true" alt></p><a id="more"></a><p>今天开始另一个系列的文章,有关嵌入式的专题,希望大家能支持我！</p><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><table><thead><tr><th>环境</th><th>版本</th></tr></thead><tbody><tr><td>操作系统</td><td>win7 64位 旗舰版</td></tr><tr><td>micropython</td><td>v1.12</td></tr><tr><td>esp32</td><td>uno D1 R32</td></tr><tr><td>ardunio ide</td><td>v1.8.12</td></tr></tbody></table><h2 id="开箱时刻"><a href="#开箱时刻" class="headerlink" title="开箱时刻"></a>开箱时刻</h2><p>某宝买了一个不到30块钱的板子,支持蓝牙、WIFI,4m缓存,直接开搞</p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/b3c9d52def57969321ed5dad73c169a.jpg?raw=true" alt></p><p>开箱通电</p><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/6fd65f0e334bf5b843ec2a3367e0b7c.jpg?raw=true" alt></p><p>安装驱动部分我一篇再说,下面是具体刷<code>micropython</code>固件过程</p><h2 id="安装-esptool"><a href="#安装-esptool" class="headerlink" title="安装 esptool"></a>安装 esptool</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install esptool</span><br></pre></td></tr></table></figure><h2 id="擦除固件"><a href="#擦除固件" class="headerlink" title="擦除固件"></a>擦除固件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">esptool.py --chip esp32 --port /dev/ttyUSB0 erase_flash</span><br></pre></td></tr></table></figure><h2 id="刷micropython固件"><a href="#刷micropython固件" class="headerlink" title="刷micropython固件"></a>刷micropython固件</h2><p><a href="https://micropython.org/download#esp32" target="_blank" rel="noopener">固件下载地址</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">esptool.py --port COM13 write_flash 0x1000 esp32-idf3-20200323-v1.12-270-g38ccb4c64.bin</span><br></pre></td></tr></table></figure><h2 id="编写小灯闪亮程序"><a href="#编写小灯闪亮程序" class="headerlink" title="编写小灯闪亮程序"></a>编写小灯闪亮程序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> machine <span class="keyword">import</span> Pin</span><br><span class="line">p0 = Pin(<span class="number">2</span>,Pin.OUT)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p0.value(<span class="number">0</span>)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    p0.value(<span class="number">1</span>)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><h2 id="通过ampy命令推送到uno中"><a href="#通过ampy命令推送到uno中" class="headerlink" title="通过ampy命令推送到uno中"></a>通过ampy命令推送到uno中</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install adafruit-ampy</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ampy --port COM13 put blink.py</span><br></pre></td></tr></table></figure><h2 id="查看固件中的文件"><a href="#查看固件中的文件" class="headerlink" title="查看固件中的文件"></a>查看固件中的文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Type "help()" for more information.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; import os</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; os.listdir()</span></span><br><span class="line">['boot.py', 'blink.py']</span><br></pre></td></tr></table></figure><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.remove('blink.py')</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>引脚问题还没解决,小灯正常应该可以点亮,以后有得玩了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;esp32-micropython-之旅-01-环境搭建&quot;&gt;&lt;a href=&quot;#esp32-micropython-之旅-01-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;esp32  micropython 之旅 01 环境搭建&quot;&gt;&lt;/a&gt;esp32  micropython 之旅 01 环境搭建&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/jeffsui/app_image_resource/blob/master/ardunio_logo.jpg?raw=true&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="micropython" scheme="https://pinghailinfeng.gitee.io/categories/micropython/"/>
    
      <category term="esp32" scheme="https://pinghailinfeng.gitee.io/categories/micropython/esp32/"/>
    
    
      <category term="micropython" scheme="https://pinghailinfeng.gitee.io/tags/micropython/"/>
    
      <category term="esp32" scheme="https://pinghailinfeng.gitee.io/tags/esp32/"/>
    
      <category term="esptool" scheme="https://pinghailinfeng.gitee.io/tags/esptool/"/>
    
  </entry>
  
  <entry>
    <title>python standard_library fileinput</title>
    <link href="https://pinghailinfeng.gitee.io/2020/03/22/python-standard-library-fileinput/"/>
    <id>https://pinghailinfeng.gitee.io/2020/03/22/python-standard-library-fileinput/</id>
    <published>2020-03-22T15:55:23.000Z</published>
    <updated>2022-08-18T08:03:08.611Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-标准库-fileinput"><a href="#Python-标准库-fileinput" class="headerlink" title="Python 标准库 fileinput"></a>Python 标准库 fileinput</h1><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200323_input-output.jpg?raw=true" alt></p><a id="more"></a><p><strong>源代码:</strong> <a href="https://github.com/python/cpython/tree/3.8/Lib/fileinput.py" target="_blank" rel="noopener">Lib/fileinput.py</a></p><hr><p>此模块实现了一个辅助类和一些函数用来快速编写访问标准输入或文件列表的循环。 如果你只想要读写一个文件请参阅 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#open" target="_blank" rel="noopener"><code>open()</code></a>。</p><p>典型用法为:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fileinput.input():</span><br><span class="line">    process(line)</span><br></pre></td></tr></table></figure><p>此程序会迭代 <code>sys.argv[1:]</code> 中列出的所有文件内的行，如果列表为空则会使用 <code>sys.stdin</code>。 如果有一个文件名为 <code>&#39;-&#39;</code>，它也会被替换为 <code>sys.stdin</code> 并且可选参数 <em>mode</em> 和 <em>openhook</em> 会被忽略。 要指定替代文件列表，请将其作为第一个参数传给 <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.input" target="_blank" rel="noopener"><code>input()</code></a>。 也允许使用单个文件。</p><p>所有文件都默认以文本模式打开，但你可以通过在调用 <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.input" target="_blank" rel="noopener"><code>input()</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.FileInput" target="_blank" rel="noopener"><code>FileInput</code></a> 时指定 <em>mode</em> 形参来重载此行为。 如果在打开或读取文件时发生了 I/O 错误，将会引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#OSError" target="_blank" rel="noopener"><code>OSError</code></a>。</p><p><em>在 3.3 版更改:</em> 原来会引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#IOError" target="_blank" rel="noopener"><code>IOError</code></a>；现在它是 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#OSError" target="_blank" rel="noopener"><code>OSError</code></a> 的别名。</p><p>如果 <code>sys.stdin</code> 被使用超过一次，则第二次之后的使用将不返回任何行，除非是被交互式的使用，或都是被显式地重置 (例如使用 <code>sys.stdin.seek(0)</code>)。</p><p>空文件打开后将立即被关闭；它们在文件列表中会被注意到的唯一情况只有当最后打开的文件为空的时候。</p><p>反回的行不会对换行符做任何处理，这意味着文件中的最后一行可能不带换行符。</p><p>想要控制文件的打开方式，你可以通过将 <em>openhook</em> 形参传给 <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.input" target="_blank" rel="noopener"><code>fileinput.input()</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.FileInput" target="_blank" rel="noopener"><code>FileInput()</code></a> 来提供一个打开钩子。 此钩子必须为一个函数，它接受两个参数，<em>filename</em> 和 <em>mode</em>，并返回一个以相应模式打开的文件类对象。 此模块已经提供了两个有用的钩子。</p><p>以下函数是此模块的初始接口：</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li><p><code>fileinput.input</code>(<em>files=None</em>, <em>inplace=False</em>, <em>backup=’’</em>, <em>**, </em>mode=’r’<em>, </em>openhook=None*)</p><p>创建一个 <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.FileInput" target="_blank" rel="noopener"><code>FileInput</code></a> 类的实例。 该实例将被用作此模块中函数的全局状态，并且还将在迭代期间被返回使用。 此函数的形参将被继续传递给 <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.FileInput" target="_blank" rel="noopener"><code>FileInput</code></a> 类的构造器。</p><p><a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.FileInput" target="_blank" rel="noopener"><code>FileInput</code></a> 实例可以在 <a href="https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#with" target="_blank" rel="noopener"><code>with</code></a> 语句中被用作上下文管理器。 在这个例子中，<em>input</em> 在 <code>with</code> 语句结束后将会被关闭，即使发生了异常也是如此:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">with fileinput.input(files=(&apos;spam.txt&apos;, &apos;eggs.txt&apos;)) as f:</span><br><span class="line">    for line in f:</span><br><span class="line">        process(line)</span><br></pre></td></tr></table></figure><p><em>在 3.2 版更改:</em> 可以被用作上下文管理器。</p><p><em>在 3.8 版更改:</em> 关键字形参 <em>mode</em> 和 <em>openhook</em> 现在是仅限关键字形参。</p></li></ul><p>下列函数会使用 <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.input" target="_blank" rel="noopener"><code>fileinput.input()</code></a> 所创建的全局状态；如果没有活动的状态，则会引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#RuntimeError" target="_blank" rel="noopener"><code>RuntimeError</code></a>。</p><ul><li><p><code>fileinput.filename</code>()</p><p>返回当前被读取的文件名。 在第一行被读取之前，返回 <code>None</code>。</p></li><li><p><code>fileinput.fileno</code>()</p><p>返回以整数表示的当前文件“文件描述符”。 当未打开文件时（处在第一行和文件之间），返回 <code>-1</code>。</p></li><li><p><code>fileinput.lineno</code>()</p><p>返回已被读取的累计行号。 在第一行被读取之前，返回 <code>0</code>。 在最后一个文件的最后一行被读取之后，返回该行的行号。</p></li><li><p><code>fileinput.filelineno</code>()</p><p>返回当前文件中的行号。 在第一行被读取之前，返回 <code>0</code>。 在最后一个文件的最后一行被读取之后，返回此文件中该行的行号。</p></li><li><p><code>fileinput.isfirstline</code>()</p><p>如果刚读取的行是其所在文件的第一行则返回 <code>True</code>，否则返回 <code>False</code>。</p></li><li><p><code>fileinput.isstdin</code>()</p><p>如果最后读取的行来自 <code>sys.stdin</code> 则返回 <code>True</code>，否则返回 <code>False</code>。</p></li><li><p><code>fileinput.nextfile</code>()</p><p>关闭当前文件以使下次迭代将从下一个文件（如果存在）读取第一行；不是从该文件读取的行将不会被计入累计行数。 直到下一个文件的第一行被读取之后文件名才会改变。 在第一行被读取之前，此函数将不会生效；它不能被用来跳过第一个文件。 在最后一个文件的最后一行被读取之后，此函数将不再生效。</p></li><li><p><code>fileinput.close</code>()</p><p>关闭序列。</p></li></ul><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>此模块所提供的实现了序列行为的类同样也可用于子类化：</p><ul><li><p><em>class</em> <code>fileinput.FileInput</code>(<em>files=None</em>, <em>inplace=False</em>, <em>backup=’’</em>, <em>**, </em>mode=’r’<em>, </em>openhook=None*)</p><p>类 <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.FileInput" target="_blank" rel="noopener"><code>FileInput</code></a> 是一个实现；它的方法 <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.filename" target="_blank" rel="noopener"><code>filename()</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.fileno" target="_blank" rel="noopener"><code>fileno()</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.lineno" target="_blank" rel="noopener"><code>lineno()</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.filelineno" target="_blank" rel="noopener"><code>filelineno()</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.isfirstline" target="_blank" rel="noopener"><code>isfirstline()</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.isstdin" target="_blank" rel="noopener"><code>isstdin()</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.nextfile" target="_blank" rel="noopener"><code>nextfile()</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.close" target="_blank" rel="noopener"><code>close()</code></a> 对应于此模块中具有相同名称的函数。 此外它还有一个 <a href="https://docs.python.org/zh-cn/3.8/library/io.html#io.TextIOBase.readline" target="_blank" rel="noopener"><code>readline()</code></a> 方法可返回下一个输入行，以及一个 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__getitem__" target="_blank" rel="noopener"><code>__getitem__()</code></a> 方法，该方法实现了序列行为。 这种序列必须以严格的序列顺序来读写；随机读写和 <a href="https://docs.python.org/zh-cn/3.8/library/io.html#io.TextIOBase.readline" target="_blank" rel="noopener"><code>readline()</code></a> 不可以被混用。</p><p>通过 <em>mode</em> 你可以指定要传给 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#open" target="_blank" rel="noopener"><code>open()</code></a> 的文件模式。 它必须为 <code>&#39;r&#39;</code>, <code>&#39;rU&#39;</code>, <code>&#39;U&#39;</code> 和 <code>&#39;rb&#39;</code> 中的一个。</p><p><em>openhook</em> 如果给出则必须为一个函数，它接受两个参数 <em>filename</em> 和 <em>mode</em>，并相应地返回一个打开的文件类对象。 你不能同时使用 <em>inplace</em> 和 <em>openhook</em>。</p><p><a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.FileInput" target="_blank" rel="noopener"><code>FileInput</code></a> 实例可以在 <a href="https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#with" target="_blank" rel="noopener"><code>with</code></a> 语句中被用作上下文管理器。 在这个例子中，<em>input</em> 在 <code>with</code> 语句结束后将会被关闭，即使发生了异常也是如此:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> FileInput(files=(<span class="string">'spam.txt'</span>, <span class="string">'eggs.txt'</span>)) <span class="keyword">as</span> input:</span><br><span class="line">    process(input)</span><br></pre></td></tr></table></figure><p><em>在 3.2 版更改:</em> 可以被用作上下文管理器。</p><p><em>3.4 版后已移除:</em> <code>&#39;rU&#39;</code> 和 <code>&#39;U&#39;</code> 模式。</p><p><em>3.8 版后已移除:</em> 对 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__getitem__" target="_blank" rel="noopener"><code>__getitem__()</code></a> 方法的支持已弃用。</p><p><em>在 3.8 版更改:</em> 关键字形参 <em>mode</em> 和 <em>openhook</em> 现在是仅限关键字形参。</p></li></ul><p><strong>可选的原地过滤:</strong> 如果传递了关键字参数 <code>inplace=True</code> 给 <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.input" target="_blank" rel="noopener"><code>fileinput.input()</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/fileinput.html#fileinput.FileInput" target="_blank" rel="noopener"><code>FileInput</code></a> 构造器，则文件会被移至备份文件并将标准输出定向到输入文件（如果已存在与备份文件同名的文件，它将被静默地替换）。 这使得编写一个能够原地重写其输入文件的过滤器成为可能。 如果给出了 <em>backup</em> 形参 (通常形式为 <code>backup=&#39;.&lt;some extension&gt;&#39;</code>)，它将指定备份文件的扩展名，并且备份文件会被保留；默认情况下扩展名为 <code>&#39;.bak&#39;</code> 并且它会在输出文件关闭时被删除。 在读取标准输入时原地过滤会被禁用。</p><p>此模块提供了以下两种打开文件钩子：</p><ul><li><p><code>fileinput.hook_compressed</code>(<em>filename</em>, <em>mode</em>)</p><p>使用 <a href="https://docs.python.org/zh-cn/3.8/library/gzip.html#module-gzip" target="_blank" rel="noopener"><code>gzip</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/library/bz2.html#module-bz2" target="_blank" rel="noopener"><code>bz2</code></a> 模块透明地打开 gzip 和 bzip2 压缩的文件（通过扩展名 <code>&#39;.gz&#39;</code> 和 <code>&#39;.bz2&#39;</code> 来识别）。 如果文件扩展名不是 <code>&#39;.gz&#39;</code> 或 <code>&#39;.bz2&#39;</code>，文件会以正常方式打开（即使用 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#open" target="_blank" rel="noopener"><code>open()</code></a> 并且不带任何解压操作）。使用示例: <code>fi = fileinput.FileInput(openhook=fileinput.hook_compressed)</code></p></li><li><p><code>fileinput.hook_encoded</code>(<em>encoding</em>, <em>errors=None</em>)</p><p>返回一个通过 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#open" target="_blank" rel="noopener"><code>open()</code></a> 打开每个文件的钩子，使用给定的 <em>encoding</em> 和 <em>errors</em> 来读取文件。使用示例: <code>fi = fileinput.FileInput(openhook=fileinput.hook_encoded(&quot;utf-8&quot;, &quot;surrogateescape&quot;))</code><em>在 3.6 版更改:</em> 添加了可选的 <em>errors</em> 形参。</p></li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><em>利用fileinput及re做日志分析: 提取所有含日期的行</em></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#--样本文件--</span></span><br><span class="line">aaa</span><br><span class="line"><span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">13</span>:<span class="number">45</span>:<span class="number">30</span>  Error: **** Due to System Disk spacke <span class="keyword">not</span> enough...</span><br><span class="line">bbb</span><br><span class="line"><span class="number">1970</span><span class="number">-01</span><span class="number">-02</span> <span class="number">10</span>:<span class="number">20</span>:<span class="number">30</span>  Error: **** Due to System Out of Memory...</span><br><span class="line">ccc</span><br><span class="line"> </span><br><span class="line"><span class="comment">#---测试脚本---</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line">pattern = <span class="string">'d&#123;4&#125;-d&#123;2&#125;-d&#123;2&#125; d&#123;2&#125;:d&#123;2&#125;:d&#123;2&#125;'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fileinput.input(<span class="string">'error.log'</span>,backup=<span class="string">'.bak'</span>,inplace=<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> re.search(pattern,line):</span><br><span class="line">        sys.stdout.write(=&gt; )</span><br><span class="line">        sys.stdout.write(line)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#---测试结果---</span></span><br><span class="line">=&gt; 1970-01-01 13:45:30  Error: **** Due to System Disk spacke not enough...</span><br><span class="line">=&gt; 1970-01-02 10:20:30  Error: **** Due to System Out of Memory...</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python-标准库-fileinput&quot;&gt;&lt;a href=&quot;#Python-标准库-fileinput&quot; class=&quot;headerlink&quot; title=&quot;Python 标准库 fileinput&quot;&gt;&lt;/a&gt;Python 标准库 fileinput&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/jeffsui/app_image_resource/blob/master/20200323_input-output.jpg?raw=true&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/categories/python/standard-library/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="fileinput" scheme="https://pinghailinfeng.gitee.io/tags/fileinput/"/>
    
  </entry>
  
  <entry>
    <title>python standard_library Built-in Exception</title>
    <link href="https://pinghailinfeng.gitee.io/2020/03/21/python-standard-library-Built-in-Exception/"/>
    <id>https://pinghailinfeng.gitee.io/2020/03/21/python-standard-library-Built-in-Exception/</id>
    <published>2020-03-21T14:36:13.000Z</published>
    <updated>2022-08-18T08:03:08.611Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库-内置异常"><a href="#python-标准库-内置异常" class="headerlink" title="python 标准库 内置异常"></a>python 标准库 内置异常</h1><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200321_exception.jpg?raw=true" alt></p><a id="more"></a><p>在 Python 中，所有异常必须为一个派生自 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#BaseException" target="_blank" rel="noopener"><code>BaseException</code></a> 的类的实例。 在带有提及一个特定类的 <a href="https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#except" target="_blank" rel="noopener"><code>except</code></a> 子句的 <a href="https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> 语句中，该子句也会处理任何派生自该类的异常类（但不处理 <em>它</em> 所派生出的异常类）。 通过子类化创建的两个不相关异常类永远是不等效的，既使它们具有相同的名称。</p><p>下面列出的内置异常可通过解释器或内置函数来生成。除非另有说明，它们都会具有一个提示导致错误详细原因的“关联值”。 这可以是一个字符串或由多个信息项（例如一个错误码和一个解释错误的字符串）组成的元组。 关联值通常会作为参数被传递给异常类的构造器。</p><p>用户代码可以引发内置异常。 这可被用于测试异常处理程序或报告错误条件，“就像” 在解释器引发了相同异常的情况时一样；但是请注意，没有任何机制能防止用户代码引发不适当的错误。</p><p>内置异常类可以被子类化以定义新的异常；鼓励程序员从 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#Exception" target="_blank" rel="noopener"><code>Exception</code></a> 类或它的某个子类而不是从 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#BaseException" target="_blank" rel="noopener"><code>BaseException</code></a> 来派生新的异常。 关于定义异常的更多信息可以在 Python 教程的 <a href="https://docs.python.org/zh-cn/3.8/tutorial/errors.html#tut-userexceptions" target="_blank" rel="noopener">用户自定义异常</a> 部分查看。</p><p>当在 <a href="https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#except" target="_blank" rel="noopener"><code>except</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#finally" target="_blank" rel="noopener"><code>finally</code></a> 子句中引发（或重新引发）异常时，<code>__context__</code> 会被自动设为所捕获的最后一个异常；如果新的异常未被处理，则最终显示的回溯信息将包括原始的异常和最后的异常。</p><p>当引发一个新的异常（而不是简单地使用 <code>raise</code> 来重新引发当前在处理的异常）时，隐式的异常上下文可以通过使用带有 <a href="https://docs.python.org/zh-cn/3.8/reference/simple_stmts.html#raise" target="_blank" rel="noopener"><code>raise</code></a> 的 <a href="https://docs.python.org/zh-cn/3.8/reference/simple_stmts.html#from" target="_blank" rel="noopener"><code>from</code></a> 来补充一个显式的原因:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">raise</span> new_exc <span class="keyword">from</span> original_exc</span><br></pre></td></tr></table></figure><p>跟在 <a href="https://docs.python.org/zh-cn/3.8/reference/simple_stmts.html#from" target="_blank" rel="noopener"><code>from</code></a> 之后的表达式必须为一个异常或 <code>None</code>。 它将在所引发的异常上被设置为 <code>__cause__</code>。 设置 <code>__cause__</code> 还会隐式地将 <code>__suppress_context__</code> 属性设为 <code>True</code>，这样使用 <code>raise new_exc from None</code> 可以有效地将旧异常替换为新异常来显示其目的 (例如将 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#KeyError" target="_blank" rel="noopener"><code>KeyError</code></a> 转换为 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#AttributeError" target="_blank" rel="noopener"><code>AttributeError</code></a>)，同时让旧异常在 <code>__context__</code> 中保持可用状态以便在调试时进行内省。</p><p>除了异常本身的回溯以外，默认的回溯还会显示这些串连的异常。 <code>__cause__</code> 中的显式串连异常如果存在将总是显示。 <code>__context__</code> 中的隐式串连异常仅在 <code>__cause__</code> 为 <a href="https://docs.python.org/zh-cn/3.8/library/constants.html#None" target="_blank" rel="noopener"><code>None</code></a> 并且 <code>__suppress_context__</code> 为假值时显示。</p><p>不论在哪种情况下，异常本身总会在任何串连异常之后显示，以便回溯的最后一行总是显示所引发的最后一个异常。</p><h2 id="基类"><a href="#基类" class="headerlink" title="基类"></a>基类</h2><p>下列异常主要被用作其他异常的基类。</p><ul><li><p><em>exception</em> <code>BaseException</code></p><p>所有内置异常的基类。 它不应该被用户自定义类直接继承 (这种情况请使用 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#Exception" target="_blank" rel="noopener"><code>Exception</code></a>)。 如果在此类的实例上调用 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str()</code></a>，则会返回实例的参数表示，或者当没有参数时返回空字符串。<code>args</code>传给异常构造器的参数元组。 某些内置异常 (例如 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#OSError" target="_blank" rel="noopener"><code>OSError</code></a>) 接受特定数量的参数并赋予此元组中的元素特殊的含义，而其他异常通常只接受一个给出错误信息的单独字符串。<code>with_traceback</code>(<em>tb</em>)此方法将 <em>tb</em> 设为异常的新回溯信息并返回该异常对象。 它通常以如下的形式在异常处理程序中使用:<code>try:    ... except SomeException:    tb = sys.exc_info()[2]    raise OtherException(...).with_traceback(tb)</code></p></li><li><p><em>exception</em> <code>Exception</code></p><p>所有内置的非系统退出类异常都派生自此类。 所有用户自定义异常也应当派生自此类。</p></li><li><p><em>exception</em> <code>ArithmeticError</code></p><p>此基类用于派生针对各种算术类错误而引发的内置异常: <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#OverflowError" target="_blank" rel="noopener"><code>OverflowError</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#ZeroDivisionError" target="_blank" rel="noopener"><code>ZeroDivisionError</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#FloatingPointError" target="_blank" rel="noopener"><code>FloatingPointError</code></a>。</p></li><li><p><em>exception</em> <code>BufferError</code></p><p>当与 <a href="https://docs.python.org/zh-cn/3.8/c-api/buffer.html#bufferobjects" target="_blank" rel="noopener">缓冲区</a> 相关的操作无法执行时将被引发。</p></li><li><p><em>exception</em> <code>LookupError</code></p><p>此基类用于派生当映射或序列所使用的键或索引无效时引发的异常: <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#IndexError" target="_blank" rel="noopener"><code>IndexError</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#KeyError" target="_blank" rel="noopener"><code>KeyError</code></a>。 这可以通过 <a href="https://docs.python.org/zh-cn/3.8/library/codecs.html#codecs.lookup" target="_blank" rel="noopener"><code>codecs.lookup()</code></a> 来直接引发。</p></li></ul><h2 id="具体异常"><a href="#具体异常" class="headerlink" title="具体异常"></a>具体异常</h2><p>以下异常属于经常被引发的异常。</p><ul><li><p><em>exception</em> <code>AssertionError</code></p><p>当 <a href="https://docs.python.org/zh-cn/3.8/reference/simple_stmts.html#assert" target="_blank" rel="noopener"><code>assert</code></a> 语句失败时将被引发。</p></li><li><p><em>exception</em> <code>AttributeError</code></p><p>当属性引用 (参见 <a href="https://docs.python.org/zh-cn/3.8/reference/expressions.html#attribute-references" target="_blank" rel="noopener">属性引用</a>) 或赋值失败时将被引发。 （当一个对象根本不支持属性引用或属性赋值时则将引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a>。）</p></li><li><p><em>exception</em> <code>EOFError</code></p><p>当 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#input" target="_blank" rel="noopener"><code>input()</code></a> 函数未读取任何数据即达到文件结束条件 (EOF) 时将被引发。 （另外，<code>io.IOBase.read()</code> 和 <a href="https://docs.python.org/zh-cn/3.8/library/io.html#io.IOBase.readline" target="_blank" rel="noopener"><code>io.IOBase.readline()</code></a> 方法在遇到 EOF 则将返回一个空字符串。）</p></li><li><p><em>exception</em> <code>FloatingPointError</code></p><p>目前未被使用。</p></li><li><p><em>exception</em> <code>GeneratorExit</code></p><p>当一个 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-generator" target="_blank" rel="noopener">generator</a> 或 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-coroutine" target="_blank" rel="noopener">coroutine</a> 被关闭时将被引发；参见 <a href="https://docs.python.org/zh-cn/3.8/reference/expressions.html#generator.close" target="_blank" rel="noopener"><code>generator.close()</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#coroutine.close" target="_blank" rel="noopener"><code>coroutine.close()</code></a>。 它直接继承自 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#BaseException" target="_blank" rel="noopener"><code>BaseException</code></a> 而不是 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#Exception" target="_blank" rel="noopener"><code>Exception</code></a>，因为从技术上来说它并不是一个错误。</p></li><li><p><em>exception</em> <code>ImportError</code></p><p>当 <a href="https://docs.python.org/zh-cn/3.8/reference/simple_stmts.html#import" target="_blank" rel="noopener"><code>import</code></a> 语句尝试加载模块遇到麻烦时将被引发。 并且当 <code>from ... import</code> 中的 “from list” 存在无法找到的名称时也会被引发。<code>name</code> 与 <code>path</code> 属性可通过对构造器使用仅关键字参数来设定。 设定后它们将分别表示被尝试导入的模块名称与触发异常的任意文件所在路径。<em>在 3.3 版更改:</em> 添加了 <code>name</code> 与 <code>path</code> 属性。</p></li><li><p><em>exception</em> <code>ModuleNotFoundError</code></p><p><a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#ImportError" target="_blank" rel="noopener"><code>ImportError</code></a> 的子类，当一个模块无法被定位时将由 <a href="https://docs.python.org/zh-cn/3.8/reference/simple_stmts.html#import" target="_blank" rel="noopener"><code>import</code></a> 引发。 当在 <a href="https://docs.python.org/zh-cn/3.8/library/sys.html#sys.modules" target="_blank" rel="noopener"><code>sys.modules</code></a> 中找到 <code>None</code> 时也会被引发。<em>3.6 新版功能.</em></p></li><li><p><em>exception</em> <code>IndexError</code></p><p>当序列抽取超出范围时将被引发。 （切片索引会被静默截短到允许的范围；如果指定索引不是整数则 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a> 会被引发。）</p></li><li><p><em>exception</em> <code>KeyError</code></p><p>当在现有键集合中找不到指定的映射（字典）键时将被引发。</p></li><li><p><em>exception</em> <code>KeyboardInterrupt</code></p><p>当用户按下中断键 (通常为 Control-C 或 Delete) 时将被引发。 在执行期间，会定期检测中断信号。 该异常继承自 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#BaseException" target="_blank" rel="noopener"><code>BaseException</code></a> 以确保不会被处理 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#Exception" target="_blank" rel="noopener"><code>Exception</code></a> 的代码意外捕获，这样可以避免退出解释器。</p></li><li><p><em>exception</em> <code>MemoryError</code></p><p>当一个操作耗尽内存但情况仍可（通过删除一些对象）进行挽救时将被引发。 关联的值是一个字符串，指明是哪种（内部）操作耗尽了内存。 请注意由于底层的内存管理架构（C 的 <code>malloc()</code> 函数），解释器也许并不总是能够从这种情况下完全恢复；但它毕竟可以引发一个异常，这样就能打印出栈回溯信息，以便找出导致问题的失控程序。</p></li><li><p><em>exception</em> <code>NameError</code></p><p>当某个局部或全局名称未找到时将被引发。 此异常仅用于非限定名称。 关联的值是一条错误信息，其中包含未找到的名称。</p></li><li><p><em>exception</em> <code>NotImplementedError</code></p><p>此异常派生自 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#RuntimeError" target="_blank" rel="noopener"><code>RuntimeError</code></a>。 在用户自定义的基类中，抽象方法应当在其要求所派生类重载该方法，或是在其要求所开发的类提示具体实现尚待添加时引发此异常。注解 它不应当用来表示一个运算符或方法根本不能被支持 – 在此情况下应当让特定运算符 / 方法保持未定义，或者在子类中将其设为 <a href="https://docs.python.org/zh-cn/3.8/library/constants.html#None" target="_blank" rel="noopener"><code>None</code></a>。注解 <code>NotImplementedError</code> 和 <code>NotImplemented</code> 不可互换，即使它们有相似的名称和用途。 请参阅 <a href="https://docs.python.org/zh-cn/3.8/library/constants.html#NotImplemented" target="_blank" rel="noopener"><code>NotImplemented</code></a> 了解有关何时使用它们的详细说明。</p></li><li><p><em>exception</em> <code>OSError</code>([<em>arg</em>])</p></li><li><p><em>exception</em> <code>OSError</code>(<em>errno</em>, <em>strerror</em>[, <em>filename</em>[, <em>winerror</em>[, <em>filename2</em>]]])</p><p>此异常在一个系统函数返回系统相关的错误时将被引发，此类错误包括 I/O 操作失败例如 “文件未找到” 或 “磁盘已满” 等（不包括非法参数类型或其他偶然性错误）。</p><p>构造器的第二种形式可设置如下所述的相应属性。 如果未指定这些属性则默认为 <a href="https://docs.python.org/zh-cn/3.8/library/constants.html#None" target="_blank" rel="noopener"><code>None</code></a>。 为了能向下兼容，如果传入了三个参数，则 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#BaseException.args" target="_blank" rel="noopener"><code>args</code></a> 属性将仅包含由前两个构造器参数组成的 2 元组。</p><p>构造器实际返回的往往是 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#OSError" target="_blank" rel="noopener"><code>OSError</code></a> 的某个子类，如下文 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#os-exceptions" target="_blank" rel="noopener">OS exceptions</a> 中所描述的。 具体的子类取决于最终的 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#OSError.errno" target="_blank" rel="noopener"><code>errno</code></a> 值。 此行为仅在直接或通过别名来构造 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#OSError" target="_blank" rel="noopener"><code>OSError</code></a> 时发生，并且在子类化时不会被继承。</p><ul><li><p><code>errno</code></p><p>来自于 C 变量 <code>errno</code> 的数字错误码。</p></li><li><p><code>winerror</code></p><p>在 Windows 下，此参数将给出原生的 Windows 错误码。 而 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#OSError.errno" target="_blank" rel="noopener"><code>errno</code></a> 属性将是该原生错误码在 POSIX 平台下的近似转换形式。在 Windows 下，如果 <em>winerror</em> 构造器参数是一个整数，则 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#OSError.errno" target="_blank" rel="noopener"><code>errno</code></a> 属性会根据 Windows 错误码来确定，而 <em>errno</em> 参数会被忽略。 在其他平台上，<em>winerror</em> 参数会被忽略，并且 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#OSError.winerror" target="_blank" rel="noopener"><code>winerror</code></a> 属性将不存在。</p></li><li><p><code>strerror</code></p><p>操作系统所提供的相应错误信息。 它在 POSIX 平台中由 C 函数 <code>perror()</code> 来格式化，在 Windows 中则是由 <code>FormatMessage()</code>。</p></li><li><p><code>filename</code></p></li><li><p><code>filename2</code></p><p>对于与文件系统路径有关 (例如 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#open" target="_blank" rel="noopener"><code>open()</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/os.html#os.unlink" target="_blank" rel="noopener"><code>os.unlink()</code></a>) 的异常，<a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#OSError.filename" target="_blank" rel="noopener"><code>filename</code></a> 是传给函数的文件名。 对于涉及两个文件系统路径的函数 (例如 <a href="https://docs.python.org/zh-cn/3.8/library/os.html#os.rename" target="_blank" rel="noopener"><code>os.rename()</code></a>)，<a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#OSError.filename2" target="_blank" rel="noopener"><code>filename2</code></a> 将是传给函数的第二个文件名。</p></li></ul><p><em>在 3.3 版更改:</em> <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#EnvironmentError" target="_blank" rel="noopener"><code>EnvironmentError</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#IOError" target="_blank" rel="noopener"><code>IOError</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#WindowsError" target="_blank" rel="noopener"><code>WindowsError</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/socket.html#socket.error" target="_blank" rel="noopener"><code>socket.error</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/select.html#select.error" target="_blank" rel="noopener"><code>select.error</code></a> 与 <code>mmap.error</code> 已被合并到 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#OSError" target="_blank" rel="noopener"><code>OSError</code></a>，构造器可能返回其中一个子类。</p><p><em>在 3.4 版更改:</em> <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#OSError.filename" target="_blank" rel="noopener"><code>filename</code></a> 属性现在将是传给函数的原始文件名，而不是经过编码或基于文件系统编码进行解码之后的名称。 此外还添加了 <em>filename2</em> 构造器参数和属性。</p></li><li><p><em>exception</em> <code>OverflowError</code></p><p>当算术运算的结果大到无法表示时将被引发。 这对整数来说不可能发生（宁可引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#MemoryError" target="_blank" rel="noopener"><code>MemoryError</code></a> 也不会放弃尝试）。 但是出于历史原因，有时也会在整数超出要求范围的情况下引发 OverflowError。 因为在 C 中缺少对浮点异常处理的标准化，大多数浮点运算都不会做检查。</p></li><li><p><em>exception</em> <code>RecursionError</code></p><p>此异常派生自 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#RuntimeError" target="_blank" rel="noopener"><code>RuntimeError</code></a>。 它会在解释器检测发现超过最大递归深度 (参见 <a href="https://docs.python.org/zh-cn/3.8/library/sys.html#sys.getrecursionlimit" target="_blank" rel="noopener"><code>sys.getrecursionlimit()</code></a>) 时被引发。<em>3.5 新版功能:</em> 在此之前将只引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#RuntimeError" target="_blank" rel="noopener"><code>RuntimeError</code></a>。</p></li><li><p><em>exception</em> <code>ReferenceError</code></p><p>此异常将在使用 <a href="https://docs.python.org/zh-cn/3.8/library/weakref.html#weakref.proxy" target="_blank" rel="noopener"><code>weakref.proxy()</code></a> 函数所创建的弱引用来访问该引用的某个已被作为垃圾回收的属性时被引发。 有关弱引用的更多信息请参阅 <a href="https://docs.python.org/zh-cn/3.8/library/weakref.html#module-weakref" target="_blank" rel="noopener"><code>weakref</code></a> 模块。</p></li><li><p><em>exception</em> <code>RuntimeError</code></p><p>当检测到一个不归属于任何其他类别的错误时将被引发。 关联的值是一个指明究竟发生了什么问题的字符串。</p></li><li><p><em>exception</em> <code>StopIteration</code></p><p>由内置函数 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#next" target="_blank" rel="noopener"><code>next()</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-iterator" target="_blank" rel="noopener">iterator</a> 的 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#iterator.__next__" target="_blank" rel="noopener"><code>__next__()</code></a> 方法所引发，用来表示该迭代器不能产生下一项。</p><p>该异常对象只有一个属性 <code>value</code>，它在构造该异常时作为参数给出，默认值为 <a href="https://docs.python.org/zh-cn/3.8/library/constants.html#None" target="_blank" rel="noopener"><code>None</code></a>。</p><p>当一个 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-generator" target="_blank" rel="noopener">generator</a> 或 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-coroutine" target="_blank" rel="noopener">coroutine</a> 函数返回时，将引发一个新的 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#StopIteration" target="_blank" rel="noopener"><code>StopIteration</code></a> 实例，函数返回的值将被用作异常构造器的 <code>value</code> 形参。</p><p>如果某个生成器代码直接或间接地引发了 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#StopIteration" target="_blank" rel="noopener"><code>StopIteration</code></a>，它会被转换为 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#RuntimeError" target="_blank" rel="noopener"><code>RuntimeError</code></a> (并将 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#StopIteration" target="_blank" rel="noopener"><code>StopIteration</code></a> 保留为导致新异常的原因)。</p><p><em>在 3.3 版更改:</em> 添加了 <code>value</code> 属性及其被生成器函数用作返回值的功能。</p><p><em>在 3.5 版更改:</em> 引入了通过 <code>from __future__ import generator_stop</code> 来实现 RuntimeError 转换，参见 <a href="https://www.python.org/dev/peps/pep-0479" target="_blank" rel="noopener"><strong>PEP 479</strong></a>。</p><p><em>在 3.7 版更改:</em> 默认对所有代码启用 <a href="https://www.python.org/dev/peps/pep-0479" target="_blank" rel="noopener"><strong>PEP 479</strong></a>: 在生成器中引发的 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#StopIteration" target="_blank" rel="noopener"><code>StopIteration</code></a> 错误将被转换为 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#RuntimeError" target="_blank" rel="noopener"><code>RuntimeError</code></a>。</p></li><li><p><em>exception</em> <code>StopAsyncIteration</code></p><p>必须由一个 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-asynchronous-iterator" target="_blank" rel="noopener">asynchronous iterator</a> 对象的 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__anext__" target="_blank" rel="noopener"><code>__anext__()</code></a> 方法来引发以停止迭代操作。<em>3.5 新版功能.</em></p></li><li><p><em>exception</em> <code>SyntaxError</code></p><p>当解析器遇到语法错误时将被引发。 这可以发生在 <a href="https://docs.python.org/zh-cn/3.8/reference/simple_stmts.html#import" target="_blank" rel="noopener"><code>import</code></a> 语句，对内置函数 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#exec" target="_blank" rel="noopener"><code>exec()</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#eval" target="_blank" rel="noopener"><code>eval()</code></a> 的调用，或者读取原始脚本或标准输入（也包括交互模式）的时候。该类的实例包含有属性 <code>filename</code>, <code>lineno</code>, <code>offset</code> 和 <code>text</code> 用于方便地访问相应的详细信息。 异常实例的 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str()</code></a> 仅返回消息文本。</p></li><li><p><em>exception</em> <code>IndentationError</code></p><p>与不正确的缩进相关的语法错误的基类。 这是 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#SyntaxError" target="_blank" rel="noopener"><code>SyntaxError</code></a> 的一个子类。</p></li><li><p><em>exception</em> <code>TabError</code></p><p>当缩进包含对制表符和空格符不一致的使用时将被引发。 这是 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#IndentationError" target="_blank" rel="noopener"><code>IndentationError</code></a> 的一个子类。</p></li><li><p><em>exception</em> <code>SystemError</code></p><p>当解释器发现内部错误，但情况看起来尚未严重到要放弃所有希望时将被引发。 关联的值是一个指明发生了什么问题的字符串（表示为低层级的符号）。你应当将此问题报告给你所用 Python 解释器的作者或维护人员。 请确认报告 Python 解释器的版本号 (<code>sys.version</code>; 它也会在交互式 Python 会话开始时被打印出来)，具体的错误消息（异常所关联的值）以及可能触发该错误的程序源码。</p></li><li><p><em>exception</em> <code>SystemExit</code></p><p>此异常由 <a href="https://docs.python.org/zh-cn/3.8/library/sys.html#sys.exit" target="_blank" rel="noopener"><code>sys.exit()</code></a> 函数引发。 它继承自 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#BaseException" target="_blank" rel="noopener"><code>BaseException</code></a> 而不是 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#Exception" target="_blank" rel="noopener"><code>Exception</code></a> 以确保不会被处理 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#Exception" target="_blank" rel="noopener"><code>Exception</code></a> 的代码意外捕获。 这允许此异常正确地向上传播并导致解释器退出。 如果它未被处理，则 Python 解释器就将退出；不会打印任何栈回溯信息。 构造器接受的可选参数与传递给 <a href="https://docs.python.org/zh-cn/3.8/library/sys.html#sys.exit" target="_blank" rel="noopener"><code>sys.exit()</code></a> 的相同。 如果该值为一个整数，则它指明系统退出状态码（会传递给 C 的 <code>exit()</code> 函数）；如果该值为 <code>None</code>，则退出状态码为零；如果该值为其他类型（例如字符串），则会打印对象的值并将退出状态码设为一。</p><p>对 <a href="https://docs.python.org/zh-cn/3.8/library/sys.html#sys.exit" target="_blank" rel="noopener"><code>sys.exit()</code></a> 的调用会被转换为一个异常以便能执行清理处理程序 (<a href="https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> 语句的 <a href="https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#finally" target="_blank" rel="noopener"><code>finally</code></a> 子句)，并且使得调试器可以执行一段脚本而不必冒失去控制的风险。 如果绝对确实地需要立即退出（例如在调用 <a href="https://docs.python.org/zh-cn/3.8/library/os.html#os.fork" target="_blank" rel="noopener"><code>os.fork()</code></a> 之后的子进程中）则可使用 <a href="https://docs.python.org/zh-cn/3.8/library/os.html#os._exit" target="_blank" rel="noopener"><code>os._exit()</code></a>.</p><ul><li><p><code>code</code></p><p>传给构造器的退出状态码或错误信息（默认为 <code>None</code>。）</p></li></ul></li><li><p><em>exception</em> <code>TypeError</code></p><p>当一个操作或函数被应用于类型不适当的对象时将被引发。 关联的值是一个字符串，给出有关类型不匹配的详情。此异常可以由用户代码引发，以表明尝试对某个对象进行的操作不受支持也不应当受支持。 如果某个对象应当支持给定的操作但尚未提供相应的实现，所要引发的适当异常应为 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#NotImplementedError" target="_blank" rel="noopener"><code>NotImplementedError</code></a>。传入参数的类型错误 (例如在要求 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#int" target="_blank" rel="noopener"><code>int</code></a> 时却传入了 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#list" target="_blank" rel="noopener"><code>list</code></a>) 应当导致 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#TypeError" target="_blank" rel="noopener"><code>TypeError</code></a>，但传入参数的值错误 (例如传入要求范围之外的数值) 则应当导致 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#ValueError" target="_blank" rel="noopener"><code>ValueError</code></a>。</p></li><li><p><em>exception</em> <code>UnboundLocalError</code></p><p>当在函数或方法中对某个局部变量进行引用，但该变量并未绑定任何值时将被引发。 此异常是 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#NameError" target="_blank" rel="noopener"><code>NameError</code></a> 的一个子类。</p></li><li><p><em>exception</em> <code>UnicodeError</code></p><p>当发生与 Unicode 相关的编码或解码错误时将被引发。 此异常是 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#ValueError" target="_blank" rel="noopener"><code>ValueError</code></a> 的一个子类。</p><p><a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#UnicodeError" target="_blank" rel="noopener"><code>UnicodeError</code></a> 具有一些描述编码或解码错误的属性。 例如 <code>err.object[err.start:err.end]</code> 会给出导致编解码器失败的特定无效输入。</p><ul><li><p><code>encoding</code></p><p>引发错误的编码名称。</p></li><li><p><code>reason</code></p><p>描述特定编解码器错误的字符串。</p></li><li><p><code>object</code></p><p>编解码器试图要编码或解码的对象。</p></li><li><p><code>start</code></p><p><a href="https://docs.python.org/zh-cn/3.8/library/functions.html#object" target="_blank" rel="noopener"><code>object</code></a> 中无效数据的开始位置索引。</p></li><li><p><code>end</code></p><p><a href="https://docs.python.org/zh-cn/3.8/library/functions.html#object" target="_blank" rel="noopener"><code>object</code></a> 中无效数据的末尾位置索引（不含）。</p></li></ul></li><li><p><em>exception</em> <code>UnicodeEncodeError</code></p><p>当在编码过程中发生与 Unicode 相关的错误时将被引发。 此异常是 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#UnicodeError" target="_blank" rel="noopener"><code>UnicodeError</code></a> 的一个子类。</p></li><li><p><em>exception</em> <code>UnicodeDecodeError</code></p><p>当在解码过程中发生与 Unicode 相关的错误时将被引发。 此异常是 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#UnicodeError" target="_blank" rel="noopener"><code>UnicodeError</code></a> 的一个子类。</p></li><li><p><em>exception</em> <code>UnicodeTranslateError</code></p><p>在转写过程中发生与 Unicode 相关的错误时将被引发。 此异常是 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#UnicodeError" target="_blank" rel="noopener"><code>UnicodeError</code></a> 的一个子类。</p></li><li><p><em>exception</em> <code>ValueError</code></p><p>当操作或函数接收到具有正确类型但值不适合的参数，并且情况不能用更精确的异常例如 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#IndexError" target="_blank" rel="noopener"><code>IndexError</code></a> 来描述时将被引发。</p></li><li><p><em>exception</em> <code>ZeroDivisionError</code></p><p>当除法或取余运算的第二个参数为零时将被引发。 关联的值是一个字符串，指明操作数和运算的类型。</p></li></ul><p>下列异常被保留以与之前的版本相兼容；从 Python 3.3 开始，它们都是 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#OSError" target="_blank" rel="noopener"><code>OSError</code></a> 的别名。</p><ul><li><em>exception</em> <code>EnvironmentError</code></li></ul><ul><li><em>exception</em> <code>IOError</code></li></ul><ul><li><p><em>exception</em> <code>WindowsError</code></p><p>限在 Windows 中可用。</p></li></ul><h3 id="OS-异常"><a href="#OS-异常" class="headerlink" title="OS 异常"></a>OS 异常</h3><p>下列异常均为 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#OSError" target="_blank" rel="noopener"><code>OSError</code></a> 的子类，它们将根据系统错误代码被引发。</p><ul><li><p><em>exception</em> <code>BlockingIOError</code></p><p>当一个操作会被某个设置为非阻塞操作的对象（例如套接字）所阻塞时将被引发。 对应于 <code>errno</code> <code>EAGAIN</code>, <code>EALREADY</code>, <code>EWOULDBLOCK</code> 和 <code>EINPROGRESS</code>。除了 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#OSError" target="_blank" rel="noopener"><code>OSError</code></a> 已有的属性，<a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#BlockingIOError" target="_blank" rel="noopener"><code>BlockingIOError</code></a> 还有一个额外属性：<code>characters_written</code>一个整数，表示在被阻塞前已写入到流的字符数。 当使用来自 <a href="https://docs.python.org/zh-cn/3.8/library/io.html#module-io" target="_blank" rel="noopener"><code>io</code></a> 模块的带缓冲 I/O 类时此属性可用。</p></li><li><p><em>exception</em> <code>ChildProcessError</code></p><p>当一个子进程上的操作失败时将被引发。 对应于 <code>errno</code> <code>ECHILD</code>。</p></li><li><p><em>exception</em> <code>ConnectionError</code></p><p>与连接相关问题的基类。其子类有 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#BrokenPipeError" target="_blank" rel="noopener"><code>BrokenPipeError</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#ConnectionAbortedError" target="_blank" rel="noopener"><code>ConnectionAbortedError</code></a>, <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#ConnectionRefusedError" target="_blank" rel="noopener"><code>ConnectionRefusedError</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#ConnectionResetError" target="_blank" rel="noopener"><code>ConnectionResetError</code></a>。</p></li><li><p><em>exception</em> <code>BrokenPipeError</code></p><p><a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#ConnectionError" target="_blank" rel="noopener"><code>ConnectionError</code></a> 的子类，当试图写入另一端已被关闭的管道，或是试图写入已关闭写入的套接字时将被引发。 对应于 <code>errno</code> <code>EPIPE</code> 和 <code>ESHUTDOWN</code>。</p></li><li><p><em>exception</em> <code>ConnectionAbortedError</code></p><p><a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#ConnectionError" target="_blank" rel="noopener"><code>ConnectionError</code></a> 的子类，当连接尝试被对端中止时将被引发。 对应于 <code>errno</code> <code>ECONNABORTED</code>。</p></li><li><p><em>exception</em> <code>ConnectionRefusedError</code></p><p><a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#ConnectionError" target="_blank" rel="noopener"><code>ConnectionError</code></a> 的子类，当连接尝试被对端拒绝时将被引发。 对应于 <code>errno</code> <code>ECONNREFUSED</code>。</p></li><li><p><em>exception</em> <code>ConnectionResetError</code></p><p><a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#ConnectionError" target="_blank" rel="noopener"><code>ConnectionError</code></a> 的子类，当连接被对端重置时将被引发。 对应于 <code>errno</code> <code>ECONNRESET</code>。</p></li><li><p><em>exception</em> <code>FileExistsError</code></p><p>当试图创建一个已存在的文件或目录时将被引发。 对应于 <code>errno</code> <code>EEXIST</code>。</p></li><li><p><em>exception</em> <code>FileNotFoundError</code></p><p>当所请求的文件或目录不存在时将被引发。 对应于 <code>errno</code> <code>ENOENT</code>。</p></li><li><p><em>exception</em> <code>InterruptedError</code></p><p>当系统调用被输入信号中断时将被引发。 对应于 <code>errno</code> <a href="https://docs.python.org/zh-cn/3.8/library/errno.html#errno.EINTR" target="_blank" rel="noopener"><code>EINTR</code></a>。<em>在 3.5 版更改:</em> 当系统调用被某个信号中断时，Python 现在会重试系统调用，除非该信号的处理程序引发了其它异常 (原理参见 <a href="https://www.python.org/dev/peps/pep-0475" target="_blank" rel="noopener"><strong>PEP 475</strong></a>) 而不是引发 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#InterruptedError" target="_blank" rel="noopener"><code>InterruptedError</code></a>。</p></li><li><p><em>exception</em> <code>IsADirectoryError</code></p><p>当请求对一个目录执行文件操作 (例如 <a href="https://docs.python.org/zh-cn/3.8/library/os.html#os.remove" target="_blank" rel="noopener"><code>os.remove()</code></a>) 将被引发。 对应于 <code>errno</code> <code>EISDIR</code>。</p></li><li><p><em>exception</em> <code>NotADirectoryError</code></p><p>当请求对一个非目录对象执行目录操作 (例如 <a href="https://docs.python.org/zh-cn/3.8/library/os.html#os.listdir" target="_blank" rel="noopener"><code>os.listdir()</code></a>) 时将被引发。 对应于 <code>errno</code> <code>ENOTDIR</code>。</p></li><li><p><em>exception</em> <code>PermissionError</code></p><p>当在没有足够操作权限的情况下试图执行某个操作时将被引发 —— 例如缺少文件系统权限。 对应于 <code>errno</code> <code>EACCES</code> 和 <code>EPERM</code>。</p></li><li><p><em>exception</em> <code>ProcessLookupError</code></p><p>当给定的进程不存在时将被引发。 对应于 <code>errno</code> <code>ESRCH</code>。</p></li><li><p><em>exception</em> <code>TimeoutError</code></p><p>当一个系统函数发生系统级超时的情况下将被引发。 对应于 <code>errno</code> <code>ETIMEDOUT</code>。</p></li></ul><p><em>3.3 新版功能:</em> 添加了以上所有 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#OSError" target="_blank" rel="noopener"><code>OSError</code></a> 的子类。</p><p>参见: </p><p><a href="https://www.python.org/dev/peps/pep-3151" target="_blank" rel="noopener"><strong>PEP 3151</strong></a> - 重写 OS 和 IO 异常的层次结构</p><h2 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h2><p>下列异常被用作警告类别；请参阅 <a href="https://docs.python.org/zh-cn/3.8/library/warnings.html#warning-categories" target="_blank" rel="noopener">警告类别</a> 文档了解详情。</p><ul><li><p><em>exception</em> <code>Warning</code></p><p>警告类别的基类。</p></li><li><p><em>exception</em> <code>UserWarning</code></p><p>用户代码所产生警告的基类。</p></li><li><p><em>exception</em> <code>DeprecationWarning</code></p><p>如果所发出的警告是针对其他 Python 开发者的，则以此作为与已弃用特性相关警告的基类。</p></li><li><p><em>exception</em> <code>PendingDeprecationWarning</code></p><p>对于已过时并预计在未来弃用，但目前尚未弃用的特性相关警告的基类。这个类很少被使用，因为针对未来可能的弃用发出警告的做法并不常见，而针对当前已有的弃用则推荐使用 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#DeprecationWarning" target="_blank" rel="noopener"><code>DeprecationWarning</code></a>。</p></li><li><p><em>exception</em> <code>SyntaxWarning</code></p><p>与模糊的语法相关的警告的基类。</p></li><li><p><em>exception</em> <code>RuntimeWarning</code></p><p>与模糊的运行时行为相关的警告的基类。</p></li><li><p><em>exception</em> <code>FutureWarning</code></p><p>如果所发出的警告是针对以 Python 所编写应用的最终用户的，则以此作为与已弃用特性相关警告的基类。</p></li><li><p><em>exception</em> <code>ImportWarning</code></p><p>与在模块导入中可能的错误相关的警告的基类。</p></li><li><p><em>exception</em> <code>UnicodeWarning</code></p><p>与 Unicode 相关的警告的基类。</p></li><li><p><em>exception</em> <code>BytesWarning</code></p><p>与 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#bytes" target="_blank" rel="noopener"><code>bytes</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#bytearray" target="_blank" rel="noopener"><code>bytearray</code></a> 相关的警告的基类。</p></li><li><p><em>exception</em> <code>ResourceWarning</code></p><p>与资源使用相关的警告的基类。 会被默认的警告过滤器忽略。<em>3.2 新版功能.</em></p></li></ul><h2 id="异常层次结构"><a href="#异常层次结构" class="headerlink" title="异常层次结构"></a>异常层次结构</h2><p> 内置异常的类层级结构如下： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">BaseException</span><br><span class="line"> +-- SystemExit</span><br><span class="line"> +-- KeyboardInterrupt</span><br><span class="line"> +-- GeneratorExit</span><br><span class="line"> +-- Exception</span><br><span class="line">      +-- StopIteration</span><br><span class="line">      +-- StopAsyncIteration</span><br><span class="line">      +-- ArithmeticError</span><br><span class="line">      |    +-- FloatingPointError</span><br><span class="line">      |    +-- OverflowError</span><br><span class="line">      |    +-- ZeroDivisionError</span><br><span class="line">      +-- AssertionError</span><br><span class="line">      +-- AttributeError</span><br><span class="line">      +-- BufferError</span><br><span class="line">      +-- EOFError</span><br><span class="line">      +-- ImportError</span><br><span class="line">      |    +-- ModuleNotFoundError</span><br><span class="line">      +-- LookupError</span><br><span class="line">      |    +-- IndexError</span><br><span class="line">      |    +-- KeyError</span><br><span class="line">      +-- MemoryError</span><br><span class="line">      +-- NameError</span><br><span class="line">      |    +-- UnboundLocalError</span><br><span class="line">      +-- **OSError**</span><br><span class="line">      |    +-- BlockingIOError</span><br><span class="line">      |    +-- ChildProcessError</span><br><span class="line">      |    +-- ConnectionError</span><br><span class="line">      |    |    +-- BrokenPipeError</span><br><span class="line">      |    |    +-- ConnectionAbortedError</span><br><span class="line">      |    |    +-- ConnectionRefusedError</span><br><span class="line">      |    |    +-- ConnectionResetError</span><br><span class="line">      |    +-- FileExistsError</span><br><span class="line">      |    +-- FileNotFoundError</span><br><span class="line">      |    +-- InterruptedError</span><br><span class="line">      |    +-- IsADirectoryError</span><br><span class="line">      |    +-- NotADirectoryError</span><br><span class="line">      |    +-- PermissionError</span><br><span class="line">      |    +-- ProcessLookupError</span><br><span class="line">      |    +-- TimeoutError</span><br><span class="line">      +-- ReferenceError</span><br><span class="line">      +-- RuntimeError</span><br><span class="line">      |    +-- NotImplementedError</span><br><span class="line">      |    +-- RecursionError</span><br><span class="line">      +-- SyntaxError</span><br><span class="line">      |    +-- IndentationError</span><br><span class="line">      |         +-- TabError</span><br><span class="line">      +-- SystemError</span><br><span class="line">      +-- TypeError</span><br><span class="line">      +-- ValueError</span><br><span class="line">      |    +-- UnicodeError</span><br><span class="line">      |         +-- UnicodeDecodeError</span><br><span class="line">      |         +-- UnicodeEncodeError</span><br><span class="line">      |         +-- UnicodeTranslateError</span><br><span class="line">      +-- Warning</span><br><span class="line">           +-- DeprecationWarning</span><br><span class="line">           +-- PendingDeprecationWarning</span><br><span class="line">           +-- RuntimeWarning</span><br><span class="line">           +-- SyntaxWarning</span><br><span class="line">           +-- UserWarning</span><br><span class="line">           +-- FutureWarning</span><br><span class="line">           +-- ImportWarning</span><br><span class="line">           +-- UnicodeWarning</span><br><span class="line">           +-- BytesWarning</span><br><span class="line">           +-- ResourceWarning</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库-内置异常&quot;&gt;&lt;a href=&quot;#python-标准库-内置异常&quot; class=&quot;headerlink&quot; title=&quot;python 标准库 内置异常&quot;&gt;&lt;/a&gt;python 标准库 内置异常&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/jeffsui/app_image_resource/blob/master/20200321_exception.jpg?raw=true&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python standard_library pwd</title>
    <link href="https://pinghailinfeng.gitee.io/2020/03/20/python-standard-library-pwd/"/>
    <id>https://pinghailinfeng.gitee.io/2020/03/20/python-standard-library-pwd/</id>
    <published>2020-03-20T15:31:48.000Z</published>
    <updated>2022-08-18T08:03:08.610Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库-pwd-用户密码数据库"><a href="#python-标准库-pwd-用户密码数据库" class="headerlink" title="python 标准库 pwd 用户密码数据库"></a>python 标准库 pwd 用户密码数据库</h1><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200320_pwd.png?raw=true" alt></p><a id="more"></a><ul><li><p>此模块可以访问 Unix 用户账户名及密码数据库，在所有 Unix 版本上均可使用。</p><p>密码数据库中的条目以元组对象返回，属性对应 <code>passwd</code> 中的结构（属性如下所示，可参考 ）：</p><p>| 索引 | 属性        | 意义               |<br>| :— | :———- | :—————– |<br>| 0    | <code>pw_name</code>   | 登录名             |<br>| 1    | <code>pw_passwd</code> | 密码，可能已经加密 |<br>| 2    | <code>pw_uid</code>    | 用户 ID 数值       |<br>| 3    | <code>pw_gid</code>    | 组 ID 数值         |<br>| 4    | <code>pw_gecos</code>  | 用户名或备注       |<br>| 5    | <code>pw_dir</code>    | 用户主目录         |<br>| 6    | <code>pw_shell</code>  | 用户的命令解释器   |</p><p>其中 uid 和 gid 是整数，其他是字符串，如果找不到对应的项目，抛出 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#KeyError" target="_blank" rel="noopener"><code>KeyError</code></a> 异常。</p><p>注解:</p><p> 传统的 Unix 系统中，<code>pw_passwd</code> 的值通常使用 DES 导出的算法加密（参阅 <a href="https://docs.python.org/zh-cn/3.8/library/crypt.html#module-crypt" target="_blank" rel="noopener"><code>crypt</code></a> 模块）。不过现在的 unix 系统使用 <em>影子密码</em> 系统。在这些 unix 上，<em>pw_passwd</em> 只包含星号（<code>&#39;*&#39;</code>）或字母（<code>&#39;x&#39;</code>），而加密的密码存储在文件 <code>/etc/shadow</code> 中，此文件不是全局可读的。在 <em>pw_passwd</em> 中是否包含有用信息是系统相关的。如果可以访问到加密的密码，就需要使用 <a href="https://docs.python.org/zh-cn/3.8/library/spwd.html#module-spwd" target="_blank" rel="noopener"><code>spwd</code></a> 模块了。</p><p>本模块定义如下内容：</p><ul><li><p><code>pwd.getpwuid</code>(<em>uid</em>)</p><p>给定用户的数值 ID，返回密码数据库的对应项目。</p></li><li><p><code>pwd.getpwnam</code>(<em>name</em>)</p><p>给定用户名，返回密码数据库的对应项目。</p></li><li><p><code>pwd.getpwall</code>()</p><p>返回密码数据库中所有项目的列表，顺序不是固定的。</p></li></ul><p>参见:</p><ul><li><p>模块 <a href="https://docs.python.org/zh-cn/3.8/library/grp.html#module-grp" target="_blank" rel="noopener"><code>grp</code></a></p><p>针对用户组数据库的接口，与本模块类似。</p></li><li><p>模块 <a href="https://docs.python.org/zh-cn/3.8/library/spwd.html#module-spwd" target="_blank" rel="noopener"><code>spwd</code></a></p><p>针对影子密码数据库的接口，与本模块类似。</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库-pwd-用户密码数据库&quot;&gt;&lt;a href=&quot;#python-标准库-pwd-用户密码数据库&quot; class=&quot;headerlink&quot; title=&quot;python 标准库 pwd 用户密码数据库&quot;&gt;&lt;/a&gt;python 标准库 pwd 用户密码数据库&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/jeffsui/app_image_resource/blob/master/20200320_pwd.png?raw=true&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/categories/python/standard-library/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="pwd" scheme="https://pinghailinfeng.gitee.io/tags/pwd/"/>
    
  </entry>
  
  <entry>
    <title>python standard_library dis</title>
    <link href="https://pinghailinfeng.gitee.io/2020/03/19/python-standard-library-dis/"/>
    <id>https://pinghailinfeng.gitee.io/2020/03/19/python-standard-library-dis/</id>
    <published>2020-03-19T13:40:45.000Z</published>
    <updated>2022-08-18T08:03:08.610Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-标准库-dis"><a href="#python-标准库-dis" class="headerlink" title="python 标准库 dis"></a>python 标准库 dis</h1><p><img src="https://github.com/jeffsui/app_image_resource/blob/master/20200319_boring.jpg?raw=true" alt></p><a id="more"></a><blockquote><p>每日一词</p><p>boring  英 [bɔːd] 美 [bɔrd]  </p><p>n.钻孔；镗削；地质钻探；钻屑</p><p>adj.没趣的；令人厌倦（或厌烦）的</p><p>v.“bore”的现在分词</p><p>网络无聊的；令人厌烦的；乏味的</p></blockquote><p><strong>Source code:</strong> <a href="https://github.com/python/cpython/tree/3.8/Lib/dis.py" target="_blank" rel="noopener">Lib/dis.py</a></p><hr><p><a href="https://docs.python.org/zh-cn/3.8/library/dis.html#module-dis" target="_blank" rel="noopener"><code>dis</code></a> 模块通过反汇编支持CPython的 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-bytecode" target="_blank" rel="noopener">bytecode</a> 分析。该模块作为输入的 CPython 字节码在文件 <code>Include/opcode.h</code> 中定义，并由编译器和解释器使用。</p><p><strong>CPython implementation detail:</strong> 字节码是 CPython 解释器的实现细节。不保证不会在Python版本之间添加、删除或更改字节码。不应考虑将此模块的跨 Python VM 或 Python 版本的使用。</p><p><em>在 3.6 版更改:</em> 每条指令使用2个字节。以前字节数因指令而异。</p><p>示例：给出函数 <code>myfunc()</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> len(alist)</span><br></pre></td></tr></table></figure><p>可以使用以下命令显示 <code>myfunc()</code> 的反汇编</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dis.dis(myfunc)</span><br><span class="line">  <span class="number">2</span>           <span class="number">0</span> LOAD_GLOBAL              <span class="number">0</span> (len)</span><br><span class="line">              <span class="number">2</span> LOAD_FAST                <span class="number">0</span> (alist)</span><br><span class="line">              <span class="number">4</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">              <span class="number">6</span> RETURN_VALUE</span><br></pre></td></tr></table></figure><p>(“2” 是行号)。</p><h2 id="字节码分析"><a href="#字节码分析" class="headerlink" title="字节码分析"></a>字节码分析</h2><p><em>3.4 新版功能.</em></p><p>字节码分析 API 允许将 Python 代码片段包装在 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#dis.Bytecode" target="_blank" rel="noopener"><code>Bytecode</code></a> 对象中，以便轻松访问已编译代码的详细信息。</p><ul><li><p><em>class</em> <code>dis.Bytecode</code>(<em>x</em>, <em>**, </em>first_line=None<em>, </em>current_offset=None*)</p><p>分析的字节码对应于函数、生成器、异步生成器、协程、方法、源代码字符串或代码对象（由 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#compile" target="_blank" rel="noopener"><code>compile()</code></a> 返回）。这是下面列出的许多函数的便利包装，最值得注意的是 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#dis.get_instructions" target="_blank" rel="noopener"><code>get_instructions()</code></a> ，迭代于 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#dis.Bytecode" target="_blank" rel="noopener"><code>Bytecode</code></a> 的实例产生字节码操作 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#dis.Instruction" target="_blank" rel="noopener"><code>Instruction</code></a> 的实例。如果 <em>first_line</em> 不是 <code>None</code> ，则表示应该为反汇编代码中的第一个源代码行报告的行号。否则，源行信息（如果有的话）直接来自反汇编的代码对象。如果 <em>current_offset</em> 不是 <code>None</code> ，则它指的是反汇编代码中的指令偏移量。设置它意味着 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#dis.Bytecode.dis" target="_blank" rel="noopener"><code>dis()</code></a> 将针对指定的操作码显示“当前指令”标记。<em>classmethod</em> <code>from_traceback</code>(<em>tb</em>)从给定回溯构造一个 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#dis.Bytecode" target="_blank" rel="noopener"><code>Bytecode</code></a> 实例，将设置 <em>current_offset</em> 为异常负责的指令。<code>codeobj</code>已编译的代码对象。<code>first_line</code>代码对象的第一个源代码行（如果可用）<code>dis</code>()返回字节码操作的格式化视图（与 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#dis.dis" target="_blank" rel="noopener"><code>dis.dis()</code></a> 打印相同，但作为多行字符串返回）。<code>info</code>()返回带有关于代码对象的详细信息的格式化多行字符串，如 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#dis.code_info" target="_blank" rel="noopener"><code>code_info()</code></a> 。<em>在 3.7 版更改:</em> 现在可以处理协程和异步生成器对象。</p></li></ul><p>示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bytecode = dis.Bytecode(myfunc)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> instr <span class="keyword">in</span> bytecode:</span><br><span class="line"><span class="meta">... </span>    print(instr.opname)</span><br><span class="line">...</span><br><span class="line">LOAD_GLOBAL</span><br><span class="line">LOAD_FAST</span><br><span class="line">CALL_FUNCTION</span><br><span class="line">RETURN_VALUE</span><br></pre></td></tr></table></figure><h2 id="分析函数"><a href="#分析函数" class="headerlink" title="分析函数"></a>分析函数</h2><p><a href="https://docs.python.org/zh-cn/3.8/library/dis.html#module-dis" target="_blank" rel="noopener"><code>dis</code></a> 模块还定义了以下分析函数，它们将输入直接转换为所需的输出。如果只执行单个操作，它们可能很有用，因此中间分析对象没用：</p><ul><li><p><code>dis.code_info</code>(<em>x</em>)</p><p>返回格式化的多行字符串，其包含详细代码对象信息的用于被提供的函数、生成器、异步生成器、协程、方法、源代码字符串或代码对象。请注意，代码信息字符串的确切内容是高度依赖于实现的，它们可能会在Python VM或Python版本中任意更改。<em>3.2 新版功能.**在 3.7 版更改:</em> 现在可以处理协程和异步生成器对象。</p></li><li><p><code>dis.show_code</code>(<em>x</em>, <em>**, </em>file=None*)</p><p>将提供的函数、方法。源代码字符串或代码对象的详细代码对象信息打印到 <em>file</em> （如果未指定 <em>file</em> ，则为 <code>sys.stdout</code> ）。这是 <code>print(code_info(x), file=file)</code> 的便捷简写，用于在解释器提示符下进行交互式探索。<em>3.2 新版功能.**在 3.4 版更改:</em> 添加 <em>file</em> 形参。</p></li><li><p><code>dis.dis</code>(<em>x=None</em>, <em>**, </em>file=None<em>, </em>depth=None*)</p><p>反汇编 <em>x</em> 对象。 <em>x</em> 可以表示模块、类、方法、函数、生成器、异步生成器、协程、代码对象、源代码字符串或原始字节码的字节序列。对于模块，它会反汇编所有功能。对于一个类，它反汇编所有方法（包括类和静态方法）。对于代码对象或原始字节码序列，它每字节码指令打印一行。它还递归地反汇编嵌套代码对象（推导式代码，生成器表达式和嵌套函数，以及用于构建嵌套类的代码）。在被反汇编之前，首先使用 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#compile" target="_blank" rel="noopener"><code>compile()</code></a> 内置函数将字符串编译为代码对象。如果未提供任何对象，则此函数会反汇编最后一次回溯。如果提供的话，反汇编将作为文本写入提供的 <em>file</em> 参数，否则写入 <code>sys.stdout</code> 。递归的最大深度受 <em>depth</em> 限制，除非它是 <code>None</code> 。 <code>depth=0</code> 表示没有递归。<em>在 3.4 版更改:</em> 添加 <em>file</em> 形参。<em>在 3.7 版更改:</em> 实现了递归反汇编并添加了 <em>depth</em> 参数。<em>在 3.7 版更改:</em> 现在可以处理协程和异步生成器对象。</p></li><li><p><code>dis.distb</code>(<em>tb=None</em>, <em>**, </em>file=None*)</p><p>如果没有传递，则使用最后一个回溯来反汇编回溯的堆栈顶部函数。 指示了导致异常的指令。如果提供的话，反汇编将作为文本写入提供的 <em>file</em> 参数，否则写入 <code>sys.stdout</code> 。<em>在 3.4 版更改:</em> 添加 <em>file</em> 形参。</p></li><li><p><code>dis.disassemble</code>(<em>code</em>, <em>lasti=-1</em>, <em>**, </em>file=None*)</p></li><li><p><code>dis.disco</code>(<em>code</em>, <em>lasti=-1</em>, <em>**, </em>file=None*)</p><p>反汇编代码对象，如果提供了 <em>lasti</em> ，则指示最后一条指令。输出分为以下几列：行号，用于每行的第一条指令当前指令，表示为 <code>--&gt;</code> ，一个标记的指令，用 <code>&gt;&gt;</code> 表示，指令的地址，操作码名称，操作参数，和括号中参数的解释。参数解释识别本地和全局变量名称、常量值、分支目标和比较运算符。如果提供的话，反汇编将作为文本写入提供的 <em>file</em> 参数，否则写入 <code>sys.stdout</code> 。<em>在 3.4 版更改:</em> 添加 <em>file</em> 形参。</p></li><li><p><code>dis.get_instructions</code>(<em>x</em>, <em>**, </em>first_line=None*)</p><p>在所提供的函数、方法、源代码字符串或代码对象中的指令上返回一个迭代器。迭代器生成一系列 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#dis.Instruction" target="_blank" rel="noopener"><code>Instruction</code></a> ，命名为元组，提供所提供代码中每个操作的详细信息。如果 <em>first_line</em> 不是 <code>None</code> ，则表示应该为反汇编代码中的第一个源代码行报告的行号。否则，源行信息（如果有的话）直接来自反汇编的代码对象。<em>3.4 新版功能.</em></p></li><li><p><code>dis.findlinestarts</code>(<em>code</em>)</p><p>此生成器函数使用代码对象 <em>code</em> 的 <code>co_firstlineno</code> 和 <code>co_lnotab</code> 属性来查找源代码中行开头的偏移量。它们生成为 <code>(offset, lineno)</code> 对。请参阅 <a href="https://github.com/python/cpython/tree/3.8/objects/lnotab_notes.txt" target="_blank" rel="noopener">objects/lnotab_notes.txt</a> ，了解 <code>co_lnotab</code> 格式以及如何解码它。<em>在 3.6 版更改:</em> 行号可能会减少。 以前，他们总是在增加。</p></li><li><p><code>dis.findlabels</code>(<em>code</em>)</p><p>检测作为跳转目标的代码对象 <em>code</em> 中的所有偏移量，并返回这些偏移量的列表。</p></li><li><p><code>dis.stack_effect</code>(<em>opcode</em>, <em>oparg=None</em>, <em>**, </em>jump=None*)</p><p>使用参数 <em>oparg</em> 计算 <em>opcode</em> 的堆栈效果。如果代码有一个跳转目标并且 <em>jump</em> 是 <code>True</code> ，则 <code>drag_effect()</code> 将返回跳转的堆栈效果。如果 <em>jump</em> 是 <code>False</code> ，它将返回不跳跃的堆栈效果。如果 <em>jump</em> 是 <code>None</code> （默认值），它将返回两种情况的最大堆栈效果。<em>3.4 新版功能.**在 3.8 版更改:</em> 添加 <em>jump</em> 参数。</p></li></ul><h2 id="Python字节码说明"><a href="#Python字节码说明" class="headerlink" title="Python字节码说明"></a>Python字节码说明</h2><p><a href="https://docs.python.org/zh-cn/3.8/library/dis.html#dis.get_instructions" target="_blank" rel="noopener"><code>get_instructions()</code></a> 函数和 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#dis.Bytecode" target="_blank" rel="noopener"><code>Bytecode</code></a> 类提供字节码指令的详细信息的 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#dis.Instruction" target="_blank" rel="noopener"><code>Instruction</code></a> 实例：</p><ul><li><p><em>class</em> <code>dis.Instruction</code></p><p>字节码操作的详细信息<code>opcode</code>操作的数字代码，对应于下面列出的操作码值和 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-collections" target="_blank" rel="noopener">操作码集合</a> 中的字节码值。<code>opname</code>人类可读的操作名称<code>arg</code>操作的数字参数（如果有的话），否则为 <code>Noneargval</code>已解析的 arg 值（如果已知），否则与 arg 相同<code>argrepr</code>人类可读的操作参数描述<code>offset</code>在字节码序列中启动操作索引<code>starts_line</code>行由此操作码（如果有）启动，否则为 <code>Noneis_jump_target</code>如果其他代码跳到这里，则为 <code>True</code> ，否则为 <code>False</code><em>3.4 新版功能.</em></p></li></ul><p>Python编译器当前生成以下字节码指令。</p><p><strong>一般指令</strong></p><ul><li><p><code>NOP</code></p><p>什么都不做。 用作字节码优化器的占位符。</p></li><li><p><code>POP_TOP</code></p><p>删除堆栈顶部（TOS）项。</p></li><li><p><code>ROT_TWO</code></p><p>交换两个最顶层的堆栈项。</p></li><li><p><code>ROT_THREE</code></p><p>将第二个和第三个堆栈项向上提升一个位置，顶项移动到位置三。</p></li><li><p><code>ROT_FOUR</code></p><p>将第二个，第三个和第四个堆栈项向上提升一个位置，将顶项移动到第四个位置。<em>3.8 新版功能.</em></p></li><li><p><code>DUP_TOP</code></p><p>复制堆栈顶部的引用。<em>3.2 新版功能.</em></p></li><li><p><code>DUP_TOP_TWO</code></p><p>复制堆栈顶部的两个引用，使它们保持相同的顺序。<em>3.2 新版功能.</em></p></li></ul><p><strong>一元操作</strong></p><p>一元操作获取堆栈顶部元素，应用操作，并将结果推回堆栈。</p><ul><li><p><code>UNARY_POSITIVE</code></p><p>实现 <code>TOS = +TOS</code> 。</p></li><li><p><code>UNARY_NEGATIVE</code></p><p>实现 <code>TOS = -TOS</code> 。</p></li><li><p><code>UNARY_NOT</code></p><p>实现 <code>TOS = not TOS</code> 。</p></li><li><p><code>UNARY_INVERT</code></p><p>实现 <code>TOS = ~TOS</code> 。</p></li><li><p><code>GET_ITER</code></p><p>实现 <code>TOS = iter(TOS)</code> 。</p></li><li><p><code>GET_YIELD_FROM_ITER</code></p><p>如果 <code>TOS</code> 是一个 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-generator-iterator" target="_blank" rel="noopener">generator iterator</a> 或 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-coroutine" target="_blank" rel="noopener">coroutine</a> 对象则保持原样。否则实现 <code>TOS = iter(TOS)</code> 。<em>3.5 新版功能.</em></p></li></ul><p><strong>二元操作</strong></p><p>二元操作从堆栈中删除堆栈顶部（TOS）和第二个最顶层堆栈项（TOS1）。 它们执行操作，并将结果放回堆栈。</p><ul><li><p><code>BINARY_POWER</code></p><p>实现 <code>TOS = TOS1 ** TOS</code> 。</p></li><li><p><code>BINARY_MULTIPLY</code></p><p>实现 <code>TOS = TOS1 * TOS</code> 。</p></li><li><p><code>BINARY_MATRIX_MULTIPLY</code></p><p>实现 <code>TOS = TOS1 @ TOS</code> 。<em>3.5 新版功能.</em></p></li><li><p><code>BINARY_FLOOR_DIVIDE</code></p><p>实现 <code>TOS = TOS1 // TOS</code>。</p></li><li><p><code>BINARY_TRUE_DIVIDE</code></p><p>实现 <code>TOS = TOS1 / TOS</code> 。</p></li><li><p><code>BINARY_MODULO</code></p><p>实现 <code>TOS = TOS1 % TOS</code> 。</p></li><li><p><code>BINARY_ADD</code></p><p>实现 <code>TOS = TOS1 + TOS</code> 。</p></li><li><p><code>BINARY_SUBTRACT</code></p><p>实现 <code>TOS = TOS1 - TOS</code> 。</p></li><li><p><code>BINARY_SUBSCR</code></p><p>实现 <code>TOS = TOS1[TOS]</code> 。</p></li><li><p><code>BINARY_LSHIFT</code></p><p>实现 <code>TOS = TOS1 &lt;&lt; TOS</code> 。</p></li><li><p><code>BINARY_RSHIFT</code></p><p>实现 <code>TOS = TOS1 &gt;&gt; TOS</code> 。</p></li><li><p><code>BINARY_AND</code></p><p>实现 <code>TOS = TOS1 &amp; TOS</code> 。</p></li><li><p><code>BINARY_XOR</code></p><p>实现 <code>TOS = TOS1 ^ TOS</code> 。</p></li><li><p><code>BINARY_OR</code></p><p>实现 <code>TOS = TOS1 | TOS</code> 。</p></li></ul><p><strong>就地操作</strong></p><p>就地操作就像二元操作，因为它们删除了TOS和TOS1，并将结果推回到堆栈上，但是当TOS1支持它时，操作就地完成，并且产生的TOS可能是（但不一定） 原来的TOS1。</p><ul><li><p><code>INPLACE_POWER</code></p><p>就地实现 <code>TOS = TOS1 ** TOS</code> 。</p></li><li><p><code>INPLACE_MULTIPLY</code></p><p>就地实现 <code>TOS = TOS1 * TOS</code> 。</p></li><li><p><code>INPLACE_MATRIX_MULTIPLY</code></p><p>就地实现 <code>TOS = TOS1 @ TOS</code> 。<em>3.5 新版功能.</em></p></li><li><p><code>INPLACE_FLOOR_DIVIDE</code></p><p>就地实现 <code>TOS = TOS1 // TOS</code> 。</p></li><li><p><code>INPLACE_TRUE_DIVIDE</code></p><p>就地实现 <code>TOS = TOS1 / TOS</code> 。</p></li><li><p><code>INPLACE_MODULO</code></p><p>就地实现 <code>TOS = TOS1 % TOS</code> 。</p></li><li><p><code>INPLACE_ADD</code></p><p>就地实现 <code>TOS = TOS1 + TOS</code> 。</p></li><li><p><code>INPLACE_SUBTRACT</code></p><p>就地实现 <code>TOS = TOS1 - TOS</code> 。</p></li><li><p><code>INPLACE_LSHIFT</code></p><p>就地实现 <code>TOS = TOS1 &lt;&lt; TOS</code> 。</p></li><li><p><code>INPLACE_RSHIFT</code></p><p>就地实现 <code>TOS = TOS1 &gt;&gt; TOS</code> 。</p></li><li><p><code>INPLACE_AND</code></p><p>就地实现 <code>TOS = TOS1 &amp; TOS</code> 。</p></li><li><p><code>INPLACE_XOR</code></p><p>就地实现 <code>TOS = TOS1 ^ TOS</code> 。</p></li><li><p><code>INPLACE_OR</code></p><p>就地实现 <code>TOS = TOS1 | TOS</code> 。</p></li><li><p><code>STORE_SUBSCR</code></p><p>实现 <code>TOS1[TOS] = TOS2</code> 。</p></li><li><p><code>DELETE_SUBSCR</code></p><p>实现 <code>del TOS1[TOS]</code> 。</p></li></ul><p><strong>协程操作码</strong></p><ul><li><p><code>GET_AWAITABLE</code></p><p>实现 <code>TOS = get_awaitable(TOS)</code> ，其中 <code>get_awaitable(o)</code> 返回 <code>o</code> 如果 <code>o</code> 是一个有 CO_ITERABLE_COROUTINE 标志的协程对象或生成器对象，否则解析 <code>o.__await__</code> 。<em>3.5 新版功能.</em></p></li><li><p><code>GET_AITER</code></p><p>实现 <code>TOS = TOS.__aiter__()</code> 。<em>3.5 新版功能.**在 3.7 版更改:</em> 已经不再支持从 <code>__aiter__</code> 返回可等待对象。</p></li><li><p><code>GET_ANEXT</code></p><p>实现 <code>PUSH(get_awaitable(TOS.__anext__()))</code> 。参见 <code>GET_AWAITABLE</code> 获取更多 <code>get_awaitable</code> 的细节<em>3.5 新版功能.</em></p></li><li><p><code>END_ASYNC_FOR</code></p><p>终止一个 <a href="https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#async-for" target="_blank" rel="noopener"><code>async for</code></a> 循环。处理等待下一个项目时引发的异常。如果 TOS 是 <a href="https://docs.python.org/zh-cn/3.8/library/exceptions.html#StopAsyncIteration" target="_blank" rel="noopener"><code>StopAsyncIteration</code></a>， 从堆栈弹出7个值，并使用后三个恢复异常状态。否则，使用堆栈中的三个值重新引发异常。从块堆栈中删除异常处理程序块。<em>3.8 新版功能.</em></p></li><li><p><code>BEFORE_ASYNC_WITH</code></p><p>从栈顶对象解析 <code>__aenter__</code> 和 <code>__aexit__</code> 。将 <code>__aexit__</code> 和 <code>__aenter__()</code> 的结果推入堆栈。<em>3.5 新版功能.</em></p></li><li><p><code>SETUP_ASYNC_WITH</code></p><p>创建一个新的帧对象。<em>3.5 新版功能.</em></p></li></ul><p><strong>其他操作码</strong></p><ul><li><p><code>PRINT_EXPR</code></p><p>实现交互模式的表达式语句。TOS从堆栈中被移除并打印。在非交互模式下，表达式语句以 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-POP_TOP" target="_blank" rel="noopener"><code>POP_TOP</code></a> 终止。</p></li><li><p><code>SET_ADD</code>(<em>i</em>)</p><p>调用 <code>set.add(TOS1[-i], TOS)</code> 。 用于实现集合推导。</p></li><li><p><code>LIST_APPEND</code>(<em>i</em>)</p><p>调用 <code>list.append(TOS[-i], TOS)</code> 。 用于实现列表推导。</p></li><li><p><code>MAP_ADD</code>(<em>i</em>)</p><p>调用 <code>dict.__setitem__(TOS1[-i], TOS1, TOS)</code> 。 用于实现字典推导。<em>3.1 新版功能.**在 3.8 版更改:</em> 映射值为 TOS ，映射键为 TOS1 。之前，它们被颠倒了。</p></li></ul><p>对于所有 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-SET_ADD" target="_blank" rel="noopener"><code>SET_ADD</code></a> 、 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-LIST_APPEND" target="_blank" rel="noopener"><code>LIST_APPEND</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-MAP_ADD" target="_blank" rel="noopener"><code>MAP_ADD</code></a> 指令，当弹出添加的值或键值对时，容器对象保留在堆栈上，以便它可用于循环的进一步迭代。</p><ul><li><p><code>RETURN_VALUE</code></p><p>返回 TOS 到函数的调用者。</p></li><li><p><code>YIELD_VALUE</code></p><p>弹出 TOS 并从一个 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-generator" target="_blank" rel="noopener">generator</a> 生成它。</p></li><li><p><code>YIELD_FROM</code></p><p>弹出 TOS 并将其委托给它作为 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-generator" target="_blank" rel="noopener">generator</a> 的子迭代器。<em>3.3 新版功能.</em></p></li><li><p><code>SETUP_ANNOTATIONS</code></p><p>检查 <code>__annotations__</code> 是否在 <code>locals()</code> 中定义，如果没有，它被设置为空 <code>dict</code> 。只有在类或模块体静态地包含 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-variable-annotation" target="_blank" rel="noopener">variable annotations</a> 时才会发出此操作码。<em>3.6 新版功能.</em></p></li><li><p><code>IMPORT_STAR</code></p><p>将所有不以 <code>&#39;_&#39;</code> 开头的符号直接从模块 TOS 加载到局部命名空间。加载所有名称后弹出该模块。这个操作码实现了 <code>from module import *</code> 。</p></li><li><p><code>POP_BLOCK</code></p><p>从块堆栈中删除一个块。有一块堆栈，每帧用于表示 <a href="https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#try" target="_blank" rel="noopener"><code>try</code></a> 语句等。</p></li><li><p><code>POP_EXCEPT</code></p><p>从块堆栈中删除一个块。 弹出的块必须是异常处理程序块，在进入 except 处理程序时隐式创建。除了从帧堆栈弹出无关值之外，最后三个弹出值还用于恢复异常状态。</p></li><li><p><code>POP_FINALLY</code>(<em>preserve_tos</em>)</p><p>清除值堆栈和块堆栈。如果 <em>preserve_tos</em> 不是 <code>0</code> ，则在执行其他堆栈操作后，首先从堆栈中弹出 TOS 并将其推入堆栈：如果TOS是 <code>NULL</code> 或整数（由 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-BEGIN_FINALLY" target="_blank" rel="noopener"><code>BEGIN_FINALLY</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-CALL_FINALLY" target="_blank" rel="noopener"><code>CALL_FINALLY</code></a> 推入），它将从堆栈中弹出。如果TOS是异常类型（在引发异常时被推入），则从堆栈中弹出6个值，最后三个弹出值用于恢复异常状态。从块堆栈中删除异常处理程序块。它类似于 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-END_FINALLY" target="_blank" rel="noopener"><code>END_FINALLY</code></a> ，但不会更改字节码计数器也不会引发异常。用于在 <a href="https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#finally" target="_blank" rel="noopener"><code>finally</code></a> 块中实现 <a href="https://docs.python.org/zh-cn/3.8/reference/simple_stmts.html#break" target="_blank" rel="noopener"><code>break</code></a> 、 <a href="https://docs.python.org/zh-cn/3.8/reference/simple_stmts.html#continue" target="_blank" rel="noopener"><code>continue</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/reference/simple_stmts.html#return" target="_blank" rel="noopener"><code>return</code></a> 。<em>3.8 新版功能.</em></p></li><li><p><code>BEGIN_FINALLY</code></p><p>将 <code>NULL</code> 推入堆栈以便在以下操作中使用 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-END_FINALLY" target="_blank" rel="noopener"><code>END_FINALLY</code></a> 、 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-POP_FINALLY" target="_blank" rel="noopener"><code>POP_FINALLY</code></a> 、 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-WITH_CLEANUP_START" target="_blank" rel="noopener"><code>WITH_CLEANUP_START</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-WITH_CLEANUP_FINISH" target="_blank" rel="noopener"><code>WITH_CLEANUP_FINISH</code></a> 。开始 <a href="https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#finally" target="_blank" rel="noopener"><code>finally</code></a> 块。<em>3.8 新版功能.</em></p></li><li><p><code>END_FINALLY</code></p><p>终止 <a href="https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#finally" target="_blank" rel="noopener"><code>finally</code></a> 子句。解释器回溯是否有必须重新抛出异常的情况或根据 TOS 的值继续执行。如果 TOS 是 <code>NULL</code> （由 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-BEGIN_FINALLY" target="_blank" rel="noopener"><code>BEGIN_FINALLY</code></a> 推入）继续下一条指令。 TOS 被弹出。如果 TO S是一个整数（由 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-CALL_FINALLY" target="_blank" rel="noopener"><code>CALL_FINALLY</code></a> 推入），则将字节码计数器设置为 TOS 。 TOS 被弹出。如果TOS是异常类型（在引发异常时被推送），则从堆栈中弹出 6 个值，前三个弹出值用于重新引发异常，最后三个弹出值用于恢复异常状态。从块堆栈中删除异常处理程序块。</p></li><li><p><code>LOAD_BUILD_CLASS</code></p><p>将 <code>builtins .__ build_class__()</code> 推到堆栈上。它之后被 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-CALL_FUNCTION" target="_blank" rel="noopener"><code>CALL_FUNCTION</code></a> 调用来构造一个类。</p></li><li><p><code>SETUP_WITH</code>(<em>delta</em>)</p><p>此操作码在 with 块开始之前执行多个操作。首先，它从上下文管理器加载 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__exit__" target="_blank" rel="noopener"><code>__exit__()</code></a> 并将其推入到堆栈以供以后被 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-WITH_CLEANUP_START" target="_blank" rel="noopener"><code>WITH_CLEANUP_START</code></a> 使用。然后，调用 <code>__enter__()</code> ，并推入指向 <em>delta</em> 的 finally 块。最后，调用 <code>__enter__()</code> 方法的结果被压入堆栈。一个操作码将忽略它（ <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-POP_TOP" target="_blank" rel="noopener"><code>POP_TOP</code></a> ），或将其存储在一个或多个变量（ <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-STORE_FAST" target="_blank" rel="noopener"><code>STORE_FAST</code></a> 、 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-STORE_NAME" target="_blank" rel="noopener"><code>STORE_NAME</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-UNPACK_SEQUENCE" target="_blank" rel="noopener"><code>UNPACK_SEQUENCE</code></a> ）中。<em>3.2 新版功能.</em></p></li><li><p><code>WITH_CLEANUP_START</code></p><p>当 <a href="https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#with" target="_blank" rel="noopener"><code>with</code></a> 语句块退出时，开始清理堆栈。在堆栈的顶部是 <code>NULL</code> （由 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-BEGIN_FINALLY" target="_blank" rel="noopener"><code>BEGIN_FINALLY</code></a> 推送）或者如果在 with 块中引发了异常，则推送 6 个值。下面是上下文管理器 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__exit__" target="_blank" rel="noopener"><code>__exit__()</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html#object.__aexit__" target="_blank" rel="noopener"><code>__aexit__()</code></a> 绑定方法。如果TOS是 <code>NULL</code> ，则调用 <code>SECOND(None, None, None)</code> ，从堆栈中删除函数，离开 TOS ，并将 <code>None</code> 推送到堆栈。 否则调用 <code>SEVENTH(TOP, SECOND, THIRD)</code> ，将堆栈的底部3值向下移动，用 <code>NULL</code> 替换空位并推入 TOS 。最后拖入调用的结果。</p></li><li><p><code>WITH_CLEANUP_FINISH</code></p><p>当 <a href="https://docs.python.org/zh-cn/3.8/reference/compound_stmts.html#with" target="_blank" rel="noopener"><code>with</code></a> 语句块退出时，完成清理堆栈。TOS 是 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-WITH_CLEANUP_START" target="_blank" rel="noopener"><code>WITH_CLEANUP_START</code></a> 推送的 <code>__exit__()</code> 或 <code>__aexit__()</code> 函数的结果。 SECOND是 <code>None</code> 或异常类型（引发异常时推入的）。从堆栈中弹出两个值。如果 SECOND 不为 None 并且 TOS 为 true ，则展开 EXCEPT_HANDLER 块，该块是在捕获异常时创建的，并将 <code>NULL</code> 推入堆栈。</p></li></ul><p>以下所有操作码均使用其参数。</p><ul><li><p><code>STORE_NAME</code>(<em>namei</em>)</p><p>实现 <code>name = TOS</code>。 <em>namei</em> 是 <em>name</em> 在代码对象的 <code>co_names</code> 属性中的索引。 在可能的情况下，编译器会尝试使用 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-STORE_FAST" target="_blank" rel="noopener"><code>STORE_FAST</code></a> 或 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-STORE_GLOBAL" target="_blank" rel="noopener"><code>STORE_GLOBAL</code></a>。</p></li><li><p><code>DELETE_NAME</code>(<em>namei</em>)</p><p>实现 <code>del name</code> ，其中 <em>namei</em> 是代码对象的 <code>co_names</code> 属性的索引。</p></li><li><p><code>UNPACK_SEQUENCE</code>(<em>count</em>)</p><p>将 TOS 解包为 <em>count</em> 个单独的值，它们将按从右至左的顺序被放入堆栈。</p></li><li><p><code>UNPACK_EX</code>(<em>counts</em>)</p><p>实现使用带星号的目标进行赋值：将 TOS 中的可迭代对象解包为单独的值，其中值的总数可以小于可迭代对象中的项数：新值之一将是由所有剩余项构成的列表。<em>counts</em> 的低字节是列表值之前的值的数量，<em>counts</em> 中的高字节则是之后的值的数量。 结果值会按从右至左的顺序入栈。</p></li><li><p><code>STORE_ATTR</code>(<em>namei</em>)</p><p>实现 <code>TOS.name = TOS1</code>，其中 <em>namei</em> 是 name 在 <code>co_names</code> 中的索引号。</p></li><li><p><code>DELETE_ATTR</code>(<em>namei</em>)</p><p>实现 <code>del TOS.name</code>，使用 <em>namei</em> 作为 <code>co_names</code> 中的索引号。</p></li><li><p><code>STORE_GLOBAL</code>(<em>namei</em>)</p><p>类似于 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-STORE_NAME" target="_blank" rel="noopener"><code>STORE_NAME</code></a> 但会将 name 存储为全局变量。</p></li><li><p><code>DELETE_GLOBAL</code>(<em>namei</em>)</p><p>类似于 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-DELETE_NAME" target="_blank" rel="noopener"><code>DELETE_NAME</code></a> 但会删除一个全局变量。</p></li><li><p><code>LOAD_CONST</code>(<em>consti</em>)</p><p>将 <code>co_consts[consti]</code> 推入栈顶。</p></li><li><p><code>LOAD_NAME</code>(<em>namei</em>)</p><p>将与 <code>co_names[namei]</code> 相关联的值推入栈顶。</p></li><li><p><code>BUILD_TUPLE</code>(<em>count</em>)</p><p>创建一个使用了来自栈的 <em>count</em> 个项的元组，并将结果元组推入栈顶。</p></li><li><p><code>BUILD_LIST</code>(<em>count</em>)</p><p>类似于 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-BUILD_TUPLE" target="_blank" rel="noopener"><code>BUILD_TUPLE</code></a> 但会创建一个列表。</p></li><li><p><code>BUILD_SET</code>(<em>count</em>)</p><p>类似于 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-BUILD_TUPLE" target="_blank" rel="noopener"><code>BUILD_TUPLE</code></a> 但会创建一个集合。</p></li><li><p><code>BUILD_MAP</code>(<em>count</em>)</p><p>将一个新字典对象推入栈顶。 弹出 <code>2 * count</code> 项使得字典包含 <em>count</em> 个条目: <code>{..., TOS3: TOS2, TOS1: TOS}</code>。<em>在 3.5 版更改:</em> 字典是根据栈中的项创建而不是创建一个预设大小包含 <em>count</em> 项的空字典。</p></li><li><p><code>BUILD_CONST_KEY_MAP</code>(<em>count</em>)</p><p>专用于常量键的 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-BUILD_MAP" target="_blank" rel="noopener"><code>BUILD_MAP</code></a> 版本。 <em>count</em> 值是从栈中提取的。 栈顶的元素包含一个由键构成的元组。<em>3.6 新版功能.</em></p></li><li><p><code>BUILD_STRING</code>(<em>count</em>)</p><p>拼接 <em>count</em> 个来自栈的字符串并将结果字符串推入栈顶。<em>3.6 新版功能.</em></p></li><li><p><code>BUILD_TUPLE_UNPACK</code>(<em>count</em>)</p><p>从栈中弹出 <em>count</em> 个可迭代对象，将它们合并为单个元组，并将结果推入栈顶。 实现可迭代对象解包为元组形式 <code>(*x, *y, *z)</code>。<em>3.5 新版功能.</em></p></li><li><p><code>BUILD_TUPLE_UNPACK_WITH_CALL</code>(<em>count</em>)</p><p>这类似于 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-BUILD_TUPLE_UNPACK" target="_blank" rel="noopener"><code>BUILD_TUPLE_UNPACK</code></a> 但专用于 <code>f(*x, *y, *z)</code> 调用语法。 栈中 <code>count + 1</code> 位置上的项应当是相应的可调用对象 <code>f</code>。<em>3.6 新版功能.</em></p></li><li><p><code>BUILD_LIST_UNPACK</code>(<em>count</em>)</p><p>这类似于 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-BUILD_TUPLE_UNPACK" target="_blank" rel="noopener"><code>BUILD_TUPLE_UNPACK</code></a> 但会将一个列表而非元组推入栈顶。 实现可迭代对象解包为列表形式 <code>[*x, *y, *z]</code>。<em>3.5 新版功能.</em></p></li><li><p><code>BUILD_SET_UNPACK</code>(<em>count</em>)</p><p>这类似于 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-BUILD_TUPLE_UNPACK" target="_blank" rel="noopener"><code>BUILD_TUPLE_UNPACK</code></a> 但会将一个集合而非元组推入栈顶。 实现可迭代对象解包为集合形式 <code>{*x, *y, *z}</code>。<em>3.5 新版功能.</em></p></li><li><p><code>BUILD_MAP_UNPACK</code>(<em>count</em>)</p><p>从栈中弹出 <em>count</em> 个映射对象，将它们合并为单个字典，并将结果推入栈顶。 实现字典解包为字典形式 <code>{**x, **y, **z}</code>。<em>3.5 新版功能.</em></p></li><li><p><code>BUILD_MAP_UNPACK_WITH_CALL</code>(<em>count</em>)</p><p>这类似于 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-BUILD_MAP_UNPACK" target="_blank" rel="noopener"><code>BUILD_MAP_UNPACK</code></a> 但专用于 <code>f(**x, **y, **z)</code> 调用语法。 栈中 <code>count + 2</code> 位置上的项应当是相应的可调用对象 <code>f</code>。<em>3.5 新版功能.**在 3.6 版更改:</em> 可迭代对象的位置的确定方式是将操作码参数加 2 而不是将其编码到参数的第二个字节。</p></li><li><p><code>LOAD_ATTR</code>(<em>namei</em>)</p><p>将 TOS 替换为 <code>getattr(TOS, co_names[namei])</code>。</p></li><li><p><code>COMPARE_OP</code>(<em>opname</em>)</p><p>执行布尔运算操作。 操作名称可在 <code>cmp_op[opname]</code> 中找到。</p></li><li><p><code>IMPORT_NAME</code>(<em>namei</em>)</p><p>导入模块 <code>co_names[namei]</code>。 会弹出 TOS 和 TOS1 以提供 <em>fromlist</em> 和 <em>level</em> 参数给 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#__import__" target="_blank" rel="noopener"><code>__import__()</code></a>。 模块对象会被推入栈顶。 当前命名空间不受影响：对于一条标准 import 语句，会执行后续的 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-STORE_FAST" target="_blank" rel="noopener"><code>STORE_FAST</code></a> 指令来修改命名空间。</p></li><li><p><code>IMPORT_FROM</code>(<em>namei</em>)</p><p>从在 TOS 内找到的模块中加载属性 <code>co_names[namei]</code>。 结果对象会被推入栈顶，以便由后续的 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-STORE_FAST" target="_blank" rel="noopener"><code>STORE_FAST</code></a> 指令来保存。</p></li><li><p><code>JUMP_FORWARD</code>(<em>delta</em>)</p><p>将字节码计数器的值增加 <em>delta</em>。</p></li><li><p><code>POP_JUMP_IF_TRUE</code>(<em>target</em>)</p><p>如果 TOS 为真值，则将字节码计数器的值设为 <em>target</em>。 TOS 会被弹出。<em>3.1 新版功能.</em></p></li><li><p><code>POP_JUMP_IF_FALSE</code>(<em>target</em>)</p><p>如果 TOS 为假值，则将字节码计数器的值设为 <em>target</em>。 TOS 会被弹出。<em>3.1 新版功能.</em></p></li><li><p><code>JUMP_IF_TRUE_OR_POP</code>(<em>target</em>)</p><p>如果 TOS 为真值，则将字节码计数器的值设为 <em>target</em> 并将 TOS 留在栈顶。 否则（如 TOS 为假值），TOS 会被弹出。<em>3.1 新版功能.</em></p></li><li><p><code>JUMP_IF_FALSE_OR_POP</code>(<em>target</em>)</p><p>如果 TOS 为假值，则将字节码计数器的值设为 <em>target</em> 并将 TOS 留在栈顶。 否则（如 TOS 为假值），TOS 会被弹出。<em>3.1 新版功能.</em></p></li><li><p><code>JUMP_ABSOLUTE</code>(<em>target</em>)</p><p>将字节码计数器的值设为 <em>target</em>。</p></li><li><p><code>FOR_ITER</code>(<em>delta</em>)</p><p>TOS 是一个 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-iterator" target="_blank" rel="noopener">iterator</a>。 可调用它的 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#iterator.__next__" target="_blank" rel="noopener"><code>__next__()</code></a> 方法。 如果产生了一个新值，则将其推入栈顶（将迭代器留在其下方）。 如果迭代器提示已耗尽则 TOS 会被弹出，并将字节码计数器的值增加 <em>delta</em>。</p></li><li><p><code>LOAD_GLOBAL</code>(<em>namei</em>)</p><p>加载名称为 <code>co_names[namei]</code> 的全局对象推入栈顶。</p></li><li><p><code>SETUP_FINALLY</code>(<em>delta</em>)</p><p>将一个来自 try-finally 或 try-except 子句的 try 代码块推入代码块栈顶。 相对 finally 代码块或第一个 except 代码块 <em>delta</em> 个点数。</p></li><li><p><code>CALL_FINALLY</code>(<em>delta</em>)</p><p>将下一条指令的地址推入栈顶并将字节码计数器的值增加 <em>delta</em>。 用于将 finally 代码块作为一个“子例程”调用。<em>3.8 新版功能.</em></p></li><li><p><code>LOAD_FAST</code>(<em>var_num</em>)</p><p>将指向局部对象 <code>co_varnames[var_num]</code> 的引用推入栈顶。</p></li><li><p><code>STORE_FAST</code>(<em>var_num</em>)</p><p>将 TOS 存放到局部对象 <code>co_varnames[var_num]</code>。</p></li><li><p><code>DELETE_FAST</code>(<em>var_num</em>)</p><p>移除局部对象 <code>co_varnames[var_num]</code>。</p></li><li><p><code>LOAD_CLOSURE</code>(<em>i</em>)</p><p>将一个包含在单元的第 <em>i</em> 个空位中的对单元的引用推入栈顶并释放可用的存储空间。 如果 <em>i</em> 小于 <em>co_cellvars</em> 的长度则变量的名称为 <code>co_cellvars[i]</code>。 否则为 <code>co_freevars[i - len(co_cellvars)]</code>。</p></li><li><p><code>LOAD_DEREF</code>(<em>i</em>)</p><p>加载包含在单元的第 <em>i</em> 个空位中的单元并释放可用的存储空间。 将一个对单元所包含对象的引用推入栈顶。</p></li><li><p><code>LOAD_CLASSDEREF</code>(<em>i</em>)</p><p>类似于 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-LOAD_DEREF" target="_blank" rel="noopener"><code>LOAD_DEREF</code></a> 但在查询单元之前会首先检查局部对象字典。 这被用于加载类语句体中的自由变量。<em>3.4 新版功能.</em></p></li><li><p><code>STORE_DEREF</code>(<em>i</em>)</p><p>将 TOS 存放到包含在单元的第 <em>i</em> 个空位中的单元内并释放可用存储空间。</p></li><li><p><code>DELETE_DEREF</code>(<em>i</em>)</p><p>清空包含在单元的第 <em>i</em> 个空位中的单元并释放可用存储空间。 被用于 <a href="https://docs.python.org/zh-cn/3.8/reference/simple_stmts.html#del" target="_blank" rel="noopener"><code>del</code></a> 语句。<em>3.2 新版功能.</em></p></li><li><p><code>RAISE_VARARGS</code>(<em>argc</em>)</p><p>使用 <code>raise</code> 语句的 3 种形式之一引发异常，具体形式取决于 <em>argc</em> 的值：0: <code>raise</code> (重新引发之前的异常)1: <code>raise TOS</code> (在 <code>TOS</code> 上引发异常实例或类型)2: <code>raise TOS1 from TOS</code> (在 <code>TOS1</code> 上引发异常实例或类型并将 <code>__cause__</code> 设为 <code>TOS</code>)</p></li><li><p><code>CALL_FUNCTION</code>(<em>argc</em>)</p><p>调用一个可调用对象并传入位置参数。 <em>argc</em> 指明位置参数的数量。 栈顶包含位置参数，其中最右边的参数在最顶端。 在参数之下是一个待调用的可调用对象。 <code>CALL_FUNCTION</code> 会从栈中弹出所有参数以及可调用对象，附带这些参数调用该可调用对象，并将可调用对象所返回的返回值推入栈顶。<em>在 3.6 版更改:</em> 此操作码仅用于附带位置参数的调用。</p></li><li><p><code>CALL_FUNCTION_KW</code>(<em>argc</em>)</p><p>调用一个可调用对象并传入位置参数（如果有的话）和关键字参数。 <em>argc</em> 指明位置参数和关键字参数的总数量。 栈顶元素包含一个关键字参数名称的元组。 在元组之下是根据元组排序的关键字参数。 在关键字参数之下是位置参数，其中最右边的参数在最顶端。 在参数之下是一个待调用的可调用对象。 <code>CALL_FUNCTION_KW</code> 会从栈中弹出所有参数以及可调用对象，附带这些参数调用该可调用对象，并将可调用对象所返回的返回值推入栈顶。<em>在 3.6 版更改:</em> 关键字参数会被打包为一个元组而非字典，<em>argc</em> 指明参数的总数量。</p></li><li><p><code>CALL_FUNCTION_EX</code>(<em>flags</em>)</p><p>调用一个可调用对象并附带位置参数和关键字参数变量集合。 如果设置了 <em>flags</em> 的最低位，则栈顶包含一个由额外关键字参数组成的映射对象。 在该对象之下是一个包含位置参数的可迭代对象和一个待调用的可调用对象。 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-BUILD_MAP_UNPACK_WITH_CALL" target="_blank" rel="noopener"><code>BUILD_MAP_UNPACK_WITH_CALL</code></a> 和 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-BUILD_TUPLE_UNPACK_WITH_CALL" target="_blank" rel="noopener"><code>BUILD_TUPLE_UNPACK_WITH_CALL</code></a> 可用于合并多个映射对象和包含参数的可迭代对象。 在该可调用对象被调用之前，映射对象和可迭代对象会被分别“解包”并将它们的内容分别作为关键字参数和位置参数传入。 <code>CALL_FUNCTION_EX</code> 会从栈中弹出所有参数以及可调用对象，附带这些参数调用该可调用对象，并将可调用对象所返回的返回值推入栈顶。<em>3.6 新版功能.</em></p></li><li><p><code>LOAD_METHOD</code>(<em>namei</em>)</p><p>从 TOS 对象加载一个名为 <code>co_names[namei]</code> 的方法。 TOS 将被弹出。 此字节码可区分两种情况：如果 TOS 有一个名称正确的方法，字节码会将未绑定方法和 TOS 推入栈顶。 TOS 将在调用未绑定方法时被用作 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-CALL_METHOD" target="_blank" rel="noopener"><code>CALL_METHOD</code></a> 的第一个参数 (<code>self</code>)。 否则会将 <code>NULL</code> 和属性查找所返回的对象推入栈顶。<em>3.7 新版功能.</em></p></li><li><p><code>CALL_METHOD</code>(<em>argc</em>)</p><p>调用一个方法。 <em>argc</em> 是位置参数的数量。 关键字参数不受支持。 此操作码被设计用于配合 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-LOAD_METHOD" target="_blank" rel="noopener"><code>LOAD_METHOD</code></a> 使用。 位置参数放在栈顶。 在它们之下放在栈中的是由 <a href="https://docs.python.org/zh-cn/3.8/library/dis.html#opcode-LOAD_METHOD" target="_blank" rel="noopener"><code>LOAD_METHOD</code></a> 所描述的两个条目（或者是 <code>self</code> 和一个未绑定方法对象，或者是 <code>NULL</code> 和一个任意可调用对象）。 它们会被全部弹出并将返回值推入栈顶。<em>3.7 新版功能.</em></p></li><li><p><code>MAKE_FUNCTION</code>(<em>flags</em>)</p><p>将一个新函数对象推入栈顶。 从底端到顶端，如果参数带有指定的旗标值则所使用的栈必须由这些值组成。<code>0x01</code> 一个默认值的元组，用于按位置排序的仅限位置形参以及位置或关键字形参<code>0x02</code> 一个仅限关键字形参的默认值的字典<code>0x04</code> 是一个标注字典<code>0x08</code> 一个包含用于自由变量的单元的元组，生成一个闭包与函数相关联的代码 (在 TOS1)函数的 <a href="https://docs.python.org/zh-cn/3.8/glossary.html#term-qualified-name" target="_blank" rel="noopener">qualified name</a> (在 TOS)</p></li><li><p><code>BUILD_SLICE</code>(<em>argc</em>)</p><p>将一个切片对象推入栈顶。 <em>argc</em> 必须为 2 或 3。 如果为 2，则推入 <code>slice(TOS1, TOS)</code>；如果为 3，则推入 <code>slice(TOS2, TOS1, TOS)</code>。 请参阅 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#slice" target="_blank" rel="noopener"><code>slice()</code></a> 内置函数了解详细信息。</p></li><li><p><code>EXTENDED_ARG</code>(<em>ext</em>)</p><p>为任意带有大到无法放入默认的单字节的参数的操作码添加前缀。 <em>ext</em> 存放一个附加字节作为参数中的高比特位。 对于每个操作码，最多允许三个 <code>EXTENDED_ARG</code> 前缀，构成两字节到三字节的参数。</p></li><li><p><code>FORMAT_VALUE</code>(<em>flags</em>)</p><p>用于实现格式化字面值字符串（f-字符串）。 从栈中弹出一个可选的 <em>fmt_spec</em>，然后是一个必须的 <em>value</em>。 <em>flags</em> 的解读方式如下：<code>(flags &amp; 0x03) == 0x00</code>: <em>value</em> 按原样格式化。<code>(flags &amp; 0x03) == 0x01</code>: 在格式化 <em>value</em> 之前调用其 <a href="https://docs.python.org/zh-cn/3.8/library/stdtypes.html#str" target="_blank" rel="noopener"><code>str()</code></a>。<code>(flags &amp; 0x03) == 0x02</code>: 在格式化 <em>value</em> 之前调用其 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#repr" target="_blank" rel="noopener"><code>repr()</code></a>。<code>(flags &amp; 0x03) == 0x03</code>: 在格式化 <em>value</em> 之前调用其 <a href="https://docs.python.org/zh-cn/3.8/library/functions.html#ascii" target="_blank" rel="noopener"><code>ascii()</code></a>。<code>(flags &amp; 0x04) == 0x04</code>: 从栈中弹出 <em>fmt_spec</em> 并使用它，否则使用空的 <em>fmt_spec</em>。使用 <code>PyObject_Format()</code> 执行格式化。 结果会被推入栈顶。<em>3.6 新版功能.</em></p></li><li><p><code>HAVE_ARGUMENT</code></p><p>这不是一个真正的操作码。 它用于标明使用参数和不使用参数的操作码 (分别为 <code>&lt; HAVE_ARGUMENT</code> 和 <code>&gt;= HAVE_ARGUMENT</code>) 之间的分隔线。<em>在 3.6 版更改:</em> 现在每条指令都带有参数，但操作码 <code>&lt; HAVE_ARGUMENT</code> 会忽略它。 之前仅限操作码 <code>&gt;= HAVE_ARGUMENT</code> 带有参数。</p></li></ul><h2 id="操作码集合"><a href="#操作码集合" class="headerlink" title="操作码集合"></a>操作码集合</h2><p>提供这些集合用于字节码指令的自动内省：</p><ul><li><p><code>dis.opname</code></p><p>操作名称的序列，可使用字节码来索引。</p></li><li><p><code>dis.opmap</code></p><p>映射操作名称到字节码的字典</p></li><li><p><code>dis.cmp_op</code></p><p>所有比较操作名称的序列。</p></li><li><p><code>dis.hasconst</code></p><p>访问常量的字节码序列。</p></li><li><p><code>dis.hasfree</code></p><p>访问自由变量的字节码序列（请注意这里所说的‘自由’是指在当前作用域中被内部作用域所引用的名称，或在外部作用域中被此作用域所引用的名称。 它 <em>并不</em> 包括对全局或内置作用域的引用）。</p></li><li><p><code>dis.hasname</code></p><p>按名称访问属性的字节码序列。</p></li><li><p><code>dis.hasjrel</code></p><p>具有相对跳转目标的字节码序列。</p></li><li><p><code>dis.hasjabs</code></p><p>具有绝对跳转目标的字节码序列。</p></li><li><p><code>dis.haslocal</code></p><p>访问局部变量的字节码序列。</p></li><li><p><code>dis.hascompare</code></p><p>布尔运算的字节码序列。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;python-标准库-dis&quot;&gt;&lt;a href=&quot;#python-标准库-dis&quot; class=&quot;headerlink&quot; title=&quot;python 标准库 dis&quot;&gt;&lt;/a&gt;python 标准库 dis&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/jeffsui/app_image_resource/blob/master/20200319_boring.jpg?raw=true&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/categories/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/categories/python/standard-library/"/>
    
    
      <category term="python" scheme="https://pinghailinfeng.gitee.io/tags/python/"/>
    
      <category term="standard_library" scheme="https://pinghailinfeng.gitee.io/tags/standard-library/"/>
    
      <category term="dis" scheme="https://pinghailinfeng.gitee.io/tags/dis/"/>
    
  </entry>
  
</feed>
